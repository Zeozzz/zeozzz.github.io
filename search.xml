<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>念念不忘 必有回响</title>
    <url>/2019/01/01/1/</url>
    <content><![CDATA[<p>​    很久没有提笔写一些东西，之前说的在大学毕业的时候对自己有个清晰和辨识度的总结也耽搁很久，先说说这个博客吧。</p>
<p>​    自己缺点其实挺多的，懒，拖延，不上进，现在想想大学生活都不知道自己都做了什么，走到今天这一步也完全是自己咎由自取自作自受，哈，说的可能有些严重了，但是为什么活得并没有很开心，工作的为什么又没有很快乐。感情失意，职场也一般，但是的确又在实现着自己的价值，希望自己按照自己的心，follow my heart是不是就能收获一些感动。</p>
<p>​    大学四年，匆匆过去，本来是个敲代码的码农，却误打误撞进了网络工程师的坑，很早之前就被人忠告网工不是什么好工作了已经，说不上夕阳产业但也摇摇欲坠了，核心设备的工程师已经饱和，底层只会配vlan的工程师去培训班速成也没什么问题。而自己的定位呢？一瓶子不满，半瓶子咣当。眼高手低，会的太多，会的太杂，什么都略懂一点，就是什么都不会。</p>
<p>​    这个网站最开始的时候使用WordPress建在腾讯云的学生机上，一开始还是Windows系统。后来觉得WordPress实在是太过臃肿，学生机的资源又很紧张，动不动就502，本着不折腾就会睡不着觉的精神，装linux系统，装各种云面板，发现也并没有什么改变，遂转到typecho轻量的博客上面，一直用到毕业吧，也没记什么东西，数据库反而崩溃了几次，导致之前的文章也都找不到了，羞于懒惰的思想，一直没有重新开始记录，最近心血来潮，之前就用过hexo，但是没有管理后台，写东西不是很方便一直没用，最近研究了一下，发现使用typora写东西也是非常的舒服，说干就干，耗时两天把博客又从新搭了起来，同时托管在CODING和GITPAGES上。希望自己能够坚持下来，记录自己学习的历程和成长的经历吧。</p>
<p>​    万事开头难，做一切事情的难点都贵在坚持，一切事情只要做了就还不晚，加油，写到现在也不知道自己写了什么乱七八糟的东西，念念不忘，必有回响，愿大家都能得到自己想要的。</p>
<p>​    </p>
]]></content>
      <categories>
        <category>自嘲</category>
      </categories>
      <tags>
        <tag>自嘲</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器上的 Git - 协议</title>
    <url>/2019/04/24/11/</url>
    <content><![CDATA[<p>到目前为止，你应该已经有办法使用 Git 来完成日常工作。 然而，为了使用 Git 协作功能，你还需要有远程的 Git 仓库。 尽管在技术上你可以从个人仓库进行推送（push）和拉取（pull）来修改内容，但不鼓励使用这种方法，因为一不留心就很容易弄混其他人的进度。 此外，你希望你的合作者们即使在你的电脑未联机时亦能存取仓库 — 拥有一个更可靠的公用仓库十分有用。 因此，与他人合作的最佳方法即是建立一个你与合作者们都有权利访问，且可从那里推送和拉取资料的共用仓库。</p>
<p>架设一台 Git 服务器并不难。 首先，选择你希望服务器使用的通讯协议。 在本章第一节将介绍可用的协议以及各自优缺点。 下面一节将解释使用那些协议的典型设置及如何在你的服务器上运行。 最后，如果你不介意托管你的代码在其他人的服务器，且不想经历设置与维护自己服务器的麻烦，可以试试我们介绍的几个仓库托管服务。</p>
<p>如果你对架设自己的服务器没兴趣，可以跳到本章最后一节去看看如何申请一个代码托管服务的帐户然后继续下一章，我们会在那里讨论分散式源码控制环境的林林总总。</p>
<p>一个远程仓库通常只是一个裸仓库（<em>bare repository</em>）— 即一个没有当前工作目录的仓库。 因为该仓库仅仅作为合作媒介，不需要从磁碟检查快照；存放的只有 Git 的资料。 简单的说，裸仓库就是你工程目录内的 <code>.git</code> 子目录内容，不包含其他资料。</p>
<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>Git 可以使用四种主要的协议来传输资料：本地协议（Local），HTTP 协议，SSH（Secure Shell）协议及 Git 协议。 在此，我们将会讨论那些协议及哪些情形应该使用（或避免使用）他们。</p>
<h3 id="本地协议"><a href="#本地协议" class="headerlink" title="本地协议"></a>本地协议</h3><p>最基本的就是 <em>本地协议（Local protocol）</em> ，其中的远程版本库就是硬盘内的另一个目录。 这常见于团队每一个成员都对一个共享的文件系统（例如一个挂载的 NFS）拥有访问权，或者比较少见的多人共用同一台电脑的情况。 后者并不理想，因为你的所有代码版本库如果长存于同一台电脑，更可能发生灾难性的损失。</p>
<p>如果你使用共享文件系统，就可以从本地版本库克隆（clone）、推送（push）以及拉取（pull）。 像这样去克隆一个版本库或者增加一个远程到现有的项目中，使用版本库路径作为 URL。 例如，克隆一个本地版本库，可以执行如下的命令：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> /opt/git/project.git</span></span><br></pre></td></tr></table></figure>

<p>或你可以执行这个命令：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> file:///opt/git/project.git</span></span><br></pre></td></tr></table></figure>

<p>如果在 URL 开头明确的指定 <code>file://</code>，那么 Git 的行为会略有不同。 如果仅是指定路径，Git 会尝试使用硬链接（hard link）或直接复制所需要的文件。 如果指定 <code>file://</code>，Git 会触发平时用于网路传输资料的进程，那通常是传输效率较低的方法。 指定 <code>file://</code> 的主要目的是取得一个没有外部参考（extraneous references）或对象（object）的干净版本库副本– 通常是在从其他版本控制系统导入后或一些类似情况（参见 <a href="https://git-scm.com/book/zh/v2/ch00/ch10-git-internals">Git 内部原理</a> for maintenance tasks）需要这么做。 在此我们将使用普通路径，因为这样通常更快。</p>
<p>要增加一个本地版本库到现有的 Git 项目，可以执行如下的命令：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote add local_proj /opt/git/project.git</span></span><br></pre></td></tr></table></figure>

<p>然后，就可以像在网络上一样从远端版本库推送和拉取更新了。</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>基于文件系统的版本库的优点是简单，并且直接使用了现有的文件权限和网络访问权限。 如果你的团队已经有共享文件系统，建立版本库会十分容易。 只需要像设置其他共享目录一样，把一个裸版本库的副本放到大家都可以访问的路径，并设置好读/写的权限，就可以了， 我们会在 <a href="https://git-scm.com/book/zh/v2/ch00/r_git_on_the_server">在服务器上搭建 Git</a> 讨论如何导出一个裸版本库。</p>
<p>这也是快速从别人的工作目录中拉取更新的方法。 如果你和别人一起合作一个项目，他想让你从版本库中拉取更新时，运行类似 <code>git pull /home/john/project</code> 的命令比推送到服务再取回简单多了。</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>这种方法的缺点是，通常共享文件系统比较难配置，并且比起基本的网络连接访问，这不方便从多个位置访问。 如果你想从家里推送内容，必须先挂载一个远程磁盘，相比网络连接的访问方式，配置不方便，速度也慢。</p>
<p>值得一提的是，如果你使用的是类似于共享挂载的文件系统时，这个方法不一定是最快的。 访问本地版本库的速度与你访问数据的速度是一样的。 在同一个服务器上，如果允许 Git 访问本地硬盘，一般的通过 NFS 访问版本库要比通过 SSH 访问慢。</p>
<p>最终，这个协议并不保护仓库避免意外的损坏。 每一个用户都有“远程”目录的完整 shell 权限，没有方法可以阻止他们修改或删除 Git 内部文件和损坏仓库。</p>
<h3 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h3><p>Git 通过 HTTP 通信有两种模式。 在 Git 1.6.6 版本之前只有一个方式可用，十分简单并且通常是只读模式的。 Git 1.6.6 版本引入了一种新的、更智能的协议，让 Git 可以像通过 SSH 那样智能的协商和传输数据。 之后几年，这个新的 HTTP 协议因为其简单、智能变的十分流行。 新版本的 HTTP 协议一般被称为“智能” HTTP 协议，旧版本的一般被称为“哑” HTTP 协议。 我们先了解一下新的“智能” HTTP 协议。</p>
<h4 id="智能（Smart）-HTTP-协议"><a href="#智能（Smart）-HTTP-协议" class="headerlink" title="智能（Smart） HTTP 协议"></a>智能（Smart） HTTP 协议</h4><p>“智能” HTTP 协议的运行方式和 SSH 及 Git 协议类似，只是运行在标准的 HTTP/S 端口上并且可以使用各种 HTTP 验证机制，这意味着使用起来会比 SSH 协议简单的多，比如可以使用 HTTP 协议的用户名／密码的基础授权，免去设置 SSH 公钥。</p>
<p>智能 HTTP 协议或许已经是最流行的使用 Git 的方式了，它即支持像 <code>git://</code> 协议一样设置匿名服务，也可以像 SSH 协议一样提供传输时的授权和加密。 而且只用一个 URL 就可以都做到，省去了为不同的需求设置不同的 URL。 如果你要推送到一个需要授权的服务器上（一般来讲都需要），服务器会提示你输入用户名和密码。 从服务器获取数据时也一样。</p>
<p>事实上，类似 GitHub 的服务，你在网页上看到的 URL （比如， <code>https://github.com/schacon/simplegit[]</code>)，和你在克隆、推送（如果你有权限）时使用的是一样的。</p>
<h4 id="哑（Dumb）-HTTP-协议"><a href="#哑（Dumb）-HTTP-协议" class="headerlink" title="哑（Dumb） HTTP 协议"></a>哑（Dumb） HTTP 协议</h4><p>如果服务器没有提供智能 HTTP 协议的服务，Git 客户端会尝试使用更简单的“哑” HTTP 协议。 哑 HTTP 协议里 web 服务器仅把裸版本库当作普通文件来对待，提供文件服务。 哑 HTTP 协议的优美之处在于设置起来简单。 基本上，只需要把一个裸版本库放在 HTTP 根目录，设置一个叫做 <code>post-update</code> 的挂钩就可以了（见 <a href="https://git-scm.com/book/zh/v2/ch00/r_git_hooks">Git 钩子</a>）。 此时，只要能访问 web 服务器上你的版本库，就可以克隆你的版本库。 下面是设置从 HTTP 访问版本库的方法：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /var/www/htdocs/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> --bare /path/to/git_project gitproject.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> gitproject.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mv hooks/post-update.sample hooks/post-update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod a+x hooks/post-update</span></span><br></pre></td></tr></table></figure>

<p>这样就可以了。 Git 自带的 <code>post-update</code> 挂钩会默认执行合适的命令（<code>git update-server-info</code>），来确保通过 HTTP 的获取和克隆操作正常工作。 这条命令会在你通过 SSH 向版本库推送之后被执行；然后别人就可以通过类似下面的命令来克隆：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://example.com/gitproject.git</span></span><br></pre></td></tr></table></figure>

<p>这里我们用了 Apache 里设置了常用的路径 <code>/var/www/htdocs</code>，不过你可以使用任何静态 web 服务器 —— 只需要把裸版本库放到正确的目录下就可以。 Git 的数据是以基本的静态文件形式提供的（详情见 <a href="https://git-scm.com/book/zh/v2/ch00/ch10-git-internals">Git 内部原理</a>）。</p>
<p>通常的，会在可以提供读／写的智能 HTTP 服务和简单的只读的哑 HTTP 服务之间选一个。 极少会将二者混合提供服务。</p>
<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>我们将只关注智能 HTTP 协议的优点。</p>
<p>不同的访问方式只需要一个 URL 以及服务器只在需要授权时提示输入授权信息，这两个简便性让终端用户使用 Git 变得非常简单。 相比 SSH 协议，可以使用用户名／密码授权是一个很大的优势，这样用户就不必须在使用 Git 之前先在本地生成 SSH 密钥对再把公钥上传到服务器。 对非资深的使用者，或者系统上缺少 SSH 相关程序的使用者，HTTP 协议的可用性是主要的优势。 与 SSH 协议类似，HTTP 协议也非常快和高效。</p>
<p>你也可以在 HTTPS 协议上提供只读版本库的服务，如此你在传输数据的时候就可以加密数据；或者，你甚至可以让客户端使用指定的 SSL 证书。</p>
<p>另一个好处是 HTTP/S 协议被广泛使用，一般的企业防火墙都会允许这些端口的数据通过。</p>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>在一些服务器上，架设 HTTP/S 协议的服务端会比 SSH 协议的棘手一些。 除了这一点，用其他协议提供 Git 服务与 “智能” HTTP 协议相比就几乎没有优势了。</p>
<p>如果你在 HTTP 上使用需授权的推送，管理凭证会比使用 SSH 密钥认证麻烦一些。 然而，你可以选择使用凭证存储工具，比如 OSX 的 Keychain 或者 Windows 的凭证管理器。 参考 <a href="https://git-scm.com/book/zh/v2/ch00/r_credential_caching">凭证存储</a> 如何安全地保存 HTTP 密码。</p>
<h3 id="SSH-协议"><a href="#SSH-协议" class="headerlink" title="SSH 协议"></a>SSH 协议</h3><p>架设 Git 服务器时常用 SSH 协议作为传输协议。 因为大多数环境下已经支持通过 SSH 访问 —— 即时没有也比较很容易架设。 SSH 协议也是一个验证授权的网络协议；并且，因为其普遍性，架设和使用都很容易。</p>
<p>通过 SSH 协议克隆版本库，你可以指定一个 <code>ssh://</code> 的 URL：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> ssh://user@server/project.git</span></span><br></pre></td></tr></table></figure>

<p>或者使用一个简短的 scp 式的写法：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> user@server:project.git</span></span><br></pre></td></tr></table></figure>

<p>你也可以不指定用户，Git 会使用当前登录的用户名。</p>
<h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>用 SSH 协议的优势有很多。 首先，SSH 架设相对简单 —— SSH 守护进程很常见，多数管理员都有使用经验，并且多数操作系统都包含了它及相关的管理工具。 其次，通过 SSH 访问是安全的 —— 所有传输数据都要经过授权和加密。 最后，与 HTTP/S 协议、Git 协议及本地协议一样，SSH 协议很高效，在传输前也会尽量压缩数据。</p>
<h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><p>SSH 协议的缺点在于你不能通过他实现匿名访问。 即便只要读取数据，使用者也要有通过 SSH 访问你的主机的权限，这使得 SSH 协议不利于开源的项目。 如果你只在公司网络使用，SSH 协议可能是你唯一要用到的协议。 如果你要同时提供匿名只读访问和 SSH 协议，那么你除了为自己推送架设 SSH 服务以外，还得架设一个可以让其他人访问的服务。</p>
<h3 id="Git-协议"><a href="#Git-协议" class="headerlink" title="Git 协议"></a>Git 协议</h3><p>接下来是 Git 协议。 这是包含在 Git 里的一个特殊的守护进程；它监听在一个特定的端口（9418），类似于 SSH 服务，但是访问无需任何授权。 要让版本库支持 Git 协议，需要先创建一个 <code>git-daemon-export-ok</code> 文件 —— 它是 Git 协议守护进程为这个版本库提供服务的必要条件 —— 但是除此之外没有任何安全措施。 要么谁都可以克隆这个版本库，要么谁也不能。 这意味着，通常不能通过 Git 协议推送。 由于没有授权机制，一旦你开放推送操作，意味着网络上知道这个项目 URL 的人都可以向项目推送数据。 不用说，极少会有人这么做。</p>
<h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><p>目前，Git 协议是 Git 使用的网络传输协议里最快的。 如果你的项目有很大的访问量，或者你的项目很庞大并且不需要为写进行用户授权，架设 Git 守护进程来提供服务是不错的选择。 它使用与 SSH 相同的数据传输机制，但是省去了加密和授权的开销。</p>
<h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><p>Git 协议缺点是缺乏授权机制。 把 Git 协议作为访问项目版本库的唯一手段是不可取的。 一般的做法里，会同时提供 SSH 或者 HTTPS 协议的访问服务，只让少数几个开发者有推送（写）权限，其他人通过 <code>git://</code> 访问只有读权限。 Git 协议也许也是最难架设的。 它要求有自己的守护进程，这就要配置 <code>xinetd</code>或者其他的程序，这些工作并不简单。 它还要求防火墙开放 9418 端口，但是企业防火墙一般不会开放这个非标准端口。 而大型的企业防火墙通常会封锁这个端口。</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>H3C WA4330-ACN的指示灯说明</title>
    <url>/2019/04/24/13/</url>
    <content><![CDATA[<p>WA4330-ACN的指示灯说明如下表所示。</p>
<p>表A-1 指示灯状态说明</p>
<table>
<thead>
<tr>
<th>指示灯</th>
<th>指示灯颜色</th>
<th>指示灯状态</th>
<th>状态说明</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>橙色</td>
<td>常亮</td>
<td>设备上电启动中</td>
</tr>
<tr>
<td>1Hz闪烁</td>
<td>以太网口或射频口异常（以太网接口down或检测不到射频接口等）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>2Hz闪烁</td>
<td>Blink模式 配置Blink状态检测功能后，关联到AC的Fit AP闪烁指示灯以示关联AC成功</td>
<td></td>
<td></td>
</tr>
<tr>
<td>绿色</td>
<td>常亮</td>
<td>AP未成功注册到AC前一直处于此状态</td>
<td></td>
</tr>
<tr>
<td>1Hz闪烁</td>
<td>2.4G射频接口有客户端在线</td>
<td></td>
<td></td>
</tr>
<tr>
<td>蓝色</td>
<td>常亮</td>
<td>AP已经启动完成并已经注册到AC，正处于待机状态（无客户端在线）</td>
<td></td>
</tr>
<tr>
<td>1Hz闪烁</td>
<td>5G射频接口有客户端在线</td>
<td></td>
<td></td>
</tr>
<tr>
<td>2Hz闪烁</td>
<td>AP正在更新应用程序</td>
<td></td>
<td></td>
</tr>
<tr>
<td>绿蓝交替</td>
<td>1Hz交替闪烁</td>
<td>2.4G和5G射频接口均有客户端在线</td>
<td></td>
</tr>
<tr>
<td>常灭</td>
<td>设备初始化异常</td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>100.64.0.1运营商级(Carrier-grade)NAT保留IP地址</title>
    <url>/2019/04/24/14/</url>
    <content><![CDATA[<p>在一次跟踪路由的网络操作时发现自己路由器下一跳路由节点的IP地址比较奇怪，是<code>100.64.0.1</code>。好奇促使我查询了这个IP地址的归属，结果是保留地址，到这里觉得比较奇怪了，按照常理以IPv4为例保留的IP地址一般为以下几种，常用于内网通讯或者特殊用途：</p>
<table>
<thead>
<tr>
<th>地址块</th>
<th>起始</th>
<th>结束</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>10.0.0.0/8</td>
<td>10.0.0.0</td>
<td>10.255.255.255</td>
<td>局域网分配</td>
</tr>
<tr>
<td>172.16.0.0/12</td>
<td>172.16.0.0</td>
<td>172.31.255.255</td>
<td>局域网分配</td>
</tr>
<tr>
<td>192.0.0.0/24</td>
<td>192.168.0.0</td>
<td>192.168.255.255</td>
<td>局域网分配</td>
</tr>
<tr>
<td>169.254.0.0/16</td>
<td>169.254.0.0</td>
<td>169.254.255.255</td>
<td>两台主机对等连接，当Windows获取不到IP地址的时候会自动分配此类地址</td>
</tr>
<tr>
<td>127.0.0.0/8</td>
<td>127.0.0.0</td>
<td>127.255.255.255</td>
<td>回环(loopback)地址，表示本机</td>
</tr>
<tr>
<td>255.255.255.255/32</td>
<td>255.255.255.255</td>
<td>255.255.255.255</td>
<td>广播地址</td>
</tr>
</tbody></table>
<p>这个<code>100.64</code>开头的IP地址又是什么鬼？搜索<a href="https://en.wikipedia.org/wiki/Reserved_IP_addresses">维基百科的Reserved IP Address词条</a>才发现原来教科书上介绍的只是部分保留地址，整个保留地址家族的成员还是比较多的，那么<code>100.64</code>打头的IP地址对应地址块为<code>100.64.0.0/10</code>，地址范围为<code>100.64.0.0</code>~<code>100.127.255.255</code>，共包含有4,194,304个IP地址，这个保留地址也是用于内网，但是这个内网不是一般内网而是<a href="https://en.wikipedia.org/wiki/Carrier-grade_NAT">Carrier-grade NAT</a>，这个英文对应的翻译是“运营商级NAT”。进一步搜索得知2012年4月的 <a href="https://tools.ietf.org/html/rfc6598">RFC 6598</a>(IANA-Reserved IPv4 Prefix for Shared Address Space) 将 <code>100.64.0.0/10</code> (Shared Address Space) 地址块，用于给运营商ISP使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NetRange:       100.64.0.0 - 100.127.255.255</span><br><span class="line">CIDR:           100.64.0.0&#x2F;10</span><br><span class="line">OriginAS:</span><br><span class="line">NetName:        SHARED-ADDRESS-SPACE-RFCTBD-IANA-RESERVED</span><br><span class="line">NetHandle:      NET-100-64-0-0-1</span><br><span class="line">Parent:         NET-100-0-0-0-0</span><br><span class="line">NetType:        IANA Special Use</span><br></pre></td></tr></table></figure>

<p>据此可以推断出电信的黑科技实际上是使用了一个类似路由的设备将我们的网络组织成一个局域网，再通过网址转换NAT技术来实现网络通信，可以这么理解吧，我们以前通过PPPoE拨号获取的是随机分配的公网IP地址，这个IP地址是完全可以被互联网上任何设备访问的无障碍地址，但是现在通过拨号获取的只是一个内网地址，也就是说我们自己的路由器或者电脑拨号连接到了电信运营商的“大路由器”上，再也没有公网IP地址了。</p>
<p>为什么电信要使用这种方式来管理用户上网？首先我们要知道IPv4地址已经告枯竭，2011年2月4日全球顶级IP地址分配机构IANA分配完了最后5个A级地址块，因此IANA宣告IPv4地址告罄。2011年4月15日，APNIC宣布其剩余的可自由分配的IPv4地址已全部分配完毕，亚太地区进入IPv4地址耗尽阶段。随后几个月，中国各大运营商从APNIC以会员资格申请到了最后的几个C，至此各运营商也陷入了IPv4地址耗尽的困境。由于IPv6技术进展缓慢，为了解决IPv4耗尽对电信企业日益增长的用户对于网络需求的影响，NAT444/NAT44的方案由此诞生。</p>
<p>NAT444/NAT44方案说白了就是将过去每个宽带用户独立分配公网IP的方式改为分配内网IP给每个用户，运营商再对接入的用户统一部署NAT设备，NAT的作用就是将用户网络连接发起的内网IP，以端口连接的形式翻译成公网IP，再对外网资源进行连接。这样做以后，可以实现多个用户共享一个IP地址，在技术实现原理上和我们家用的路由器一样，其中NAT444对应传统宽带用户，NAT44则对应3G或者4G移动上网终端。</p>
<p>这样做的好处显而易见，首先延缓了IPv4耗尽对电信业务带来的威胁并进一步为IPv6技术部署留足时间，其次是内网保护，所有接入互联网的主机都不再直接接入，而是出于电信NAT设备的保护之下，没有独立的公网IP，所有端对端的远控软件将会失效，比如以前的灰鸽子木马，由于主机丧失了公网IP，灰鸽子反弹的IP地址将是电信NAT设备所使用的公网IP，黑客无法以此定位到中了灰鸽子木马的具体主机，不过这不影响第三方端口转发的远控软件，比如TeamViewer，但是对传统远控软件杀伤力是巨大的。最后增强了隐私保护，对于远端的网站通过IP地址跟踪等形式采集用户数据，或者以后台记录IP的形式定位用户身份的行为将不再有效，因为这个IP地址可以同一时间段内被大量用户所使用，所以部分广告商可能需要修改广告跟踪代码的相关逻辑，这边顺带说一句并不意味着处于电信NAT保护的用户可以做违法的事情，比较电信公司不是傻瓜，电信级NAT设备会有日志记录系统，所以处于其下的网络设备的上网流量都是得到有效审计的。</p>
<p>这样做的坏处是什么呢？首先丧失了公网IP让极客们的生活失去了不少乐趣，比如原先通过花生壳动态域名解析服务可以定位到我们家的上网设备，然后可以在上面架设一些服务等，从最原始的网站服务（<a href="https://wangye.org/blog/archives/662/">电信封锁了80端口</a>）到远程私有云存储，甚至是个人VPN等等，现在都不能直接使用了，因为动态域名服务解析的IP地址是电信级NAT设备所使用的公网IP，同时也是若干电信用户所共享的IP地址，NAT并不会转发你的请求到特定的电信用户，所以这些服务都失效了，其实这对于安装远程网络监控的公司或者个人带来的麻烦最大，原来只要配置好动态域名解析就可以在任何地方使用网络进行监控查看，现在都不可以了。其次共用IP地址容易让部分网络服务提供商误杀合法用户，比如一位非法的资源滥用电信用户和你在共享同一个公网IP地址，非法的资源滥用者由于滥用某个网络服务商资源从而被加入黑名单，注意这里只有将你们所共享的公网IP地址加入了黑名单，所以导致你这个合法的用户也不能正常使用该网络服务商所提供的资源了。最后这样做的坏处还有影响到电驴等P2P软件的使用，因为处于内网下导致电驴等软件一直是LowID，影响传输速度。</p>
<p>如何解决此问题？要想重新获取公网IP，最后还是要联系电信运营商，不行只有进行投诉解决了。</p>
<p>后来发现这种现象普遍存在，甚至有电信运营商直接分配172或者10开头的内网IP地址，但这种分配方式容易与用户自己的路由器IP地址冲突，所以还是100.64开头这种好一些，毕竟新设立专用于ISP运营的保留地址，个人网络设备占用的可能性较低。</p>
<p>希望IPv6能够尽快全面推广开，从而解决现在尴尬的局面。</p>
<p><strong>参考文档</strong></p>
<ul>
<li><a href="https://v2ex.com/t/96486">电信偷偷把公网IP换成了内网IP</a></li>
<li><a href="http://www.v2ex.com/t/90496">电信不给独立IP了，共享的IP怎么开 SSH 什么的？</a></li>
<li><a href="http://safe.it168.com/a2013/1209/1570/000001570976.shtml">为什么需要运营商级NAT设备？</a></li>
<li><a href="https://blog.gslin.org/archives/2013/01/17/3140/isp-%E6%9E%B6%E8%A8%AD-nat-%E8%A7%A3%E6%B1%BA-ipv4-%E4%B8%8D%E5%A4%A0%E7%9A%84%E5%95%8F%E9%A1%8C/">ISP 架設 NAT 解決 IPv4 不夠的問題…</a></li>
</ul>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>子网掩码、反掩码以及ospf network命令误区</title>
    <url>/2019/04/24/16/</url>
    <content><![CDATA[<p>在学习过程中，难免会有些误区，本文为大家彻底澄清子网掩码、反掩码、通配符掩码以及ospf network命令误区，并介绍一些正确的示例：</p>
<p><strong>1.子网掩码(IP subnet mask)</strong></p>
<p>用途：标识一个IP地址的网络位，主机位</p>
<p>网络设备判断目的IP跟自己是否同一网段的依据。</p>
<p>特点：1和0绝对不可能间隔，1总在0的前面。</p>
<p>网络通信角度，子网掩码只具有本地意义。跟对端没有匹配的硬性要求。</p>
<p>误区：一条链路两端的子网掩码必须一致(是习惯不是必须)</p>
<p>例外：ospf 多路访问网络中，掩码不一致会影响ospf邻居关系建立</p>
<p><img src="https://ws1.sinaimg.cn/large/d3bb92edly1g2h4zfirezj218o0l8gs5.jpg" loading="lazy"></p>
<p><strong>2.通配符掩码 wildcard mask</strong></p>
<p>用途：选出一组符合否规则的IP地址</p>
<p>特点：0表匹配，1表示不需要匹配。0和1 的位置根据需求可随意穿插</p>
<p>示例1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deny ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255</span><br><span class="line"></span><br><span class="line">deny ip 192.168.1.2 0.0.0.255 192.168.2.2 0.0.0.255</span><br><span class="line"></span><br><span class="line">deny ip 192.168.1.3 0.0.0.255 192.168.2.3 0.0.0.255</span><br></pre></td></tr></table></figure>

<p>这三跳条目是完全相同的，效果都是阻止192.168.1.x 访问192.168.1.x (x表示任意数字)</p>
<p>红色字体部分对应的是全1，所以是忽略的 ，写什么都无所谓了</p>
<p>实例2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deny ip 192.168.1.0 255.0.0.255 192.168.2.0 255.0.0.255</span><br><span class="line"></span><br><span class="line">deny ip 193.168.1.0 255.0.0.255 193.168.2.0 255.0.0.255</span><br><span class="line"></span><br><span class="line">deny ip 194.168.1.0 255.0.0.255 194.168.2.0 255.0.0.255</span><br></pre></td></tr></table></figure>

<p>这三跳条目是完全相同的，效果都是阻止x.168.1.x 访问 x.168.2.x (x表示任意数字)</p>
<p>红色字体部分对应的是全1，所以是忽略的 ，写什么都无所谓了</p>
<p><strong>3. 反掩码(中国式教育的败笔，误人子弟的一个说法，通配符掩码的错误理解)</strong></p>
<p>需求1：阻止192.168.1.0/24 访问 192.168.2.0/24</p>
<p>命令：deny ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255</p>
<p>看起啦确实是把掩码反过来写正好满足要求，实际上逻辑关系已经变了。只是恰巧蒙对了而已。</p>
<p>少有求知欲的同学都有必要问一下，为什么要把掩码反过来写呢?</p>
<p>如果写成 deny ip 192.168.1.0 255.255.255.0 192.168.2.0 255.255.255.0</p>
<p>严格解读效果是：拒绝 x.x.x.0 访问 x.x.x.0</p>
<p>但是很多版本故作人性化，show run的时候自己给该成了：</p>
<p>deny ip 192.168.1.0 0.0.0.255 192.168.2.0 0.0.0.255</p>
<p>这属于操作系统对客户错误理解的妥协</p>
<p>后期的思科版本不再做此修改</p>
<p>-—————————————————————-</p>
<p>需求2：阻止 X.168.1.x 访问 X.168.2.x</p>
<p>命令：deny ip 192.168.1.0 255.0.0.255 192.168.2.0 255.0.0.255</p>
<p>这个需求用反掩码的逻辑恐怕就行不通了吧? 当然这个需求属于怪异需求。</p>
<p><strong>4.ospf的network命令(非rfc规定，各厂家可以自行设计，以下为大部分厂家逻辑)</strong></p>
<p>正解：</p>
<p>Network + IP + wild card bits</p>
<p>Network 通过 IP 和 wild card bits 筛选出一组IP地址，从而定位出需要开启OSPF的接口(谁拥有其中一个IP地址谁就开启OSPF)</p>
<p>接口开启ospf 含义有二：1. 从该接口收发ospf报文</p>
<p>2.该接口所在的网络对应的路由成为ospf的资源，从其他接口发给邻居(当然ospf发的不是路由条目)</p>
<p>示例：inter f0/1</p>
<p>ip add 10.1.1.1 255.255.255.0</p>
<p>router ospf 1</p>
<p>network 10.1.1.1 0.0.0.255 area 0</p>
<p>这个network命令实际上宣告了10.1.1.0-10.1.1.255 这256个地址。</p>
<p>当然在这个环境下恰好有且仅有一个接口在这个范围内。</p>
<p>也就是说把接口的掩码反过来写正好能且只能宣告一个接口。不会多宣告</p>
<p>如果写成</p>
<p>network 10.1.1.1 0.0.0.0 area 0 效果也完全一样</p>
<p>或者写成</p>
<p>network 10.1.1.2 0.0.0.255 area 0 红色字体部分随便写，效果也是一样的</p>
<p>如果写成</p>
<p>network 0.0.0.0 255.255.255.255 area 0 宣告所有的IP地址，也就是所有的接口</p>
<p>如果写成</p>
<p>network 0.0.0.0 0.0.0.0 area 0 也是宣告所有接口，逻辑上讲不通(这个背过吧)</p>
<p>重大误区：</p>
<p>\1. network 宣告的是路由，影响邻居学习路由的掩码</p>
<p>\2. network IP 后面跟的是反掩码，必须把掩码反过来写，否则会影响路由学习</p>
<p>错误理解示例1：</p>
<p>network 10.1.1.1 0.0.0.0</p>
<p>会导致邻居学到 10.1.1.1/32位的路由(已经遇到好多人跟我纠结这种问题，唉，网络世界，其实难寻知己)</p>
<p>原文博客：<a href="http://blog.sina.com.cn/s/blog_bf5ae9030101cy25.html">http://blog.sina.com.cn/s/blog_bf5ae9030101cy25.html</a></p>
]]></content>
      <tags>
        <tag>路由协议</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux nc命令详解</title>
    <url>/2019/04/24/17/</url>
    <content><![CDATA[<h1 id="什么是nc"><a href="#什么是nc" class="headerlink" title="什么是nc"></a>什么是nc</h1><p>nc是netcat的简写，有着网络界的瑞士军刀美誉。因为它短小精悍、功能实用，被设计为一个简单、可靠的网络工具</p>
<h1 id="nc的作用"><a href="#nc的作用" class="headerlink" title="nc的作用"></a>nc的作用</h1><p>（1）实现任意TCP/UDP端口的侦听，nc可以作为server以TCP或UDP方式侦听指定端口</p>
<p>（2）端口的扫描，nc可以作为client发起TCP或UDP连接</p>
<p>（3）机器之间传输文件</p>
<p>（4）机器之间网络测速                                                                                                                                                                                                                        </p>
<h1 id="nc的控制参数不少，常用的几个参数如下所列："><a href="#nc的控制参数不少，常用的几个参数如下所列：" class="headerlink" title="nc的控制参数不少，常用的几个参数如下所列："></a>nc的控制参数不少，常用的几个参数如下所列：</h1><ol>
<li>-l</li>
</ol>
<p>用于指定nc将处于侦听模式。指定该参数，则意味着nc被当作server，侦听并接受连接，而非向其它地址发起连接。</p>
<ol start="2">
<li>-p <port></li>
</ol>
<p>暂未用到（老版本的nc可能需要在端口号前加-p参数，下面测试环境是centos6.6，nc版本是nc-1.84，未用到-p参数）</p>
<ol start="3">
<li>-s </li>
</ol>
<p>指定发送数据的源IP地址，适用于多网卡机 </p>
<ol start="4">
<li><p>-u</p>
<p>指定nc使用UDP协议，默认为TCP</p>
</li>
<li><p>-v</p>
</li>
</ol>
<p>输出交互或出错信息，新手调试时尤为有用</p>
<p>6）-w</p>
<p>超时秒数，后面跟数字 </p>
<p>7）-z</p>
<p>表示zero，表示扫描时不发送任何数据</p>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>准备两台机器，用于测试nc命令的用法</p>
<p>主机A：ip地址 10.0.1.161</p>
<p>主机B：ip地址 10.0.1.162</p>
<p>两台机器先安装nc和nmap的包</p>
<p>yum install nc -y</p>
<p>yum install nmap -y</p>
<h1 id="nc用法1，网络连通性测试和端口扫描"><a href="#nc用法1，网络连通性测试和端口扫描" class="headerlink" title="nc用法1，网络连通性测试和端口扫描"></a><strong>nc用法1，网络连通性测试和端口扫描</strong></h1><p><strong>nc可以作为server端启动一个tcp的监听（注意，此处重点是起tcp，下面还会讲udp）</strong></p>
<p>先关闭A的防火墙，或者放行下面端口，然后测试B机器是否可以访问A机器启动的端口</p>
<p>在A机器上启动一个端口监听，比如 9999端口（注意：下面的-l 是小写的L，不是数字1）</p>
<p>默认情况下下面监听的是一个tcp的端口</p>
<p>nc -l 9999</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209095543554-1037638344.png" alt="img" loading="lazy"></p>
<p><strong>客户端测试，**</strong>测试方法1**</p>
<p>在B机器上telnet A机器此端口，如下显示表示B机器可以访问A机器此端口</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209095601413-784407778.png" alt="img" loading="lazy"></p>
<p><strong>客户端测试，测试方法2</strong></p>
<p>B机器上也可以使用nmap扫描A机器的此端口</p>
<p>nmap 10.0.1.161 -p9999</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209095617601-914929817.png" alt="img" loading="lazy"></p>
<p><strong>客户端测试，测试方法3</strong></p>
<p>使用nc命令作为客户端工具进行端口探测</p>
<p>nc -vz -w 2 10.0.1.161 9999</p>
<p>（-v可视化，-z扫描时不发送数据，-w超时几秒，后面跟数字）</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209095634851-958356921.png" alt="img" loading="lazy"></p>
<p>上面命令也可以写成</p>
<p>nc -vzw 2 10.0.1.161 9999</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209095651569-1755893958.png" alt="img" loading="lazy"></p>
<p><strong>客户端测试，测试方法4（和方法3相似，但用处更大）</strong></p>
<p>nc可以可以扫描连续端口，这个作用非常重要。常常可以用来扫描服务器端口，然后给服务器安全加固</p>
<p>在A机器上监听2个端口，一个9999，一个9998，使用&amp;符号丢入后台</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209095712866-936204965.png" alt="img" loading="lazy"></p>
<p>在客户端B机器上扫描连续的两个端口，如下</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209095732429-1764157681.png" alt="img" loading="lazy"></p>
<p><strong>nc作为server端启动一个udp的监听（注意，此处重点是起udp，上面主要讲了tcp）</strong></p>
<p>启动一个udp的端口监听</p>
<p>nc  -ul  9998</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209095753835-1671845784.png" alt="img" loading="lazy"></p>
<p>复制当前窗口输入 netstat -antup |grep 9998 可以看到是启动了udp的监听</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209095812632-1749454663.png" alt="img" loading="lazy"></p>
<p><strong>客户端测试，测试方法1</strong></p>
<p>nc -vuz 10.0.1.161 9998</p>
<p>由于udp的端口无法在客户端使用telnet去测试，我们可以使用nc命令去扫描（前面提到nc还可以用来扫描端口）</p>
<p>（telnet是运行于tcp协议的）</p>
<p>（u表示udp端口，v表示可视化输出，z表示扫描时不发送数据）</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209100707882-1433264712.png" alt="img" loading="lazy"></p>
<p>上面在B机器扫描此端口的时候，看到A机器下面出现一串XXXXX字符串</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209100725866-2147390474.png" alt="img" loading="lazy"></p>
<p><strong>客户端测试，测试方法2</strong></p>
<p>nmap -sU 10.0.1.161 -p 9998 -Pn</p>
<p>（它暂无法测试nc启动的udp端口，每次探测nc作为server端启动的udp端口时，会导致对方退出侦听，有这个bug，对于一些程序启动的udp端口在使用nc扫描时不会有此bug）</p>
<p>下面，A机器启动一个udp的端口监听，端口为9998</p>
<p>在复制的窗口上可以确认已经在监听了</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209100746272-590584994.png" alt="img" loading="lazy"></p>
<p>B机器使用nmap命令去扫描此udp端口，在扫描过程中，导致A机器的nc退出监听。所以显示端口关闭了（我推测是扫描时发数据导致的）</p>
<p>nmap -sU 10.0.1.161 -p 9998 -Pn</p>
<p>-sU ：表示udp端口的扫描</p>
<p>-Pn ：如果服务器禁PING或者放在防火墙下面的，不加-Pn 参数的它就会认为这个扫描的主机不存活就不会进行扫描了，如果不加-Pn就会像下面的结果一样，它也会进行提示你添加上-Pn参数尝试的</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209100804726-1083735542.png" alt="img" loading="lazy"></p>
<p>注意：如果A机器开启了防火墙，扫描结果可能会是下面状态。（不能确定对方是否有监听9998端口）</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209100817866-337685966.png" alt="img" loading="lazy"></p>
<p>既然上面测试无法使用nmap扫描nc作为服务端启动的端口，我们可以使用nmap扫描其余的端口</p>
<p>（额，有点跑题了，讲nmap的用法了，没关系，主要为了说明nmap是也可以用来扫描udp端口的，只是扫描nc启动的端口会导致对方退出端口监听）</p>
<p>下面，A机器上rpcbind服务，监听在udp的111端口</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209100833757-599551176.png" alt="img" loading="lazy"></p>
<p>在B机器上使用nmap扫描此端口，是正常的检测到处于open状态</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209100847319-1809046272.png" alt="img" loading="lazy"></p>
<p><strong>客户端测试，测试方法3</strong></p>
<p><strong>nc扫描大量udp端口</strong></p>
<p>扫描过程比较慢，可能是1秒扫描一个端口，下面表示扫描A机器的1到1000端口（暂未发现可以在一行命令中扫描分散的几个端口的方法）</p>
<p>nc -vuz 10.0.1.161 1-1000</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209100901819-1505522198.png" alt="img" loading="lazy"></p>
<h1 id="nc用法2，使用nc传输文件和目录"><a href="#nc用法2，使用nc传输文件和目录" class="headerlink" title="nc用法2，使用nc传输文件和目录"></a><strong>nc用法2，使用nc传输文件和目录</strong></h1><p><strong>方法1，传输文件演示（先启动接收命令）</strong></p>
<p>使用nc传输文件还是比较方便的，因为不用scp和rsync那种输入密码的操作了</p>
<p>把A机器上的一个rpm文件发送到B机器上</p>
<p>需注意操作次序，receiver先侦听端口，sender向receiver所在机器的该端口发送数据。  </p>
<p><strong>步骤1，先在B机器上启动一个接收文件的监听，格式如下</strong></p>
<p>意思是把赖在9995端口接收到的数据都写到file文件里（这里文件名随意取）</p>
<p>nc -l port &gt;file</p>
<p>nc -l 9995 &gt;zabbix.rpm</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209100917507-1008395936.png" alt="img" loading="lazy"></p>
<p><strong>步骤2，在A机器上往B机器的9995端口发送数据，把下面rpm包发送过去</strong></p>
<p>nc 10.0.1.162 9995 &lt; zabbix-release-2.4-1.el6.noarch.rpm</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209100931116-1268991306.png" alt="img" loading="lazy"></p>
<p>B机器接收完毕，它会自动退出监听，文件大小和A机器一样，md5值也一样</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209100944897-733297904.png" alt="img" loading="lazy"></p>
<p><strong>方法2，传输文件演示（先启动发送命令）</strong></p>
<p><strong>步骤1，先在B机器上，启动发送文件命令</strong></p>
<p>下面命令表示通过本地的9992端口发送test.mv文件</p>
<p>nc -l 9992 &lt;test.mv</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209101002038-290824858.png" alt="img" loading="lazy"></p>
<p><strong>步骤2，A机器上连接B机器，取接收文件</strong></p>
<p>下面命令表示通过连接B机器的9992端口接收文件，并把文件存到本目录下，文件名为test2.mv</p>
<p>nc 10.0.1.162 9992 &gt;test2.mv</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209101017632-493505389.png" alt="img" loading="lazy"></p>
<p><strong>方法3，传输目录演示（方法发送文件类似）</strong></p>
<p><strong>步骤1，B机器先启动监听，如下</strong></p>
<p>A机器给B机器发送多个文件</p>
<p>传输目录需要结合其它的命令，比如tar</p>
<p>经过我的测试管道后面最后必须是 - ，不能是其余自定义的文件名</p>
<p>nc -l 9995 | tar xfvz -</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209101035476-313895763.png" alt="img" loading="lazy"></p>
<p><strong>步骤2，A机器打包文件并连接B机器的端口</strong></p>
<p>管道前面表示把当前目录的所有文件打包为 - ，然后使用nc发送给B机器</p>
<p>tar cfz - * | nc 10.0.1.162 9995</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209101051101-1053431813.png" alt="img" loading="lazy"></p>
<p>B机器这边已经自动接收和解压</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209101107241-716031832.png" alt="img" loading="lazy"></p>
<h1 id="nc用法3，测试网速"><a href="#nc用法3，测试网速" class="headerlink" title="nc用法3，测试网速"></a><strong>nc用法3，测试网速</strong></h1><p>测试网速其实利用了传输文件的原理，就是把来自一台机器的/dev/zero 发送给另一台机器的/dev/null</p>
<p>就是把一台机器的无限个0，传输给另一个机器的空设备上，然后新开一个窗口使用dstat命令监测网速</p>
<p>在这之前需要保证机器先安装dstat工具</p>
<p>yum install -y dstat</p>
<p><strong>方法1，测试网速演示（先启动接收命令方式）</strong></p>
<p>步骤1，A机器先启动接收数据的命令，监听自己的9991端口，把来自这个端口的数据都输出给空设备（这样不写磁盘，测试网速更准确）</p>
<p>nc -l 9991 &gt;/dev/null</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209101124179-1971991069.png" alt="img" loading="lazy"></p>
<p>步骤2，B机器发送数据，把无限个0发送给A机器的9991端口</p>
<p>nc 10.0.1.161 9991 &lt;/dev/zero</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209101150304-1813015616.png" alt="img" loading="lazy"></p>
<p>在复制的窗口上使用dstat命令查看当前网速，dstat命令比较直观，它可以查看当前cpu，磁盘，网络，内存页和系统的一些当前状态指标。</p>
<p>我们只需要看下面我选中的这2列即可，recv是receive的缩写，表示接收的意思，send是发送数据，另外注意数字后面的单位B，KB，MB</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209101211132-150010168.png" alt="img" loading="lazy"></p>
<p>可以看到A机器接收数据，平均每秒400MB左右</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209101227069-1285313680.png" alt="img" loading="lazy"></p>
<p>B机器新打开的窗口上执行dstat，看到每秒发送400MB左右的数据</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209101252491-2064947286.png" alt="img" loading="lazy"></p>
<p><strong>方法2，测试网速演示（先启动发送命令方式）</strong></p>
<p>步骤1，先启动发送的数据，谁连接这个端口时就会接收来自zero设备的数据（二进制的无限个0）</p>
<p>nc -l 9990 &lt;/dev/zero</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209101318991-1622147288.png" alt="img" loading="lazy"></p>
<p>步骤2，下面B机器连接A机器的9990端口，把接收的数据输出到空设备上</p>
<p>nc 10.0.1.161 9990 &gt;/dev/null</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209101335976-869694121.png" alt="img" loading="lazy"></p>
<p>同样可以使用dstat观察数据发送时的网速</p>
<p><img src="https://images2015.cnblogs.com/blog/1076878/201612/1076878-20161209101801304-671989613.png" alt="img" loading="lazy"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>揭密华为防火墙NAT地址复用专利技术</title>
    <url>/2019/04/24/18/</url>
    <content><![CDATA[<p>提到多对多、多对一的NAT（多个私网地址转换为多个或一个公网地址），就不能回避公网地址利用率的问题。 “华为防火墙一个公网IP突破了65535端口限制，理论上能够无限制进行NAT转换”这个结论在江湖上已经广为流传，接触过华为防火墙的兄弟可能早有耳闻，几天前提起源NAT也有兄弟跳起来指出。这正是华为防火墙十年前申请的一项专利技术的应用。<br>至此处，原谅强叔回忆下此专利发明人的大牛风采。几前路遇隐居的大牛下山，强叔敬仰地双手抱拳：“哥你已不在江湖多年，江湖中仍然流传着哥的传说。”――强叔还被称为小强之时，大牛已经名满防火墙。此时大牛仍然腼腆一笑，道声旧日小事飘然去也，唯强叔口水流了一地。之后，强叔又马不停蹄至襄阳，请教如今的NAT传人后，才算对此专利解读稍有眉目。围观兄弟且看，强叔接下来揭密华为防火墙NAT地址复用技术。 </p>
<p><img src="http://support.huawei.com/ecommunity/showimage-10082245-10118533-2736ab01a18fa49475f497edb28833c8.jpg" alt="img" loading="lazy"></p>
<p>在《源NAT》一节，强叔提到：“防火墙在应用源NAT功能时就是从地址池中挑选出一个公网IP，然后对私网IP进行转换。<strong>挑选哪个公网IP是随机的，**</strong>和配置时的顺序、IP大小等因素都没有关系。”**这其实就是我们看到的外部招式，所谓内功心法不外露的。</p>
<p>那么在进行源NAT时，究竟是怎样从地址池中挑选出公网IP地址资源进行分配的呢？<br>请允许强叔引入Hash算法的概念，这应该是大家常听说的一种广泛应用于程序编写的方法。一句话解释，就是把一种任意长度的信息进行压缩映射，成为某一固定长度的信息。例如，把3000个私网IP映射成100个公网IP，也就是从地址池挑选出公网IP地址资源进行分配的过程，资料中也偶尔会提到的“基于源地址Hash”。</p>
<p>Hash的具体规则或者说算法是什么呢？很灵活，自行设定，但是根据要达成的目标和计算结果，可以优选。在这里，我们使用的算法也比较简单取模运算。<br>估计很多不写代码兄弟的数学都已经还给老师了，但是提起求余运算应该都知道，思路如下：<br><img src="http://support.huawei.com/ecommunity/showimage-10082239-10118533-c608346f0b55016f5217be1e6c915fc2.jpg" alt="img" loading="lazy"></p>
<p><strong>示例如下：</strong><br>内网用户10.1.1.1-10.10.10.1，NAT地址池202.169.1.1-202.169.1.5<br>X=5<br>Y=10.1.1.1<br>10.1.1.1—–&gt;00001010 00000001 00000001 00000001—–&gt;167837953<br>不用计算可目测余数为3，选择地址池的第四个资源即202.169.1.4。</p>
<p>至此，内网用户的源IP地址已经可以全部被分配了对应的地址池中的公网IP地址资源，并且保证了每个内网的IP地址每次访问外部网络时始终转换为同一个公网IP地址。<br>按照上述运算后，一部分内网用户就会被分配相同的公网IP地址资源。</p>
<p>下一步，我们来研究下如何分配端口资源。<br>其实强叔对于将复杂一点的数学运算表达清楚没有太多信心，决定到最后不得已的时候再引出来，下面端口分配先从防火墙的实现原理讲起，定性区分出端口分配带来的影响。<br>在《源NAT》一节中，我们已介绍了NAPT情况建立的会话表。<br>例如，内网10.1.1.1和10.1.1.2用户分别ping 220.180.20.50服务器，在USG上通过公网地址202.169.1.1进行NAT转换，查询会话表显示如下：<br><USG9000> display firewall session table<br> Current total sessions: 2<br> Slot: 5 CPU: 1<br> icmp VPN: public –&gt; public 10.1.1.1:1280[202.169.1.1:10298] –&gt; 220.180.20.50:2048<br> icmp VPN: public –&gt; public 10.1.1.2:1280[202.169.1.1:6103] –&gt; 220.180.20.50:2048<br>由于内网不同用户的IP地址和端口必不相同，仅使用“源地址+源端口”二元组信息在USG上即可标识一条数据流，来建立正向NAT地址转换。而进行反向地址还原时，使用“源地址+源端口+目的地址+目的端口+协议”五元组信息唯一标识一条数据流。<br>那么，根据会话表实现机制，只要内网不同用户访问“目的地址+目的端口+协议”三元组中的任一参数不同时，即使将地址池中同一公网地址的同一端口同时分配给内网多个用户时，也不会产生冲突。<br>示例如下：</p>
<table>
<thead>
<tr>
<th>编号</th>
<th>内网源地址</th>
<th>内网源端口</th>
<th>NAT地址</th>
<th>NAT端口</th>
<th>目的地址</th>
<th>目地端口</th>
<th>协议</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>10.1.1.1</td>
<td>80</td>
<td>202.169.1.1</td>
<td>8080</td>
<td><a href="http://www.baidu.com/">www.baidu.com</a></td>
<td>80</td>
<td>http</td>
</tr>
<tr>
<td>2</td>
<td>10.1.1.2</td>
<td>80</td>
<td>202.169.1.1</td>
<td>8080</td>
<td><a href="http://www.sohu.com/">www.sohu.com</a></td>
<td>80</td>
<td>http</td>
</tr>
</tbody></table>
<p>因此，只要内网不同用户访问“目的地址+目的端口+协议”三元组中的任一参数不同时，唯一的NAT地址和端口可以反复利用，不受65535端口的限制。此时无论端口如何分配，都不会产生问题。</p>
<p>围观兄弟接下来肯定就有问题等着强叔了：在地址池<strong>只有一个公网IP</strong>情况下，如果访问<strong>相同的</strong>“目的地址+目的端口+协议”三元组时怎么办？现实可能就是这么残酷……<br>在内网不同用户访问相同的“目的地址+目的端口+协议”三元组时，不能被分配给相同的NAT地址和端口资源，这是因为一旦完全相同，访问的目的主机会发现出现同样的“源地址+源端口”访问本主机的同一“目的地址+端口+协议”，目的主机无法正确回应甚至可能会判定为受到攻击。</p>
<p>关键点来了！因此，保证内网不同用户、访问相同的“目的地址+目的端口+协议”三元组时，不能被分配到相同地址的相同端口资源是关键。这就要引入冲突检测机制。<br>其实在分配端口的法则上，我们仍然使用Hash算法，使得在内存占用合理情况下、尽可能保证被分配到相同公网地址的用户、其被分配的端口尽量不一致，简化的基本思路如下：<img src="http://support.huawei.com/ecommunity/showimage-10082241-10118533-d4a7ce46af7a521c3521c79d21375cf5.jpg" alt="img" loading="lazy"></p>
<p>这就保证了，不同内网户访问相同的 “目的地址+目的端口+协议”三元组，不会被分配到相同的NAT地址的端口资源。而且会话表是会实时老化的，被分配过的端口在会话表老化后会重新被利用，因此，概率上端口也不会受到限制。<br>除非最极端的情况发生：超过64k的内网用户，同一时刻、向外网同一目的主机的同一端口、采用同样协议发起链接。不过兄弟们觉不觉得很面熟，这看起来就是发起了传统而典型的DDoS攻击了吧-_-</p>
<p>好了，揭密到此，强叔已经全盘兜出了，大家是否已经了然于胸了？<br>其实原专利本身是晦涩难懂的，华为防火墙也在这么多年的发展中进行着不断演进，强叔只是对其基本实现原理进行了简单大意解读。若有对原专利感兴趣的小伙伴可自行谷歌：CN1567907A 一种网络地址资源的利用方法。</p>
]]></content>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>交换机的带宽线速概念</title>
    <url>/2019/04/24/19/</url>
    <content><![CDATA[<p>包转发率的计算－实例说明 100Mbit/s的以太网络，100M换算成byte则是100/8=12.5M byte/s，换算出来就是12500000bytes。</p>
<p> 因为在以太网的数据包中，最小的数据包的大小是64byte/s，加上8个byte的前导字节以及12个byte帧间间隙，合计就是84byte。 </p>
<p>那么用12500000/84=148809，所以就可以得到在100M吞吐量单向环境下的每秒最大的包转发个数148809，换算成k即为148.8k pps，也就是0.1488M pps。 0.1488M pps这个包转发率是100M的网络而言，那么1000M的网络，算出来的包转发率就应是1.488Mpps，对于10G网络对应的是14.88Mpps。 </p>
<p>下面，我按这个数值来验证一下H3C的交换机在其网站上公布的数据，是否满足全端口“线速转发”。</p>
<p> 1）设备：H3C S3600-28P-EI 公布包转发率：9.6Mpps 接口：24个10/100Base-TX以太网端口，4个1000Base-X SFP千兆以太网端口(就是24个100M＋4个1000M）计算：0.1488Mpps<em>24+1.488Mpps</em>4=3.5712Mpps+5.952Mpps=9.5232Mpps 结果9.5232Mpps &lt; 公布包转发率：9.6Mpps,满足全端口“线速转发”。</p>
<p> 2）设备：S5500-28C-EI 包转发率（整机）： 95.2Mpps 接口：24个10/100/1000Base-T以太网端口，4个复用的1000Base-X千兆SFP端口，2个扩展插槽（每个扩展插槽接口卡最大配置2×10G接口）；（也就是24<em>1000M＋2×2</em>10GE) 计算：1.488Mpps<em>24+14.88Mpps</em>2*2=35.712Mpps+59.52Mpps=95.232Mpps 结果95.232Mpps ＝包转发率（整机）： 95.2Mpps，满足全端口“线速转发”。 通过这样事例，可以清楚交换机厂商所公布的数据是“如何”的了吧！ 这是在二层交换上面所能达到的包转发率，但是如果一个路由器在三层路由上面，甚至在开启nat的情况下，其包转发率会有很大降低，而这个值才是值得关心的，所以我们在看到很多商家在一直强调包转发个数148810个包，其实这是二层交换的理论极限值，而不是真正的路由器在三层工作时候的值。 </p>
<p>交换机的背板带宽，是交换机接口处理器或接口卡和数据总线间所能吞吐的最大数据量。背板带宽标志了交换机总的数据交换能力，单位为Gbps，也叫交 换带宽，一般的交换机的背板带宽从几Gbps到上百Gbps不等。</p>
<p>一台交换机的背板带宽越高，所能处理数据的能力就越强，但同时设计成本也会越高。 一般来讲，计算方法如下: </p>
<p>1）线速的背板带宽 考察交换机上所有端口能提供的总带宽。计算公式为端口数<em>相应端口速率</em>2（全双工模式）如果总带宽≤标称背板带宽，那么在背板带宽上是线速的。</p>
<p> 2）第二层包转发线速 第二层包转发率=千兆端口数量×1.488Mpps+百兆端口数量<em>0.1488Mpps+其余类型端口数</em>相应计算方法，如果这个速率能≤标称二层包转发速率，那么交换机在做第二层交换的时候可以做到线速。 </p>
<p>3）第三层包转发线速 第三层包转发率=千兆端口数量×1.488Mpps+百兆端口数量<em>0.1488Mpps+其余类型端口数</em>相应计算方法，如果这个速率能≤标称三层包转发速率，那么交换机在做第三层交换的时候可以做到线速。 </p>
<p>那么，1.488Mpps是怎么得到的呢? 包 转发线速的衡量标准是以单位时间内发送64byte的数据包（最小包）的个数作为计算基准的。对于千兆以太网来说，计算方法如下：</p>
<p>1，000，000， 000bps/8bit/（64＋8＋12）byte=1,488,095pps </p>
<p>说明：当以太网帧为64byte时，需考虑8byte的帧头和12byte的帧间隙的固定开销。故一个线速的千兆以太网端口在转发64byte包时的包转 发率为1.488Mpps。快速以太网的统速端口包转发率正好为千兆以太网的十分之一，为148.8kpps。 *对于万兆以太网，一个线速端口的包转发率为14.88Mpps。 *对于千兆以太网，一个线速端口的包转发率为1.488Mpps。 *对于快速以太网，一个线速端口的包转发率为0.1488Mpps。 *对于OC－12的POS端口，一个线速端口的包转发率为1.17Mpps。 *对于OC－48的POS端口，一个线速端口的包转发率为468MppS。 </p>
<p>所以说，如果能满足上面三个条件，那么我们就说这款交换机真正做到了线性无阻塞 背 板带宽资源的利用率与交换机的内部结构息息相关。目前交换机的内部结构主要有以下几种：一是共享内存结构，这种结构依赖中心交换引擎来提供全端口的高性能 连接，由核心引擎检查每个输入包以决定路由。这种方法需要很大的内存带宽、很高的管理费用，尤其是随着交换机端口的增加，中央内存的价格会很高，因而交换 机内核成为性能实现的瓶颈；二是交叉总线结构，它可在端口间建立直接的点对点连接，这对于单点传输性能很好，但不适合多点传输；三是混合交叉总线结构，这 是一种混合交叉总线实现方式，它的设计思路是，将一体的交叉总线矩阵划分成小的交叉矩阵，中间通过一条高性能的总线连接。其优点是减少了交叉总线数，降低 了成本，减少了总线争用；但连接交叉矩阵的总线成为新的性能瓶颈。</p>
<p>背板带宽，是交换机接口处理器或接口卡和数据总线间所能吞吐的最大数据量。一台交换机的背板带宽越高，所能处理数据的能力就越强，但同时设计成本也会上去。<br>但是，我们如何去考察一个交换机的背板带宽是否够用呢？显然，通过估算的方法是没有用的，我认为应该从两个方面来考虑：<br>1、）所有端口容量X端口数量之和的2倍应该小于背板带宽，可实现全双工无阻塞交换，证明交换机具有发挥最大数据交换性能的条件。<br>2、）满配置吞吐量(Mpps)=满配置GE端口数×1.488Mpps其中1个千兆端口在包长为64字节时的理论吞吐量为1.488Mpps。例如，一台最多可以提供64个千兆端口的交换机，其满配置吞吐量应达到 64×1.488Mpps = 95.2Mpps，才能够确保在所有端口均线速工作时，提供无阻塞的包交换。如果一台交换机最多能够提供176个千兆端口，而宣称的吞吐量为不到261.8Mpps(176 x 1.488Mpps = 261.8)，那么用户有理由认为该交换机采用的是有阻塞的结构设计。一般是两者都满足的交换机才是合格的交换机。</p>
<p>比如：<br>2950G-48<br>背板＝2×1000×2＋48×100×2(Mbps)＝13.6(Gbps)<br>相当于13.6/2=6.8个千兆口<br>吞吐量=6.8×1.488=10.1184Mpps</p>
<p>4506<br>背板64G<br>满配置千兆口<br>4306×5＋2（引擎）＝32<br>吞吐量＝32×1.488=47.616 </p>
<p>一般是两者都满足的交换机才是合格的交换机。 </p>
<p>背板相对大，吞吐量相对小的交换机，除了保留了升级扩展的能力外就是软件效率或专用芯片电路设计有问题；背板相对小。吞吐量相对大的交换机，整体性能比较高。不过背板带宽是可以相信厂家的宣传的，可吞吐量是无法相信厂家的宣传的，因为后者是个设计值，测试 很困难的并且意义不是很大。 </p>
<p>交换机的背版速率一般是：Mbps,指的是第二层，<br>对于三层以上的交换才采用Mpps</p>
<p>背板带宽资源的利用率与交换机的内部结构息息相关。目前交换机的内部结构主要有以下几种：一是共享内存结构，这种结构依赖中心交换引擎来提供全端口的高性能连接，由核心引擎检查每个输入包以决定路由。这种方法需要很大的内存带宽、很高的管理费用，尤其是随着交换机端口的增加，中央内存的价格会很高，因而交换机内核成为性能实现的瓶颈；二是交叉总线结构，它可在端口间建立直接的点对点连接，这对于单点传输性能很好，但不适合多点传输；三是混合交叉总线结构，这是一种混合交叉总线实现方式，它的设计思路是，将一体的交叉总线矩阵划分成小的交叉矩阵，中间通过一条高性能的总线连接。其优点是减少了交叉总线数，降低了成本，减少了总线争用；但连接交叉矩阵的总线成为新的性能瓶颈。</p>
<h2 id="来自：http-blog-csdn-net-shanzhizi"><a href="#来自：http-blog-csdn-net-shanzhizi" class="headerlink" title="来自：http://blog.csdn.net/shanzhizi"></a>来自：<a href="http://blog.csdn.net/shanzhizi">http://blog.csdn.net/shanzhizi</a></h2>]]></content>
      <tags>
        <tag>有线</tag>
      </tags>
  </entry>
  <entry>
    <title>动态路由之OSPF和RIP协议实现全网互连互通</title>
    <url>/2019/04/24/20/</url>
    <content><![CDATA[<blockquote>
<p>动态路由是指路由器能够自动地建立自己的路由表，并且能够根据实际情况的变化适时地进行调整。</p>
</blockquote>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>动态路由是与静态路由相对的一个概念，指路由器能够根据路由器之间的交换的特定路由信息自动地建立自己的路由表，并且能够根据链路和节点的变化适时地进行自动调整。当网络中节点或节点间的链路发生故障，或存在其它可用路由时，动态路由可以自行选择最佳的可用路由并继续转发报文。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>动态路由机制的运作依赖路由器的两个基本功能:路由器之间适时的路由信息交换，对路由表的维护:</p>
<ol>
<li>路由器之间适时地交换路由信息。<br>动态路由之所以能根据网络的情况自动计算路由、选择转发路径，是由于当网络发生变化时，路由器之间彼此交换的路由信息会告知对方网络的这种变化，通过信息扩散使所有路由器都能得知网络变化。</li>
<li>路由器根据某种路由算法(不同的动态路由协议算法不同)把收集到的路由信息加工成路由表，供路由器在转发IP报文时查阅。<br>在网络发生变化时，收集到最新的路由信息后，路由算法重新计算，从而可以得到最新的路由表。</li>
</ol>
<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><h3 id="RIP"><a href="#RIP" class="headerlink" title="RIP"></a>RIP</h3><blockquote>
<p>路由信息协议(RIP) 是内部网关协议IGP中最先得到广泛使用的协议。RIP是一种分布式的基于距离向量的路由选择协议，是因特网的标准协议，其最大优点就是实现简单，开销较小。</p>
<h3 id="OSPF"><a href="#OSPF" class="headerlink" title="OSPF"></a>OSPF</h3><p>OSPF(Open Shortest Path First开放式最短路径优先)是一个内部网关协议(Interior Gateway Protocol，简称IGP)，用于在单一自治系统(autonomous system,AS)内决策路由。</p>
<h3 id="IS-IS"><a href="#IS-IS" class="headerlink" title="IS-IS"></a>IS-IS</h3><p>IS-IS(Intermediate System-to-Intermediate System，中间系统到中间系统)路由协议最初是ISO(the International Organization for Standardization，国际标准化组织)为CLNP(Connection Less Network Protocol，无连接网络协议)设计的一种动态路由协议。</p>
<h3 id="BGP"><a href="#BGP" class="headerlink" title="BGP"></a>BGP</h3><p>边界网关协议(BGP)是运行于 TCP 上的一种自治系统的路由协议。 BGP 是唯一一个用来处理像因特网大小的网络的协议，也是唯一能够妥善处理好不相关路由域间的多路连接的协议。</p>
</blockquote>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>1、无需管理员手工维护，减轻了管理员的工作负担。</p>
<p>2、占用了网络带宽。</p>
<p>3、在路由器上运行路由协议，使路由器可以自动根据网络拓朴结构的变化调整路由条目;</p>
<p>4、网络规模大、拓扑复杂的网络</p>
<h2 id="配置实验"><a href="#配置实验" class="headerlink" title="配置实验"></a>配置实验</h2><p><em>实验拓扑图</em></p>
<p><img src="https://note.youdao.com/yws/api/personal/file/7EF32717E59A4AD48A630893FD8B3CA3?method=download&shareKey=f40b2ce6fd86733a0dcd2f46749cb56f" alt="image" loading="lazy"></p>
<p><em>配置过程</em></p>
<p><strong>R1路由器的配置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R1#conf t</span><br><span class="line">R1(config)#int f0&#x2F;0</span><br><span class="line">R1(config-if)#ip add 192.168.20.2 255.255.255.0</span><br><span class="line">R1(config-if)#no shut    &#x2F;&#x2F;f0&#x2F;0接口配置IP地址并且开启</span><br><span class="line"></span><br><span class="line">R1(config-if)#int f0&#x2F;1</span><br><span class="line">R1(config-if)#ip add 192.168.30.1 255.255.255.0</span><br><span class="line">R1(config-if)#no shut    &#x2F;&#x2F;f0&#x2F;1接口配置IP地址并且开启</span><br><span class="line"></span><br><span class="line">R1(config)#ip route 192.168.10.0 255.255.255.0 192.168.20.1        &#x2F;&#x2F;配置到192.168.10.0网段的静态路由</span><br><span class="line"></span><br><span class="line">R1(config)#router ospf 1    &#x2F;&#x2F;开启ospf协议</span><br><span class="line">R1(config-router)#network 192.168.30.0 255.255.255.0 area 1      &#x2F;&#x2F;在area 1 宣告192.168.30.0网段</span><br><span class="line">R1(config-router)#redistribute static subnets     &#x2F;&#x2F;重分发静态路由</span><br><span class="line">R1(config-router)#redistribute connected subnets    &#x2F;&#x2F;重分发直连网段</span><br></pre></td></tr></table></figure>

<p><strong>R2路由器的配置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R2#conf t</span><br><span class="line">R2(config)#int f0&#x2F;0</span><br><span class="line">R2(config-if)#ip add 192.168.10.1 255.255.255.0</span><br><span class="line">R2(config-if)#no shut     &#x2F;&#x2F;f0&#x2F;0接口配置IP并且开启</span><br><span class="line"></span><br><span class="line">R2(config)#int f0&#x2F;1</span><br><span class="line">R2(config-if)#ip add 192.168.20.1 255.255.255.0</span><br><span class="line">R2(config-if)#no shut     &#x2F;&#x2F;f0&#x2F;1接口配置IP并且开启</span><br><span class="line"></span><br><span class="line">R2(config)#ip route 0.0.0.0 0.0.0.0 192.168.20.2     &#x2F;&#x2F;配置默认路由</span><br></pre></td></tr></table></figure>

<p><strong>R3路由器的配置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R3#conf t</span><br><span class="line">R3(config)#int f0&#x2F;0</span><br><span class="line">R3(config-if)#ip add 192.168.30.2 255.255.255.0</span><br><span class="line">R3(config-if)#no shut     &#x2F;&#x2F;f0&#x2F;0接口配置IP并且开启</span><br><span class="line"></span><br><span class="line">R3(config)#int f0&#x2F;1</span><br><span class="line">R3(config-if)#ip add 192.168.40.1 255.255.255.0</span><br><span class="line">R3(config-if)#no shut     &#x2F;&#x2F;f0&#x2F;1接口配置IP并且开启</span><br><span class="line"></span><br><span class="line">R3(config)#int f1&#x2F;1</span><br><span class="line">R3(config-if)#no switchport    &#x2F;&#x2F;开启路由功能</span><br><span class="line">R3(config-if)#ip add 12.0.0.1 255.255.255.0       </span><br><span class="line">R3(config-if)#no shut       &#x2F;&#x2F;f1&#x2F;1接口配置IP并且开启</span><br><span class="line"></span><br><span class="line">R3(config)#int f1&#x2F;0</span><br><span class="line">R3(config-if)#no switchport</span><br><span class="line">R3(config-if)#ip add 192.168.70.1 255.255.255.0      </span><br><span class="line">R3(config-if)#no shut     &#x2F;&#x2F;f1&#x2F;0接口配置IP并且开启</span><br><span class="line"></span><br><span class="line">R3(config)#router ospf 1       &#x2F;&#x2F;开启ospf协议</span><br><span class="line">R3(config-router)#network 192.168.30.0 255.255.255.0 area 1      &#x2F;&#x2F;在area 1 宣告192.168.30.0网络</span><br><span class="line">R3(config-router)#network 192.168.40.0 255.255.255.0 area 0      &#x2F;&#x2F;在area 0 宣告192.168.40.0网络</span><br><span class="line">R3(config-router)#network 192.168.70.0 255.255.255.0 area 0      &#x2F;&#x2F;在area 0 宣告192.168.70.0网络</span><br><span class="line">R3(config-router)#ex </span><br><span class="line"></span><br><span class="line">R3(config)#ip route 0.0.0.0 0.0.0.0 12.0.0.2     &#x2F;&#x2F;配置默认路由</span><br><span class="line"></span><br><span class="line">R3(config)#router ospf 1</span><br><span class="line">R3(config-router)#default-information originate    &#x2F;&#x2F;重分发默认路由</span><br></pre></td></tr></table></figure>

<p><strong>R4路由器的配置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R4#conf t</span><br><span class="line">R4(config)#int f0&#x2F;0</span><br><span class="line">R4(config-if)#ip add 192.168.40.2 255.255.255.0</span><br><span class="line">R4(config-if)#no shut     &#x2F;&#x2F;f0&#x2F;0接口配置IP并且开启</span><br><span class="line"></span><br><span class="line">R4(config)#int f0&#x2F;1</span><br><span class="line">R4(config-if)#ip add 192.168.50.1 255.255.255.0</span><br><span class="line">R4(config-if)#no shut     &#x2F;&#x2F;f0&#x2F;1接口配置IP并且开启</span><br><span class="line"></span><br><span class="line">R4(config)#router ospf 1     &#x2F;&#x2F;开启ospf协议</span><br><span class="line">R4(config-router)#network 192.168.40.0 255.255.255.0 area 0    &#x2F;&#x2F;在area 0 宣告192.168.40.0网段</span><br><span class="line"></span><br><span class="line">R4(config)#router rip    &#x2F;&#x2F;开启rip协议</span><br><span class="line">R4(config-router)#version 2    &#x2F;&#x2F;选择版本2</span><br><span class="line">R4(config-router)#network 192.168.50.0   &#x2F;&#x2F;宣告192.168.50.0网段</span><br><span class="line">R4(config-router)#no auto-summary    &#x2F;&#x2F;关闭路由汇总</span><br><span class="line">R4(config-router)#ex</span><br><span class="line"></span><br><span class="line">R4(config)#router ospf 1  </span><br><span class="line">R4(config-router)#redistribute rip subnets   &#x2F;&#x2F;在ospf协议中重分发RIP</span><br><span class="line"></span><br><span class="line">R4(config)#router rip</span><br><span class="line">R4(config-router)#redistribute ospf 1 metric 3     &#x2F;&#x2F;在RIP协议中重分发ospf，跳数为3 （这里3-5最合适）</span><br><span class="line">R4(config-router)#ex</span><br></pre></td></tr></table></figure>

<p><strong>R5（ISP运营商）的配置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ISP#conf t</span><br><span class="line">ISP(config)#int f0&#x2F;0</span><br><span class="line">ISP(config-if)#ip add 12.0.0.2 255.255.255.0</span><br><span class="line">ISP(config-if)#no shut     &#x2F;&#x2F;f0&#x2F;0配置IP并且开启</span><br><span class="line">ISP(config-if)#ex</span><br><span class="line"></span><br><span class="line">ISP(config)#int f0&#x2F;1</span><br><span class="line">ISP(config-if)#ip add 13.0.0.1 255.255.255.0</span><br><span class="line">ISP(config-if)#no shut      &#x2F;&#x2F;f0&#x2F;1配置IP并且开启                 </span><br><span class="line">ISP(config-if)#ex</span><br><span class="line"></span><br><span class="line">ISP(config)#ip route 0.0.0.0 0.0.0.0 12.0.0.1     &#x2F;&#x2F;配置默认路由</span><br></pre></td></tr></table></figure>

<p><strong>R6路由器的配置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R6#conf t</span><br><span class="line">R6(config)#int f0&#x2F;0</span><br><span class="line">R6(config-if)#ip add 192.168.50.2 255.255.255.0</span><br><span class="line">R6(config-if)#no shut      &#x2F;&#x2F;f0&#x2F;0接口配置IP并且开启</span><br><span class="line">R6(config-if)#ex</span><br><span class="line"></span><br><span class="line">R6(config)#int f0&#x2F;1</span><br><span class="line">R6(config-if)#ip add 192.168.60.1 255.255.255.0</span><br><span class="line">R6(config-if)#no shut       &#x2F;&#x2F;f0&#x2F;1接口配置IP并且开启</span><br><span class="line">R6(config-if)#ex </span><br><span class="line"></span><br><span class="line">R6(config)#router rip       &#x2F;&#x2F;开启RIP协议</span><br><span class="line">R6(config-router)#version 2     &#x2F;&#x2F;选择版本2</span><br><span class="line">R6(config-router)#network 192.168.50.0   &#x2F;&#x2F;在RIP协议中宣告192.168.50.0网段</span><br><span class="line">R6(config-router)#network 192.168.60.0    &#x2F;&#x2F;宣告192.168.60.0网段</span><br><span class="line">R6(config-router)#no auto-summary    &#x2F;&#x2F;关闭路由汇总</span><br><span class="line">R6(config-router)#ex</span><br></pre></td></tr></table></figure>

<p>配置完毕后我们逐个查看路由器的路由表</p>
<p>R1路由器的路由表</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/456D5AF6176E4AC9876CEF7E0C4D9508?method=download&shareKey=2c99c93c548c7c67770aba3fadbe9008" alt="image" loading="lazy"></p>
<p>R2路由器的路由表</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/F3613B0C847B4629B5A69BFC7853993A?method=download&shareKey=fca9ec9950ab27b620be183b84095403" alt="image" loading="lazy"></p>
<p>R3路由器的路由表</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/8179F5E6FB7F4AD58DF46E06D6524DC6?method=download&shareKey=d3fff9a5c9c1d73da6edbf7deb470d37" alt="image" loading="lazy"></p>
<p>R4路由器的路由表</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/BEAB55C59DFA40819F155D5C55BD6747?method=download&shareKey=adb22cd4592b75896c7580d2b81bf7f9" alt="image" loading="lazy"></p>
<p>R5（ISP）路由器的路由表</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/072C0C52E3F94AE7BA701A74D0295D8F?method=download&shareKey=ff0d0f51b4f9f01f7bb5980f62a0eb10" alt="image" loading="lazy"></p>
<p>R6路由器的路由表</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/A34AE9A2BF0046F199D7C8438DF29857?method=download&shareKey=5015a670f6901ac57e4b244a6819469a" alt="image" loading="lazy"></p>
<p><strong>好，接下来我们使用vpcs配置四台pc机的IP进行全网互通的验证</strong></p>
<p><img src="https://note.youdao.com/yws/api/personal/file/5A81CDE335244B7595E362A4E0292D14?method=download&shareKey=e6fde6d96c50c83b5cd916e89dab661f" alt="image" loading="lazy"></p>
<p><img src="https://note.youdao.com/yws/api/personal/file/1CEF65F33D3C4159AA35AD7E6CA0744A?method=download&shareKey=02bef39680d597fcb88cccdccdbfdf1b" alt="image" loading="lazy"></p>
]]></content>
  </entry>
  <entry>
    <title>连风都知道我爱你</title>
    <url>/2019/04/24/22/</url>
    <content><![CDATA[<p>我爱你，又很遗憾没人证明</p>
<p>我爱你，希望有一天可以和你一起保护水晶</p>
<p>我爱你，就算你满嘴谎言 仍有我痴情不改变</p>
<p>我爱你，就算你一身污秽如刺猬 也有我双手拥抱不忌讳</p>
<p>我爱你，原谅我只有遇见你的勇气 却没有得到你的本事</p>
<p>我爱你，你用半生温柔相濡以沫陪我赌 我又怎么可能让你输</p>
<p>我爱你，好想学一种可以伴你一生的咒语哪怕是做你的宠物狗也可以</p>
<p>我爱你，如果我此生只能给你拥抱和不放开你的手 你愿不愿意跟我走 </p>
<p>我爱你，也想把这世界上所有快乐都与你共享 哪怕被你折磨得 遍体鳞伤</p>
<p>我爱你，一直都很爱 只是你离开后我偶尔也会喜欢他人 在他人像你的时候</p>
<p>我爱你，愿你所有的温柔都能换来岁月的情深意浓 可以不必回首 相扶白头 </p>
<p>我爱你，他们说世界上海最深邃 干净又透明 我想那是他们没见过你的眼睛</p>
<p>我爱你，为了寻找你 我搬进鸟的眼睛 经常盯着路过的风 也忘了听猎人的枪声</p>
<p>我爱你，希望你可以把自己挂在淘宝上 因为你们淘宝承诺过 淘宝 要淘我喜欢</p>
<p>我爱你，等你时 我觉得一日不见 如隔三秋 你朝我笑 我又觉得 三秋未见 不过一日</p>
<p>我爱你，无论世界多污秽 有多少虚伪不纯粹 都有我在你身边 拼死给你一方碧海蓝天</p>
<p>我爱你，又很遗憾没人能证明 可这份爱已经如鲸向海 如鸟投林 无可避免 退无可退了</p>
<p>我爱你，如果有一天你觉的越相爱越是场意外 那就请你悄悄在月光下 找个男孩把我取代 </p>
<p>我爱你，请帮我叫一辆滴滴 目的地就定在你怀里 从此沿途的每一处风景 都是越来越近的你</p>
<p>我爱你，愿往后的时光都是崭新的 去记录 去寻找 去做梦 愿我们都能成为 自己想成为的人</p>
<p>我爱你，别为了不属于你的观众 演绎你不擅长的人生 反正谢幕后的每次相逢 都有我捧着鲜花 把你拥入怀中 </p>
<p>我爱你，我听过最动听的情歌 是你轻哼的摇篮曲 最可口的美食 是你做的烧带鱼 你用毕生温柔 却只盼我无忧一世 </p>
<p>我爱你，好希望当你离开的那天可以踩中我偷偷埋好的地雷 这样我们就能永远在一起了 反正你走一步就会死 我离开你也活不了</p>
<p>我爱你，可我们总是用最恶毒的话 去伤害最爱的人 然后再用最深的忏悔去挽回 感情就在这样的循环里撕扯和消磨 慢慢变得无迹可寻了 我们就这样在嘶吼里告别 就像那些美好从未发生过 一切都会消失的 感情也是 一切都是需要守护的 感情尤其是</p>
<p>#我爱你，找机会把这三个字还给我吧<br>#别忘了我爱你 如果有一天 你一无所有 我是你最后一件行李 我们永远不再见<br>#我爱你 是你给了故事开头 太过惊心动魄 也让我忘了看 我们结局是老死不相往来 没联络</p>
<p>via 酷酷的滕<br>整理 澈崽子<br>2017.5.20</p>
]]></content>
      <tags>
        <tag>自嘲</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络面试题</title>
    <url>/2019/04/24/23/</url>
    <content><![CDATA[<ul>
<li>面试题一：网络掩码<br>答：这个可以算~</li>
<li>面试题二：详细描述ping的工作过程<br>答：可以分为两种情况</li>
</ul>
<ol>
<li><p>同一网段</p>
<p>1 机器A的ping进程通知系统去建立一个icmp的请求数据包，目的地址是B</p>
<p>2 icmp协议打包这个数据包 同时将B的IP地址封装给IP协议层</p>
<p>3 IP协议层再将机器B的IP地址作为目的地址 本机的IP地址作为源地址 加上其他控制信息 构建IP数据包</p>
<p>4 那么如何获取机器B的MAC地址呢？</p>
<p>​    1 机器A的IP层协议通过机器B的IP地址和自己的子网掩码进行运算，发现机器B和自己同属同一网络就直接在本网络中查找这台机器的mac地址，这时又分为两台主机之间是否有过通讯 若之间有过通讯 则在机器A的ARP缓存表中查找B的MAC地址与B的IP地址的映射关系 若没有则发送全网段的ARP广播平得到机器B的MAC地址 提交给数据链路层</p>
<p>​    2 数据链路层构建数据帧 目的地址是IP层传过来的MAC地址 源地址是机器A的MAC地址 按照以太网的访问规则传送出去</p>
<p>​    3 机器B收到这个数据帧后 先检查目的地址 并与本机的mac地址做对比 若是符合 则接收 接收后检查该数据帧，将IP数据包从帧中提取出来，交给本机的IP协议层协议。IP层检查后，将有用的信息提取交给ICMP协议，后者处理后，马上构建一个ICMP应答包，发送给主机A，其过程和主机A发送ICMP请求包到主机B类似（这时候主机B已经知道了主机A的MAC地址，不需再发ARP请求） 不符合则丢弃</p>
</li>
<li><p>不同网段</p>
<p>1 涉及到路由和网关 ARP 主机AB运算后发现不同网段 则将数据包交个网关处理</p>
</li>
</ol>
<ul>
<li><p>面试题三：VLAN 802.1Q<br>答：VLAN可以为网络提供以下作用：</p>
<ul>
<li>广播控制</li>
<li>带宽利用</li>
<li>降低延迟</li>
<li>安全性（非设计作用，本身功能所附加出的）</li>
</ul>
</li>
<li><p>面试题四：OSPF协议邻接关系状态<br>答：邻居关系和邻接关系是两种不同的关系，邻接关系的建立是在邻居关系建立的基础之上。</p>
<p>邻居关系</p>
<p>OSPF邻居关系的建立，是通过协商Hello包中的参数来实现的。在Init状态，收到邻居的Hello包，并把其当做邻居，将其router-id添加在自己的Hello包中发送，邻居收到后，双方建立two-way状态，形成稳定的邻居关系。邻居关系建立之后，形成邻居表。</p>
<p>邻接关系</p>
<p>OSPF邻接关系的建立，始于Exstart状态，在Full状态，维持稳定的邻接关系。</p>
<p>邻接关系区别于邻居关系，邻居关系是只要Hello包中的参数协商成功，就建立。而邻接关系，是指两个启用了OSPF协议的路由器之间能够实现LSDB的同步。在Exstart状态，确定LSDB同步的主从关系，在Exchange状态，进行LSDB的交互。在Loading状态通过LSR、LSU、LSAck报文来进行LSDB的同步，同步完成，最终达到Full状态，形成完整的拓扑表(LSDB)。最终根据拓扑表，把最优条目放进转发表，形成最后的路由表。</p>
<p>路由汇聚</p>
<p>路由的汇聚，是根据路由表进行的。把多个带有相同类型子网的路由汇聚成一条路由，减小路由表，降低路由器开销。具体的路由条目必须要存在于路由表中，否则不能进行路由汇聚。</p>
<p>路由汇聚时使用LSU进行更新，使用LSAck报文进行确认。</p>
</li>
<li><p>面试题五：OSPF LSA<br>答：<a href="https://www.zhang-zhe.cn/2019/04/25/26/">https://www.zhang-zhe.cn/2019/04/25/26/</a> </p>
</li>
<li><p>面试题六：BGP状态周期Flapping<br>答：</p>
</li>
<li><p>面试题七：有状态防火墙<br>答：</p>
</li>
<li><p>面试题八：多个VLAN桥接<br>答：</p>
</li>
<li><p>面试题九：NAT设备后多个L2TP客户端只能与VPN Gateway建立一个连接<br>答：</p>
</li>
<li><p>面试题十：多级NAT通信故障<br>答：</p>
</li>
<li><p>面试题十一： TCP Keep-alive，NAT Timeout<br>答：</p>
</li>
<li><p>面试题十二：MTU Discovery<br>答：</p>
</li>
<li><p>面试题十三：ICMP出错消息如何寻找进程<br>答：</p>
</li>
<li><p>面试题十四：用户拨虚拟私有网络却失去了Internet连接<br>答：</p>
</li>
<li><p>面试题十五：用户抱怨网络慢<br>答：</p>
</li>
</ul>
<p>整理自知乎车小胖的live</p>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>20岁无资本无未来</title>
    <url>/2019/04/24/24/</url>
    <content><![CDATA[<p>​    你学习一般，考上了现在的这所学校，成绩不算好，拿不到奖学金，上课不听讲，上自习不规律，考试靠突击，同学帮一把的话也能每科考到七八十分，但是与优秀总有很大距离。<br>​    你家境一般，父母都是普通员工，你在这个城市的生活费是每月一千二，没事下下馆子，一个月添件衣服，想买台相机，咬咬牙才能买双自己喜欢的鞋。<br>​    你几乎没有特长，不会弹吉他，不会弹钢琴，不会跳舞，不会画画，想学摄影却不会使用图片处理软件，想上台演出却没信心，学校晚会比赛的时候，你经常是站在台下围观的人群里的一员，你与聚光灯环绕的舞台几乎绝缘。<br>​    你长相一般，不算英俊或者不算美丽，身材不算臃肿但也没什么肌肉或者没什么曲线，平时只是稍稍打扮一下，看上去并不出众，只能算整洁，与人擦肩而过是对方不会多留意你一眼。<br>​    你的感情也是一般，有时候会遇见自己心仪的那个人，但是总抓不住机会，眨眼间那个人就被其他人俘获，你就开始伤心、抱怨，但是几天之后又开始寻找新的心上人，就这样看着一个个心上人走过，直到你毕业，与其中任何一个都没有发展。 总之，你没有什么特别的地方 ，就和周围的千万个普通人一样。<br>​    你不甘心拿不到奖学金，看见别人得奖学金的时候你会说那完全是突击的结果，于是你开始上自习，不过你只坚持了一星期。<br>​    你不甘心自己的父辈平平，于是你批评讽刺自己周围的“官二代”、“富二代”，立志要努力学习争取成功，也好让自己的孩子成为“富二代”，你的热情持续了一个星期。<br>​    你不甘心自己什么特长都没有，于是你开始学弹吉他、买滑轮鞋、借来摄影方面的书籍，你对着镜子微笑着说：“你是最棒的。” 这份虚假的信心维持了一个星期。<br>​    你不甘心自己没有伴侣，你决心洗心革面重新做人，你删掉电脑里的偶像剧肥皂剧，你收拾起床上的懒人桌，把零食袋子统统扔掉，然后洗了个澡并且修饰了一下自己，你往发型上喷了啫喱水，好让自己看起来很精神，你怀揣着一本成功学的书决定出去走走，开始新的生活。这样的状态，你稀稀拉拉地坚持了一个星期。<br>​    一个星期之后，你还是和周围千万个人一样，你还是和一星期前的自己一样。<br>​    你逛网络论坛，看到了这样一句话：“二十岁是人生最美好的时光，不应该局限在学校里教室里，应该享受生活。” 于是你相信了，你觉得二十岁的你就应该“随心所欲”，享受“人生中最后的自由时光”；就应该“快乐地去恋爱”“风华正茂”“挥斥方遒”······<br>​    现在的你，用着父母的血汗钱，用着名牌包、穿着名牌跑鞋、骑着捷安特山地车、用着佳能牌的相机和苹果牌的手机，还经常去星巴克喝喝咖啡体验一下小资情调······<br>​    那么，请允许我猜测一下你的未来——<br>​    在大四将要结束时，你考研落榜。你风风火火的参加校园招聘会，很多公司你都看不上，嫌他们不是体制内单位、平台窄、规模小，直到毕业，你还没有找到心仪的工作。你收拾好行李回到老家，父母让你试着参加各种招聘考试或者参加当地的应聘会，你不去，因为你觉得那些工作太简单了，不适合你，你应该去寻找更好的就业机会。可是，当你去那些你看得上的公司应聘时，你的竞争对手太多了，而且都不差，你表现平平，理所当然地被拒之门外······<br>​    现在的你，也许还在上大学，也许和恋人恩恩爱爱，每天黏在一起，午饭晚饭一起去吃，晚自习后还会一起在操场散步。你们讨论起未来，最后的结论总是：不要想得太多，认真过好现在就好。 不幸运的话，几个月后，你们就分手了，你凄凄惨惨戚戚，反复问自己究竟哪里做错了；幸运的话，你们会一直恋爱到毕业，最终，你绝得自己不够优秀没能力去对方所在的城市读研或者工作，所以你们带着不舍和悔恨分手了。<br>​    现实很残酷，至此，你信了。<br>​    现在的你喜欢刷微博，你会全力支持那些你赞同的观点，你会激励否定那些你反对的观点。你爱憎分明，看起来很有正义感。你觉得血气方刚的年轻人就应该敢于说出自己的心声。你可能从来不会去想一个问题：你的观点，来自哪里？其实，它们绝大部分来自网络，它们已经蚕食了你的判断力。<br>现在，我只想问你一个问题：二十岁的你，有什么资本。<br>​    你只是千千万万人中微不足道的一个人，少了你，地球还是一样会转。<br>​    我敢打赌，一定很久没人和你说过“吃得苦中苦，方为人上人”这句话了吧？<br>​    你知道“责任”两个字是怎么写的吗?<br>​    当你谈论飞翔的时候，你是不是忘记了地心引力的存在？<br>​    现在的你，如果还是放纵着自己的懒惰与幼稚，虚度着光阴，那么，你就虚度去吧。反正我已经    过了二十岁的年纪，我还有未来，我得直奔向前了，不陪你了。<br>​    再见 </p>
<p>——华文《20岁无资本无未来》</p>
]]></content>
      <tags>
        <tag>自嘲</tag>
      </tags>
  </entry>
  <entry>
    <title>2018年总结</title>
    <url>/2018/12/31/25/</url>
    <content><![CDATA[<p>2018年是充满收获的一年 也是充满坎坷的一年 自己从身份上完成了从学生到社会人的转变 心智也相对成熟 感谢在18年中给我帮助的同仁 同事和朋友 更感谢在生活工作中出现的贵人 但同时也鄙视一下出现在我生活中的傻逼们 但是正是由于有这些形形色色的人的出现 才让我更加快速的成长 感谢遇见 感恩<br>2019年新的一年 自己又长了一岁 希望自己各方面都能有所收获 本命年的一年 24岁的年龄 和前辈们相比是否能够沿着他们的足迹 亦或是能够更加出色 找准自己的定位 在职场 情场 各种场上不在那么衰 不在失意 最重要的是努力加油 ~<br>最近有说法 2018年是过去十年最差的一年 却将会是未来十年最好的一年 看到大街上熙熙攘攘的人群 每个人都在为自己奋斗 加油 ！<br>之前 总喜欢挂在嘴边的念念不忘 必有回响今天后面加一句 愿自己</p>
<p>日益努力 而后风生水起</p>
<p>再转个老工程师发朋友圈的感言：</p>
<blockquote>
<p>最近和一些朋友聊天，发现不少人对新技术革命推崇备至，对传统技术有错误的认知，借此机会我来纠正一些朋友对IT从业人员必备技能的错误认知[呲牙]  软件定义一切和虚拟化极大简化了业务系统部署和管理，自然包括极其重要的底层网络虚拟化，有些朋友认为学习传统网络协议如BGP, OSPF, MPLS，ECMP，LACP等等，通过CCIE，HCIE等认证不再有任何意义了，这是一个极其错误的认知，我觉得有义务做一个科普，避免误导想进入这一行的年轻人。网络虚拟化实现都是采用Overlay技术构建在Underlay IP网络之上，各种路由协议不但没有消亡，而是焕发了新的青春。为了满足快速增长的虚拟化的性能需求，下一代数据中心的高度可扩展的分布式核心架构，就是常说的Spine-and-leaf架构，可以支持成千上万物理服务器，在Leaf和Spine之间跑eBGP 是常见配置，通过EVPN address family 交换节点L2,L3可达信息，这也是BGP设计之初没想到的用法吧，为了适应SDN发展的Segment Routing也是在IS-IS和OSPF两个堂兄弟的基础上稍做扩展来实现，可轻松配合MPLS VPN网络无缝衔接，作为IT业者，掌握各种传统路由协议，例如MP-BGP自然是必备的技能，协议本身的高度可扩展性使它们永葆青春，与时俱进。还在学习网络技能的兄弟们，继续努力，你们学到知识大有可为，基础路由协议和SDN，虚拟化并不矛盾，相反，它是一切虚拟化方案依赖的基础，没有底层Underlay IP基础网络，一切虚拟化都是空中楼阁，镜花水月！希望本文对想入行的年轻人有参加价值，不要被各种宣传迷惑了双眼，迷失了方向！认同的点个赞[呲牙]</p>
</blockquote>
]]></content>
      <tags>
        <tag>自嘲</tag>
      </tags>
  </entry>
  <entry>
    <title>华为交换机端口无法UP故障排查思路 光衰查看</title>
    <url>/2019/04/28/28/</url>
    <content><![CDATA[<p><strong>一、电口无法UP</strong></p>
<p>1、故障现象</p>
<p>​    网线相连的两个电口无法UP。</p>
<p>2、故障处理步骤</p>
<p>​    请保存以下步骤的执行结果，以便故障无法解决时快速收集和反馈信息。</p>
<p>​    2.1、检查端口是否被shutdown。首先检查故障端口有没有被shutdown或被拔掉网线，如果有shutdown的端口，则执行undo shutdown。</p>
<p>​    2.2、检查两端端口配置。检查两端电口的端口配置是否正确： 两边端口的速率、双工模式要一致；两边的自协商状态要一致，确保均工作在自协商模式下或者是非自协商模式下。</p>
<p>​    个别厂家设备跟华为交换机互连可能自协商不能link up，这时请将两端端口都尝试设置成强制方式。</p>
<p>​    2.3、检查MDI设置。MDI有三种模式，和网线是否是交叉网线有关，如果不确认网线类型，则将两端配置为auto模式。这三种模式对接的结果如下表1和下表2所示。</p>
<table>
<thead>
<tr>
<th>表1 平行网线对接表</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>平行网线</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>对接前电口MDI设置</td>
<td>对接后状态</td>
<td></td>
<td></td>
</tr>
<tr>
<td>端口A</td>
<td>端口B</td>
<td>端口A</td>
<td>端口B</td>
</tr>
<tr>
<td>GE电口AUTO</td>
<td>GE电口AUTO</td>
<td>UP</td>
<td>UP</td>
</tr>
<tr>
<td>FE电口AUTO</td>
<td>FE电口AUTO</td>
<td>UP</td>
<td>UP</td>
</tr>
<tr>
<td>FE电口AUTO</td>
<td>FE电口NORMAL</td>
<td>UP</td>
<td>UP</td>
</tr>
<tr>
<td>FE电口AUTO</td>
<td>FE电口ACROSS</td>
<td>UP</td>
<td>UP</td>
</tr>
<tr>
<td>FE电口ACROSS</td>
<td>FE电口NORMAL</td>
<td>UP</td>
<td>UP</td>
</tr>
<tr>
<td>FE电口ACROSS</td>
<td>FE电口ACROSS</td>
<td>DOWN</td>
<td>DOWN</td>
</tr>
<tr>
<td>FE电口NORMAL</td>
<td>FE电口NORMAL</td>
<td>DOWN</td>
<td>DOWN</td>
</tr>
<tr>
<td>表2 交叉网线对接表</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>交叉网线</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>对接前电口MDI设置</td>
<td>对接后状态</td>
<td></td>
<td></td>
</tr>
<tr>
<td>端口A</td>
<td>端口B</td>
<td>端口A</td>
<td>端口B</td>
</tr>
<tr>
<td>GE电口AUTO</td>
<td>GE电口AUTO</td>
<td>UP</td>
<td>UP</td>
</tr>
<tr>
<td>FE电口AUTO</td>
<td>FE电口AUTO</td>
<td>UP</td>
<td>UP</td>
</tr>
<tr>
<td>FE电口AUTO</td>
<td>FE电口NORMAL</td>
<td>UP</td>
<td>UP</td>
</tr>
<tr>
<td>FE电口AUTO</td>
<td>FE电口ACROSS</td>
<td>UP</td>
<td>UP</td>
</tr>
<tr>
<td>FE电口NORMAL</td>
<td>FE电口NORMAL</td>
<td>DOWN</td>
<td>DOWN</td>
</tr>
<tr>
<td>FE电口ACROSS</td>
<td>FE电口NORMAL</td>
<td>UP</td>
<td>UP</td>
</tr>
<tr>
<td>FE电口ACROSS</td>
<td>FE电口ACROSS</td>
<td>UP</td>
<td>UP</td>
</tr>
</tbody></table>
<p>3、检查链路。</p>
<p>​    3.1、排除网线问题：</p>
<p>​    看是否存在接触不好及网线外部损坏的情况；GE电口使用低于5类线的网线时接口不能UP；网线的4对线中有部分出现损坏，也不能够确保GE电口UP。</p>
<p>​    3.2、排除端口问题：</p>
<p>​    检查网口里面金属弹片是否凹陷或偏位；外环回和内环回测试。</p>
<p>​    3.3、测试链路的基本方法：</p>
<p>​    外环测试方法： 一般使用认为正常的端口来测试网线，端口能够UP即可，即交换机上的两个端口互连（注意现场的环路，可用临时建立其它vlan，两个端口配置不同的vlan）。</p>
<p>​    盒式交换机的设备可以执行virtual-cable-test命令, 用来查看链路是否存在有短路，交叉等的情况，再逐步来排除端口还是网线的问题。该命令行会导致该端口发生UP/DOWN。</p>
<p>​    对于端口是UP的，但是怀疑端口不能发包或收包，可以使用两个端口对接，分别在两个UP的端口执行test-packet start interface interface-type interface-number -c 来查看端口的统计计数是否正常，判断端口收发包是否正常。</p>
<p>​    [Quidway] test-packet start interface Ethernet 0/0/1 ?</p>
<p>​    -c    The number of packet</p>
<p>​    -s    The packet size</p>
<p>4、如果以上几步还是不能解决问题，请收集如下信息，并联系技术支持工程师。</p>
<p>​    上述步骤的执行结果；设备的配置文件、日志文件、告警信息；参考命令：display this interface、display logbuffer、display this。</p>
<p><strong>二、光口无法UP</strong></p>
<p>1、故障现象</p>
<p>​    两个光口互连时，端口无法UP。</p>
<p>2、故障处理步骤</p>
<p>​    请保存以下步骤的执行结果，以便故障无法解决时快速收集和反馈信息。</p>
<p>​    2.1、检查端口是否被shutdown。首先检查故障端口有没有被shutdown或被拔掉光纤，如果有shutdown的端口，则要执行命令undo shutdown。</p>
<p>​    2.2、检查两端端口配置。检查两端光口的端口配置是否按正确配置进行： 两边端口的速率要一致；两边端口的自协商模式要一致。</p>
<p>​    2.3、检查使用的光模块是否为华为认证的光模块。如果为非华为认证光模块，需替换为华为认证的光模块。</p>
<p>​    2.4、检查光纤、光模块是否配合使用正确：多模光纤需要与多模光模块配合使用；单模光纤只能用于单模光模块，不能够与多模光模块配合使用。 单模光纤一般为黄颜色，多模光纤一般为橘黄色。</p>
<p>​    2.5、在系统模式下输入display transceiver interface <em>interface-type interface-number</em>（故障点所在端口）verbose，查看对接光模块的波长是否一样。</p>
<p>​     <Quidway> display transceiver interface GigabitEthernet 0/1/1 verbose</p>
<p>​     GigabitEthernet0/1/1 transceiver information:</p>
<p>-————————————————————</p>
<p>Common information:</p>
<p>  Transceiver Type               :1000_BASE_SX_SFP</p>
<p>  Vendor PN                      :FTLF8519P3BTL-HW</p>
<p>  Connector Type                 :LC</p>
<p>  <strong>Wavelength(nm)                 :850</strong></p>
<p>  Transfer Distance(m)           :500(50um),300(62.5um)</p>
<p>  Digital Diagnostic Monitoring  :YES</p>
<p>  Vendor Name                    :FINISAR CORP.  </p>
<p>  Ordering Name                  :</p>
<p>-————————————————————</p>
<p>Diagnostic information:</p>
<p>  Temperature(℃ )              :27.00</p>
<p>  Temp High Threshold(℃ )      :90.00</p>
<p>  Temp Low  Threshold(℃ )      :-20.00</p>
<p>  Voltage(V)                    :3.27</p>
<p>  Volt High Threshold(V)        :3.70</p>
<p>  Volt Low  Threshold(V)        :2.90</p>
<p>  Bias Current(mA)              :6.94</p>
<p>  Bias High Threshold(mA)       :24.01</p>
<p>  Bias Low  Threshold(mA)       :1.75</p>
<p>  RX Power(dBM)                 :-28.54</p>
<p>  RX Power High Threshold(dBM)  :0.00</p>
<p>  RX Power Low  Threshold(dBM)  :-16.99</p>
<p>  TX Power(dBM)                 :-4.99</p>
<p>  TX Power High Threshold(dBM)  :0.00</p>
<p>  TX Power Low  Threshold(dBM)  :-9.50</p>
<p>-————————————————————</p>
<p>​    2.5、查看是否存在光口和光模块对应错误的情况：如100M光口使用了1000M光模块。</p>
<p>​    2.6、查看端口的收发光功率是否在正常范围内。光模块的收光光功率太低或太高都会导致端口不能UP，同时传输距离及光纤质量也是考虑因素。</p>
<p>​    2.7、自环测试。上述信息都正常的情况下，请做端口自环测试，将头纤及尾纤连接到同一个光模块上，确认端口是否能正常UP。</p>
<p>​    2.8、更换器件。仍不能确定问题的情况下，请优先考虑更换光模块及光纤。</p>
<p>​    2.9、如果以上几步还是不能解决问题，请收集如下信息，并联系技术支持工程师。 上述步骤的执行结果；设备的配置文件、日志文件、告警信息；参考命令：display this interface、display logbuffer、display this、display transceiver verbose。</p>
<p>如何查看华为交换机路由器光模块的收发光功率?</p>
<p>使用命令display transceiver verbose查看光模块的收发功率。版本不一样，显示信息有所差别，举例如下：</p>
<p>1、盒式交换机&amp;<strong>框式交换机 V100R006C03&amp;V100R006C05</strong>版本</p>
<p><strong>RX Power(dBM)**代表光模块接收功率，</strong>TX Power(dBM)**代表光模块发送功率。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Quidway&gt; **display transceiver interface gigabitethernet 0&#x2F;0&#x2F;1 verbose**</span><br><span class="line"></span><br><span class="line">GigabitEthernet0&#x2F;0&#x2F;1 transceiver information:                                  </span><br><span class="line"></span><br><span class="line">\-------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Common information:</span><br><span class="line"></span><br><span class="line">  Transceiver Type               :1000_BASE_SX_SFP</span><br><span class="line"></span><br><span class="line">  Connector Type                 :LC</span><br><span class="line"></span><br><span class="line">  Wavelength(nm)                 :850</span><br><span class="line"></span><br><span class="line">  Transfer Distance(m)           :300(50um),150(62.5um)</span><br><span class="line"></span><br><span class="line">  Digital Diagnostic Monitoring  :YES</span><br><span class="line"></span><br><span class="line">  Vendor Name                    :SumitomoElectric</span><br><span class="line"></span><br><span class="line">  Vendor Part Number             :HFBR-5710L</span><br><span class="line"></span><br><span class="line">  Ordering Name                  :</span><br><span class="line"></span><br><span class="line">\-------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Manufacture information:</span><br><span class="line"></span><br><span class="line">  Manu. Serial Number            :88K056C10353</span><br><span class="line"></span><br><span class="line">  Manufacturing Date             :2008-08-08</span><br><span class="line"></span><br><span class="line">  Vendor Name                    :SumitomoElectric</span><br><span class="line"></span><br><span class="line">\-------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">**Diagnostic information:**&#x2F;&#x2F;Diagnostic information这一段落仅V100R006C03版本显示</span><br><span class="line"></span><br><span class="line">  **Temperature(****°C)              :26.00**</span><br><span class="line"></span><br><span class="line">  **Temp High Threshold(****°C)      :85.00**</span><br><span class="line"></span><br><span class="line">  **Temp Low  Threshold(****°C)      :-40.00**</span><br><span class="line"></span><br><span class="line">  **Voltage(V)                    :3.29**</span><br><span class="line"></span><br><span class="line">  **Volt High Threshold(V)        :3.64**</span><br><span class="line"></span><br><span class="line">  **Volt Low  Threshold(V)        :2.95**</span><br><span class="line"></span><br><span class="line">  **Bias Current(mA)              :4.57**</span><br><span class="line"></span><br><span class="line">  **Bias High Threshold(mA)       :9.00**</span><br><span class="line"></span><br><span class="line">  **Bias Low  Threshold(mA)       :2.00**</span><br><span class="line"></span><br><span class="line">  **RX Power(dBM)                 :-40.00**</span><br><span class="line"></span><br><span class="line">  **RX Power High Threshold(dBM)  :0.00**</span><br><span class="line"></span><br><span class="line">  **RX Power Low  Threshold(dBM)  :-16.99**</span><br><span class="line"></span><br><span class="line">  **TX Power(dBM)                 :-5.03**</span><br><span class="line"></span><br><span class="line">  **TX Power High Threshold(dBM)  :-2.22**</span><br><span class="line"></span><br><span class="line">  **TX Power Low  Threshold(dBM)  :-6.99**</span><br><span class="line"></span><br><span class="line">**-------------------------------------------------------------**</span><br><span class="line"></span><br><span class="line">User information:</span><br><span class="line"></span><br><span class="line">  THIS_IS_A_TEST</span><br><span class="line"></span><br><span class="line">\-------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Diagnostic information:</span><br><span class="line"></span><br><span class="line">  Temperature(°C)                      :40.21</span><br><span class="line"></span><br><span class="line">  Temp High Warning Threshold(°C)      :93.00</span><br><span class="line"></span><br><span class="line">  Temp Low  Warning Threshold(°C)      :-30.00</span><br><span class="line"></span><br><span class="line">  Temp High Alarm   Threshold(°C)      :110.00</span><br><span class="line"></span><br><span class="line">  Temp Low  Alarm   Threshold(°C)      :-40.00</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  Voltage(V)                            :3.26</span><br><span class="line"></span><br><span class="line">  Volt High Warning Threshold(V)        :3.70</span><br><span class="line"></span><br><span class="line">  Volt Low  Warning Threshold(V)        :2.90</span><br><span class="line"></span><br><span class="line">  Volt High Alarm   Threshold(V)        :3.90</span><br><span class="line"></span><br><span class="line">  Volt Low  Alarm   Threshold(V)        :2.70</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  Bias Current(mA)                      :23.78</span><br><span class="line"></span><br><span class="line">  Bias High Warning Threshold(mA)       :70.00</span><br><span class="line"></span><br><span class="line">  Bias Low  Warning Threshold(mA)       :4.00</span><br><span class="line"></span><br><span class="line">  Bias High Alarm   Threshold(mA)       :80.00</span><br><span class="line"></span><br><span class="line">  Bias Low  Alarm   Threshold(mA)       :2.00</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  **RX Power(dBM)**                         :-31.10</span><br><span class="line"></span><br><span class="line">  RX Power High Warning Threshold(dBM)  :-1.00</span><br><span class="line"></span><br><span class="line">  RX Power Low  Warning Threshold(dBM)  :-20.00</span><br><span class="line"></span><br><span class="line">  RX Power High Alarm   Threshold(dBM)  :0.75</span><br><span class="line"></span><br><span class="line">  RX Power Low  Alarm   Threshold(dBM)  :-23.97</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  **TX Power(dBM)**                         :-5.78</span><br><span class="line"></span><br><span class="line">  TX Power High Warning Threshold(dBM)  :-1.00</span><br><span class="line"></span><br><span class="line">  TX Power Low  Warning Threshold(dBM)  :-11.50</span><br><span class="line"></span><br><span class="line">  TX Power High Alarm   Threshold(dBM)  :0.99</span><br><span class="line"></span><br><span class="line">  TX Power Low  Alarm   Threshold(dBM)  :-13.50</span><br><span class="line"></span><br><span class="line">\-------------------------------------------------------------</span><br></pre></td></tr></table></figure>



<p><strong>2**</strong>、框式交换机 V200R002&amp;V200R003**<strong>版本</strong></p>
<p><strong>Current Rx Power(dBM)**代表光模块当前接收功率， **Current Tx Power(dBM</strong>)代表光模块当前发送功率。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Quidway&gt; **display transceiver interface gigabitethernet 3&#x2F;0&#x2F;0 verbose**</span><br><span class="line"></span><br><span class="line">GigabitEthernet3&#x2F;0&#x2F;0 transceiver information:                       </span><br><span class="line"></span><br><span class="line">\-------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Common information:</span><br><span class="line"></span><br><span class="line">  Transceiver Type               :1000_BASE_SX_SFP</span><br><span class="line"></span><br><span class="line">  Connector Type                 :LC</span><br><span class="line"></span><br><span class="line">  Wavelength(nm)                 :850</span><br><span class="line"></span><br><span class="line">  Transfer Distance(m)           :500(50um),300(62.5um)</span><br><span class="line"></span><br><span class="line">  Digital Diagnostic Monitoring  :YES</span><br><span class="line"></span><br><span class="line">  Vendor Name                    :FINISAR CORP.</span><br><span class="line"></span><br><span class="line">  Vendor Part Number             :FTLF8519P2BNL-HW</span><br><span class="line"></span><br><span class="line">  Ordering Name                  :</span><br><span class="line"></span><br><span class="line">\-------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Manufacture information:</span><br><span class="line"></span><br><span class="line">  Manu. Serial Number            :PEP3L5D</span><br><span class="line"></span><br><span class="line">  Manufacturing Date             :2008-12-05</span><br><span class="line"></span><br><span class="line">  Vendor Name                    :FINISAR CORP.</span><br><span class="line"></span><br><span class="line">\-------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Alarm information:</span><br><span class="line"></span><br><span class="line">  TX power low</span><br><span class="line"></span><br><span class="line">\-------------------------------------------------------------                  </span><br><span class="line"></span><br><span class="line">Diagnostic information:</span><br><span class="line"></span><br><span class="line">  Temperature(°C)                       :39</span><br><span class="line"></span><br><span class="line">  Voltage(V)                            :3.31</span><br><span class="line"></span><br><span class="line">  Bias Current(mA)                      :6.59</span><br><span class="line"></span><br><span class="line">  Bias High Threshold(mA)               :10.50</span><br><span class="line"></span><br><span class="line">  Bias Low  Threshold(mA)               :2.50</span><br><span class="line"></span><br><span class="line">  **Current Rx Power(dBM)**                 :-2.23</span><br><span class="line"></span><br><span class="line">  Default Rx Power High Threshold(dBM)  :3.01</span><br><span class="line"></span><br><span class="line">  Default Rx Power Low  Threshold(dBM)  :-15.02</span><br><span class="line"></span><br><span class="line">  **Current Tx Power(dBM**)                 :-2.45</span><br><span class="line"></span><br><span class="line">  Default Tx Power High Threshold(dBM)  :3.01</span><br><span class="line"></span><br><span class="line">  Default Tx Power Low  Threshold(dBM)  :-9.00</span><br><span class="line"></span><br><span class="line">  User Set Rx Power High Threshold(dBM) :3.01</span><br><span class="line"></span><br><span class="line">  User Set Rx Power Low Threshold(dBM)  :-15.02</span><br><span class="line"></span><br><span class="line">  User Set Tx Power High Threshold(dBM) :3.01</span><br><span class="line"></span><br><span class="line">  User Set Tx Power Low Threshold(dBM)  :-9.00</span><br></pre></td></tr></table></figure>

<p>-————————————————————</p>
<p><strong>3、那么如何保证光模块的收发功率?</strong></p>
<p>​    光模块的诊断信息中，可以查看当前发送和接收的光功率值，以及默认的最高和最低功率值。</p>
<p>​    如果接收功率低（RxPower Low），说明本端接收到的信号过低，则可能出现端口不UP或者UP后报文收发有丢弃，此时请先排查传输距离是否过远，超出了该光模块的传输距离，再排查链路，如光模块、光纤是否有损坏，光纤单模多模是否用错，熔纤连接处质量是否可靠等，以及对端光模块发送功率是否过低。</p>
<p>​    如果接收功率高（RxPower High），说明本端接收到的信号过高，可能原因是该光模块为长距光模块，而实际传输距离太短，导致信号未衰减，此时应在光模块上增加光衰，以对光模块进行保护。</p>
<p>​    如果发送功率低（TxPower Low），说明该光模块发送信号不好，可能会导致对端接收功率低，而造成端口不UP或者UP后报文收发有丢弃，可能原因是光模块光口受污染，如灰尘积的太多等，此时请用棉签清洗光模块，然后再测试光口发光功率是否恢复正常。</p>
<p>​    如果发送功率高（TxPower High），说明该光模块发送信号太强，可能会导致对端接收功率高，而造成对端光模块因接收功率持续过高而烧坏，可能原因是本端光模块故障，建议更换光模块。</p>
<p>​    因此，在端口插入光模块并对接成功后，要对发送或接收光功率方面的告警信息进行排查，避免因功率过低或者过高造成流量或者光模块不正常。</p>
]]></content>
      <tags>
        <tag>华为</tag>
      </tags>
  </entry>
  <entry>
    <title>NGINX入门理解</title>
    <url>/2019/04/29/29/</url>
    <content><![CDATA[<p>分享一篇来自简书的文章，对Nginx的讲解非常到位，文章链接：<a href="https://link.zhihu.com/?target=https://www.jianshu.com/p/5eab0f83e3b4">深入浅出Nginx</a>，作者主页：<a href="https://link.zhihu.com/?target=https://www.jianshu.com/u/cb569cce501b">张丰哲 - 简书</a>。</p>
<p>Nginx是一款轻量级的Web服务器、反向代理服务器，由于它的内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用。</p>
<p><img src="https://image01.zhang-zhe.cn/20190429134037.png" loading="lazy"></p>
<p>上图基本上说明了当下流行的技术架构，其中Nginx有点入口网关的味道。</p>
<h2 id="反向代理服务器？"><a href="#反向代理服务器？" class="headerlink" title="反向代理服务器？"></a>反向代理服务器？</h2><p>经常听人说到一些术语，如反向代理，那么什么是反向代理，什么又是正向代理呢？</p>
<p><strong>正向代理：</strong></p>
<p><img src="https://image01.zhang-zhe.cn/20190429134104.png" loading="lazy"></p>
<p><strong>反向代理：</strong></p>
<p><img src="https://image01.zhang-zhe.cn/20190429134124.png" loading="lazy"></p>
<p>由于防火墙的原因，我们并不能直接访问谷歌，那么我们可以借助VPN来实现，这就是一个简单的正向代理的例子。这里你能够发现，正向代理“代理”的是客户端，而且客户端是知道目标的，而目标是不知道客户端是通过VPN访问的。</p>
<p>当我们在外网访问百度的时候，其实会进行一个转发，代理到内网去，这就是所谓的反向代理，即反向代理“代理”的是服务器端，而且这一个过程对于客户端而言是透明的。</p>
<h2 id="Nginx的Master-Worker模式"><a href="#Nginx的Master-Worker模式" class="headerlink" title="Nginx的Master-Worker模式"></a>Nginx的Master-Worker模式</h2><p><img src="https://image01.zhang-zhe.cn/20190429134156.png" loading="lazy"></p>
<p>启动Nginx后，其实就是在80端口启动了Socket服务进行监听，如图所示，Nginx涉及Master进程和Worker进程。</p>
<p><img src="https://image01.zhang-zhe.cn/20190429134220.png" loading="lazy"></p>
<p>Master进程的作用是？</p>
<p><strong>读取并验证配置文件nginx.conf；管理worker进程；</strong></p>
<p>Worker进程的作用是？</p>
<p><strong>每一个Worker进程都维护一个线程（避免线程切换），处理连接和请求；注意Worker进程的个数由配置文件决定，一般和CPU个数相关（有利于进程切换），配置几个就有几个Worker进程。</strong></p>
<h2 id="思考：Nginx如何做到热部署？"><a href="#思考：Nginx如何做到热部署？" class="headerlink" title="思考：Nginx如何做到热部署？"></a>思考：Nginx如何做到热部署？</h2><p>所谓热部署，就是配置文件nginx.conf修改后，不需要stop Nginx，不需要中断请求，就能让配置文件生效！（nginx -s reload 重新加载/nginx -t检查配置/nginx -s stop）</p>
<p>通过上文我们已经知道worker进程负责处理具体的请求，那么如果想达到热部署的效果，可以想象：</p>
<p>方案一：</p>
<p>修改配置文件nginx.conf后，主进程master负责推送给woker进程更新配置信息，woker进程收到信息后，更新进程内部的线程信息。（有点valatile的味道）</p>
<p>方案二：</p>
<p>修改配置文件nginx.conf后，重新生成新的worker进程，当然会以新的配置进行处理请求，而且新的请求必须都交给新的worker进程，至于老的worker进程，等把那些以前的请求处理完毕后，kill掉即可。</p>
<p>Nginx采用的就是方案二来达到热部署的！</p>
<h2 id="思考：Nginx如何做到高并发下的高效处理？"><a href="#思考：Nginx如何做到高并发下的高效处理？" class="headerlink" title="思考：Nginx如何做到高并发下的高效处理？"></a>思考：Nginx如何做到高并发下的高效处理？</h2><p>上文已经提及Nginx的worker进程个数与CPU绑定、worker进程内部包含一个线程高效回环处理请求，这的确有助于效率，但这是不够的。</p>
<p><strong>作为专业的程序员，我们可以开一下脑洞：BIO/NIO/AIO、异步/同步、阻塞/非阻塞…</strong></p>
<p>要同时处理那么多的请求，要知道，有的请求需要发生IO，可能需要很长时间，如果等着它，就会拖慢worker的处理速度。</p>
<p><strong>Nginx采用了Linux的epoll模型，epoll模型基于事件驱动机制，它可以监控多个事件是否准备完毕，如果OK，那么放入epoll队列中，这个过程是异步的。worker只需要从epoll队列循环处理即可。</strong></p>
<h2 id="思考：Nginx挂了怎么办？"><a href="#思考：Nginx挂了怎么办？" class="headerlink" title="思考：Nginx挂了怎么办？"></a>思考：Nginx挂了怎么办？</h2><p>Nginx既然作为入口网关，很重要，如果出现单点问题，显然是不可接受的。</p>
<p>答案是：<strong>Keepalived+Nginx实现高可用</strong>。</p>
<p>Keepalived是一个高可用解决方案，主要是用来防止服务器单点发生故障，可以通过和Nginx配合来实现Web服务的高可用。（其实，Keepalived不仅仅可以和Nginx配合，还可以和很多其他服务配合）</p>
<p>Keepalived+Nginx实现高可用的思路：</p>
<p>第一：请求不要直接打到Nginx上，应该先通过Keepalived（这就是所谓虚拟IP，VIP）</p>
<p>第二：Keepalived应该能监控Nginx的生命状态（提供一个用户自定义的脚本，定期检查Nginx进程状态，进行权重变化,，从而实现Nginx故障切换）</p>
<p><img src="https://image01.zhang-zhe.cn/20190429134249.png" loading="lazy"></p>
<h2 id="我们的主战场：nginx-conf"><a href="#我们的主战场：nginx-conf" class="headerlink" title="我们的主战场：nginx.conf"></a>我们的主战场：nginx.conf</h2><p>很多时候，在开发、测试环境下，我们都得自己去配置Nginx，就是去配置nginx.conf。</p>
<p>nginx.conf是典型的分段配置文件，下面我们来分析下。</p>
<h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h2><p><img src="https://image01.zhang-zhe.cn/20190429134316.png" loading="lazy"></p>
<p>其实这是把Nginx作为web server来处理静态资源。</p>
<p>第一：location可以进行正则匹配，应该注意正则的几种形式以及优先级。（这里不展开）</p>
<p>第二：Nginx能够提高速度的其中一个特性就是：动静分离，就是把静态资源放到Nginx上，由Nginx管理，动态请求转发给后端。</p>
<p><strong>第三：我们可以在Nginx下把静态资源、日志文件归属到不同域名下（也即是目录），这样方便管理维护。</strong></p>
<p><strong>第四：Nginx可以进行IP访问控制，有些电商平台，就可以在Nginx这一层，做一下处理，内置一个黑名单模块，那么就不必等请求通过Nginx达到后端在进行拦截，而是直接在Nginx这一层就处理掉。</strong></p>
<h2 id="反向代理【proxy-pass】"><a href="#反向代理【proxy-pass】" class="headerlink" title="反向代理【proxy_pass】"></a>反向代理【proxy_pass】</h2><p>所谓反向代理，很简单，其实就是在location这一段配置中的root替换成<strong>proxy_pass</strong>即可。root说明是静态资源，可以由Nginx进行返回；而proxy_pass说明是动态请求，需要进行转发，比如代理到Tomcat上。</p>
<p>反向代理，上面已经说了，过程是透明的，比如说request -&gt; Nginx -&gt; Tomcat，那么对于Tomcat而言，请求的IP地址就是Nginx的地址，而非真实的request地址，这一点需要注意。不过好在Nginx不仅仅可以反向代理请求，还可以由用户<strong>自定义设置HTTP HEADER</strong>。</p>
<h2 id="负载均衡【upstream】"><a href="#负载均衡【upstream】" class="headerlink" title="负载均衡【upstream】"></a>负载均衡【upstream】</h2><p>上面的反向代理中，我们通过proxy_pass来指定Tomcat的地址，很显然我们只能指定一台Tomcat地址，那么我们如果想指定多台来达到负载均衡呢？</p>
<p>第一，通过<strong>upstream</strong>来定义一组Tomcat，并指定负载策略（IPHASH、加权论调、最少连接），健康检查策略（Nginx可以监控这一组Tomcat的状态）等。</p>
<p>第二，将proxy_pass替换成upstream指定的值即可。</p>
<p><strong>负载均衡可能带来的问题？</strong></p>
<p>负载均衡所带来的明显的问题是，一个请求，可以到A server，也可以到B server，这完全不受我们的控制，当然这也不是什么问题，只是我们得注意的是：<strong>用户状态的保存问题，如Session会话信息，不能在保存到服务器上。</strong></p>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>缓存，是Nginx提供的，可以加快访问速度的机制，说白了，在配置上就是一个开启，同时指定目录，让缓存可以存储到磁盘上。具体配置，大家可以参考Nginx官方文档，这里就不在展开了。</p>
]]></content>
      <tags>
        <tag>LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>无线网络问题排查</title>
    <url>/2019/05/05/32/</url>
    <content><![CDATA[<p>在无线网络部署中，很多情况下会出现无线的干扰，以下简单描述下在AC和AP上通过命令来查看个别AP的使用性能。以下以06-18为列子进行排查：</p>
<p>一、<strong>首先查看**</strong>AP**<strong>上用户是否太多：</strong></p>
<p>dis wlan client ap a06-18    可以查看所有的AP接入终端信息</p>
<p>​    dis wlan client ap a06-18 radio 1  可查看radio1接入的终端信息。</p>
<p>注意在只有两个信道的时候radio 1 是5G；radio 2 是2.4G。有三个信道的时候，radio1和radio2是5G信道，radio 3是2.4G信道。2665系列的AP理论值30-40就出现网络卡。4330理论60-70，实际值根据现网情况而定。</p>
<p><strong>二、接下来查看网络的带宽：</strong></p>
<p>dis wlan ap name  a06-18 verbose | in Band-width    一般带宽越大越容易受到干扰，具体分析在下面登录AP后可查询。</p>
<p><strong>三、登录**</strong>AP**<strong>进行具体分析：</strong></p>
<p>1．    在AC上登录AP方法：dis wlan ap name  a06-18 verbose | in Address 可以查看AP的管理IP地址。然后在AC上通过以下方法登录AP。如图所示：</p>
<p><img src="https://image01.zhang-zhe.cn/20190505153941.png" loading="lazy"></p>
<p>​          从AC登录AP：<br>进入AC隐藏模式_h打开对应AP的远程权限：</p>
<p>sys</p>
<p>_h                                       进入隐藏模式<br>wlan ap a06-18 tel en        打开远程telnet<br>wlan ap a06-18 ex en        打开远程控制<br>登录AP：<br>telnet 10.13.11.25</p>
<p> <img src="https://image01.zhang-zhe.cn/20190505154143.png" loading="lazy"></p>
<p>2．  当登录AP后，我们可通过命令dis ar5drv 1 channelbusy查看AP的干扰问题：</p>
<p>登录AP后</p>
<p>sys</p>
<p>-h</p>
<p>dis ar5drv 1 channelbusy</p>
<p><img src="https://image01.zhang-zhe.cn/20190505154238.png" loading="lazy"></p>
<p>图示为正常的AP工作图：extbusy的数值一般为零为正常现象，当extbusy有数值的时候就认为此事的AP有来自外部（非<em>802.11ac**的干扰</em>），出现这种问题的原因大部分都是因为贷款大导致的，修改贷款即可解决。</p>
<p>​     RX和TX的比值不要超过太多，当TX少，而RX超多的时候，就是因为无线网络信道收到干扰导致的。此事修改信道，改未被利用的信道，使得RX降下来即可。</p>
<p> V7版本：AC配置portal页面推送配置。<br>AP登录方式<br>probe 进入隐藏模式<br>wlan ap-execute 6f-04 exec-console enable<br>重启AP：<br>ac上reset wlan ap name xx可以重启，或者在交换机上undo poe enable </p>
<p>dbm的相关参数：信号需大于等于-75dbm 低于这个值信号就很弱了 要考虑为何没有漫游到更近的AP上面</p>
<p>重启ap命令：reset wlan ap ap name xx</p>
<p><strong>1**</strong>、查看AP射频口上各信道的空口利用率是否过高** </p>
<p>登录到AP上进入隐藏模式查看2.4G射频各信道（1、6、11）的空口利用率信息是否过高，<strong>crtlbusy的值是否高于60%。</strong></p>
<p>如果更换多种信道（包括3、8、13类的非常规信道）后发现各信道状况类似即可初步判断是非WLAN的干扰。</p>
<p>如果更换多种信道（包括3、8、13类的非常规信道）后发现空口利用率过高只出现在指定信道，则判断为同频干扰。</p>
<p>V5命令： </p>
<p>Ø  登陆到AP上进入隐藏模式 </p>
<p>[H3C] <em>_hide</em></p>
<p>Ø  查看AP当前信道的空口利用率 </p>
<p>[H3C-hidecmd] <em>display ar5 2 channelbusy</em></p>
<p>Ø  在AP的radio口下更改当前使用的信道 </p>
<p>[H3C-wlan-ap-ap3-radio-2] <em>channel 6</em></p>
<p>[11f04-hidecmd]display ar5 2 channelbusy</p>
<p>ChannelBusy information</p>
<p> Ctl Channel:    06    Channel Band: 20M</p>
<p> Ext Channel:</p>
<p> Record Interval(s):  9</p>
<p> Date/Month/Year: 13/05/2015</p>
<p>​       Time(h/m/s):   CtlBusy(%) TxBusy(%)  RxBusy(%)  ExtBusy(%)</p>
<p> 01     07:20:59         80          6         26          0</p>
<p> 02     07:20:50         87          6         25          0</p>
<p> 03     07:20:41         84          6         22          0</p>
<p> 04     07:20:32         83          6         23          0</p>
<p>……</p>
<p>V7命令：</p>
<p>Ø  登陆到AP上进入probe模式 </p>
<p>[H3C] <em>probe</em></p>
<p>Ø  查看AP当前信道的空口利用率 </p>
<p>[H3C-probe] <em>display ar5 2 channelbusy</em>                       </p>
<p>Ø  在AP的radio口下更改当前使用的信道 </p>
<p>[H3C-wlan-ap-ap3-radio-2] <em>channel 6</em></p>
<p>Ø  对于终结者超瘦（wt version ver2,ver3）模式，登录到本体后 </p>
<p>[H3C-1010-probe]<em>display system internal wlan-drv channelbusy subslot 1 radio 1</em></p>
<p><strong>2、判断现场干扰为WLAN同频干扰。</strong> </p>
<p>查看AP当前信道空口利用率中RxBusy过高随之带来crtlbusy的数值也很高，这种情况在更换多种不同的信道后效果出现明显变化，即只有指定的某个或几个信道出现空口利用率过高就可以判断当前环境存在WLAN的同频干扰。 </p>
<p>WLAN同频干扰是同一个信道上其他WLAN设备产生的干扰，换个角度看也不算干扰，说是空口竞争更为公平。</p>
<p>WLAN同频干扰表现在空口利用率的RxBusy很高，但不会那么凑巧的所有信道都存在一样程度的干扰。</p>
<p>因此我们只需要更换信道，看看空口利用率是否有明显区别，尤其是一些偏门信道比如3、8、13这样的，如果空口利用率不高，则说明之前那个信道受到的就是WLAN同频干扰。</p>
<p>另外，我们也可以在AP模板下配置</p>
<p>【V5】device-detection enable【V7】client-proximity-sensor enable，几分钟后通过【V5】display wlan ids detected all；【V7】display client-proximity-sensor device ap/display client-proximity-sensor device ap verbose查看AP探测到的周围WLAN设备情况。</p>
<p>如果确实能发现不少其他WLAN设备，也可以说明确实存在WLAN同频干扰。</p>
<p>例如：通过命令查看指定AP附近的所有信号状况。</p>
<p> [<strong>V5 AC</strong>]display wlan ids detected all</p>
<p> Total Number of Entries : 19</p>
<p> Flags: r = rogue, p = permit, a = adhoc, w = ap, b = wireless-bridge,</p>
<p>​        c = client</p>
<p> #AP = number of active APs detecting, Ch = channel number</p>
<p>​                          Detected Device(s) List</p>
<p>-——————————————————————————-</p>
<p> MAC Address    Vendor        Type  #AP  Ch  Last Detected       SSID</p>
<p>-——————————————————————————-</p>
<p> 0000-1111-0000 NORMEREL S… -p-w- 1    6   2015-11-14/14:19:13 “Broadcom19”</p>
<p> 0000-1111-0002 NORMEREL S… -p-w- 1    11  2015-11-14/14:19:49 “Broadcom”</p>
<p>[<strong>V7 AC</strong>]display client-proximity-sensor device ap</p>
<p>Total 16 detected ap</p>
<p>MAC address    Type   Duration    Sensors Channel Status</p>
<p>0023-89c1-ec80 AP     00h 02m 28s 1       11      Active</p>
<p>0023-89c1-ec81 AP     00h 02m 33s 1       11      Active</p>
<p>08ed-b958-ed80 AP     00h 02m 23s 1       6       Active</p>
<p>282c-b2b5-3130 AP     00h 01m 25s 1       11      Active</p>
<p>3891-d562-dc5d AP     00h 02m 54s 1       5       Active</p>
<p>[H3C]display client-proximity-sensor device ap verbose</p>
<p>Total 48 detected ap</p>
<p> AP: 0023-89c1-ec80</p>
<p>   Status: Active</p>
<p><strong>3、查看空口利用率中数据是否具有典型非WLAN干扰特征。</strong> </p>
<p>除了WLAN的同频干扰外，无线局点中也常常遇到一些非wlan的干扰，对2.4G影响最大的非WLAN干扰常见于4G的干扰。比如2320-2370MHz（移动），2300-2320MHz（联通），2370-2390MHz（电信），这些4G频段都是紧挨着WLAN的2.4G，如果信号源接近AP，通常都会对WLAN的2.4G产生影响，并且影响是相当的大。还有一些非WLAN干扰是完全处于2.4G的，比如微波炉、无绳电话、蓝牙、无线摄像头等，但根据经验看，这些干扰总体上对WLAN的影响相对来说还是要小的多。而有些设备看似工作在与wlan完全不相干的频段但由于其功率过大并且距离我们wlan设备较近，从而对电磁波产生一定的干扰继而影响wlan的无线传输，但一般这种干扰的影响都是非常弱的，不会是首要干扰源。 </p>
<p>典型的非WLAN干扰体现：**AP当前信道空口利用率中crtlbusy的数值远大于TX与RX之和，一般差值大于30%**。</p>
<p>例如：通过命令查看，当前AP的空口利用率ctrlbusy已经大于60%属于信道繁忙，且ctrlbusy的数值远大于TX与RX之和，更换信道后情况类似。 </p>
<p>[11f04-hidecmd]display ar5 2 channelbusy</p>
<p>ChannelBusy information</p>
<p> Ctl Channel:    06    Channel Band: 20M</p>
<p> Ext Channel:</p>
<p> Record Interval(s):  9</p>
<p> Date/Month/Year: 13/05/2015</p>
<p>​       Time(h/m/s):   CtlBusy(%) TxBusy(%)  RxBusy(%)  ExtBusy(%)</p>
<p> 01     07:20:59         <strong>80</strong>          6         <strong>26</strong>          0</p>
<p> 02     07:20:50         87          6         25          0</p>
<p> 03     07:20:41         84          6         22          0</p>
<p> 04     07:20:32         83          6         23          0</p>
<p> 05     07:20:23         89          6         29          0</p>
<p> 06     07:20:14         80          6         29          0  </p>
]]></content>
      <tags>
        <tag>H3C</tag>
      </tags>
  </entry>
  <entry>
    <title>全站HTTPS+接入又拍云CDN</title>
    <url>/2019/05/05/33/</url>
    <content><![CDATA[<p>​    本着不折腾就会挂星人的性格，小博客于今天全站HTTPS并且接入了又拍云CDN，虽然没有人看，这个博客更大程度上也是想作为自己的一个小笔记，那成就感也是相当的强。。</p>
<p>​    还记得之前申请HTTPS的时候还挺麻烦的，在又拍云还挺简单，直接把cname解析到这边，再配置一下回源，回源类型指向到github提供的gitpage域名就可以生效了。接入又拍云联盟之后每个月还有一些免费的流量，足够自己用了。</p>
<p>​    互联网真厉害，我要开始自己的学习之旅了。一起加油吧。</p>
<p>​    哦对了，之前在SSL这上面被坑过一次，回头有时间总结一下。</p>
]]></content>
      <tags>
        <tag>自嘲</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS 与 SSL 证书概要</title>
    <url>/2019/05/06/34/</url>
    <content><![CDATA[<p>​    HTTPS简介</p>
<p>超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种网络安全传输协议。具体介绍以前先来介绍一下以前常见的HTTP，HTTP就是我们平时浏览网页时候使用的一种协议。HTTP协议传输的数据都是未加密的，也就是明文，因此使用HTTP协议传输隐私信息非常不安全。HTTP使用80端口通讯，而HTTPS占用443端口通讯。在计算机网络上，HTTPS经由超文本传输协议（HTTP）进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性。这个协议由网景公司（Netscape）在1994年首次提出，随后扩展到互联网上。</p>
<h2 id="HTTPS-工作原理"><a href="#HTTPS-工作原理" class="headerlink" title="HTTPS 工作原理"></a>HTTPS 工作原理</h2><p>HTTPS在传输数据之前需要客户端（浏览器）与服务端（网站）之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。TLS/SSL协议不仅仅是一套加密传输的协议，更是一件经过艺术家精心设计的艺术品，TLS/SSL中使用了非对称加密，对称加密以及HASH算法。握手过程的具体描述如下：</p>
<ul>
<li>1）浏览器将自己支持的一套加密规则发送给网站。 </li>
<li>2）网站从中选出一组加密算法与HASH算法，并将自己的身份信息以证书的形式发回给浏览器。证书里面包含了网站地址，加密公钥，以及证书的颁发机构等信息。  </li>
<li>3）浏览器获得网站证书之后浏览器要做以下工作：  a) 验证证书的合法性（颁发证书的机构是否合法，证书中包含的网站地址是否与正在访问的地址一致等），如果证书受信任，则浏览器栏里面会显示一个小锁头，否则会给出证书不受信的提示。  b) 如果证书受信任，或者是用户接受了不受信的证书，浏览器会生成一串随机数的密码，并用证书中提供的公钥加密。  c) 使用约定好的HASH算法计算握手消息，并使用生成的随机数对消息进行加密，最后将之前生成的所有信息发送给网站。 </li>
<li> 4）网站接收浏览器发来的数据之后要做以下的操作：  a) 使用自己的私钥将信息解密取出密码，使用密码解密浏览器发来的握手消息，并验证HASH是否与浏览器发来的一致。  b) 使用密码加密一段握手消息，发送给浏览器。 </li>
<li> 5）浏览器解密并计算握手消息的HASH，如果与服务端发来的HASH一致，此时握手过程结束，之后所有的通信数据将由之前浏览器生成的随机密码并利用对称加密算法进行加密。 </li>
</ul>
<p>这里浏览器与网站互相发送加密的握手消息并验证，目的是为了保证双方都获得了一致的密码，并且可以正常的加密解密数据，为后续真正数据的传输做一次测试。另外，HTTPS一般使用的加密与HASH算法如下：</p>
<ul>
<li>非对称加密算法：RSA，DSA/DSS</li>
<li>对称加密算法：AES，RC4，3DES</li>
<li>HASH算法：MD5，SHA1，SHA256</li>
</ul>
<h3 id="HTTPS对应的通信时序图如下："><a href="#HTTPS对应的通信时序图如下：" class="headerlink" title="HTTPS对应的通信时序图如下："></a>HTTPS对应的通信时序图如下：</h3><p><img src="https://www.runoob.com/wp-content/uploads/2017/05/201208201734403507.png" alt="img" loading="lazy"></p>
<h2 id="HTTPS协议和HTTP协议的区别："><a href="#HTTPS协议和HTTP协议的区别：" class="headerlink" title="HTTPS协议和HTTP协议的区别："></a>HTTPS协议和HTTP协议的区别：</h2><ul>
<li>https协议需要到ca申请证书，一般免费证书很少，需要交费。</li>
<li>http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。</li>
<li>http和https使用的是完全不同的连接方式用的端口也不一样,前者是80,后者是443。</li>
<li>http的连接很简单,是无状态的 。</li>
<li>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议， 要比http协议安全。</li>
</ul>
<h2 id="SSL-证书"><a href="#SSL-证书" class="headerlink" title="SSL 证书"></a>SSL 证书</h2><p>从前面我们可以了解到HTTPS核心的一个部分是数据传输之前的握手，握手过程中确定了数据加密的密码。在握手过程中，网站会向浏览器发送SSL证书，SSL证书和我们日常用的身份证类似，是一个支持HTTPS网站的身份证明，SSL证书里面包含了网站的域名，证书有效期，证书的颁发机构以及用于加密传输密码的公钥等信息，由于公钥加密的密码只能被在申请证书时生成的私钥解密，因此浏览器在生成密码之前需要先核对当前访问的域名与证书上绑定的域名是否一致，同时还要对证书的颁发机构进行验证，如果验证失败浏览器会给出证书错误的提示。在这一部分我将对SSL证书的验证过程以及个人用户在访问HTTPS网站时，对SSL证书的使用需要注意哪些安全方面的问题进行描述。</p>
<h2 id="证书的类型"><a href="#证书的类型" class="headerlink" title="证书的类型"></a>证书的类型</h2><p>实际上，我们使用的证书分很多种类型，SSL证书只是其中的一种。证书的格式是由X.509标准定义。SSL证书负责传输公钥，是一种PKI（Public Key Infrastructure，公钥基础结构）证书。 我们常见的证书根据用途不同大致有以下几种：</p>
<ul>
<li> 1、SSL证书，用于加密HTTP协议，也就是HTTPS。</li>
<li> 2、代码签名证书，用于签名二进制文件，比如Windows内核驱动，Firefox插件，Java代码签名等等。</li>
<li> 3、客户端证书，用于加密邮件。</li>
<li> 4、双因素证书，网银专业版使用的USB Key里面用的就是这种类型的证书。</li>
</ul>
<p> 这些证书都是由受认证的证书颁发机构——我们称之为CA（Certificate Authority）机构来颁发，针对企业与个人的不同，可申请的证书的类型也不同，价格也不同。CA机构颁发的证书都是受信任的证书，对于SSL证书来说，如果访问的网站与证书绑定的网站一致就可以通过浏览器的验证而不会提示错误。</p>
<h2 id="SSL证书申请与规则"><a href="#SSL证书申请与规则" class="headerlink" title="SSL证书申请与规则"></a>SSL证书申请与规则</h2><p>SSL证书可以向CA机构通过付费的方式申请，也可以自己制作。 CA机构颁发的证书价格非常昂贵，而且有效期一般只有一年到三年不等（年数不同，价格也不同），过期之后还要再次交钱申请，因此一般只有企业才会申请证书。但是随着个人网站的增多，目前也有针对个人的SSL证书服务，价格相对便宜一些，国内的话400多块钱就能申请到一个，国外更是有免费的SSL证书可以申请。 在申请SSL证书时需要向CA机构提供网站域名，营业执照，以及申请人的身份信息等。网站的域名非常重要，申请人必须证明自己对域名有所有权，如果支持Hotmail.com，Gmail.com的SSL证书都可以随便申请，黑客们就不用做假证书欺骗了。</p>
<p>此外，一个证书一般只绑定一个域名，如果CA机构心情好的话，会免费再绑一个，比如你要申请域名时绑定的域名是 <a href="http://www.runoob.com,那么只有在浏览器地址是/">www.runoob.com，那么只有在浏览器地址是</a> <a href="https://www.runoob.com/">https://www.runoob.com</a> 的时候，这个证书才是受信任的，如果地址是<a href="https://tt.runoob.com或者https//login.runoob.com%EF%BC%8C%E9%82%A3%E4%B9%88%E8%BF%99%E4%B8%AA%E8%AF%81%E4%B9%A6%E7%94%B1%E4%BA%8E%E8%AE%BF%E9%97%AE%E7%9A%84%E5%9F%9F%E5%90%8D%E4%B8%8E%E8%AF%81%E4%B9%A6%E7%BB%91%E5%AE%9A%E7%9A%84%E5%9F%9F%E5%90%8D%E4%B8%8D%E5%90%8C%EF%BC%8C%E4%BB%8D%E7%84%B6%E4%BC%9A%E8%A2%AB%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%BE%E7%A4%BA%E4%B8%BA%E4%B8%8D%E5%8F%97%E4%BF%A1%E4%BB%BB%E7%9A%84%E3%80%82">https://tt.runoob.com或者https://login.runoob.com，那么这个证书由于访问的域名与证书绑定的域名不同，仍然会被浏览器显示为不受信任的。</a></p>
<p>CA机构也提供申请通配符域名（例如，*.runoob.com），通配符域名相当于绑定了主域名下的所有域名，因此使用起来非常方便，但是价格也超级昂贵，一个通配符域名一年大概得5000块钱，只有企业才可以申请。 </p>
<p>下面就来看看一个证书的信息：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2017/05/R-OslhS49QSoGyqVC8Wui3_mGh-wNb9y4DJ3zJj2IRajAQAACQIAAEpQ.jpg" alt="img" loading="lazy"></p>
<p>在访问hotmail的时候会跳转到login.live.com，这时IE浏览器上会有一个小锁头，点一下那个小锁头再点击里面的”查看证书”就会出现上图的证书窗口，这里面我们可以看到这个证书只有一个用途——向远程计算机证明身份信息，证书的用途会有很多，SSL只是其中之一。在”颁发给”这一项就是这个证书在申请时绑定的域名；下面的”颁发者”是证书的颁发机构。最下面的两个日期是证书申请时间以及过期的时间。这里我们可以注意一下”颁发者”的信息，里面有”Extended Validation SSL”的字样，表明了这个证书是一个EV SSL证书（扩展验证SSL证书），EV SSL证书有个特点就是可以让浏览器的地址栏变绿，同时显示出来证书所属公司的名称，如下图所示：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2017/05/wqUuVQChlFGgN6TwqrFbVGAxcffFGFdChPF4vdOLRizaAQAAKwAAAEpQ.jpg" alt="img" loading="lazy"></p>
<p>EV SSL证书与其他的证书相比，费用更高。</p>
<p>以上说的是向CA机构申请证书的情况，如果个人网站只为加密传输也可以自己制作SSL证书，自己制作的证书不会受到浏览器的信任，在访问的时候由于证书验证失败而给出警告。</p>
<h2 id="证书的验证过程"><a href="#证书的验证过程" class="headerlink" title="证书的验证过程"></a>证书的验证过程</h2><p>证书以证书链的形式组织，在颁发证书的时候首先要有根CA机构颁发的根证书，再由根CA机构颁发一个中级CA机构的证书，最后由中级CA机构颁发具体的SSL证书。我们可以这样理解，根CA机构就是一个公司，根证书就是他的身份凭证，每个公司由不同的部门来颁发不同用途的证书，这些不同的部门就是中级CA机构，这些中级CA机构使用中级证书作为自己的身份凭证，其中有一个部门是专门颁发SSL证书，当把根证书，中级证书，以及最后申请的SSL证书连在一起就形成了证书链，也称为证书路径。在验证证书的时候，浏览器会调用系统的证书管理器接口对证书路径中的所有证书一级一级的进行验证，只有路径中所有的证书都是受信的，整个验证的结果才是受信。我们还是以login.live.com这个证书举例，在查看证书的时候，点击”证书路径”标签就会有下图的显示：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2017/05/jOgm5Z07bBKA5FNVJFzuI99LxGzyg2U-8U_c7sYqn4GjAQAACQIAAEpQ.jpg" alt="img" loading="lazy"></p>
<p>根证书是最关键的一个证书，如果根证书不受信任，它下面颁发的所有证书都不受信任。操作系统在安装过程中会默认安装一些受信任的CA机构的根证书，可以在”运行”里面运行”certmgr.msc”启动证书管理器，如下图所示：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2017/05/tQGTE_tnxxP0fsE4gtvnAXSl6E2MaSe_A9Qdockrn3ucAwAAGgIAAEpQ.jpg" alt="img" loading="lazy"></p>
<p>根证书的有效期长，支持的用途多以方便颁发不同用途类型的中级证书；中级证书用途单一，有效期相对短一些，但是比具体的SSL证书要长很多。</p>
<p>如果SSL证书验证失败根据浏览器的不同会有以下的错误提示：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2017/05/EmdncPaZhVS65SfPqhIaabLfdQ5wMNsy-3Hu1hOG8m4gAwAAMAIAAEpQ.jpg" alt="img" loading="lazy"></p>
<p><img src="https://www.runoob.com/wp-content/uploads/2017/05/GZLvVaGauRJDk79ESMv5P6G42ocWSjDTmIbsw2FRq30lAwAAGQIAAEpQ.jpg" alt="img" loading="lazy"></p>
<p>SSL证书验证失败有以下三点原因：</p>
<ul>
<li>1、SSL证书不是由受信任的CA机构颁发的</li>
<li>2、证书过期</li>
<li>3、访问的网站域名与证书绑定的域名不一致</li>
</ul>
<p>这三点原因也是IE浏览器给出的提示。</p>
<blockquote>
<p>小提示：如果你对哪个根证书CA机构比较憎恨，可以将它的根证书删除，这样所有它颁发的证书都不会受信任。</p>
</blockquote>
<h2 id="SSL证书的安全问题"><a href="#SSL证书的安全问题" class="headerlink" title="SSL证书的安全问题"></a>SSL证书的安全问题</h2><p>对HTTPS最常见的攻击手段就是SSL证书欺骗或者叫SSL劫持，是一种典型的中间人攻击。不过SSL劫持并非只是用于攻击目的，在一些特殊情况下利用SSL劫持我们可以更顺畅的访问网络，我会在后文提到。</p>
<p>以攻击为目的的SSL劫持如果不注意浏览器安全提示的话，很容易就中招。当网络中有中间人发起SSL劫持攻击时，攻击者需要伪造一个SSL证书发给浏览器，这个时候由于伪造的SSL证书不受信任，浏览器会给出提示。</p>
<p>这里有一个误区，当SSL证书不受信任的时候，并不一定就是有SSL劫持发生，有种例外情况是：一些个人网站买不起合法的SSL证书，因此会自己制作一个SSL证书来加密传输的数据。如果你经常访问某个个人网站，而且你知道这个网站是干什么的，那么这种情况可以不用担心。但是如果你访问的是网银，在线支付，或者是hotmail.com，gmail.com等，这类公司性质的网站一定会申请合法的SSL证书（12306.cn除外），一旦SSL证书不受信任，应该果断的终止访问，这个时候网络中一定会存在异常行为，对于一些小区宽带的用户一定要注意这点。</p>
<p>所以作为个人用户，你一定要知道你访问的是什么网站，如果你只是一个没有多少计算机只是的普通网民，我相信你不会经常上那些自己制作SSL证书的个人网站（12306.cn除外），因此如果你没有办法判断网络是不是有异常，只要是证书有问题的，干脆就别再访问了。</p>
<blockquote>
<p>小提示：对于12306.cn，一定要按照网站说的那样，”为保障您顺畅购票，请下载安装根证书”。</p>
</blockquote>
<p>最后我们总结一下使用SSL证书要注意的问题：</p>
<ul>
<li>1、除非必要，不要随意安装根证书。安装根证书的时候一定要明确证书的来源。</li>
<li>2、对于网银，在线支付，重要邮箱等网站，一定要确保SSL证书是没有问题的，如果浏览器给出SSL证书错误的警告，一定要拒绝访问。一些小区宽带用户一定要注意这点。</li>
<li>3、由于现在个人申请SSL证书比较便宜，一定要注意挂着合法SSL证书的钓鱼网站（国外比较常见）。对于钓鱼网站，一定要看清域名，另外别相信什么中奖的消息，同时要安装带有钓鱼防护功能的安全软件。</li>
</ul>
<p>原文链接：<a href="https://www.runoob.com/w3cnote/https-ssl-intro.html">https://www.runoob.com/w3cnote/https-ssl-intro.html</a> </p>
]]></content>
      <tags>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>WireShark过滤语法与常用</title>
    <url>/2019/05/08/35/</url>
    <content><![CDATA[<p>​    1、过滤协议，直接写协议名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例子:</span><br><span class="line">tcp            #TCP(Transmission Control Protocol 传输控制协议)</span><br><span class="line">udp            #UDP(User Datagram Protocol 用户数据报协议)</span><br><span class="line">arp            #ARP(Address Resolution Protocol 地址解析协议)</span><br><span class="line">icmp           #ICMP(Internet Control Message Protocol Internet Internet 控制报文协议)</span><br><span class="line">http           #HTTP(HyperText Transfer Protocol 超文本传输协议)</span><br><span class="line">smtp           #SMTP(Simple Mail Transfer Protocol 简单邮件传输协议)</span><br><span class="line">ftp            #FTP(File Transfer Protocol 文件传输协议)</span><br><span class="line">dns            #DNS(Domain Name System 域名系统)</span><br><span class="line">ip             #IP(Internet Protocol IP协议)</span><br><span class="line">ssl            #SSL(Secure Sockets Layer 安全套阶层)</span><br><span class="line">oicq           #(openingIseekyou QQ协议)</span><br><span class="line">bootp          #BOOTP(Bootstrap Protocol，引导程序协议）)</span><br><span class="line">......</span><br><span class="line">排除arp包:   !arp   或者   not arp</span><br></pre></td></tr></table></figure>

<p>​    2、 过滤源和目的IP地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">过滤源地址</span><br><span class="line">ip.src_host eq 192.168.31.106          #相当于</span><br><span class="line">ip.src_host &#x3D;&#x3D; 192.168.31.106</span><br><span class="line">过滤目的地址</span><br><span class="line">ip.dst_host eq 192.168.31.106          #相当于</span><br><span class="line">ip.dst_host &#x3D;&#x3D; 192.168.31.106</span><br><span class="line">过滤源地址或者目的地址</span><br><span class="line">ip.addr eq 192.168.31.106                #相当于</span><br><span class="line">ip.addr &#x3D;&#x3D; 192.168.31.106</span><br></pre></td></tr></table></figure>

<p>​    3、针对端口进行过滤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例子:</span><br><span class="line">tcp.port eq 80                    #不管端口是来源的还是目标的都显示，相当于</span><br><span class="line">tcp.port &#x3D;&#x3D; 80</span><br><span class="line">tcp.port eq 80 or udp.port eq 80</span><br><span class="line">tcp.srcport &#x3D;&#x3D; 80                 #只显tcp协议的源端口80</span><br><span class="line">tcp.dstport &#x3D;&#x3D; 80                 #只显tcp协议的目标端口80</span><br><span class="line">udp.port eq 15000</span><br><span class="line">tcp.port &gt;&#x3D; 1 and tcp.port &lt;&#x3D; 80  #过滤端口范围</span><br></pre></td></tr></table></figure>

<p>​    4、过滤MAC地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eth.addr eq B4-6D-83-2B-27-D5</span><br><span class="line">eth.src eq B4-6D-83-2B-27-D5 &#x2F;&#x2F; 过滤来源mac</span><br><span class="line">eth.dst &#x3D;&#x3D; B4-6D-83-2B-27-D5 &#x2F;&#x2F; 过滤目标mac</span><br></pre></td></tr></table></figure>

<p>​    5、针对http的请求类型进行过滤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http.request.method &#x3D;&#x3D; &quot;GET&quot;</span><br><span class="line">http.request.method &#x3D;&#x3D; &quot;POST&quot;</span><br></pre></td></tr></table></figure>

<p>​    6、备注</p>
<blockquote>
<pre><code>     &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;          lt          less than 小于 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;#x3D;         le          小于等于&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x3D;&amp;#x3D;         eq          等于&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;            gt          大于&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &amp;#x3D;        ge          大于等于 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; !&amp;#x3D;       ne          不等于&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
</blockquote>
]]></content>
      <tags>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>ARP相关</title>
    <url>/2019/05/10/37/</url>
    <content><![CDATA[<p>​    如果是二层的交换机就没有ARP表，因为在二层数据链路层只用到MAC地址也就是硬件地址，而IP地址是网络层使用的地址，以太网数据包已经将IP数据包 封装起来，所以与IP地址一点关系都没有。如果是三层交换机（具有路由功能的交换机），由于是网络层的设备，需要用到IP地址来传输IP包，所以三层交换 机内部会维护一张ARP表，以保存IP地址和MAC地址的对应关系！</p>
<p>问：一台H3C三层交换连一台H3C二层交换，二层交换有48个口，下面挂了很多PC和服务器，在三层上面dis arp可以见到很多ip和mac对应关系 可在二层上去找相应的mac可是找不到，这是为什么呢？</p>
<p>答：在<a href="http://zhidao.baidu.com/search?word=%E4%B8%89%E5%B1%82%E4%BA%A4%E6%8D%A2%E6%9C%BA&fr=qb_search_exp&ie=utf8">三层交换机</a>上可以使用dis arp 来查看ip和mac的对应关系，其实还有一项就是所学到的端口是那个端口也能看到。<br>在<a href="http://zhidao.baidu.com/search?word=%E4%BA%8C%E5%B1%82%E4%BA%A4%E6%8D%A2%E6%9C%BA&fr=qb_search_exp&ie=utf8">二层交换机</a>上无法使用dis arp来查看ip和mac的对应关系，只能使用dis  mac-address 来查看mac地址与端口的对应关系。<br>你看到的有可能是其他交换上学习过来的。总结来说在三层上用ip+mac+port的形式来断定这个mac地址从那个接入<a href="http://zhidao.baidu.com/search?word=%E4%BA%A4%E6%8D%A2%E6%9C%BA&fr=qb_search_exp&ie=utf8">交换机</a>学习上来的。之后在这个接入<a href="http://zhidao.baidu.com/search?word=%E4%BA%A4%E6%8D%A2%E6%9C%BA&fr=qb_search_exp&ie=utf8">交换机</a>上看mac地址在确定端口</p>
]]></content>
      <categories>
        <category>ARP</category>
      </categories>
      <tags>
        <tag>ARP</tag>
      </tags>
  </entry>
  <entry>
    <title>终端用户认证成功后频繁下线</title>
    <url>/2019/05/13/39/</url>
    <content><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>产品：S5700（V200R007C00SPC500）、Agile Controller-Campus (V100R002C00SPC300)</p>
<p>部分window7终端出现认证成功后，在5分钟左右出现掉线的现象，需要终端重新去认证，认证成功后，又会出现下线的现象。</p>
<p><img src="https://support.huawei.com/enterprise/product/images/f531c47a032f4555bab616a38d4c35cc" alt="img" loading="lazy"></p>
<h4 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h4><p>在发生故障的终端上抓包，在controller服务器上查看用户相关日志，在用户所在交换机查看下线原因。</p>
<p><img src="https://support.huawei.com/enterprise/product/images/c0005f4c16094a4c860de852322d8228" alt="img" loading="lazy"></p>
<h4 id="根因"><a href="#根因" class="headerlink" title="根因"></a>根因</h4><p>为确保用户在线状态正常，设备会向在线用户发送ARP下线探测报文，如果用户在下线探测周期内没有回应，则设备认为该用户已下线。用户加入的VLAN在设备上不存在对应的VLANIF接口或者VLANIF接口未配置IP地址，网络中存在部分终端不支持回应源IP地址为255.255.255.255的ARP探测报文。 </p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>通过access-user arp-detect default ip-address 0.0.0.0命令配置用户下线探测报文的默认源IP地址，解决故障。</p>
]]></content>
      <categories>
        <category>CASE记录</category>
      </categories>
      <tags>
        <tag>华为</tag>
      </tags>
  </entry>
  <entry>
    <title>细说VLAN与Trunk</title>
    <url>/2019/04/18/4/</url>
    <content><![CDATA[<p>　　<a href="http://ad.doubleclick.net/ddm/trackclk/N7442.5006CHINABYTE/B10313247.138166524;dc_trk_aid=310538621;dc_trk_cid=74205219">网络</a>性能是影响业务效率的一个重要因素。将大型广播域分段是提高网络性能的方法之一。<a href="http://www.chinabyte.com/keyword/%E8%B7%AF%E7%94%B1%E5%99%A8/">路由器</a>能够将广播包阻隔在一个接口上，但是，路由器的LAN接口数量有限，它的主要功能是在网络间传输<a href="http://ad.doubleclick.net/ddm/trackclk/N7442.5006CHINABYTE/B10313247.138166523;dc_trk_aid=310538354;dc_trk_cid=74205219">数据</a>，而不是对终端设备提供网络接入。访问LAN的功能还是由接入层<a href="http://www.chinabyte.com/keyword/%E4%BA%A4%E6%8D%A2%E6%9C%BA/">交换机</a>来实现。与三层交换机相类似，通过在二层交换机上创建VLAN来减少广播域。现代交换机就是通过VLAN来构造的，因此在某种程度上，学习交换机就是学习VLAN。</p>
<p>　　问题的产生:</p>
<p>　　如下图所示，当网络上的所有设备在广播域产生大量的广播以及多播帧，就会与数据流竞争带宽。这是由网络管理数据流组成，如：<a href="http://www.chinabyte.com/keyword/ARP/">ARP</a>，DHCP，STP等。如下图所示，假设PC 1产生ARP，Windows登录，DHCP等请求：</p>
<p><img src="http://cimage.tianjimedia.com/uploadImages/2014/328/EA8967KB6JUD.jpg" alt="说明: DHCP等请求" loading="lazy"></p>
<p>　　这些广播帧到达交换机1之后，遍历整个网络并到达所有节点直至路由器。随着网络节点增加，开销的总数也在增长，直至影响交换机性能。通过实施VLAN断开广播域将数据流隔离开来，能够解决这一问题。</p>
<p>　　什么是VLAN：</p>
<p>　　VLAN(virtual local area network)是一组与位置无关的逻辑端口。VLAN就相当于一个独立的三层网络。VLAN的成员无需局限于同一交换机的顺序或偶数端口。下图显示了一个常规的部署，左边这张图节点连接到交换机，交换机连接到路由器。所有的节点都位于同一IP网络，因为他们都连接到路由器同一接口。</p>
<p><img src="http://cimage.tianjimedia.com/uploadImages/2014/328/LGUI58IUK7G9.jpg" alt="说明: image003.jpg" loading="lazy"></p>
<p>　　图中没有显示的是，缺省情况下，所有节点实际上都是同一VLAN。因此，这种拓扑接口可看作是基于同一VLAN的，如上面右图所示。例如，<a href="http://com.chinabyte.com/cisco/">Cisco</a>设备默认VLAN是VLAN 1，也称为管理VLAN。默认配置下包含所有的端口，体现在源地址表(source<a href="http://www.chinabyte.com/keyword/address/">address</a>table，SAT)中。该表用于交换机按照目的<a href="http://www.chinabyte.com/keyword/Mac/">MAC</a>地址将帧转发至合适的二层端口。引入VLAN之后，源地址表按照VLAN将端口与MAC地址相对应起来，从而使得交换机能够做出更多高级转发决策。下图显示了show mac address table和show vlan命令的显示输出。所有端口(FA0/1 – FA0/24)都在VLAN 1。</p>
<p><img src="http://cimage.tianjimedia.com/uploadImages/2014/328/V98H050K2054.jpg" alt="说明: image004.jpg" loading="lazy"></p>
<p>　　另一种常用的拓扑结构是两个交换机被一个路由器分离开来，如下图所示。这种情况下，每台交换机各连接一组节点。每个交换机上的各节点共享一个IP地址域，这里有两个网段：192.168.1.0和192.168.2.0。</p>
<p><img src="http://cimage.tianjimedia.com/uploadImages/2014/328/DVO4SIQ4T3R7.jpg" alt="说明: image005.jpg" loading="lazy"></p>
<p>　　注意到两台交换机的VLAN相同。非本地网络数据流必须经过路由器转发。路由器不会转发二层单播，多播以及广播帧。这种拓扑逻辑在两个地方类似于多VLAN：同一VLAN下的节点共享一个通用地址域，非本地数据流(对应多VLAN情况不同VLAN的节点)需通过路由器转发。在一台交换机上添加一个VLAN，去掉另一台交换机的话，结构如下所示：</p>
<p><img src="http://cimage.tianjimedia.com/uploadImages/2014/328/9608B782R99P.jpg" alt="说明: image006.jpg" loading="lazy"></p>
<p>　　每一个VLAN相当于一个独立的三层IP网络，因此，192.168.1.0上的节点试图与192.168.2.0上的节点<a href="http://telecom.chinabyte.com/">通信</a>时，不同VLAN通信必须通过路由器，即使所有设备都连接到同一交换机。二层单播，多播和广播数据只会在同一VLAN内转发及泛洪，因此VLAN 1产生的数据不会为VLAN 2节点所见。只有交换机能看得到VLAN，节点和路由器都感觉不到VLAN的存在。添加了路由决策之后，可以利用3层的功能来实现更多的<a href="http://ad.doubleclick.net/ddm/trackclk/N7442.5006CHINABYTE/B10313247.138166523;dc_trk_aid=310538354;dc_trk_cid=74205219">安全</a>设定，更多流量以及负载均衡。</p>
<p>　　VLAN的作用：</p>
<p>　　安全性：每一个分组的敏感数据需要与网络其他部分隔离开，减少保密<a href="http://ad.doubleclick.net/ddm/trackclk/N7442.5006CHINABYTE/B10313247.138166523;dc_trk_aid=310538354;dc_trk_cid=74205219">信息</a>遭到破坏的可能性。如下图所示，VLAN 10上的教职工主机完全与学生和访客数据隔离。</p>
<p><img src="http://cimage.tianjimedia.com/uploadImages/2014/328/5815A3Z86575.jpg" alt="说明: image007.jpg" loading="lazy"></p>
<p>　　节约成本：无需昂贵的网络升级，并且带宽及<a href="http://www.chinabyte.com/keyword/%E4%B8%8A%E8%A1%8C%E9%93%BE%E8%B7%AF/">上行链路</a>利用率更加有效。</p>
<p>　　性能提高：将二层网络划分成多个逻辑工作组(广播域)减少网络间不必要的数据流并提升性能。</p>
<p>　　缩小广播域：减少一个广播域上的设备数量。如上图所示：网络上有六台主机但有三个广播域：教职工，学生，访客。</p>
<p>　　提升<a href="http://www.chinabyte.com/keyword/IT%E7%AE%A1%E7%90%86/">IT管理</a>效率：网络需求相似的用户共享同一VLAN，从而网络管理更为简单。当添加一个新的交换机，在指定端口VLAN时，所有策略和步骤已配置好。</p>
<p>　　简化项目和应用管理：VLAN将用户和网络设备汇集起来，以支持不同的业务或地理位置需求。</p>
<p>　　每一个VLAN对应于一个IP网络，因此，部署VLAN的时候必须结合考虑网络地址层级的实现情况。</p>
<p>　　交换机间VLAN：</p>
<p>　　多交换机的情况下，VLAN是怎么工作的呢?下图所示的这种情况，两个交换机VLAN相同，都是默认VLAN 1，即两个交换机之间的联系同在VLAN 1之内。路由器是所有节点的出口。</p>
<p>　　这时单播，多播和广播数据自由传输，所有节点属于同一IP地址。这时节点之间的通信不会有问题，因为交换机的SAT显示它们在同一VLAN。</p>
<p><img src="http://cimage.tianjimedia.com/uploadImages/2014/328/6615I38Q79Z6.jpg" alt="说明: image008.jpg" loading="lazy"></p>
<p>　　而下面这种连接方式就会有问题。由于VLAN在连接端口的主机之间创建了三层边界，它们将无法通信。</p>
<p><img src="http://cimage.tianjimedia.com/uploadImages/2014/328/I7SLV8FVS9XP.jpg" alt="说明: image009.png" loading="lazy"></p>
<p>　　仔细看上图，这里有很多问题。第一，所有主机都在同一IP网，尽管连接到不同的VLAN。第二，路由器在VLAN 1,因此与所有节点隔离。最后，两台交换机通过不同的VLAN互连。每一点都会造成通信阻碍，合在一起，网络各元素之间会完全无法通信。</p>
<p>　　交换机用满或同一管理单元物理上彼此分离的情形是很常见的。这种情况下，VLAN需要通过trunk延伸至相邻交换机。trunk能够连接交换机，在网络间传载VLAN信息。如下图所示：</p>
<p><img src="http://cimage.tianjimedia.com/uploadImages/2014/328/7H9L468M7O82.jpg" alt="说明: image010.png" loading="lazy"></p>
<p>　　对之前的拓扑的改进包括：</p>
<p>　　· PC 1和PC 2分配到192.168.1.0网段以及VLAN 2。</p>
<p>　　· PC 3和PC 4分配到192.168.2.0网段以及VLAN 3。</p>
<p>　　· 路由器接口连接到VLAN 2和VLAN 3。</p>
<p>　　· 交换机间通过trunk线互连。</p>
<p>　　注意到trunk端口出现在VLAN 1，他们没有用字母T来标识。trunk在任何VLAN都没有成员。现在VLAN跨越多交换机，同一VLAN下的节点可以物理上位于任何地方。</p>
<p>　　什么是Trunk：</p>
<p>　　Trunk是在两个网络设备之间承载多于一种VLAN的端到端的连接，将VLAN延伸至整个网络。没有VLAN Trunk，VLAN也不会非常有用。VLAN Trunk允许VLAN数据流在交换机间传输，所以设备在同一VLAN，但连接到不同交换机，能够不通过路由器来进行通信。</p>
<p>　　一个VLAN trunk不属于某一特定VLAN，而是交换机和路由器间多个VLAN的通道。如下图所示，交换机S1和S2，以及S1和S3之间的链路，配置为传输从VLAN10,20,30以及90的数据流。该网络没有VLAN trunk就无法工作。</p>
<p><img src="http://cimage.tianjimedia.com/uploadImages/2014/328/N7TZER8PCH59.jpg" alt="说明: image011.jpg" loading="lazy"></p>
<p>　　当安装好trunk线之后，帧在trunk线传输是就可以使用trunk协议来修改以太网帧。这也意味着交换机端口有不止一种操作模式。缺省情况下，所有端口都称为接入端口。当一个端口用于交换机间互连传输VLAN信息时，这种端口模式改变为trunk，节点也路由器通常不知道VLAN的存在并使用标准以太网帧或“untagged”帧。trunk线能够使用“tagged”帧来标记VLAN或优先级。</p>
<p>　　因此，在trunk端口，运行trunk协议来允许帧中包含trunk信息。如下图所示：</p>
<p><img src="http://cimage.tianjimedia.com/uploadImages/2014/328/GK1P3M6U0IBP.jpg" alt="说明: image012.jpg" loading="lazy"></p>
<p>　　PC 1在经过路由表处理后向PC 2发送数据流。这两个节点在同一VLAN但不同交换机。步骤如下：</p>
<p>　　· 以太网帧离开PC 1到达Switch 1。</p>
<p>　　· Switch 1的SAT表明目的地是trunk线的另一端。</p>
<p>　　· Switch 1使用trunk协议在以太网帧中添加VLAN id。</p>
<p>　　· 新帧离开Switch 1的trunk端口被Switch 2接收。</p>
<p>　　· Switch 2读取trunk id并解析trunk协议。</p>
<p>　　· 源帧按照Switch 2的SAT转发至目的地(端口4)。</p>
<p>　　VLAN tag如下图所示，包含类型域，优先级域，CFI(Canonical Format Indicator)指示MAC数据域，VLAN ID。</p>
<p><img src="http://cimage.tianjimedia.com/uploadImages/2014/328/G1128I6E05A8.jpg" alt="说明: image013.jpg" loading="lazy"></p>
]]></content>
      <tags>
        <tag>VLAN</tag>
      </tags>
  </entry>
  <entry>
    <title>跟着动画来学习TCP三次握手和四次挥手</title>
    <url>/2019/05/13/40/</url>
    <content><![CDATA[<p>TCP三次握手和四次挥手的问题在面试中是最为常见的考点之一。很多读者都知道三次和四次，但是如果问深入一点，他们往往都无法作出准确回答。</p>
<p>本篇尝试使用动画来对这个知识点进行讲解，期望读者们可以更加简单地地理解TCP交互的本质。</p>
<h2 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h2><p>TCP 三次握手就好比两个人在街上隔着50米看见了对方，但是因为雾霾等原因不能100%确认，所以要通过招手的方式相互确定对方是否认识自己。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/6/26/1643a1dd6df4813b?imageslim" alt="img" loading="lazy"></p>
<p>张三首先向李四招手(<strong>syn</strong>)，李四看到张三向自己招手后，向对方点了点头挤出了一个微笑(<strong>ack</strong>)。张三看到李四微笑后确认了李四成功辨认出了自己(进入<strong>estalished</strong>状态)。</p>
<p>但是李四还有点狐疑，向四周看了一看，有没有可能张三是在看别人呢，他也需要确认一下。所以李四也向张三招了招手(<strong>syn</strong>)，张三看到李四向自己招手后知道对方是在寻求自己的确认，于是也点了点头挤出了微笑(<strong>ack</strong>)，李四看到对方的微笑后确认了张三就是在向自己打招呼(进入<strong>established</strong>状态)。</p>
<p>于是两人加快步伐，走到了一起，相互拥抱。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/6/26/1643a1f3fa6c21b0?imageslim" alt="img" loading="lazy"></p>
<p>我们看到这个过程中一共是四个动作，张三招手–李四点头微笑–李四招手–张三点头微笑。其中李四连续进行了2个动作，先是点头微笑(回复对方)，然后再次招手(寻求确认)，实际上可以将这两个动作合一，招手的同时点头和微笑(<strong>syn+ack</strong>)。于是四个动作就简化成了三个动作，张三招手–李四点头微笑并招手–张三点头微笑。这就是三次握手的本质，中间的一次动作是两个动作的合并。</p>
<p>我们看到有两个中间状态，<strong>syn_sent</strong>和<strong>syn_rcvd</strong>，这两个状态叫着「半打开」状态，就是向对方招手了，但是还没来得及看到对方的点头微笑。<strong>syn_sent</strong>是主动打开方的「半打开」状态，<strong>syn_rcvd</strong>是被动打开方的「半打开」状态。客户端是主动打开方，服务器是被动打开方。</p>
<ul>
<li>syn_sent: syn package has been sent</li>
<li>syn_rcvd: syn package has been received</li>
</ul>
<h2 id="TCP-数据传输"><a href="#TCP-数据传输" class="headerlink" title="TCP 数据传输"></a>TCP 数据传输</h2><p>TCP 数据传输就是两个人隔空对话，差了一点距离，所以需要对方反复确认听见了自己的话。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/6/26/1643a1f92f5af34a?imageslim" alt="img" loading="lazy"></p>
<p>张三喊了一句话(data)，李四听见了之后要向张三回复自己听见了(ack)。</p>
<p>如果张三喊了一句，半天没听到李四回复，张三就认为自己的话被大风吹走了，李四没听见，所以需要重新喊话，这就是tcp重传。</p>
<p>也有可能是李四听到了张三的话，但是李四向张三的回复被大风吹走了，以至于张三没听见李四的回复。张三并不能判断究竟是自己的话被大风吹走了还是李四的回复被大风吹走了，张三也不用管，重传一下就是。</p>
<p>既然会重传，李四就有可能同一句话听见了两次，这就是「去重」。「重传」和「去重」工作操作系统的网络内核模块都已经帮我们处理好了，用户层是不用关心的。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/6/26/1643a1fc9435605c?imageslim" alt="img" loading="lazy"></p>
<p>张三可以向李四喊话，同样李四也可以向张三喊话，因为tcp链接是「双工的」，双方都可以主动发起数据传输。不过无论是哪方喊话，都需要收到对方的确认才能认为对方收到了自己的喊话。</p>
<p>张三可能是个高射炮，一说连说了八句话，这时候李四可以不用一句一句回复，而是连续听了这八句话之后，一起向对方回复说前面你说的八句话我都听见了，这就是批量ack。但是张三也不能一次性说了太多话，李四的脑子短时间可能无法消化太多，两人之间需要有协商好的合适的发送和接受速率，这个就是「TCP窗口大小」。</p>
<p>网络环境的数据交互同人类之间的对话还要复杂一些，它存在数据包乱序的现象。同一个来源发出来的不同数据包在「网际路由」上可能会走过不同的路径，最终达到同一个地方时，顺序就不一样了。操作系统的网络内核模块会负责对数据包进行排序，到用户层时顺序就已经完全一致了。</p>
<h2 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h2><p>TCP断开链接的过程和建立链接的过程比较类似，只不过中间的两部并不总是会合成一步走，所以它分成了4个动作，张三挥手(fin)——李四伤感地微笑(ack)——李四挥手(fin)——张三伤感地微笑(ack)。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/6/26/1643a20296de1ff0?imageslim" alt="img" loading="lazy"></p>
<p>之所以中间的两个动作没有合并，是因为tcp存在「半关闭」状态，也就是单向关闭。张三已经挥了手，可是人还没有走，只是不再说话，但是耳朵还是可以继续听，李四呢继续喊话。等待李四累了，也不再说话了，朝张三挥了挥手，张三伤感地微笑了一下，才彻底结束了。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/6/26/1643b1147fbbc5e7?imageslim" alt="img" loading="lazy"></p>
<p>上面有一个非常特殊的状态<code>time_wait</code>，它是主动关闭的一方在回复完对方的挥手后进入的一个长期状态，这个状态标准的持续时间是4分钟，4分钟后才会进入到closed状态，释放套接字资源。不过在具体实现上这个时间是可以调整的。</p>
<p>它就好比主动分手方要承担的责任，是你提出的要分手，你得付出代价。这个后果就是持续4分钟的<code>time_wait</code>状态，不能释放套接字资源(端口)，就好比守寡期，这段时间内套接字资源(端口)不得回收利用。</p>
<p>它的作用是重传最后一个ack报文，确保对方可以收到。因为如果对方没有收到ack的话，会重传fin报文，处于time_wait状态的套接字会立即向对方重发ack报文。</p>
<p>同时在这段时间内，该链接在对话期间于网际路由上产生的残留报文(因为路径过于崎岖，数据报文走的时间太长，重传的报文都收到了，原始报文还在路上)传过来时，都会被立即丢弃掉。4分钟的时间足以使得这些残留报文彻底消逝。不然当新的端口被重复利用时，这些残留报文可能会干扰新的链接。</p>
<p>4分钟就是2个MSL，每个MSL是2分钟。MSL就是<code>maximium segment lifetime</code>——最长报文寿命。这个时间是由官方RFC协议规定的。至于为什么是2个MSL而不是1个MSL，我还没有看到一个非常满意的解释。</p>
<p>四次挥手也并不总是四次挥手，中间的两个动作有时候是可以合并一起进行的，这个时候就成了三次挥手，主动关闭方就会从<code>fin_wait_1</code>状态直接进入到<code>time_wait</code>状态，跳过了<code>fin_wait_2</code>状态。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>TCP状态转换是一个非常复杂的过程，本文仅对一些简单的基础知识点进行了类比讲解。关于TCP的更多知识还需要读者去搜寻相关技术文章进入深入学习。如果读者对TCP的基础知识掌握得比较牢固，高级的知识理解起来就不会太过于吃力。</p>
<p>作者：老錢</p>
<p>链接：<a href="https://juejin.im/post/5b29d2c4e51d4558b80b1d8c">https://juejin.im/post/5b29d2c4e51d4558b80b1d8c</a></p>
<p>来源：掘金</p>
<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>TCP/IP</category>
      </categories>
      <tags>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>运营商级NAT（Carrier-grade NAT）</title>
    <url>/2019/05/14/42/</url>
    <content><![CDATA[<h3 id="运营商级NAT（Carrier-grade-NAT）"><a href="#运营商级NAT（Carrier-grade-NAT）" class="headerlink" title="运营商级NAT（Carrier-grade NAT）"></a>运营商级NAT（Carrier-grade NAT）</h3><p>  运营商级（Carrier-grade）NAT，是用于缓解是IPV4地址枯竭的一种方法，通过这种方法，原来被分配公网ip的端点、家庭网络等可以被分配一个私有的ip地址，共享一个地址池。<br>  以家庭网络为例，最初IPV4地址充足的时候，运营商可以分配给每个家庭一个公网ip，每个家庭使用NAT共享此ip（也可以不使用）；而随着接入的家庭增多，为了防止运营商手中的地址消耗过快，不再分给每个家庭一个公网ip，因此就采用在家庭网络之上再架设一层NAT，让这些家庭共享一个地址池的方法来缓解压力。而这个运营商级别的NAT使用的预留地址空间，显然不能跟用户使用的预留地址空间冲突，所以只能再选取另一段地址作为运营商级NAT的地址空间，也就是[<a href="https://tools.ietf.org/html/rfc6598">RFC6598</a>]中记录分配的地址空间，这段地址叫Shared Address Space。ARIN根据此分配的需要将空间返还给IANA。分配的地址块为<strong>100.64.0.0/10</strong>。<br>  这是近些年的改动，因此很多教科书中的预留地址中并没有介绍这个地址，事实上预留的地址还有很多，可以自己查阅文档：|</p>
<h3 id="为什么要用新的地址空间："><a href="#为什么要用新的地址空间：" class="headerlink" title="为什么要用新的地址空间："></a>为什么要用新的地址空间：</h3><p>  最初[<a href="https://tools.ietf.org/html/rfc1918">RFC1918</a>]分配了三个地址空间作为预留ip地址，供私有网络作为内网ip使用，其分布如下：</p>
<blockquote>
<p>10.0.0.0 - 10.255.255.255 (10/8 prefix)<br>172.16.0.0 - 172.31.255.255 (172.16/12 prefix)<br>192.168.0.0 - 192.168.255.255 (192.168/16 prefix)</p>
</blockquote>
<p>  因为ISP用户的私有网络（例如家庭网络）常用的地址空间就是RFC1918分配的地址空间，因此ISP如果想在用户的NAT之上再架设NAT，就只能用另一块地址空间来作为私有地址，不能与用户使用的地址空间冲突。<br>  如果一个ISP部署一个大范围的NAT，并且使用[<a href="https://tools.ietf.org/html/rfc1918">RFC1918</a>]分配的地址空间（即我们最为熟知的那三个预留地址空间），会发生什么？试想一下一个路由器/NAT内外侧存在相同的ip地址 :P</p>
<h3 id="CGN的害处"><a href="#CGN的害处" class="headerlink" title="CGN的害处"></a>CGN的害处</h3><p>  其害处与一般NAT都是类似的，比如损害端到端原则，无法架设服务器等等，见一般教科书即可。另外，这样一个NAT显然会使得追踪ip地址变得困难，因为个人的私有ip地址对应公用地址池中的一个地址的一个端口，显然，如果不记录地址翻译，将很难追踪一个ip地址的行为。<br>  显然这种方法也只是缓解IPV4地址不够用的情况，并不能从根本上解决地址枯竭的问题。</p>
<p>参考资料：<br><a href="https://en.wikipedia.org/wiki/Carrier-grade_NAT">https://en.wikipedia.org/wiki/Carrier-grade_NAT</a><br><a href="https://tools.ietf.org/html/rfc1918">https://tools.ietf.org/html/rfc1918</a><br><a href="https://tools.ietf.org/html/rfc6598">https://tools.ietf.org/html/rfc6598</a></p>
]]></content>
      <categories>
        <category>NAT</category>
      </categories>
      <tags>
        <tag>小知识</tag>
      </tags>
  </entry>
  <entry>
    <title>接入交换机下挂hub后1x认证不下线的解决</title>
    <url>/2019/05/16/44/</url>
    <content><![CDATA[<p>最近发现个别的用户在办公区下挂hub使用有线网络时，1x认证在华为campus上会体现出一直在线的问题，（由于没有使用1x客户端，所以1x的上下线机制可能不会生效，同时启用了1x认证又使用dot1x port-method mac-based 的端口下的主机 mac地址不会老化）</p>
<p>又由于某种原因（防火墙流量探测机制，15分钟没有流量在防火墙上下线客户端），会导致用户在华为campus上一直在线，而防火墙有几率不在线，导致用户无法使用外网。</p>
<p>经查看文档同时与H3C工程师交流，可使用dot1x handshake来保证用户上下线信息的传递，但是咱们使用的1x方式是EAP-TLS的 没有使用类似H3C iNODE的客户端，可能兼容性上会有问题，</p>
<p>故建议使用1x重认证的功能，配置命令以及方法如下：</p>
<p>PS：因为只是个别的用户会出现此类问题 故可以在出现此类情况的端口启用1x重认证 防止产生过多的1x日志</p>
<p>总部办公区使用的H3C S5120 V5版本的接入交换机命令</p>
<p>V5版本需要全局开始dot1x timer reauth-period 时间（缺省为3600 建议配置最大值7200）</p>
<p>然后在下挂了hub的端口下面开启 dot1x re-authenticate 会生效1x重认证功能，用户侧两小时1x重认证一次，冲抵华为campus上的认证日志。</p>
<p>cur信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;YZO-S5120-PC-F8-S&gt;dis cur int g1&#x2F;0&#x2F;38</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1&#x2F;0&#x2F;38</span><br><span class="line">description To-Server</span><br><span class="line">port access vlan 100</span><br><span class="line">loopback-detection enable</span><br><span class="line">broadcast-suppression 5</span><br><span class="line">multicast-suppression 5</span><br><span class="line">storm-constrain control block</span><br><span class="line">packet-filter 3000 outbound</span><br><span class="line">mac-address max-mac-count 3</span><br><span class="line">dot1x guest-vlan 110</span><br><span class="line">dot1x auth-fail vlan 110</span><br><span class="line">**dot1x re-authenticate**</span><br><span class="line">undo dot1x handshake</span><br><span class="line">dot1x</span><br><span class="line">port-isolate enable</span><br><span class="line">ip verify source ip-address mac-address</span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<p>数字工厂办公区使用的H3C S5720 V7版本的接入交换机命令</p>
<p>V7版本的交换机可以直接在端口下启用命令，原理如上，不再赘述。</p>
<p>cur信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SZGC-S5130-PC-F5&gt;dis cur int g6&#x2F;0&#x2F;42</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet6&#x2F;0&#x2F;42</span><br><span class="line">port link-mode bridge</span><br><span class="line">description To-Server</span><br><span class="line">port access vlan 100</span><br><span class="line">storm-constrain control block</span><br><span class="line">broadcast-suppression 5</span><br><span class="line">multicast-suppression 5</span><br><span class="line">stp edged-port</span><br><span class="line">mac-address max-mac-count 8</span><br><span class="line">dot1x</span><br><span class="line">undo dot1x handshake</span><br><span class="line">**dot1x re-authenticate**</span><br><span class="line">dot1x guest-vlan 110</span><br><span class="line">dot1x auth-fail vlan 110</span><br><span class="line">**dot1x timer reauth-period 7200**</span><br><span class="line">loopback-detection enable vlan 100 110 999 </span><br><span class="line">dhcp snooping binding record</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>



<p>参考链接：<a href="http://www.h3c.com/cn/d_201506/872056_30005_0.htm#_Toc377974511">http://www.h3c.com/cn/d_201506/872056_30005_0.htm#_Toc377974511</a> </p>
]]></content>
      <categories>
        <category>CASE记录</category>
      </categories>
      <tags>
        <tag>H3C</tag>
      </tags>
  </entry>
  <entry>
    <title>新版网工技能图</title>
    <url>/2019/05/22/47/</url>
    <content><![CDATA[<p><img src="https://image01.zhang-zhe.cn/20190522141137.png" loading="lazy"></p>
]]></content>
      <categories>
        <category>技能</category>
      </categories>
      <tags>
        <tag>技能</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么在12306买火车票要装根证书？</title>
    <url>/2019/04/18/5/</url>
    <content><![CDATA[<p>　　12306主页上有一段很显眼的文字—–“为保障您顺畅购票，请下载安装根证书。”这段文字和12306很多的其他问题一起成为网友诟病12306的话题，但是这个看似安全的根证书确可能会成为让12306用户们的安全受到严重威胁的东西。</p>
<p>　　为什么在12306上买火车票要装根证书？想要回答这个问题，那么我们就必须先要提前回答说几个定义：</p>
<p>　　电脑在与服务器交换敏感信息时会使用一种叫做SSL的加密方式。在很多情况下，交换敏感信息必须要通过这个方式来进行。包括12306在内，淘宝、京东等在交换敏感信息的时候都使用了SSL进行加密。</p>
<p>　　那么，我们怎么知道网站是否使用了SSL加密呢？最简单的办法就是看看地址栏——如果网址前面写的是“https://”，那么这个页面就是使用SSL加密的。这意味着你访问的页面是安全的并且可以用来交换敏感信息。如果你使用的是Internet Explorer 7或者以上版本浏览器，你应该能在浏览器地址栏的最右边看到一把小锁头。就像下图所示的那样。点开这把小锁头，就能看到关于https的信息。</p>
<p><img src="https://www.williamlong.info/upload/3461_1.jpg" alt="为什么在12306上买火车票要装根证书" loading="lazy"></p>
<p>　　用其他浏览器呢？现在流行的浏览器中，全部都会标示出来该网页是使用了https以防止窃听和用户的个人信息安全的。比如下边的图就是在Firefox中使用https浏览维基百科的画面。</p>
<p><img src="https://www.williamlong.info/upload/3461_2.jpg" alt="为什么在12306上买火车票要装根证书" loading="lazy"></p>
<p>　　但是，谁又能保证https的安全呢？这里就又是一个概念：数字证书认证机构。它的译名很多，不过大致意思对就可以了。英文Certificate Authority，经常被缩写为CA。下文中也使用“CA”来称呼数字证书认证机构。</p>
<p>　　CA是一个机构——打个比方，这就像是信用卡一样。一个人向银行申请信用卡，就像网站向CA申请证书。CA觉得网站的信用合格，就签发SSL证书；银行觉得申请者的信用合格，就签发信用卡。等等，什么又是“SSL证书”呢？这就是CA签发给网站用以证明网站身份的“信用卡”。有了SSL证书，加密网页才能被信任。当你在访问一个被https加密的网页时，网页会出示一份证书，这份证书有助于用户信任这个网站。没有正规CA签发的证书的网站是不会受到浏览器的信任的——就算你用了SSL来加密也没用。</p>
<p>　　再看看前面的两张图片。第一章支付宝的截图中，CA就是：<em>VeriSign Class 3 Public Primary Certification Authority - G5</em></p>
<p>　　第二章维基百科的截图中，CA是：<em>DigiCert Inc</em></p>
<p>　　浏览器又上哪知道CA是正规的呢？那就是根证书库，这是一个操作系统认为可以被信任的CA的名单。几乎每个能上网操作系统（甚至包括诺基亚最弱智的S40系统）都有一个。在这里用Mac做示例。Mac的根证书库在：</p>
<p>　　<em>Finder-应用程序-其他（提示：OS X Lion或者以下操作系统叫“实用工具”）-钥匙串访问</em></p>
<p>　　然后在最左边找“系统根证书”，点进去便是。看到的应该如下图所示。</p>
<p><img src="https://www.williamlong.info/upload/3461_3.jpg" alt="为什么在12306上买火车票要装根证书" loading="lazy"></p>
<p>　　可以试着找一下*VeriSign Class 3 Public Primary Certification Authority - G5—–*肯定能找到！每次浏览器浏览https网页时，都会把网站出示的证书在这个库里面找一圈，能找到就OK，找不到的话，就证明你这个CA是不可靠的！</p>
<p>　　SSL加密的目的除了保证用户信息在传输过程中的安全外，还保障了服务器的身份。有些简单的SSL证书仅仅需要用该网站域名的邮箱向CA发封邮件就能签发了——不过如果是一个组织、团体、基金会或者盈利性机构（尤其是类似于支付宝或者PayPal的网络支付服务），那么SSL证书的签发就会变得十分繁琐。网站需要提供大量的文件以证明该网站是可靠的。如果能够证明该网站是可靠的，CA才会给签发证书。</p>
<p>　　还有一种证书被称作EV SSL证书（Extended Validation SSL），这种证书遵循全球统一的严格身份验证标准颁发的SSL证书，是目前业界最高安全级别的SSL证书。这种证书显示起来，就是俗称的绿色地址栏证书。在IE 7和以上IE浏览器便会出现绿色地址栏，并且滚动展示该网站的信息和CA信息。如下图所示。</p>
<p><img src="https://www.williamlong.info/upload/3461_4.jpg" alt="为什么在12306上买火车票要装根证书" loading="lazy"></p>
<p>　　EV SSL的申请手续更复杂，申请费用也更多，但是可以换来更多用户的信任。左图是Firefox下显示EV SSL证书的样子。这个证书证明了这个网站的经营者为<em>Wikimedia Foundation, Inc.<em>，并且位置位于</em>San Francisco</em> <em>California, US</em></p>
<p>　　据一个叫做VeriSign的CA的统计，使用EV SSL能大幅提升用户对于网站的信任。</p>
<p><img src="https://www.williamlong.info/upload/3461_5.jpg" alt="为什么在12306上买火车票要装根证书" loading="lazy"></p>
<p>　　总而言之，SSL证书的目的有两个：</p>
<ul>
<li>确保网站和用户之间的数据是加密并且可靠的</li>
<li>确保网站所宣称身份的真实可靠</li>
</ul>
<p>　　如果访问12306.cn会出现什么情况呢？12306的确使用了SSL来加密以保障网页的安全，而访问直接访问12306就算不安装根证书也不会出现任何问题。以Chrome为例，访问主页不会出现任何问题，但是若要访问购票页面就会无法访问，如下图所示。</p>
<p><img src="https://www.williamlong.info/upload/3461_6.jpg" alt="为什么在12306上买火车票要装根证书" loading="lazy"></p>
<p>　　12306会让我们访问一个叫<em><a href="https://dynamic.12306.cn/otsweb">https://dynamic.12306.cn/otsweb</a></em>的网址。如果我们直接用Chrome访问这个网址呢？华丽丽的一幕出现了：</p>
<p><img src="https://www.williamlong.info/upload/3461_7.jpg" alt="为什么在12306上买火车票要装根证书" loading="lazy"></p>
<p>　　使用IE8浏览这个页面会出现这样：</p>
<p><img src="https://www.williamlong.info/upload/3461_8.jpg" alt="为什么在12306上买火车票要装根证书" loading="lazy"></p>
<p>　　回到Chrome，如果我们点击“仍然继续”，就会正常的看到购票页面没有任何阻力。IE8也是一样，不过IE8的地址栏整个都会变成红色的。</p>
<p>　　如果我们点击旁边的小锁头来查看关于这个证书的信息呢？会出现下图。</p>
<p><img src="https://www.williamlong.info/upload/3461_9.jpg" alt="为什么在12306上买火车票要装根证书" loading="lazy"></p>
<p>　　再点击“证书信息”，会看到这个12306的证书是一个叫做SRCA的CA签发的。</p>
<p><img src="https://www.williamlong.info/upload/3461_10.jpg" alt="为什么在12306上买火车票要装根证书" loading="lazy"></p>
<p>　　但是在“钥匙串访问”里面根本没有一个叫做SRCA的CA。</p>
<p>　　如果安装上了首页给出的“根证书”，（依然以Mac为例）钥匙串访问里面就会有一个叫做“SRCA”的CA！并且本来这个证书是不受信任的，安装之后就会被设置为“<em>此证书已被标记为受此账户信任</em>”。</p>
<p><img src="https://www.williamlong.info/upload/3461_11.jpg" alt="为什么在12306上买火车票要装根证书" loading="lazy"></p>
<p>　　这样的话，浏览器和操作系统就会信任这个证书，便不会给予CA信息不对的提示了。</p>
<p>　　“SRCA”又是何许人也？在上图中，可以看到SRCA的细节部分，“组织”填写的是<em>Sinorail Certification Authority</em></p>
<p>　　这也就不难分析了，“Sinorial”中的“S”和“R”，“Certification Authority”的“S”和“A”，就拼出来了“SRCA”。</p>
<p>　　在搜索引擎中搜索<em>Sinorail Certification Authority</em>中的<em>Sinorail</em>，就会找到这样一个网站。叫做“中铁信息工程集团”。网址就是<a href="http://www.sinorail.com/%E3%80%82">http://www.sinorail.com/。</a></p>
<p>　　听名字就知道这网站跟12306肯定是亲戚关系。换种话说，就是自己给自己发证书。你说这证书能可信吗？</p>
<p>　　正规CA的证书可不是白给的。要不然CA靠什么吃饭？一个SSL证书从每年三百块RMB到一万五不等。据我所知，最贵的证书是VeriSign签发的，一万五的那个就是他。而便宜的三百块证书——只要不是VeriSign，其他CA签出来的最便宜的证书差不多都这个价。比较便宜的代表是Go Daddy、Comodo等。为什么12306要使用自己给自己的证书呢？貌似唯一的合理解释就是省钱。能省大概三百到一万五不等。</p>
<p>　　铁道部有时候买一张火车票就差不多够一年的证书钱了。</p>
<p>　　那么又为什么说铁道部用自己的证书不安全呢？有些人在12306上买票时会看到“<em>该站点安全证书的吊销信息不可用，是否继续</em>”的提示语，这又是什么意思呢？</p>
<p>　　从前有个倒霉的的荷兰CA，叫DigiNotar。这CA被黑客攻破，导致这家CA办法给一些用户的证书的私钥失效（私钥是在SSL加密环节中非常重要的东西），这就使得以这家CA的名义伪造证书成了可能。黑客可以通过这家公司的名义伪造证书给一些非法网站，客户一看这是加密过的还是大型CA签出来的证书便很容易信任。因为DigiNotar名气很大，并且很多大公司都使用它的证书，微软等操作系统厂商在这事情发生之后开始忙不迭的发布更新补丁来宣布DigiNotar的证书失效。</p>
<p>　　微软在 <a href="http://technet.microsoft.com/zh-cn/security/advisory/2607712">KB2607712</a> 补丁中宣布了DigiNotar的根证书无效。原文如下：</p>
<blockquote>
<p>Microsoft 已获悉 DigiNotar 颁发了至少一个虚假数字证书，DigiNotar 是受信任的根证书颁发机构存储区中出现的一个证书颁发机构。虚假证书可能用于哄骗内容、执行网页仿冒攻击或者针对所有 Web 浏览器用户（包括 Internet Explorer 用户）执行中间人攻击。虽然这不是 Microsoft 产品中的一个漏洞，但是此问题会影响 Microsoft Windows 的所有受支持版本。</p>
</blockquote>
<p>　　这家倒霉公司最后因为这件事华丽丽的破产了。</p>
<p>　　正如这件事一样，有些知名CA出了事，微软这些系统厂商会忙不迭的发布补丁来宣布该CA的根证书失效——有些小CA，尤其是“SRCA”这样貌似只给12306.cn一个网站签证书的CA，人还懒得管你呢！那么小CA的私钥失窃之后会有什么不就措施呢？那就是证书吊销列表，英文全称Certificate revocation list，简称CRL。下文也称呼它为CRL。更详细的内容可以参考<a href="https://zh.wikipedia.org/wiki/%E8%AF%81%E4%B9%A6%E5%90%8A%E9%94%80%E5%88%97%E8%A1%A8">这里</a>和<a href="https://en.wikipedia.org/wiki/Certificate_revocation_list">这里（英文）</a>。</p>
<p>　　CRL是干什么的呢？比如你买的证书被盗了，只要将信息报告给CA，那么CA就会把你这个证书的信息添加到这个CA的CRL中，每次浏览器浏览加密网页时，都会检索CRL信息——如果没有的话，就会提示<em>该站点安全证书的吊销信息不可用，是否继续</em>。想必读到这里大家也都知道了，12306的证书没有CRL信息。这也就意味着，12306所使用的证书一旦失窃，系统厂商不会管这个，甚至连最后一根救命稻草CRL都没有。</p>
<p>　　简而言之，如果证书出了事，两种解决办法：</p>
<ul>
<li>系统厂商发补丁宣布该证书失效</li>
<li>通过CRL宣布证书失效</li>
</ul>
<p>　　不过可惜的是12306出了事，这两招哪一个都不顶用。</p>
<p>　　如果证书失窃，会有什么后果？最可能的后果就是像前面的倒霉蛋一样倒闭。不过我大天朝铁道部（尽管已经倒闭）欠了两千多亿还巍然不动，这个可能便没有了。前面提到的两种解决方案一个也用不了，这就意味着遭殃的一定是用户。证书失窃，任何人都能用此来伪造虚假证书。尽管SRCA颁发的证书默认是不受到系统信任的，但是中国这么多去过12306网站买过火车票的人——假设所有人都安装了这个根证书使的系统对此证书信任——一个绿色地址栏都能提升用户这么大的信任，违法网站只要获得了SRCA颁发的证书，岂不就能轻易骗得用户的信任？</p>
<p>　　如果你是Mac用户，并且访问<a href="https://www.12306.cn/">https://www.12306.cn</a>没有任何障碍，那么可以参考<a href="https://player.vimeo.com/video/65127548">这个视频</a>中的步骤来将SRCA的证书设为不信任。如果要购票，反其道而行之即可。</p>
<p>　　从证书的角度看，中国很多大佬都做的非常不到位。比如我手里的建行网银，在安装U盾的时候必须安装一个网银根证书。SSL证书方面中国也做的很不到位。比如京东只有在用户登陆的时候才用了SSL来加密，而京东甚至在下订单的时候依然是明文传输。新浪微博在更改个人敏感信息时仍然使用明文传输，而twitter在早期甚至连微博内容都用https。如果使用不加密的公共Wi-Fi的话，那么在同一个Wi-Fi热点下有一个黑客，黑客便可以非常轻松的窃取到你的个人信息。</p>
<p>　　P.S.：现在12306在付款的过程中使用了VeriSign签发的合格的证书，但是这样并不代表着上面所说的可能造成的严重影响不会发生。</p>
<p>　　EV SSL介绍：<a href="http://www.wosign.com/EVSSL/index.htm">http://www.wosign.com/EVSSL/index.htm</a></p>
<p>　　这个地址打开后便可以看到EV SSL的效果：<a href="https://www.evssl.cn/en/">https://www.evssl.cn/en/</a></p>
<p>　　HTTPS - 维基百科：<a href="https://zh.wikipedia.org/wiki/Https">https://zh.wikipedia.org/wiki/Https</a></p>
<p>　　来源：techyan投稿，<a href="http://techyan.weebly.com/2/post/2013/05/12306.html">原文链接</a>。</p>
<p>　　更新：2017年12月12日更新，12306网站终于支持SSL证书了，之前多年该网站都使用自己签发的证书。新证书于2017年11月29日生效，由DigiCert签发。 </p>
]]></content>
      <categories>
        <category>SSL</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>SDN漫谈</title>
    <url>/2019/05/24/50/</url>
    <content><![CDATA[<p><img src="https://image01.zhang-zhe.cn/20190524170803.png" loading="lazy"></p>
<p>SD-WAN是Software-Defined Wide Area Network的简称。这是最近3-4年才提出的名词。从名字上可以看出，它与SDN有着相同的理念。<strong>两者都是将转发与控制分离，以简化网络的管理和操作。区别是，SDN是针对数据中心的网络，SD-WAN是针对WAN。</strong></p>
<p>虽然SD-WAN是个新的网络技术的趋势，但是针对它的调研报告却不少。Gartner在2015年的一份报告<a href="https://link.zhihu.com/?target=http://blogs.gartner.com/andrew-lerner/2015/12/15/predicting-sd-wan-adoption/">Predicting SD-WAN Adoption</a>指出：虽然在2015年，只有不到1%的企业使用SD-WAN，但是到2019年，将会有30%的企业使用SD-WAN技术。Dell’Oro Group在<a href="https://link.zhihu.com/?target=https://www.sdxcentral.com/articles/news/delloro-group-sd-wan-market-grow-33-next-five-years/2017/06/">2016年</a>和<a href="https://link.zhihu.com/?target=http://www.delloro.com/news/sd-wan-market-grow-33-compound-annual-growth-rate-next-five-years-according-delloro-group">2017年</a>的报告都指出：SD-WAN市场将以33%的年符合率增长。在2016年这个市场是3亿美金，到了2021年，这个市场将达到13亿美金。<a href="https://link.zhihu.com/?target=https://www.citrix.com.cn/glossary/sd-wan.html">Citrix公司更为乐观</a>，认为在2020年，SD-WAN市场将达到60亿美金。在SD-WAN领域，对于相应创业公司的风投也是巨大的，根据Rayno Report research的一份报告，已经有超过3.6亿美金的风投给到了SD-WAN的创业公司。就在不久前，Cisco以6.1亿美金收购SD-WAN公司Viptela。</p>
<p>看起来这是一个很有钱景的方向，本文将从技术和产品的角度，介绍什么是SD-WAN。</p>
<h2 id="WAN"><a href="#WAN" class="headerlink" title="WAN"></a><strong>WAN</strong></h2><p>在了解SD-WAN之前，先来回顾一下什么是WAN？从字面上看就能理解，Wide Area Network，也就是平常说的广域网。这是一个电信网络或者计算机网络，它覆盖了较远的距离，早期通常通过租用电信线路来搭建。这里的较远距离可以是跨区域，跨国家，甚至是全世界的范围。如果从计算机网络协议和概念来看，WAN关注的是远距离数据传输的计算机网络技术。这种技术应用在LAN（局域网，Local Area Network），MAN（城域网，Metropolitan Area Network）和其他本地计算机网络之间，使得这些本地网络能够连接成为一个连通的广域网络。下图就是由多个MAN组成的WAN示意图。</p>
<p><img src="https://image01.zhang-zhe.cn/20190529200134.png" loading="lazy"></p>
<p>我们日常生活息息相关的Internet就是一个WAN，一个在全世界范围覆盖的WAN。Internet由ISP（Internet Service Provider）构建，向各个LAN提供Internet服务。但是不能说WAN就是Internet，在企业和组织的应用中，更多出现的是私有WAN。</p>
<p>WAN的物理连接技术包括电话线，无线电波和光纤等。在逻辑层方面，常见的WAN协议有早期的X.25，Frame Relay，目前主流的是MPLS，Leased Line（T1，T3）等等。尤其是MPLS，已经在WAN构建中占据了主导地位。</p>
<p>我们知道了，WAN就是远距离组网。先不说逻辑层需要什么，看看物理连接。以光纤为例，不同的陆地之间需要通过海底光缆连接，不同国家之间的连接可能会引起法律纷争，管制纷争。就是同一个国家，通过埋设地下光缆构建WAN，也涉及租地，保护，施工等等问题。解决这些问题归根到底就是钱。这直接导致了WAN成本非常高，从而引出了<strong>WAN的最大问题：贵</strong>！在实际中，除了自己构建，更多是租用SP（Service Provider）提供的WAN连接服务。但就是这样，费用也不菲，例如：20M的Leased line，一个月就要大于10万的租金。相比之下，MPLS要稍微便宜，20M带宽的国内MPLS一个月要3万左右的租金。</p>
<p>随着基于网络的应用的发展，许多现代的应用，例如VoIP，视频会议，流媒体，虚拟应用和虚拟桌面等，都要求低延时，高带宽。尤其是HD视频对带宽的要求更高。在面对这些应用的时候，为了保证应用的可用性，有时必须要扩展WAN的带宽，直接带来的结果是成本的明显提升。</p>
<h2 id="Virtual-WAN"><a href="#Virtual-WAN" class="headerlink" title="Virtual WAN"></a><strong>Virtual WAN</strong></h2><p>同样是WAN，相比之下，Internet或者LTE网络，使用成本就低很多，而且从用户的角度来说，管理和维护也容易。Virtual WAN提出基于现有的公共WAN网络，来实现用户的私有WAN，从而达到节约资金和运维成本的目的。Virtual WAN的提出是为了补充甚至替代传统的WAN连接（MPLS）。Virtual WAN提供物理或者虚拟的设备，用户通过这些设备，在公共的WAN网络上，构建私有的WAN。公共的WAN网络指的是Internet，LTE，或者是Public WLAN，例如Motorola Canopy，等等。Virtual WAN的优势不言而喻，成本，一个20M的Internet连接，一年可能只要几百的租金。但是可能带来的问题，也是Virtual WAN需要关注的地方，有以下几点：</p>
<ul>
<li>安全。私有WAN作为连接企业或者组织内部的网络，最关心的可能就是安全了。对于Virtual WAN来说，流量走在公共网络上，必然会带来安全隐患。因此Virtual WAN利用SSL等技术，通过加密传输来保证数据的安全。</li>
<li>性能，同样的带宽，Internet的性能必然不如专用的MPLS连接。同时，MPLS的QoS能保证线路的带宽，而Internet不能。因此Virtual WAN通常会将多条Internet线路聚合在一起，成为一条逻辑上的线路，以减轻性能上的影响。另一方面，当网带宽需求降低时，又可以适当释放一些带宽，以节约成本。</li>
<li>稳定：公共网络的稳定性通常也不如专用线路，因此Virtual WAN在多条线路聚合的逻辑线路上，再加上负载均衡。根据当前几条线路的负载情况，动态的分配流量，聚合线路的稳定性。另外一方面，Virtual WAN可以聚合来自不同SP的Internet连接，以提高稳定性。</li>
</ul>
<h2 id="SD-WAN"><a href="#SD-WAN" class="headerlink" title="SD-WAN"></a><strong>SD-WAN</strong></h2><p>终于到正题了。前面说的Virtual WAN，其实已经属于SD-WAN的一部分了。现在普遍认为，SD-WAN应该具有以下4个功能：</p>
<ul>
<li><p><strong>支持多种连接方式，MPLS，frame relay，LTE，Public Internet等等。</strong></p>
</li>
<li><ul>
<li>SD-WAN将Virtual WAN与传统WAN结合，在这之上做overlay。对于应用程序来说，不需要清楚底层的WAN连接究竟是什么。在不需要传统WAN的场景下，SD-WAN就是Virtual WAN。</li>
</ul>
</li>
<li><p><strong>能够在多种连接之间动态选择链路，以达到负载均衡或者资源弹性。</strong></p>
</li>
<li><ul>
<li>与Virtual WAN类似，动态选择多条路径。SD-WAN如果同时连接了MPLS和Internet，那么可以将一些重要的应用流量，例如VoIP，分流到MPLS，以保证应用的可用性。对于一些对带宽或者稳定性不太敏感的应用流量，例如文件传输，可以分流到Internet上。这样减轻了企业对MPLS的依赖。或者，Internet可以作为MPLS的备份连接，当MPLS出故障了，至少企业的WAN网络不至于也断连。</li>
</ul>
</li>
<li><p><strong>简单的WAN管理接口。</strong></p>
</li>
<li><ul>
<li>凡是涉及网络的事物，似乎都存在管理和故障排查较为复杂的问题，WAN也不例外。SD-WAN通常也会提供一个集中的控制器，来管理WAN连接，设置应用流量policy和优先级，监测WAN连接可用性等等。基于集中控制器，可以再提供CLI或者GUI。以达到简化WAN管理和故障排查的目的。</li>
</ul>
</li>
<li><p><strong>支持VPN，防火墙，网关，WAN优化器等服务。</strong></p>
</li>
<li><ul>
<li>SD-WAN在WAN连接的基础上，将提供尽可能多的，开放的和基于软件的技术。</li>
</ul>
</li>
</ul>
<p>基本的SD-WAN的操作就是多条WAN路径的选择规划，如下图所示。</p>
<p><img src="https://image01.zhang-zhe.cn/20190529200155.png" loading="lazy"></p>
<h2 id="SD-WAN产品"><a href="#SD-WAN产品" class="headerlink" title="SD-WAN产品"></a><strong>SD-WAN产品</strong></h2><p><strong>当我们说SDN时，更多是一种针对DC的网络架构。而SD-WAN却是一种可以购买技术产品</strong>。与Virtual WAN类似，SD-WAN产品可以是物理的，也可以是虚拟的<strong>。</strong>在WAN架构中，SD-WAN与WAN edge router放置在一起，用来增强WAN edge router甚至替代WAN edge router。从其放置的位置可以看出，客户所有的WAN流量都会流经SD-WAN。对于纯Virtual WAN而言，其产品越来越多的部署在云上。SD-WAN产品的位置如下图所示：</p>
<p><img src="https://image01.zhang-zhe.cn/20190529200212.png" loading="lazy"></p>
<p>现实中，各个宣称提供SD-WAN的公司，其产品也不尽相同。主要可以分为两大类，一类是提供SD-WAN设备，可以是专用设备，也可以是现有设备集成了SD-WAN功能，另一类是提供WAN as a Service，自己提供WAN网络的同时，搭配售卖SD-WAN设备。</p>
<p>第一类就是前面介绍的SD-WAN。这里再说一说第二类，以Aryaka为例，Aryaka通过与各个SP合作，自己构建了一个全球范围的WAN。Aryaka的WAN在全球有26个接入点。据称，对于世界上95%的企业来说，都可以找到小于30毫秒的延时的接入点。企业用户需要通过Internet接入到Aryaka的接入点，之后数据就跑在Aryaka的骨干网上。Aryaka相当于对WAN做了虚拟化，在这之上虚拟出了多个私有WAN，供用户使用。Aryaka的SD-WAN设备用来连接用户网络和其接入点。这种方式，部署简单，传统的MPLS部署可能需要几个月，而现在几个小时就可以了。成本上也能大大降低，Aryaka的产品比较同等的MPLS，节约了超过50%的成本。下图是Aryaka的组网示意图。</p>
<p><img src="https://image01.zhang-zhe.cn/20190529200230.png" loading="lazy"></p>
<p>Packetpusher列举除了当下知名的SD-WAN相应公司：<a href="https://link.zhihu.com/?target=http://packetpushers.net/virtual-toolbox/list-sd-wan-vendors/">List of SD-WAN Vendors</a>. 有兴趣可以看一下。虽然厂商众多，但是根据2017年一季度的数据，Viptela占据21%的SD-WAN市场，VeloCloud占据14%的市场。</p>
<h2 id="SD-WAN相关的技术"><a href="#SD-WAN相关的技术" class="headerlink" title="SD-WAN相关的技术"></a><strong>SD-WAN相关的技术</strong></h2><p>我们讲了SD-WAN的特点，介绍了SD-WAN产品，最后来看一下与SD-WAN类似或者相关的技术，通过与这些技术的对比，进一步来说明SD-WAN。</p>
<h2 id="Hybrid-WAN"><a href="#Hybrid-WAN" class="headerlink" title="Hybrid WAN"></a>Hybrid WAN</h2><p>Hybrid WAN是指采用同时采用多种WAN连接，通常就是私有MPLS连接和Internet连接。企业通过Hybrid WAN技术，可以将一些应用流量分流到Internet连接上来。毕竟，私有MPLS连接成本不低。从这点看，Hybrid WAN与前面描述的SD-WAN非常接近。实际<a href="https://link.zhihu.com/?target=http://www.infovista.com/blog/index.php/2015/08/27/sd-wan-hybrid-wan-architectures-the-roles-of-each-in-the-enterprise/">InfoVista</a>将hybrid WAN看作是SD-WAN的前身。不过Hybrid WAN只是强调同时使用多条WAN连接，SD-WAN在这之上加上了software-defined的概念，这包括了集中控制，智能分析和动态创建网络服务等。Hybrid WAN仍然占据了WAN市场较大一部分，当用户需要升级或者需要更灵活的WAN连接管理时，SD-WAN会是一个不错的替代。</p>
<h2 id="WAN-Optimization"><a href="#WAN-Optimization" class="headerlink" title="WAN Optimization"></a>WAN Optimization</h2><p>WAN Optimization是指提高数据在WAN上传输效率的技术的集合。SD-WAN关注的是使用低成本线路，以达到高性能线路传输效果。而WAN Optimization关注的是网络数据包如何更有效的在已有线路上传输。在实际中，SD-WAN可以配合WAN Optimization使用。在SD-WAN场景下，WAN Optimization通常是以虚拟的形式存在。</p>
<h2 id="WAN-edge-router"><a href="#WAN-edge-router" class="headerlink" title="WAN edge router"></a>WAN edge router</h2><p>前面说过，SD-WAN实际上能增强WAN edge router甚至取而代之。传统的网络厂商一般是在自己的WAN edge device（路由器，NGFW）里集成SD-WAN功能，而新兴的SD-WAN创业公司，更倾向于专有的SD-WAN设备，或者虚拟的SD-WAN产品，来配合WAN edge router。</p>
<h2 id="MPLS"><a href="#MPLS" class="headerlink" title="MPLS"></a>MPLS</h2><p>SD-WAN的倡导者通常会宣称SD-WAN是用来替代MPLS的。不过，只要对网络流量可靠的QoS还有需要，那么MPLS或者其他的传统WAN连接技术仍然是不能替代。现实中，SD-WAN厂商通常会建议MPLS和Virtual WAN一起部署。对于高优先级流量，仍然走MPLS。从技术的角度来看，MPLS，可以通过Traffic Engineering完全控制骨干网网络流量。而SD-WAN，其所有的控制都是在网络边缘。网络对于SD-WAN来说就是个黑盒子。所以总的来说，SD-WAN可以减轻企业对MPLS的依赖，但是不能完全消除MPLS。</p>
<h2 id="NFV"><a href="#NFV" class="headerlink" title="NFV"></a>NFV</h2><p>SD-WAN产品需要支持基于软件的VPN，防火墙，WAN Optimization等。这可以在SD-WAN上实现，也可以通过NFV技术向SD-WAN添加相应的VNF来实现。NFV和SD-WAN都是虚拟网络服务，两者并不互斥，可以配合工作。</p>
<h2 id="SDN"><a href="#SDN" class="headerlink" title="SDN"></a>SDN</h2><p>与SDN的联系更多是概念上。前面已经提过了SD-WAN与SDN的区别。这里再引用一个报告，Riverbed 2015年通过对260个样本调查发现，29%的用户正在研究SD-WAN，而已经有5%的用户在使用SD-WAN。相比之下，77%的用户在研究SDN，只有13%在使用。SD-WAN的先驱使用者是零售商和金融机构，他们都有大量的分支机构。SDN是对现有网络架构的更新，虽然说SDN架构优势明显，但是应用到实际中，因为企业现有网络架构在还能用之前，没人会提出更换成SDN架构，企业不会承担相应的成本和风险。而SD-WAN，最直接的效应就是减少企业在WAN上的投入，特别是分支机构较多的企业。设计到钱的问题的时候，总是比涉及技术更容易在企业推广。并且SD-WAN是增量变化，企业有时可以在原有WAN架构的基础上新增SD-WAN功能。因此，普遍认为SD-WAN的发展速度会更快。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a><strong>最后</strong></h2><p>很多组成SD-WAN的技术并不新颖。SD-WAN更像是一些现有技术的打包和增强。<a href="https://link.zhihu.com/?target=http://www.aryaka.com/press/aryakas-2017-state-wan-report-reveals-almost-50-enterprise-traffic-composed-cloud-saas-traffic/?utm_adgroup=ticker">Aryaka 2017年的一份报告</a>指出，有将近50%的企业网络流量是云和SaaS流量。应用流量的攀升，促进了WAN连接的变革，进而促进了SD-WAN的发展。通过SD-WAN，识别应用流量，分配至不同的WAN连接，多条WAN连接，增强网络稳定性。通过软件定义的方式，简单，灵活的管理WAN连接，使得以较低成本，能够实现高效的WAN数据传输。</p>
<p>这似乎跟云计算的发迹很像啊。</p>
<p>转载自知乎 肖宏辉 链接：<a href="https://zhuanlan.zhihu.com/p/27775512">https://zhuanlan.zhihu.com/p/27775512</a></p>
]]></content>
      <categories>
        <category>SDN</category>
      </categories>
      <tags>
        <tag>SDN</tag>
      </tags>
  </entry>
  <entry>
    <title>数据平面与控制平面&amp;南北流量与东西流量</title>
    <url>/2019/05/24/51/</url>
    <content><![CDATA[<h2 id="1-管理平面-控制平面"><a href="#1-管理平面-控制平面" class="headerlink" title="1. 管理平面/控制平面"></a>1. 管理平面/控制平面</h2><p>管理平面和控制平面统称为控制平面。</p>
<h3 id="1-1-管理平面"><a href="#1-1-管理平面" class="headerlink" title="1.1 管理平面"></a>1.1 管理平面</h3><p>管理平面是提供给网络管理人员使用TELNET、WEB、SSH、SNMP、RMON 等方式来管理设备，并支持、理解和执行管理人员对于网络设备各种网络协议的设置命令。管理平面提供了控制平面正常运行的前提，管理平面必须预先设置好控制平面中各种协议的相关参数，并支持在必要时刻对控制平面的运行进行干预。</p>
<h3 id="1-2-控制平面"><a href="#1-2-控制平面" class="headerlink" title="1.2 控制平面"></a>1.2 控制平面</h3><p>控制平面用于控制和管理所有网络协议的运行，例如生成树协议、VLAN 协议、ARP协议、各种路由协议和组播协议等等的管理和控制。控制平面通过网络协议提供给路由器/交换机对整个网络环境中网络设备、连接链路和交互协议的准确了解，并在网络状况发生改变时做出及时的调整以维护网络的正常运行。控制平面提供了数据平面数据处理转发前所必须的各种网络信息和转发查询表项。控制平面并不占用过多的硬件资源，但在正常状况下依然是网络设备CPU资源的主要占用平面，因此除了优化网络设备对于控制平面的调度流程和效率，一般还可以通过提供多CPU或提高CPU的处理性能来提高网络设备的控制平面性能。</p>
<p>控制平面主要靠CPU资源来处理信息。</p>
<p>show ip route 查看IP路由表，属控制平面范畴（路由信息数据库，RIB）</p>
<h2 id="2-数据转发平面"><a href="#2-数据转发平面" class="headerlink" title="2.数据转发平面"></a>2.数据转发平面</h2><p>网络设备的基本任务是处理和转发不同端口上各种类型的数据，对于数据处理过程中各种具体的处理转发过程，例如L2/L3/ACL/QOS/组播/安全防护等各功能的具体执行过程，都属于数据转发平面的任务范畴。数据转发平面在网络设备的各种平面任务当中需要占用决大部分的硬件资源，也直接地对其性能表现起决定作用，各个厂家都通过各种技术手段和芯片技术努力地提高网络设备数据平面的处理性能。</p>
<p>数据转发平面主要靠硬件资源来处理信息。</p>
<p>show ip cef 查看最终迭代的出接口，属数据平面范畴（转发信息数据库，FIB）</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><em>关于路由器常说的数据层面和控制层面</em></li>
</ul>
<h3 id="南北流量"><a href="#南北流量" class="headerlink" title="南北流量"></a>南北流量</h3><p>数据中心纵向的流量，即server-client的流量</p>
<h3 id="东西流量"><a href="#东西流量" class="headerlink" title="东西流量"></a>东西流量</h3><p>数据中心横向的流量，即server-server的流量</p>
]]></content>
      <categories>
        <category>知识</category>
      </categories>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>SD-WAN技术分析</title>
    <url>/2019/05/24/52/</url>
    <content><![CDATA[<p><strong>摘要：</strong>本文介绍了企业WAN技术的演进、SD-WAN应用场景以及解决方案、SD-WAN现状及挑战等。</p>
<p><strong>关键词：</strong>WAN、SD-WAN、宽带接入、Internet</p>
<p><strong>1.概述</strong></p>
<p>宽带接入以及Internet骨干网容量的持续提升，促使企业WAN技术变革。在已有专线的基础上，SD-WAN提供了一种低成本的快捷方案，正受到业界的追捧。本文介绍企业WAN技术演进、SD-WAN应用场景及解决方案、SD-WAN现状及挑战等。</p>
<p><strong>2.企业WAN技术演进</strong></p>
<p>传统企业应用，包括E-mail、文件共享、Web应用等，采用集中部署的方式，通常企业会在总部部署数据中心，并通过租用运营商专线（包括SDH、OTN、Ethernet、MPLS等），将分支机构连接到数据中心（如图1所示）。运营商承诺专线业务的SLA，包括带宽、时延、抖动、丢包率等，满足企业在各分支机构部署各种应用的需求（比如，存储服务、统一通信系统等）。传统专线网络可获取性比较差，光纤/电路需要单独部署，耗费的周期长；专线跨越多个网络/运营商时，业务开通周期更长；并且，专线价格昂贵，业务不能够灵活订购，通常需要比较长的合同周期（也是因为业务的开通成本比较高）。为尽可能提升专线的利用率，各种WAN优化及应用加速技术应运而生，包括QoS流控、TCP协议优化、协议代理、数据缓存技术、数据压缩技术等。</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1419448/zte4yd1z3u.jpeg?imageView2/2/w/1620" alt="img" loading="lazy"></p>
<p>图1传统企业WAN网络</p>
<p>随着以太网技术的普及，运营商提供以太网服务，可以提供E-Line、E-Tree以及E-LAN服务，带宽的订购相对灵活。运营商目前引入SDN技术，在WAN网络中部署SDN控制器以及协同器,专线业务发放的效率也将显著提升(如图2所示)。专线的高可靠性，依托于运营商专网，或者，运营商为专线分配独占的网络资源，专线的成本依然很高。</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1419448/6pxo65ixzz.jpeg?imageView2/2/w/1620" alt="img" loading="lazy"></p>
<p>图2 运营商SDN-WAN网络</p>
<p>互联网容量持续增长，企业分支机构和总部通过互联网连接，逐渐可行，并且互联网租赁费用适宜。企业租用互联网链路（xPON、xDSL、以太网等）的成本，通常是MPLS连接成本的1/3到1/2，并且，业务发放的周期短，租用灵活。企业在传统专线的基础上，通过Internet连接企业总部及分支机构（如图3所示）。这种场景通常称为Hybrid-WAN，要求能够基于网络的实时状态，将业务动态分发到总部和分支机构之间的多条路径上。最初的Hybrid-WAN解决方案，在分支机构部署复杂的CPE设备，通常是在路由器上集成各种网络增值服务，包括WAN优化、安全（防火墙、VPN）、x86硬件平台（可扩展新的网络增值服务）等。这种传统路由器的配置管理复杂，需要专业人员维护。</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1419448/1bumktpbw8.jpeg?imageView2/2/w/1620" alt="img" loading="lazy"></p>
<p>图3混合WAN网络(Hybrid-WAN)</p>
<p>随着移动办公以及云计算的引入，企业应用的部署发生了巨大的变化。特别是，各种公有云服务，包括Office 365、Salesforce、Skype(for Business)、Box、Off Premise Storage等，使得企业网的流量发生巨大变化——企业分支对公有云的访问量越来越高（如图4所示）。公有云通常部署在少数几个数据中心，通过Internet访问，网络质量无法保障，一些业务的体验可能会受限。</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1419448/2up9z8qqiu.jpeg?imageView2/2/w/1620" alt="img" loading="lazy"></p>
<p>图4基于公有云（/私有云）的企业应用</p>
<p>SDN理念逐渐在ICT领域发酵，并被引入到企业WAN市场，促使SD-WAN衍生。</p>
<p><strong>3.SD-WAN应用场景及解决方案分析</strong></p>
<p>SD-WAN继承SDN控制与转发分离、集中控制等理念，在企业WAN中部署软件控制系统，提供业务快速部署、业务智能管理等功能，帮助企业应对云服务及办公移动化所带来的挑战。典型的SD-WAN应用场景可以分为三类：Hybrid-WAN场景、公有云访问场景以及BYOD场景。</p>
<p><strong>3.1.Hybrid-WAN场景</strong></p>
<p>在传统的Hybrid-WAN解决方案中，引入集中控制器。如图5所示：</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1419448/xlmlh8vbtu.jpeg?imageView2/2/w/1620" alt="img" loading="lazy"></p>
<p>图5 Hybrid-WAN场景</p>
<p>这种SD-WAN基础场景应用，提供基础的控制与转发分离功能。通过引入SD-WAN控制器，完成分支机构CPE设备的集中管理以及自动化配置，包括各种Internet接入及专线接入的配置管理等。SD-WAN可以提供企业WAN网络及应用的可视化，提供智能路由功能，能够基于WAN网络的实时状态，将各种应用的数据流智能调度到各种WAN链路上，保障时延抖动敏感应用（语音等）的服务质量。SD-WAN控制器可灵活部署在企业侧、或者云端。</p>
<p>初期Hybrid-WAN场景部署，可以不改动已有的CPE设备。但企业部署多厂商CPE设备时，要求SD-WAN控制器提供比较灵活的南向接口。</p>
<p>新部署的CPE设备，功能相对简单，复杂的功能可部署在云端。CPE设备具备即插即用特性——可以上电后自动连接SD-WAN控制器，并完成基础配置。CPE可以提供各种WAN链路网络状态的实时监测功能，或者，通过单独部署探测器(Probe)实现。</p>
<p>网络增值服务部署在云端，可以根据企业用户的需求，灵活提供。如图6所示，运营商(/第三方服务商)通常将分支机构的业务连接到其（边缘）云节点，在云节点内部提供各种增值服务。</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1419448/by7dznd9il.jpeg?imageView2/2/w/1620" alt="img" loading="lazy"></p>
<p>图 6 网络增值服务云端部署</p>
<p><strong>3.2.公有云接入场景</strong></p>
<p>运营商针对公有云服务进行优化，在企业分支(或总部)，识别出公有云数据，通过运营商的专网进行承载，并接入到公有云最近的数据中心。如图7所示：</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1419448/oku44ekiar.jpeg?imageView2/2/w/1620" alt="img" loading="lazy"></p>
<p>图7公有云接入场景</p>
<p>这种场景下，运营商可以建立一张专网，接入各种公有云资源。在企业分支(/总部)的CPE设备(或者运营商的边缘云节点)，能够识别出公有云业务，并且将业务流发送到运营商最近的公有云接入(/交换)节点。</p>
<p><strong>3.3.移动办公场景</strong></p>
<p>企业员工从任意地点接入企业应用，包括企业部署的私有云以及公有云。运营商可提供安全接入服务，将员工接入到最近的服务点。如图8所示：</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1419448/rio59vcmya.jpeg?imageView2/2/w/1620" alt="img" loading="lazy"></p>
<p>图8移动办公场景</p>
<p>移动办公，特别是BYOD的广泛部署，使得企业网面临更严重的安全威胁。SD-WAN集中控制系统，可以将安全策略推送到各分支机构，同时，可部署多种安全防护功能，并能够同SDP(Software Defined Perimeter软件定义边界)技术结合。针对用户互联网接入场景，运营商/第三方服务商可以提供IP Sec以及SSL等安全接入服务。</p>
<p><strong>4.SD-WAN现状及挑战</strong></p>
<p>据IDC预测，相对传统企业WAN方案，SD-WAN可以节省至少20%的费用，2020年SD-WAN市场规模将超过60亿美元。Gartner在2016年7月底发布的技术曲线中，将SD-WAN服务以及SD-WAN产品作为热点技术，预测未来2~5年将大规模商用。</p>
<p>SD-WAN服务领域，DT、Verizon、SingTel、NTT等运营商积极应对挑战，进行SD-WAN服务试点，希望在网络基础连接服务的基础上，充分利用运营商自有的数据中心(包括最接近用户的边缘数据中心)，提供网络增值服务，包括防火墙、WAN加速、<a href="https://cloud.tencent.com/product/ns?from=10680">网络安全</a>等。也出现了一些第三方服务商，通过购买运营商专线，搭建自己的广域网以及核心交换节点，并向其他企业提供SD-WAN服务。</p>
<p>SD-WAN产品领域则是一片红海，各厂商解决方案暂无统一的标准，使得企业部署SD-WAN时，难以抉择。</p>
<p>SD-WAN本身也存在一定的局限性，当前主流方案是针对Hybrid-WAN方案的优化。SD-WAN是企业IT网络的一部分，企业IT包括总部和分支机构的各种LAN网络、企业数据中心、企业私有云等，企业IT网络部署各种应用，这些网络及应用是一个整体，网络的运维和监控，需要统一协调。运营商/第三方服务商提供SD-WAN服务，应当需要利用已有的运营及运维系统，而不是单独部署一套新的运营及运维系统。</p>
<p><strong>5.总结</strong></p>
<p>Internet接入及骨干容量的提升，带来了传统WAN市场的变革，SD-WAN提供了一种快速、低成本的部署方式，受到企业以及运营商的追捧。SD-WAN领域在不断创新，是初创公司的沃土。SD-WAN整体解决方案涉及企业、运营商、第三方，解决方案的开放性是各方所关注以及努力的方向。</p>
<p><strong>参考文献</strong></p>
<p>[1]Marcia Savage. SD-WAN Ramping Up In The Enterprise. 2016-07</p>
<p>[2]Jessica Scarpati. SD-What? Understanding SD-WAN. 2015-09</p>
<p>[3]Johna Till Johnson. What’s the difference between hybrid, virtual and SD-WAN?, 2016-06</p>
<p>[4]Andrew Lerner, Mark Fabbi, Neil Rickard, et al. Cool Vendors in Enterprise Networking, 2016. Gartner. 2016-04</p>
<p>[5]Mike Fratto, SD-WAN 2015 Market Update:Vendor Snapshots Show a Crowded, Competitive Field Attempting to Diversify, Current Analysis. 2015-12</p>
]]></content>
      <categories>
        <category>SDN</category>
      </categories>
      <tags>
        <tag>SDN</tag>
      </tags>
  </entry>
  <entry>
    <title>DCI平面</title>
    <url>/2019/05/24/53/</url>
    <content><![CDATA[<p>现在的<a href="http://dc.idcquan.com/">数据中心</a>早已不是一座孤立的机房，而是一个建筑群。一个数据中心可以包含很多个分支数据中心，可以说是一个数据中心群，这些分支数据中心所处的位置不同，却可以通过网络互联起来，共同完成相应的业务部署。像阿里、腾讯、百度等这些大型互联网公司，为了提升客户访问体验，会在不同省会都会建立自己的数据中心分支机构，以便满足不同地区的客户访问需求，数据中心早已不再局限于一座或几座机房。这些数据中心要协同运转，就需要相互之间交互信息，这就有了互连需求，产生了DCI网络，即Data Center Inter-connect，这里囊括了物理网络层面和逻辑网络层面的技术。要实现不同地区的数据中心互联，有多种方式：可以直接Internet互联，可以使用专线互连，也可以使用光纤直连，还可以增加一些加密手段，防止传输的数据泄露，这里衍生出了很多新的技术，本文就来讲述一下DCI相关的技术，以便大家对DCI有所了解。</p>
<p><img src="http://upload.idcquan.com/2017/0420/1492666237436.jpg" alt="数据中心3" loading="lazy"></p>
<p>DCI互联通常有三种方式。一种是网络三层互联，也称为数据中心前端网络互联，所谓“前端网络”是指数据中心面向企业园区网或企业广域网的出口，不同数据中心的前端网络通过IP技术实现互联，园区或分支的客户端通过前端网络访问各数据中心，当主用数据中心发生灾难时，前端网络将实现快速收敛，客户端通过访问备用的数据中心以保障业务连续性；一种是网络二层互联，也称为数据中心服务器网络互联，在不同的数据中心服务器网络接入层，构建一个数据中心间大二层网络，以满足服务器集群或虚拟机动态迁移等场景对二层网络接入的需求；最后一种是 SAN互联，也称为后端存储网络互联，借助DWDH、SDH等传输技术实现数据中心之间磁盘阵列的数据复制。在服务器集群技术普及之前，这三种互联方式都有自己的存在空间，但集群应用普及之后，前两种网络无法适从了。服务器集群是借助集群软件将网络上的多台服务器关联在一起，提供一致的服务，对外表现为一台逻辑服务器。集群软件需要各服务器间采用二层网络互联，才能实现无感知的虚拟机切换。如果采用三层互联，将无法实现虚拟迁移，如果采用二层打通，安全性成为最大隐患，数十个数据中心形成一个二层网络，一个广播风暴就会将所有数据中心搞瘫，所以两种方式都无法适应集群部署的应用，于是乎开始出现了很多DCI专用技术。</p>
<p><strong>MPLS技术</strong></p>
<p>基于MPLS技术的实现方案，要求数据中心之间互联网络是已部署为MPLS技术的核心网，这样可以直接通过VLL和VPLS完成数据中心直接的二层互联。MPLS包括二层VPN技术和三层VPN技术，VPLS协议就是二层VPN技术，标准化程度很高，在很多行业都有部署应用。不过，VPLS技术比较复杂，部署及运维的管理难度较大，各种接入方式和类型都比较多，很多时候VPLS网络建好以后，很多人都不敢去动网络配置，容易出问题。VPLS在国外的网络中常见一些，而在国内VPLS的部署并不多见，更多的是三层MPLS，不过要支持服务器集群应用，就不能靠MPLS了，只能是VPLS.VPLS这种技术，其优点是基于MPLS技术可以较为简单地实现城域/广域网络的部署，缺点是需要核心网/城域网支持MPLS技术，技术复杂不便于维护。</p>
<p><strong>IP隧道技术</strong></p>
<p>IP隧道技术是基于IP技术，在任意IP网络开启相应二层隧道来实现数据中心互联。这个方案摆脱了数据中心之间互联链路的类型限制，是目前的发展方向。IP隧道技术核心思想是通过“MAC in IP”的方式，通过隧道技术穿越三层网络实现二层网络的互通。对MAC地址的学习通过控制平面借鉴IS-IS协议来实现，隧道封装采用类似GRE的动态封装方式，最后可以支持双归属的高可用部署方式。比如思科的OTV，H3C的EVI都是这类技术，这类技术基于IP核心网络的L2VPN，可以完成站点的边缘设备上维护路由和转发信息，而无需改变站点内部和核心网络。即在IP网络上建立隧道，传递经过标签封装后的二层数据报文，从而实现跨数据中心的二层互通。数据中心二层互联方案很大程度上会受限于用户现有的网络类型，这一情况限制了数据中心对二层互联方案的应用推广。IP隧道技术是一种新的组网方案，能够无视互联网络的类型差异而统一组网，实现多个数据中心之间的异构网络二层互联。</p>
<p><strong>VXLAN-DCI隧道技术</strong></p>
<p>VXLAN是基于IP网络、采用“MAC in UDP”封装形式的二层VPN技术，从事网络工作的对此都应该不陌生。现在如火如荼新建的数据中心，网络部分基本都采用的VXLAN技术，这是未来数据中心网络最为重要的技术之一，是实现网络虚拟化的前提。VXLAN隧道只能用于数据中心内部，实现数据中心内部虚拟机的互联。VXLAN-DCI隧道则可用来实现数据中心之间的互联，是一种新型DCI技术，这是部署在VXLAN网络中的重要技术。</p>
<p>从这三种技术不难看出有一个共同特点，都用到了封装，即在原始报文上再增加一层二层报文头，从而实现报文的大二层转发，实现虚拟机可以在所有数据中心之间自由迁移的功能。这些技术充分保留了原有网络的架构，在原有网络上再建设一套虚拟的大二层网络，将所有数据中心二层打通，虽然封装技术增加了报文封装，浪费掉一些网络带宽，但却解决了数据中心互联的大问题。现在SDN技术火热，SDN也可以在数据中心互联中起到很大作用。通过部署SDN，可做到弹性计费，降低运维成本，简化操作。未来的数据中心互联中必将看到SDN的身影。</p>
]]></content>
      <categories>
        <category>IDC</category>
      </categories>
      <tags>
        <tag>IDC</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么你家里的网速慢？答案全在这里</title>
    <url>/2019/06/11/57/</url>
    <content><![CDATA[<p>“什么破网络？不是说好的100M吗？&amp;*￥#%……”</p>
<p>这样的投诉事件多次上演，科普一下“网速为什么慢”很必要。</p>
<p>1 你家的宽带是怎样访问互联网的？</p>
<p>如果把上网比喻为自来水供水，整个过程无非就是由三部分组成：水源、供水管道和茶壶。</p>
<p>水源就是你访问的互联网网站，供水管道就是运营商的网络，茶壶就是你家里电脑、平板等上网设备。</p>
<p>水要流到你的茶壶里，其实是一个非常复杂的过程。宽带网络是一个极其复杂的端到端系统，当你坐在家里上网时，数据要经流多个网络节点才能到达你的电脑或手机，如下图所示：</p>
<p><img src="https://n.sinaimg.cn/translate/483/w580h703/20180322/EaT3-fysnevk8046818.jpg" alt="img" loading="lazy"></p>
<p>图中蓝色和红色路径正是你访问互联网网站时的数据走向示意图。</p>
<p>首先你访问的网站托管在运营商的IDC机房</p>
<p><img src="https://n.sinaimg.cn/translate/471/w710h561/20180322/tO90-fysnevk8046886.jpg" alt="img" loading="lazy"></p>
<p>访问网站的数据由运营商的国家骨干网传送到省骨干网，若你访问的网站托管在另一家运营商的IDC机房，这中间还需要运营商之间的互联互通链路</p>
<p><img src="https://n.sinaimg.cn/translate/80/w720h960/20180322/PMnV-fysnevk8047324.jpg" alt="img" loading="lazy"></p>
<p>▲核心网路由器</p>
<p>数据经过各种国家骨干网、省骨干网、地市城域网的核心网路由器多跳转发后，再通过SR/BRAS来到接入网的OLT…</p>
<p><img src="https://n.sinaimg.cn/translate/80/w720h960/20180322/aIlB-fysnevk8047448.jpg" alt="img" loading="lazy"></p>
<p>▲OLT设备</p>
<p>再经过光分器连接到ONU，再连接到WiFi路由器，WiFi无线网络再将数据传送到你的电脑、平板或手机。</p>
<p>现在你终于可以上网了。这背后除了网络内无数的通信设备，还有一群苦逼的通信维护工程师…</p>
<p><img src="https://n.sinaimg.cn/translate/343/w588h555/20180322/ESEQ-fysnevk8047490.jpg" alt="img" loading="lazy"></p>
<p>现在，根据水流的路径，我们来看看是什么影响了你的网速。</p>
<p>简单的讲，影响用户上网网速主要涉及用户端、网络、网站三个环节，每个环节出现问题，都可能引起上网不畅。</p>
<p>2 用户端问题导致网速慢</p>
<p>用户端指的是从WiFi路由器到电脑、平板、手机等上网设备这一段。从用户投诉情况来看，“网速太慢”的投诉有90%以上是由用户端原因造成。</p>
<p>宽带运营商就像是自来水公司，他们将水输送到你家里，WiFi路由器就像是你家里的连接水龙头、淋浴花洒等的内部水管道。与自来水公司不同的是，即使你家里的“内部管道”出了问题，运营商的维护工程师们也会尽力帮你维修，但他们能做的也只有这些了，如果你家的水龙头、淋浴花洒等质量有问题，他们也无能为力，这需要你更换质量更好的设备。</p>
<p>这些问题主要包括：</p>
<p>1）终端上网设备硬件老旧、性能较低。如果电脑网卡性能差、内存不够等，将导致无法达到最高网速。比如，宽带升级到了200M，但是电脑网卡还是10-100M的，网速当然不达标。</p>
<p>2）终端设备软件问题，比如浏览器插件过多、电脑感染病毒、木马等都会影响网速。</p>
<p>3）配置不当，比如DNS配置错误，用户错误配置DNS可能会造成跨营运商、跨地区访问而导致上网慢，这种情况经常发生在用户更换运营商后。正确的方法是应该在电脑或路由器上使用本地运营商的DNS地址，如果不知道本地运营商的DNS地址，可采用自动获取DNS或者拨打宽带客服电话咨询。</p>
<p>4）线缆问题，如网线、水晶头损坏、老化或质量差等。</p>
<p>5）WiFi路由器问题</p>
<p>WiFi路由器问题是导致网速慢的常见原因，如何让你的WiFi运行良好，让网速飞起来，建议如下：</p>
<p>①选择正确的安装位置</p>
<p>如果你家的WiFi太慢，别激动，请深呼吸，再抬头看看你家的灯泡。如果你想让房间里的每个角落都被照亮，你会将灯泡安装在哪里？</p>
<p><img src="https://n.sinaimg.cn/translate/529/w209h320/20180322/STKG-fysnevk8047523.jpg" alt="img" loading="lazy"></p>
<p>Wi-Fi就像一个灯泡：如果你想要更好的信号覆盖，更快的网速，请尽可能把它安装在更好的位置。</p>
<p>这是一张WiFi信号的传播路径图…</p>
<p><img src="https://n.sinaimg.cn/translate/469/w300h169/20180322/WidU-fysnevk8047601.gif" alt="img" loading="lazy"></p>
<p>你可以看到WiFi信号不但要遭受墙壁的反射，还会因墙壁或其他障碍物阻挡而变得越来越弱，室内信号不能到达的覆盖盲区也是清晰可见的。</p>
<p>所以，如果你想上网速度快，尤其是要享受高清的IPTV电视，请多给WiFi路由器一点特权，就像你刚买了一幅漂亮的画，把它挂在客厅里最显眼的位置，而不是放在角落或隐藏在壁橱中。</p>
<p>此外，WiFi使用无线电波工作，任何可能发射无线电波的电子设备都可能会干扰你的WiFi连接，比如电视机、微波炉、无绳电话等，请让你的WiFi路由器尽可能远离这些设备。</p>
<p>②合理选择WiFi路由器</p>
<p>刚才说了，要想高速上网，你应该重视你家里的WiFi路由器，这包括选择一个质量更好的设备。</p>
<p>据统计，有80%以上的用户使用100元以下的WiFi路由器，而这个价格的路由器故障率普遍在15%以上，而100元以上的路由器故障率要低很多，在10%以下。</p>
<p>在购买WiFi路由器时，也请认准其支持的WiFi协议，不同的WiFi协议支持的最高网速是不一样的，可参考下表：</p>
<p><img src="https://n.sinaimg.cn/translate/20/w600h220/20180322/CPIz-fysnevk8047692.jpg" alt="img" loading="lazy"></p>
<p>另外，相对于2.4GHz，支持5GHz的路由器通常速率更高，但覆盖距离更短；更多的MIMO技术可支持更快的速率。</p>
<p>如今网络已经像水、电一样成为人们日常生活不可或缺的一部分，就像你家装修时通常会选择质量更好的水管、电线一样，选择质量更佳的路由器，把它安装在更合理的位置，我们认为网络时代的“内部水管”同样应该值得重视。</p>
<p>3 网络问题导致上网速度慢</p>
<p>网络部分是指从ONU到运营商IDC机房部分。通常的原因如下：</p>
<p>1）ONU光功率不达标等原因</p>
<p>ONU接收光功率范围为-8dBm~-24dBm，如果超出此范围的话就会导致设备无法上线。</p>
<p>OLT通过光纤、分光器、熔接头等设备连接到ONU，其间分光器损耗、熔接损耗、光纤传输损耗等将影响ONU的接收光功率，当ONU接收光功率小于-24dBm时，维护人员通常会检查ONU光纤头有无污损、入户光纤是否折损、ONU硬件是否有故障等。</p>
<p><img src="https://n.sinaimg.cn/translate/671/w445h226/20180322/HTQU-fysnevk8047745.png" alt="img" loading="lazy"></p>
<p>因此，光纤入户后请注意：</p>
<p>①不要弯折扭绞光纤，光纤曲率半径不能小于4cm，否则衰耗过大影响上网速率甚至不能连接网络。</p>
<p>②注意光猫的通风、防潮、勿摔，运行环境温度不能高于45度以上，建议避开大功率电气设备，如冰箱、空调等，以免干扰光猫设备正常运行。</p>
<p>③若无法上网时，请先查看光猫的POWER（电源指示灯）是否常亮，确认光猫电源开关是否打开，电源线是否连接。当LINK /LOS灯（链路状态指示灯）不亮时，可判断为运营商网络的光路故障。</p>
<p>2）网络拥塞、设备处理能力不足等原因</p>
<p>这包括PON口下挂用户超限、OLT设备上联带宽利用率和PTN环网利用率过高（超过70%）等造成流量拥塞、丢包，并导致网速下降，主要表现为白天闲时网速较快，而到晚间忙时，小区同时上网用户增加时，网速明显感觉下降，为此运营商通常会选择扩容的方式来解决。</p>
<p>3）互联互通、缓存、CDN、IDC等原因</p>
<p>运营商的网络就是通往互联网公司服务器（如百度、阿里、腾讯等）的管道，服务器托管在运营商的IDC机房，如果A运营商的IDC机房引入了XXX网站，而你家里用的是B运营商的宽带，现在你要访问XXX网站，就需要A运营商和B运营商网络之间互联互通，同时，B运营商还得向A运营商支付网间结算费用。受制于别人，B运营商一定会感觉很不爽。</p>
<p>这中间涉及到的运营商间的IDC出口带宽不足也会导致用户上网速度慢。</p>
<p>因此，B运营商采取的策略是：大力建设IDC，大力引入互联网内容，目标就是为了提升用户上网速率和感知。</p>
<p>另外，CDN（内容分发网络）的基本原则是将热门内容资源下沉到离用户最近的地方，节省主干网、核心网的传输带宽，使用户可就近取得所需内容，提高访问速率。CDN是视频时代、IPTV+宽带战略不可或缺的应用基础设施，在提升用户感知上发挥着重要的作用。</p>
<p>4 网站问题</p>
<p>网站问题包括：网站本身接入带宽不足、服务器处理能力不足，网站页面设计不合理，页面插件多等。</p>
<p>运营商根据互联网公司的接入带宽来连接网站或服务器，像自来水管一样，这个接入带宽决定了出水速度，若接入带宽过低，且有大量用户涌入时，你感受到的上网速率就会下降，同时服务器处理能力不足，也将导致反应速度慢，影响上网感知。</p>
]]></content>
      <categories>
        <category>TIPS</category>
      </categories>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>对服务器上出现大量的SYN_RCVD状态的TCP连接的问题分析</title>
    <url>/2019/06/28/59/</url>
    <content><![CDATA[<p>​        首先我们需要弄清楚SYN_RCVD状态是怎样产生的，通过TCP状态转换图(如下图)我们可以清楚的看到，SYN_RCVD是TCP三次握手的中间状态，是服务端口（监听端口，如应用服务器的80端口）收到SYN包并发送[SYN，ACK]包后所处的状态。这时如果再收到ACK的包，就完成了三次握手，建立起TCP连接。</p>
<p><img src="http://dl.iteye.com/upload/attachment/352766/2c25f9fd-10af-3a97-a230-614a65805c43.png" alt="img" loading="lazy"></p>
<p>​      如果服务器上出现大量的SYN_RCVD状态的TCP连接说明这些连接一直没有收到ACK包，这主要有两种可能，一种是对方（请求方或客户端）没有收到服务器发送的[SYN,ACK]包，另一种可能是对方收到了[SYN,ACK]包却没有ACK。</p>
<p>​      对于第一种情况一般是由于网络结构或安全规则限制导致(SYN,ACK)包无法发送到对方，这种情况比较容易判断：只要在服务器上能够ping通互联网的任意主机，基本可以排除这种情况。</p>
<p>​      对于第二种情况要稍微复杂一些，这种情况还有两种可能：一种是对方根本就不打算ACK，一般在对方程序有意为之才会出现，如SYN Flood类型的DOS/DDOS攻击；另一种可能是对方收到的[SYN,ACK]包不合法，常见的是SYN包的目的地址（服务地址）和应答[SYN,ACK]包的源地址不同。这种情况在只配置了DNAT而不进行SNAT的服务网络环境下容易出现，主要是由于inbound（SYN包）和outbound（[SYN,ACK]包）的包穿越了不同的网关/防火墙/负载均衡器，从而导致[SYN,ACK]路由到互联网的源地址（一般是防火墙的出口地址）与SYN包的目的地址（服务的虚拟IP)不同，这时客户机无法将SYN包和[SYN,ACK]包关联在一起，从而会认为已发出的SYN包还没有被应答，于是继续等待应答包。这样服务器端的连接一直保持在SYN_RCVD状态（半开连接）直到超时。     </p>
<p>原文链接：<a href="https://daviswang.iteye.com/blog/819176">https://daviswang.iteye.com/blog/819176</a></p>
]]></content>
      <categories>
        <category>TCP</category>
      </categories>
      <tags>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>H3C交换机端口信息说明</title>
    <url>/2019/04/13/6/</url>
    <content><![CDATA[<p>查看H3C交换机端口信息的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display interface GigabitEthernet1&#x2F;0&#x2F;1 查看端口信息。</span><br></pre></td></tr></table></figure>

<p>下面的一些命令提供参考：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display brief interface GigabitEthernet1&#x2F;0&#x2F;1 查看端口简要配置信息</span><br><span class="line">display loopback-detection 用来测试环路测试是否开启</span><br><span class="line">display transceiver-information interface GigabitEthernet1&#x2F;0&#x2F;50 显示光口相关信息</span><br><span class="line">display port-security 查看端口安全配置信息</span><br><span class="line">display garp statistics interface GigabitEthernet 1&#x2F;0&#x2F;1 显示以太网端口上的garp统计信息</span><br></pre></td></tr></table></figure>



<p>H3C 端口状态说明<br>1、Display interface的显示信息<br>本次工作希望统一Ethernet接口的信息，建议如下：<br><code>[1] GigabitEthernet3/0/1 current state : DOWN</code><br>[1] 接口状态 显示硬件链路的状态</p>
<p><code>[2] IP Sending Frames Format is PKTFMT_ETHNT_2, Hardware address is 00e0-fc00-0010</code><br>[2] 接口的输出帧封装类型和MAC地址 显示接口的删除帧封装类型和MAC地址</p>
<p><code>[3] The Maximum Transmit Unit is 1500</code><br>[3] 接口的最大传输单元 显示接口的最大传输单元</p>
<p><code>[4] Media type is not sure, loopback not set</code><br>[4] 端口的连接线类型和环回状态 显示接口的连接线类型和环回状态</p>
<p><code>[5] Port hardware type is No Connector</code><br>[5] 端口的连接器硬件类型 显示接口的连接器硬件类型</p>
<p><code>[6] Unknown-speed mode, unknown-duplex mode</code><br>[6] 端口的实际速度和双工状态 显示端口的实际速度和双工状态</p>
<p><code>[7] Link speed type is autonegotiation, link duplex type is autonegotiation</code><br>[7] 端口是否是速度、双工的自协商配置 显示端口速度、双工的自协商配置</p>
<p><code>[8] Flow-control is not supported</code><br>[8] 端口流控状态 显示端口的MDI类型（不是缺省值的情况显示）</p>
<p><code>[9] The Maximum Frame Length is 1536</code><br>[9] 端口可以正常转发的帧长度 显示端口可以正常转发的帧长度</p>
<p><code>[10] Broadcast MAX-ratio: 100%</code><br>[10] 端口的广播抑制比 显示端口的广播抑制比</p>
<p><code>[11] Allow jumbo frame to pass</code><br>[11] 端口是否允许jumbo帧通过 显示端口是否允许jumbo帧通过</p>
<p><code>[12] PVID: 1</code><br>[12] 端口的PVID 显示端口的PVID</p>
<p><code>[13] Port link-type: access</code><br>[13] 端口的链路类型 显示端口的链路类型（access，trunk，hybrid）</p>
<p><code>[14] Tagged VLAN ID : none</code><br>[14] 端口所属的tag的VLAN的列表 显示端口所属的tag的VLAN的列表</p>
<p><code>[15] Untagged VLAN ID : 504</code><br>[15] 端口所属的untag的VLAN的列表 显示端口所属的untag的VLAN的列表</p>
<p><code>[16] Last 5 minutes input rate 229 bytes/sec, 2 packets/sec</code></p>
<p>​    <code>Last 5 minutes output rate 25 bytes/sec, 0 packets/sec</code><br>[16] 接口最近五分钟输出和输入速率和报文数 实现最近五分钟输出和输入速率和报文数</p>
<p><code>[17] Input(total): 34764 packets, 14212713 bytes</code></p>
<p><code>1021 broadcasts, 0 multicasts, 0 pauses</code><br>[17] 接口的物理层输入总值统计 显示物理层输出的报文数/字节数/广播和多播/PAUSE帧<br>     总的统计值只包括正常、异常包和PAUSE帧<br><code>[18] Input(normal): 34764 packets, 14212713 bytes</code></p>
<p><code>1021 broadcasts, 0 multicasts, 0 pauses</code><br>[18] 接口的物理层输入中正常帧的统计 显示物理层输出的报文数/字节数/广播和多播/PAUSE帧<br>     正常帧的统计值包括正常数据帧和正常PAUSE帧</p>
<p><code>[19] Input(error):</code> 0 input errors, 0 runts, 0 giants, 0 throttles, 0 CRC, 0 frame,<code>                    0 overruns, 0 aborts, 0 ignored, 0 parity errors</code><br>[19] 接口的物理层输入错误统计 输入错误数，input errors等于各种重要错误信息的总和。不同的产品可以根据具体情况增加其它参数，或减少不能实现的参数。</p>
<p>​     (1) Runts: discarded packets that are smaller than the mediums minimum packet size.<br>​         ( Receive Byte Count &lt; 64 and NOT CRC Error<br>​         or Receive Byte Count &lt; 64 and Tag Packet and NOT CRC Error，<br>​         无论是否有vlan tag，数据段小于64字节，而且没有CRC校验错误的帧。)<br>​     (2) Giants: discarded packets that are larger than the mediums maximum packet size.<br>​        ( Receive Byte Count &gt; 1518 and NOT CRC Error<br>​        or Receive Byte Count &gt; 1522 and Tag Packet and NOT CRC Error，<br>​        没有vlan tag，数据段大于1518字节，小于最大帧长度，而且没有CRC校验错误的帧，和有vlan<br>​        tag，数据段大于1522字节，小于最大帧长度，而且没有CRC校验错误的帧。)<br>​     (3) Throttles: discarded packets that are incomplete frames.<br>​        ( 交换机察觉缓存或CPU过载，关闭接口接收器的情形称为 throttle，是cisco路由器上的一个概<br>​        念，我们的交换机目前不具备这个功能，一般应该显示为不支持。)<br>​     (4) CRC: discarded packets with checksum error.<br>​        ( Receive Packet CRC error，帧长度在正常范围（不带tag，长度在64到1518之间，或带tag，长<br>​        度在64到1522之间），而且CRC校验错，如果支持此项，则不支持奇偶校验错误项。)<br>​     (5) Frame: discarded packets with frame pad/sequence/alignment error, out of frame etc.<br>​        （ 不是整数字节，而是多1～7bit，因此不对齐，或乱序或空帧,而且CRC校验错误，但是不计入<br>​        CRC错误。）<br>​     (6) Overrun: the receiver hardware is unable to hand received data to a hardware buffer<br>​        because the input rate exceeds the receivers ability to handle the data.<br>​        （由于接口输入速率超过接受方处理能力，导致丢包，由于我们的交换机一般是线速转发，这项一<br>​        般应该为0，只有部分交换机对上传CPU或三层线速转发的帧有接口带宽限制，或是通过ACL实现的<br>​        带宽限制，因此被丢弃的帧，计入此项。）<br>​     (7) Aborts: Input abnormal frames that are discarded.<br>​        ( 除其他错误之外，产品认为有必要统计的错误，例如前导码异常的帧，计入此项。)<br>​     (8) Ignored: packets that are discarded because the interface hardware does not have<br>​        enough internal buffers.<br>​        ( Packet ignored，由于接口内部buffer满，丢弃的帧，与由于主系统缓存空间缺乏，导致的丢弃<br>​        帧不同。线速转发的帧，在多接口满带宽输入，单接口输出等情况下，由于输出接口的带宽不足，<br>​        数据帧将内部缓存占满，导致从接口输入的帧在进入内部缓存之前被丢弃，以及进入内部缓存的帧<br>​        超时无法输出，计入此项，上传到CPU的帧，由于CPU处理能力限制，toCPU的缓存满，导致被丢<br>​        弃，也计入此项。)<br>​     (9) Parity: Frames with parity error.<br>​        (Receive Packet parity error,如果支持此项，则不支持 CRC 错误项。)</p>
<p>[20] Output(total): 1630514 packets, 525467915 bytes<br>     774493 broadcasts, 822714 multicasts, 0 pauses</p>
<p>[20] 接口的物理层输出总值统计 显示物理层输入的报文数/字节数/广播和多播/PAUSE帧<br>     总的统计值只包括正常帧、异常帧和PAUSE帧。<br>     Pauses: Flow control pauses including Xon and Xoff.</p>
<p>[21] Output(normal): 1630514 packets, 525467915 bytes<br>     774493 broadcasts, 822714 multicasts, 0 pauses<br>[21] 接口的物理层输出正常帧统计 显示物理层输入的报文数/字节数/广播和多播/PAUSE帧<br>     总的统计值只包括正常数据帧和正常PAUSE帧。</p>
<p>[22] Output(error): 0 output errors, 0 underruns, 0 buffer failures, 0 aborts,0 deferred,<br>     0 collisions, 0 late collisions, 0 lost carrier, 0 no carrier<br>[22] 接口的物理层输出错误统计 输入丢弃数/输入错误数，output errors等于各种重要错误信息的总和。<br>     不同的产品可以根据具体情况增加其它参数，或减少不能实现的参数。<br>     (1) Underruns: There are no data in the output queue.<br>        (Transmit under run，与 Overrun相反，输出接口的缓存从输出队列中取以太网帧时，没有帧，<br>        是一种非常少见的硬件异常。有的交换机就没有单独的接口输出缓存，与接口输出队列是同一块缓<br>        存。)<br>     (2) Buffer failures: Hardware does not have enough internal buffers.<br>        (内部缓存满，如果输出队列满，输出的以太网帧将在内部缓存中暂时存储，由于内部缓存满，导<br>        致帧丢弃。由于交换机对线速转发的数据帧发生的这种异常，认为只是到达内部缓存而没有到达出<br>        接口，是个输入帧，因此计入 Input Ignored Error，只有从CPU发出的帧，由于内部缓存满，导<br>        致帧丢弃，计入此项。)<br>     (3) Aborts: Output abnormal frames that are discarded.<br>        （在半双工模式下，由于冲突检测，延迟发送超过15次的帧，被丢弃，计入此项。除其他错误之<br>        外，产品认为有必要统计的错误，例如添加前导码异常的帧，也计入此项）<br>     (4) Deferred: The packets could not be sent out for collision under half-duplex mode.<br>        (半双工模式下，由于检测到载波正在被声明，当时没有发出的包，延时一次，计数加一。)<br>     (5) Collisions: Statistic of collision detection under half-duplex mode.<br>        (半双工模式下，在以太网帧数据部分的前64字节进入线路前，由于检测到冲突，当时没有发出的<br>        包。)<br>     (6) Late collisions: Statistic of collision with GE port sending packets less than 512<br>        bytes and 10/100M port less than 64 bytes.<br>        (半双工模式下，在以太网帧数据部分的前64字节进入线路后，由于检测到冲突，当时没有发出的<br>        包。)<br>     (7) Lost carrier: Statistic of losing the carrier.<br>        （载波丢失，一般适用于串行WAN接口，发送过程中，每丢失一个载波，此计数加一，对于交换<br>        机，通常是由于线路中断造成。）<br>     (8) No carrier: Statistic of no carrier.<br>        （无载波，一般适用于串行WAN接口，当试图发送帧时，如果没有载波出现，此计数加一，对于交 换机，通常是由于线路中断造成。）</p>
<p>注意：统计项中不支持的项目填写：-<br>即：如果产品对deferred,collisions, late collisions, lost carrier, no carrie不支持<br>显示结果如下：<br>Output: 0 output errors, 0 underruns, 0 buffer failures, 0 aborts,</p>
<ul>
<li>deferred, - collisions, - late collisions, - lost carrier, - no carrier</li>
</ul>
<p>错误信息<br>2、INPUT中各类错报的含义：<br><strong>runts</strong>：超短帧，即端口收到帧长小于64字节，且没有CRC校验错误的帧；<br><strong>giants</strong>：超长帧，即端口收到帧长大于允许通过的最大长度，且没有CRC校验错误的帧；<br><strong>throttles</strong>：不完整的帧，即端口收到的帧不是整数字节，而是多1～7bit，因此不对齐，或乱序或空帧，而且CRC校验错误，但是不计入CRC错误；<br><strong>CRC</strong>：校验和错误，即端口收到的帧CRC校验和错误；<br><strong>frame</strong>：错误帧，即端口收到未知错误的帧；<br><strong>overruns</strong>：overrun帧，由于端口输入速率超过接受方处理能力，导致丢包，在网络出现拥塞时会导致overrun的出现；<br><strong>aborts</strong>：输入描述符错误，S9500交换机不存在该错误帧；<br><strong>ignored</strong>：帧丢失，由于端口输入速率超过接受方处理能力，导致丢包，在网络出现拥塞时会导致ignore的出现；<br><strong>parity errors</strong>：奇偶校验错，S9500交换机不存在该错误帧；</p>
<p>2、OUTPUT中各类错报的含义：<br><strong>underruns</strong>：帧下溢错误，S9500交换机不存在该错误帧；<br><strong>buffer failures</strong>：缓冲失败，S9500交换机不存在该错误帧；<br><strong>aborts</strong>：帧丢失，当网络存在拥塞时，导致报文不能从MAC层转发，会出现aborts错误；<br><strong>deferred</strong>：帧延时，半双工模式下，在以太网帧数据部分的前64字节进入线路后，由于检测到冲突，当时没有发出的包；<br><strong>collisions</strong>：帧冲突，S9500交换机不存在该错误帧；<br><strong>late collisions</strong>：滞后冲突帧，帧在MAC层中缓存，被滞后发送<br><strong>lost carrier</strong>：滞后发送帧，S9500交换机不存在该错误帧；<br><strong>no carrier</strong>：载波丢失帧，S9500交换机不存在该错误帧；<br>output error的情况很少会碰到。大部分问题都是input error，用户需要给出解释，如果S9500收到runts，giants，throttles，CRC，frame等错帧，需要检查对端设备或者中间的传输链路是否存在问题；如果S9500收到overruns，ignored等错帧，需要确定本端的链路带宽是否足够。</p>
<p>cisco显示端口状态     show int  端口</p>
]]></content>
      <categories>
        <category>有线</category>
      </categories>
      <tags>
        <tag>H3C</tag>
      </tags>
  </entry>
  <entry>
    <title>路由来回路径不一致的case</title>
    <url>/2019/07/05/61/</url>
    <content><![CDATA[<p>最近遇到一个路由来回路径不一致导致网络不通的问题，搜了一些资料，也和前辈讨教了一下，当个case记录下来。</p>
<p><strong>1、如果链路上存在安全设备，由于来回路径不一致，流量可能会被安全设备认为是半连接，进行阻断。防火墙状态检测一般会挡住来不路径不一致的包。如果网络结构中有防火墙，路由来回路径不一致可能直接导致网络不连通。</strong><br>2、出现问题时，给问题排查带来困难。<br>3、如果不同链路的带宽不一致，可能会导致单向拥塞。</p>
<p>非对称路由是指发送和接收数据包时，分别使用了主机和目的地设备之间两条不同的路径。</p>
<p>经过多个实战经验终于可以明确：防火墙来回路径不一致结果是不能正常通信的。</p>
<p>如下图：</p>
<p><img src="https://img-blog.csdn.net/20150210025249326?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemFpbndlaTE3NjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img" loading="lazy"></p>
<p>局域网10网段要访问文件服务器路途为</p>
<p>去：主服务器→防火墙→中间路由器→文件路由器→文件服务器</p>
<p>回：文件服务器→文件路由器→中间路由器→主服务器</p>
<p>可以看出数据包在选择路由时是可以正常到达的（实战中ping与telnet+端口也是正常的），但主服务器（10网段）要访问文件服务器（172网段）中的应用程序时，就出现异常了，压根就无法访问。这是怎么回事呢？</p>
<p>网上高手解释：</p>
<p>路由没有问题，有来有回。。。<br>路由可达。。</p>
<p>但安全设备上，过不去。。许多的安全设备会进行检查。。。<br>TCP三次握手。。缺一不可。。<br>比如你的数据出去的时候从A走。。回来的时候，从B机或备机回来，就可能会被拦截。</p>
<p>DOS攻击，就是只发起建立，而不理会回报，不会进行确认。。<br>如果只有确认报，而没有发起来。基于上下文的检测，会认为这是有问题的报文，不能转发，会当攻击、异常，直接丢弃。</p>
<p>防火墙在默认情况下是把状态检测打开的，当回包到达防火墙的时候，防火墙仅仅是收到了一个回复的数据包，这个时候防火墙会直接丢弃<br>有些防火墙是有这样的功能 选项，可以进行关闭</p>
<p>比如华为USG墙</p>
<p>在防火墙的全局模式下关闭链路的会话检测功能,即：<br>undo firewall session link-state check</p>
<p>还有些墙支持会话同步功能的，就没有问题。。</p>
<p>起初第一次碰到这种情况以为是设备版本问题，但之后陆续也出现这种情况，所以不得不认真排查了一翻。通过以下排查可以确定，防火墙来回路径不一致结果是不能正常通信的。</p>
<p>第一种认证方法：将主服务器网关改成10.45.99.199，最后访问文件服务器所有功能正常。</p>
<p>第二种认证方法：将防火墙换成路由器其他不变，最后访问文件服务器所有功能正常。</p>
<p>因此网络上的高手的解释是正确的。</p>
<p>来回路径不一致还会引起另个问题，目前有些防火墙（比如，神州数码）可以把trust到trust允许后就可以实现从主服务器正常ping及访问文件服务器，但还是引起了另外的一个问题，就是文件服务器无法ping及访问主服务器。</p>
<p>所以要想让双向网络都能正常访问那么在以后的网络规划中如果使用到防火墙时，必须杜绝这种来回路径不一致的路由。</p>
]]></content>
      <categories>
        <category>路由</category>
      </categories>
      <tags>
        <tag>路由</tag>
      </tags>
  </entry>
  <entry>
    <title>vxlan 协议原理简介</title>
    <url>/2019/07/04/60/</url>
    <content><![CDATA[<h2 id="1-vxlan-简介"><a href="#1-vxlan-简介" class="headerlink" title="1. vxlan 简介"></a>1. vxlan 简介</h2><p>VXLAN 全称是 <code>Virtual eXtensible Local Area Network</code>，虚拟可扩展的局域网。它是一种 overlay 技术，通过三层的网络来搭建虚拟的二层网络。rfc7348 (参考资料1) 上的介绍是这样的：</p>
<blockquote>
<p>A framework for overlaying virtualized layer 2 networks over lay 3 networks.</p>
</blockquote>
<p>每一个技术出来都有它要解决的问题，VXLAN 也不例外，那么我们先看看 VXLAN 到底要解决哪些问题。</p>
<ul>
<li>虚拟化（虚拟机和容器）的兴起使得一个数据中心会有成千上万的机器需要通信，而传统的 VLAN 技术只能支持 4096 个网络上限，已经满足不了不断扩展的数据中心规模</li>
<li>越来越多的数据中心（尤其是公有云服务）需要提供多租户的功能，不同用户之间需要独立地分配 ip 和 MAC 地址，如何保证这个功能的扩展性和正确性也是一个待解决的问题</li>
<li>云计算业务对业务灵活性要求很高，虚拟机可能会大规模迁移，并保证网络一直可用，也就是大二层的概念。解决这个问题同时保证二层的广播域不会过分扩大，也是云计算网络的要求</li>
</ul>
<p>传统二层+三层的网络在应对这些要求时变得力不从心，虽然很多改进型的技术比如堆叠、SVF、TRILL 等能够增加二层的范围，努力改进经典网络，但是要做到对网络改动小同时保证灵活性高却非常困难。</p>
<p>为了解决这些问题，有很多方案被提出来，vxlan 就是其中之一。vxlan 是 VMware、Cisco 等一众大型企业共同推出的，目前标准文档在 <a href="https://tools.ietf.org/html/rfc7348">RFC7348</a>。</p>
<h2 id="2-VXLAN-模型"><a href="#2-VXLAN-模型" class="headerlink" title="2. VXLAN 模型"></a>2. VXLAN 模型</h2><p>vxlan 这类隧道网络的一个特点是对原有的网络架构影响小，原来的网络不需要做任何改动，在原来网络基础上架设一层新的网络。</p>
<p>vxlan 自然会引入一些新的概念，这部分就讲讲它们。下面这张图 是 vxlan 的工作模型，它创建在原来的 IP 网络（三层）上，只要是三层可达（能够通过 IP 互相通信）的网络就能部署 vxlan。在每个端点上都有一个 vtep 负责 vxlan 协议报文的封包和解包，也就是在虚拟报文上封装 vtep 通信的报文头部。物理网络上可以创建多个 vxlan 网络，这些 vxlan 网络可以认为是一个隧道，不同节点的虚拟机能够通过隧道直连。每个 vxlan 网络由唯一的 VNI 标识，不同的 vxlan 可以不相互影响。</p>
<p><img src="http://support.huawei.com/huaweiconnect/enterprise/data/attachment/forum/dm/ecommunity/uploads/2015/1123/16/5652c940898f4.png" alt="img" loading="lazy"></p>
<ul>
<li>VTEP（VXLAN Tunnel Endpoints）：vxlan 网络的边缘设备，用来进行 vxlan 报文的处理（封包和解包）。vtep 可以是网络设备（比如交换机），也可以是一台机器（比如虚拟化集群中的宿主机）</li>
<li>VNI（VXLAN Network Identifier）：VNI 是每个 vxlan 的标识，是个 24 位整数，一共有 2^24 = 16,777,216（一千多万），一般每个 VNI 对应一个租户，也就是说使用 vxlan 搭建的公有云可以理论上可以支撑千万级别的租户</li>
<li>Tunnel：隧道是一个逻辑上的概念，在 vxlan 模型中并没有具体的物理实体想对应。隧道可以看做是一种虚拟通道，vxlan 通信双方（图中的虚拟机）认为自己是在直接通信，并不知道底层网络的存在。从整体来说，每个 vxlan 网络像是为通信的虚拟机搭建了一个单独的通信通道，也就是隧道</li>
</ul>
<p>现在来说，这些概念还是非常晦涩难理解的，我们会在下面具体讲解 vxlan 网络的报文和通信流程，希望文章结束之后再回来看这些概念能明白它们的意思。</p>
<h2 id="3-VXLAN-报文解析"><a href="#3-VXLAN-报文解析" class="headerlink" title="3. VXLAN 报文解析"></a>3. VXLAN 报文解析</h2><p>前面说过，vxlan 在三层网络上构建一个虚拟的二层网络出来，这一点能够在 vxlan 的报文上很明显地体现出来。</p>
<p>下图是 vxlan 协议的报文，白色的部分是虚拟机发送报文（二层帧，包含了 MAC 头部、IP 头部和传输层头部的报文），前面加了 vxlan 头部用来专门保存 vxlan 相关的内容，在前面是标准的 UDP 协议头部（UDP 头部、IP 头部和 MAC 头部）用来在底层网路上传输报文。</p>
<p><img src="https://ying-zhang.github.io/img/vnet-vxlan.png" alt="img" loading="lazy"></p>
<p>从这个报文中可以看到三个部分：</p>
<ol>
<li>最外层的 UDP 协议报文用来在底层网络上传输，也就是 vtep<br>之间互相通信的基础</li>
<li>中间是 VXLAN 头部，vtep 接受到报文之后，去除前面的 UDP 协议部分，根据这部分来处理 vxlan 的逻辑，主要是根据 VNI 发送到最终的虚拟机</li>
<li>最里面是原始的报文，也就是虚拟机看到的报文内容</li>
</ol>
<p>报文各个部分的意义如下：</p>
<ul>
<li>VXLAN header：vxlan 协议相关的部分，一共 8 个字节<ul>
<li>VXLAN flags：标志位</li>
<li>Reserved：保留位</li>
<li>VNID：24 位的 VNI 字段，这也是 vxlan 能支持千万租户的地方</li>
<li>Reserved：保留字段</li>
</ul>
</li>
<li>UDP 头部，8 个字节<ul>
<li>UDP 应用通信双方是 vtep 应用，其中目的端口就是接收方 vtep 使用的端口，IANA 分配的端口是 4789</li>
</ul>
</li>
<li>IP 头部：20 字节<ul>
<li>主机之间通信的地址，可能是主机的网卡 IP 地址，也可能是多播 IP 地址</li>
</ul>
</li>
<li>MAC 头部：14 字节<ul>
<li>主机之间通信的 MAC 地址，源 MAC 地址为主机 MAC 地址，目的 MAC 地址为下一跳设备的 MAC 地址</li>
</ul>
</li>
</ul>
<p>可以看出 vxlan 协议比原始报文多 50 字节的内容，这会降低网络链路传输有效数据的比例。vxlan 头部最重要的是 VNID 字段，其他的保留字段主要是为了未来的扩展，目前留给不同的厂商用这些字段添加自己的功能。</p>
<h2 id="4-vxlan-网络通信过程"><a href="#4-vxlan-网络通信过程" class="headerlink" title="4. vxlan 网络通信过程"></a>4. vxlan 网络通信过程</h2><p>通过上节的内容，我们大致了解 vxlan 报文的发送过程。虚拟机的报文通过 vtep 添加上 vxlan 以及外部的报文层，然后发送出去，对方 vtep 收到之后拆除 vxlan 头部然后根据 VNI 把原始报文发送到目的虚拟机。</p>
<p>上面的过程是双方已经知道所有通信信息的过程，但是在第一次通信之前还有很多问题有解决：</p>
<ul>
<li>哪些 vtep 需要加到一个相同的 VNI 组？</li>
<li>发送方虚拟机怎么知道对方的 MAC 地址？</li>
<li>vtep 怎么知道目的虚拟机在哪一台宿主机上？</li>
</ul>
<p>这三个问题可以归结为同一个问题：vxlan 网络怎么感知彼此的存在并选择正确的路径传输报文？</p>
<p>而且第一个问题也是不用回答的，因为 vtep 形成的组是虚构的概念，只有某些 vtep 能够正确地传递报文，它们就是在同一个组内。也就是说，我们只要回答后面两个问题就行。</p>
<p>要回答这两个问题，我们还是回到 vxlan 协议报文上，看看一个完整的 vxlan 报文需要哪些信息。</p>
<ul>
<li>内层报文：通信的虚拟机双方要么直接使用 IP 地址，要么通过 DNS 等方式已经获取了对方的 IP 地址，因此网络层地址已经知道。同一个网络的虚拟机需要通信，还需要知道<strong>对方虚拟机的 MAC 地址</strong>，vxlan 需要一个机制来实现传统网络 ARP 的功能</li>
<li>vxlan 头部：只需要知道 VNI，这一般是直接配置在 vtep 上的，要么是提前规划写死的，要么是根据内部报文自动生成的，也不需要担心</li>
<li>UDP 头部：最重要的是源地址和目的地址的端口，源地址端口是系统生成并管理的，目的端口也是写死的，比如 IANA 规定的 4789 端口，这部分也不需要担心</li>
<li>IP 头部：IP 头部关心的是 vtep 双方的 IP 地址，源地址可以很简单确定，目的地址是<strong>虚拟机所在地址宿主机 vtep 的 IP 地址</strong>，这个也需要由某种方式来确定</li>
<li>MAC 头部：如果 vtep 的 IP 地址确定了，MAC 地址可以通过经典的 ARP 方式来获取，毕竟 vtep 网络在同一个三层，经典网络架构那一套就能直接用了</li>
</ul>
<p>总结一下，一个 vxlan 报文需要确定两个地址信息：目的虚拟机的 MAC 地址和目的 vtep 的 IP 地址，如果 VNI 也是动态感知的，那么 vtep 就需要一个三元组：</p>
<blockquote>
<p>内部 MAC &lt;–&gt; VNI &lt;–&gt; VTEP IP</p>
</blockquote>
<p>根据实现的不同，一般分为两种方式：多播和控制中心。多播的概念是同个 vxlan 网络的 vtep 加入到同一个多播网络，如果需要知道以上信息，就在组内发送多播来查询；控制中心的概念是在某个集中式的地方保存了所有虚拟机的上述信息，自动化告知 vtep 它需要的信息。</p>
<p>针对这两种方式，我们下面就分别分析。</p>
<h3 id="多播"><a href="#多播" class="headerlink" title="多播"></a>多播</h3><p>多播的概念和工作原理不是这里的重点，所以就不介绍了。简单来说，每个多播组对应一个多播 IP 地址，往这个多播 IP 地址发送的报文会发给多播组的所有主机。</p>
<p>为什么要使用多播？因为 vxlan 的底层网络是三层的，广播地址无法穿越三层网络，要给 vxlan 网络所有 vtep 发送报文只能通过多播。</p>
<p>下图是在多播模式下，vxlan 的报文工作流程，位于左下方的 机器 A 要通过 vxlan 网络发送报文给右下方的机器 B。</p>
<p><img src="http://img.blog.csdn.net/20160113005124711?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img" loading="lazy"></p>
<p>vtep 建立的时候会通过配置加入到多播组（具体做法取决于实现），图中的多播组 IP 地址是 <code>239.1.1.1</code>。</p>
<ol>
<li>机器 A 只知道对方的 IP 地址，不知道 MAC 地址，因此会发送 ARP 报文进行查询，内部的 ARP 报文很普通，目标地址为全 1 的广播地址</li>
<li>vtep 收到 ARP 报文，发现虚拟机目的 MAC 为广播地址，封装上 vxlan 协议头部之后（外层 IP 为多播组 IP，MAC 地址为多播组的 MAC 地址），发送给多播组 <code>239.1.1.1</code>，支持多播的底层网络设备（交换机和路由器）会把报文发送给组内所有的成员</li>
<li>vtep 接收到 vxlan 封装的 ARP 请求，去掉 vxlan 头部，并通过报文学习到发送方 &lt;虚拟机 MAC - VNI - Vtep IP&gt; 三元组保存起来，把原来的 ARP 报文广播给主机</li>
<li>主机接收到 ARP 请求报文，如果 ARP 报文请求的是自己的 MAC 地址，就返回 ARP 应答</li>
<li>vtep-2 此时已经知道发送放的虚拟机和 vtep 信息，把 ARP 应答添加上 vxlan 头部（外部 IP 地址为 vtep-1 的 IP 地址，VNI 是原来报文的 VNI）之后通过单播发送出去</li>
<li>vtep-1 接收到报文，并学习到报文中的三元组，记录下来。然后 vtep 进行解包，知道内部的 IP 和 MAC 地址，并转发给目的虚拟机</li>
<li>虚拟机拿到 ARP 应答报文，就知道了到目的虚拟机的 MAC 地址</li>
</ol>
<p>在这个过程中，只有一次多播，因为 vtep 有自动学习的能力，后续的报文都是通过单播直接发送的。可以看到，多播报文非常浪费，每次的多播其实只有一个报文是有效的，如果某个多播组的 vtep 数量很多，这个浪费是非常大的。但是多播组也有它的实现起来比较简单，不需要中心化的控制，只有底层网络支持多播，只有配置好多播组就能自动发现了。</p>
<p>单播报文的发送过程就是上述应答报文的逻辑，应该也非常容易理解了。还有一种通信方式，那就是不同 VNI 网络之间的通信，这个需要用到 vxlan 网关（可以是物理网络设备，也可以是软件），它接收到一个 vxlan 网络报文之后解压，根据特定的逻辑添加上另外一个 vxlan 头部转发出去。</p>
<p>因为并不是所有的网络设备都支持多播，再加上多播方式带来的报文浪费，在实际生产中这种方式很少用到。</p>
<h3 id="分布式控制中心"><a href="#分布式控制中心" class="headerlink" title="分布式控制中心"></a>分布式控制中心</h3><p>从多播的流程可以看出来，其实 vtep 发送报文最关键的就是知道对方虚拟机的 MAC 地址和虚拟机所在主机的 vtep IP 地址。如果能够事先知道这两个信息，直接告诉 vtep，那么就不需要多播了。</p>
<p>在虚拟机和容器的场景中，当虚拟机或者容器启动还没有进行网络通讯时，我们就可以知道它的 IP 和 MAC（可能是用某种方式获取，也有可能是事先控制这两个地址），分布式控制中心保存了这些信息。除此之外，控制中心还保存了每个 vxlan 网络有哪些 vtep，这些 vtep 的地址是多少。有了这些信息，vtep 就能发送报文时直接查询并添加头部，不需要多播去满网络地问了。</p>
<p>一般情况下，在每个 vtep 所在的节点都会有一个 agent，它会和控制中心通信，获取 vtep 需要的信息以某种方式告诉 vtep。具体的做法取决于具体的实现，每种实现可能会更新不同的信息给 vtep，比如 HER（Head End Replication）只是把多播组替换成多个单播报文，也就是把多播组所有的 VTEP IP 地址告诉 vtep，这样查询的时候不是发送多播，而是给组内每个 vtep 发送一个单播报文；有些实现只是告诉 vtep 目的虚拟机的 MAC 地址信息；有些实现告诉 MAC 地址对应的 vtep IP 地址。</p>
<p>此外，什么时候告诉 vtep 这些信息也是有区别的。一般有两种方式：常见的是一旦知道了虚拟机的三元组信息就告诉 vtep（即使某个 vtep 用不到这个信息，因为它管理的虚拟机不会和这个地址通信），一般这时候第一次通信还没有发生；另外一种方式是在第一次通信时，当 vtep 需要这些信息的时候以某种方式通知 agent，然后 agent 这时候才告诉 vtep 信息。</p>
<p>分布式控制的 vxlan 是一种典型的 SDN 架构，也是目前使用最广泛的方式。因为它的实现多样，而且每种实现都有些许差距，这里不便来具体的例子来说明，只要明白了上面的原理，不管是什么样的实现，都能很快上手。</p>
<h2 id="5-vxlan-网络带来新的问题"><a href="#5-vxlan-网络带来新的问题" class="headerlink" title="5. vxlan 网络带来新的问题"></a>5. vxlan 网络带来新的问题</h2><p>vxlan 协议给虚拟网络带来了灵活性和扩展性，让云计算网络能够像计算、存储资源那样按需扩展，并灵活分布。和计算机领域所有技术一样，这也是一种 tradeoff，相对于经典网络来说，vxlan 主要的问题是它的复杂性和额外的开销。</p>
<h3 id="额外的报文和计算"><a href="#额外的报文和计算" class="headerlink" title="额外的报文和计算"></a>额外的报文和计算</h3><p>这一点可容易看出来，每个 vxlan 报文都有额外的 50 字节开销，如果加上 vlan 字段，开销要到 54 字节。这对于小报文的传输是非常昂贵的操作，试想如果某个报文应用数据才几个字节，原来的网络头部加上 vxlan 报文头部都能有 100 字节的控制信息。</p>
<p>额外的报文也带来了额外的计算量，每个 vxlan 报文的封包和解包操作都是必须的，如果用软件来实现这些步骤，额外的计算量也是不可以忽略的影响。</p>
<h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>vxlan 另外一个缺点是复杂度，虽然经典网络在应对云计算时捉紧见拙，但是经典网络模型已经发展了很久，所有的部署、监控、运维都比较成熟。如果使用 vxlan 网络，那么所有的这些都要重新学习，时间和人力成本必然会大大提高。</p>
<h2 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h2><ul>
<li><a href="https://tools.ietf.org/html/rfc7348">VXLAN 协议文档: rfc7348</a></li>
<li><a href="http://support.huawei.com/huaweiconnect/enterprise/thread-334207.html">【华为悦读汇】技术发烧友：认识VXLAN</a></li>
<li><a href="http://support.huawei.com/huaweiconnect/enterprise/forum.php?mod=viewthread&tid=284371&page=1#pid1553281">Vxlan基础理解-新的三层overlay技术的浅析</a></li>
<li><a href="http://blog.csdn.net/sinat_31828101/article/details/50504656">vxlan 技术探究</a></li>
<li><a href="https://blogs.vmware.com/vsphere/2013/05/vxlan-series-how-vtep-learns-and-creates-forwarding-table-part-5.html">VMware vxlan series</a></li>
</ul>
]]></content>
      <categories>
        <category>VXLAN</category>
      </categories>
      <tags>
        <tag>VXLAN</tag>
      </tags>
  </entry>
  <entry>
    <title>企业园区网中1x端口的两种方式</title>
    <url>/2019/07/09/62/</url>
    <content><![CDATA[<h3 id="1-1-12-dot1x-port-method"><a href="#1-1-12-dot1x-port-method" class="headerlink" title="1.1.12  dot1x port-method"></a>1.1.12  dot1x port-method</h3><p>【命令】</p>
<p>在系统视图下：</p>
<p><strong>dot1x</strong> <strong>port-method</strong> { <strong>macbased</strong> | <strong>portbased</strong> } [ <strong>interface</strong> <em>interface-list</em> ]</p>
<p><strong>undo dot1x</strong> <strong>port-method</strong> [ <strong>interface</strong> <em>interface-list</em> ]</p>
<p>在二层以太网端口视图下：</p>
<p><strong>dot1x</strong> <strong>port-method</strong> { <strong>macbased</strong> | <strong>portbased</strong> }</p>
<p><strong>undo dot1x</strong> <strong>port-method</strong></p>
<p>【视图】</p>
<p>系统视图/二层以太网端口视图</p>
<p>【缺省级别】</p>
<p>2：系统级</p>
<p>【参数】</p>
<p><strong>macbased</strong>：表示基于MAC地址对接入用户进行认证，即该端口下的所有接入用户均需要单独认证，当某个用户下线时，也只有该用户无法使用网络。</p>
<p><strong>portbased</strong>：表示基于端口对接入用户进行认证，即只要该端口下的第一个用户认证成功后，其他接入用户无须认证就可使用网络资源，但是当第一个用户下线后，其他用户也会被拒绝使用网络。</p>
<p><strong>interface</strong> <em>interface-list</em>：以太网端口列表，表示多个以太网端口，表示方式为<em>interface-list</em> ＝ { <em>interface-type interface-number</em> [ <strong>to</strong> <em>interface-type interface-number</em> ] }&amp;&lt;1-10&gt;。其中，<em>interface-type</em>为端口类型，<em>interface-number</em>为端口号。&amp;&lt;1-10&gt;表示前面的参数最多可以输入10次。起始端口类型必须和终止端口类型一致，并且终止端口号必须大于起始端口号。</p>
<p>【描述】</p>
<p><strong>dot1x</strong> <strong>port-method</strong>命令用来设置802.1X在指定端口上进行接入控制的方式。<strong>undo dot1x</strong> <strong>port-method</strong>命令用来恢复缺省的接入控制方式。</p>
<p>缺省情况下，接入控制方式为<strong>macbased</strong>。</p>
<p>需要注意的是：</p>
<p>l              在系统视图下执行该命令时，若指定了参数<em>interface-list</em>，则作用于<em>interface-list</em>参数所指定的端口；若不指定任何端口，则作用于当前系统中的所有端口。</p>
<p>l              在以太网端口视图下执行该命令时，不能指定参数<em>interface-list</em>，只能作用于当前端口。</p>
<p>相关配置可参考命令<strong>display dot1x</strong>。</p>
<p>【举例】</p>
<p># 在端口GigabitEthernet1/0/1上配置对接入用户进行基于端口的802.1X认证。</p>
<p><Sysname> system-view</p>
<p>[Sysname] dot1x port-method portbased interface gigabitethernet 1/0/1</p>
<p>或者</p>
<p><Sysname> system-view</p>
<p>[Sysname] interface gigabitethernet 1/0/1</p>
<p>[Sysname-GigabitEthernet1/0/1] dot1x port-method portbased</p>
<p># 配置端口GigabitEthernet1/0/2～GigabitEthernet1/0/5上对接入用户进行基于端口的802.1X认证。</p>
<p><Sysname> system-view</p>
<p>[Sysname] dot1x port-method portbased interface gigabitethernet 1/0/2 to gigabitethernet 1/0/5</p>
<p>文档：<a href="http://www.h3c.com/cn/d_201111/730911_30005_0.htm#_Toc308256276">http://www.h3c.com/cn/d_201111/730911_30005_0.htm#_Toc308256276</a></p>
]]></content>
      <categories>
        <category>802.1x</category>
      </categories>
      <tags>
        <tag>802.1x</tag>
      </tags>
  </entry>
  <entry>
    <title>如何定位Ping不通的问题？</title>
    <url>/2019/07/15/63/</url>
    <content><![CDATA[<p><strong>故障定位步骤：</strong></p>
<p><strong>步骤1：检查配置</strong></p>
<p>检查交换机上端口配置、VLAN配置、VLANIF接口配置、IP地址配置是否正确，首先排除配置问题；确认两端端口的端口类型，两端VLAN的封装方式是否一致，VLANIF接口下IP地址配置的网段是否存在问题。</p>
<p><strong>步骤2：检查链路</strong><br>检查物理链路：<br>1）光纤或网线连接的端口需要和网络要求的部署一致。<br>2）光纤所带的光模块波长参数需要一致，光模块建议使用华为认证光模块。<br>3）如果是通过Eth-Trunk接口连接，两端设备上Eth-Trunk中加入的物理成员端口数量需要保持一致；若Eth-Trunk启用LACP协议，需要保证LACP协议状态稳定。<br>4）检查两端设备之间是否有传输设备，两端的物理端口是否处于UP状态。<br>5）确认Ping业务经过的物理端口是否存在CRC校验错误，且错误计数是否在不断增长。<br>检查物理端口是否存在阻塞现象。检查设备上是否运行了STP、RRPP或SMART LINK等二层协议，确认Ping业务经过的物理端口是否被阻塞。</p>
<p><strong>步骤3：检查路由</strong><br>检查设备上是否存在到Ping目的地址的路由。<br>• 如果和交换机连接的是终端设备，检查终端设备上是否配置了正确的网关地址。<br>• 如果和交换机连接的是交换机或路由设备，检查对端设备上是否有正确的回程路由。<br>参考命令：display ip routing-table<br>如果路由不正常，检查接口协议状态是否UP，设备上运行的路由协议是否正常，排查路由故障。</p>
<p><strong>步骤4：检查ARP表项</strong></p>
<p>1、检查直连地址的ARP是否学习正常。<br>相关命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display arp</span><br><span class="line">display arp interface vlanifvlanif-id</span><br></pre></td></tr></table></figure>

<p>2、如果ARP学习正确，查看MAC表项，确认MAC地址的出端口和ARP的物理出端口是否一致。<br>相关命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display mac-addressmac-address</span><br><span class="line">display mac-addressmac-addressvlanvlan-id</span><br></pre></td></tr></table></figure>

<p>3、如果ARP学习不到，排查ARP故障，步骤如下：<br>1）检查设备上是否使能严格ARP学习，若配置将其去使能后观察能否正常学习ARP。<br>2）在不能互相学习ARP的两端设备的其中一端执行长Ping操作，命令行如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping -c 100000ip-address</span><br></pre></td></tr></table></figure>

<p>也可视情况添加-t/-m等参数将Ping的速率适当调整。<br>3）长ping操作会不断触发本端设备发出ARP请求报文，可通过流量统计确认ARP请求报文是否从端口送出。<br>4）通过流量统计检查对端设备的物理端口是否收到了ARP请求报文。若收到ARP请求，查看是否能生成ARP表项，并是否能回应ARP-REPLY；若收到请求未生成表项，联系华为工程师处理。<br>5）同样可采用流量统计方法确认ARP-REPLY报文是否从对端设备物理口发出。若未发出，联系华为工程师处理。<br>6）检查本端设备是否收到ARP-REPLY报文，若物理端口上收到ARP-REPLY但没有上送CPU，联系华为工程师处理。<br>ARP请求和ARP回应报文的流量统计配置，示例如下：</p>
<p>也可视情况添加-t/-m等参数将Ping的速率适当调整。<br>3）长ping操作会不断触发本端设备发出ARP请求报文，可通过流量统计确认ARP请求报文是否从端口送出。<br>4）通过流量统计检查对端设备的物理端口是否收到了ARP请求报文。若收到ARP请求，查看是否能生成ARP表项，并是否能回应ARP-REPLY；若收到请求未生成表项，联系华为工程师处理。<br>5）同样可采用流量统计方法确认ARP-REPLY报文是否从对端设备物理口发出。若未发出，联系华为工程师处理。<br>6）检查本端设备是否收到ARP-REPLY报文，若物理端口上收到ARP-REPLY但没有上送CPU，联系华为工程师处理。<br>ARP请求和ARP回应报文的流量统计配置，示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[huawei] traffic classifier aa operator and&#x2F;&#x2F;配置流分类</span><br><span class="line">[huawei-traffic-classifier-aa]if-match l2-protocol arp &#x2F;&#x2F;匹配ARP报文</span><br><span class="line">[huawei-traffic-classifier-aa]if-match source-mac 1111-1111-1111 &#x2F;&#x2F;匹配源MAC</span><br><span class="line">[huawei-traffic-classifier-aa]if-match destination-mac 2222-2222-2222 &#x2F;&#x2F;匹配目的MAC</span><br><span class="line">[huawei-traffic-classifier-aa]if-match vlan-id 33 &#x2F;&#x2F;匹配VLAN</span><br><span class="line">[huawei-traffic-classifier-aa]quit</span><br></pre></td></tr></table></figure>

<p>Tips：对应ARP请求报文，目的MAC需要匹配广播MAC(FFFF-FFFF-FFFF)，源MAC匹配发送端设备的MAC；对于ARP回应报文，目的MAC匹配对端MAC，源MAC匹配本设备MAC。上面的数据仅是举例，实际故障定位中需要按照这个原则替换。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[huawei]traffic behavior bb &#x2F;&#x2F;配置流行为</span><br><span class="line">[huawei-traffic-behavior-bb] statistic enable &#x2F;&#x2F;使能流量统计功能</span><br><span class="line">[huawei-traffic-behavior-bb]quit</span><br><span class="line">[huawei]traffic policy pp&#x2F;&#x2F;配置流策略</span><br><span class="line">[huawei-traffice-policy-pp]classifier aa behavior bb &#x2F;&#x2F;关联流分类和流行为</span><br><span class="line">[huawei-traffice-policy-pp]quit</span><br><span class="line">[huawei]interface gigabitethernet 3&#x2F;0&#x2F;0</span><br><span class="line">[huawei-gigabitethernet3&#x2F;0&#x2F;0] traffic policy pp inbound &#x2F;&#x2F;在接口的入方面应用流策略。对于ARP请求报文，应该是接口的出方向。</span><br></pre></td></tr></table></figure>

<p>步骤5：检查报文收***况</p>
<p>Ping不通问题或Ping有丢包问题的定位关键主要是确认报文丢在哪里了，可以通过如下几个方式进行确认。</p>
<p>1、ICMP统计<br>进行Ping操作时，通过命令display icmp statistics查看ICMP报文的收***况，echo和echo reply报文收发是否一致，是否存在checksum错误统计计数。<br>reset ip statistics命令用来清除统计计数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HUAWEI&gt; display icmp statistics</span><br><span class="line">Input: bad formats 0     bad checksum 0</span><br><span class="line">      echo          521     destination unreachable 0</span><br><span class="line">      source quench   0     redirects               0</span><br><span class="line">      echo reply     19     parameter problem       0</span><br><span class="line">      timestamp       0     information request     0</span><br><span class="line">      mask requests   0     mask replies            0</span><br><span class="line">      time exceeded   0     timestamp reply         0</span><br><span class="line">      Mping request   0     Mping reply             0</span><br><span class="line">Output:echo  19     destination unreachable 0</span><br><span class="line">      source quench   0     redirects                0</span><br><span class="line">      echo reply     512    parameter problem        0</span><br><span class="line">      timestamp       0     information request      0</span><br><span class="line">      mask requests   0     mask replies             0</span><br><span class="line">      time exceeded   0     timestamp reply          0</span><br><span class="line">      Mping request   0     Mping reply              0</span><br></pre></td></tr></table></figure>

<p>2、IP层调试开关<br>这一层调试开关需要定义ACL匹配Ping报文，即源IP、目的IP地址，进行Ping操作同时打开IP层调试开关，观察报文的收***况。<br>配置命令如下：<br>\</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">acl number 3333</span><br><span class="line">rule 5 permit icmp source x.x.x.x 0 destination y.y.y.y 0</span><br><span class="line">rule 10 permit icmp source y.y.y.y 0 destination x.x.x.x 0</span><br><span class="line">#</span><br><span class="line">debugging ip packet acl 3333 verbose</span><br></pre></td></tr></table></figure>

<p>下面举例说明：<br>如：ping 7.8.20.5</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PING 7.8.20.5: 56 data bytes, press CTRL_C to break*0.55569503 L3FC-4 IP&#x2F;7&#x2F;debug_case:Sending, interface &#x3D; Vlanif20, version &#x3D; 4, headlen &#x3D; 20, tos &#x3D; 0,pktlen &#x3D; 84, pktid &#x3D; 35000, offset &#x3D; 0, ttl &#x3D; 255, protocol &#x3D; 1,checksum &#x3D; 64727, s &#x3D; 7.8.20.4, d &#x3D; 7.8.20.5prompt: Sending the packet from local at Vlanif20</span><br><span class="line">45 00 00 54 88 b8 00 00 ff 01 fc d7 07 08 14 04</span><br><span class="line">07 08 14 05 08 00 00 9e ab cf 00 01 03 4f ec 5e</span><br><span class="line">81 00 c0 01 50 49 4e 00 00 00 ff 05 00 01 02 03</span><br><span class="line">04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13</span><br><span class="line">14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23</span><br><span class="line">24 25 26 27</span><br><span class="line">Reply from 7.8.20.5: bytes&#x3D;56 Sequence&#x3D;1 ttl&#x3D;255 time&#x3D;2 ms*0.55569603 L3FC-4 IP&#x2F;7&#x2F;debug_case:Receiving, interface &#x3D; Vlanif20, version &#x3D; 4, headlen &#x3D; 20, tos &#x3D; 0,pktlen &#x3D; 84, pktid &#x3D; 44132, offset &#x3D; 0, ttl &#x3D; 255, protocol &#x3D; 1,checksum &#x3D; 55595, s &#x3D; 7.8.20.5, d &#x3D; 7.8.20.4prompt: Receiving IP packet from Vlanif20</span><br><span class="line">45 00 00 54 ac 64 00 00 ff 01 d9 2b 07 08 14 05</span><br><span class="line">07 08 14 04 00 00 0e 9d ab cf 00 01 03 4f ec 5e</span><br><span class="line">81 00 c0 01 50 4e 47 00 00 00 00 02 00 01 02 03</span><br><span class="line">04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13</span><br><span class="line">14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23</span><br><span class="line">24 25 26 27</span><br></pre></td></tr></table></figure>

<p>3、CPCAR统计<br>查看CPCAR的统计情况，检查ICMP报文是否被car掉了。相关命令：<br>大S V100R002版本、小S V100R005版本：display cpu-defend icmp statistics all<br>大S V100R003及之后、小S V100R006及之后的版本：display cpu-defend statistics packet-type icmp all<br>主要关注Drop计数是否在增加。如果Drop计数在增加，说明存在CPCAR丢包，可以适当增加car值再进行Ping测试，看问题是否解决。最后建议恢复car值。</p>
<p>4、流量统计<br>配置流量统计，确认报文的收***况。定义流分类时需要匹配到Ping的源IP和目的IP，其他配置同ARP报文的统计。<br>配置完成后，执行Ping命令，查看流量统计情况。相关命令：<br>display traffic policy statistics interface GigabitEthernet 0/0/1 inbound<br>display traffic policy statistics interface GigabitEthernet 0/0/1 outbound<br>如果outbound方向没有统计计数，说明报文没有发送出去；如果inbound方向没有统计计数，说明没有收到应答报文。</p>
<p>5、配置镜像查看报文收*<strong>况<br>通过镜像来确认报文的收**<em>况。<br>如果端口上流量不大，可以直接用端口镜像；<br>如果端口上流量较大，可以使用流镜像。<br>通过对镜像报文进行分析，不仅可以确认报文的收</em></strong>况，同时可以对报文进行校验，包括：报文的VLAN是否正确、报文的目的MAC地址是否是设备系统MAC地址、报文IP头的checksum是否正确、ICMP的checksum是否正确。</p>
]]></content>
      <categories>
        <category>CASE</category>
      </categories>
      <tags>
        <tag>CASE</tag>
      </tags>
  </entry>
  <entry>
    <title>IPv4 与 IPv6 相互操作</title>
    <url>/2019/07/15/64/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​        由于互联网终端不断增加，IPv4 地址长度（32位）已不能够满足要求，所以出现了 IPv6地址（128位），但是现有应用程序大部分还是采用 IPv4 地址形式，所以必须解决 IPv4 与 IPv6 之间的相互操作，使现有基于 IPv4 的应用程序能够与基于 IPv6 的应用程序相互通信。那么我们怎么实现 IPv4 客户端与 IPv6 服务器、IPv6 客户端与 IPv4 服务器之间的通信。</p>
<h3 id="IPv4-客户端与-IPv6-服务器"><a href="#IPv4-客户端与-IPv6-服务器" class="headerlink" title="IPv4 客户端与 IPv6 服务器"></a>IPv4 客户端与 IPv6 服务器</h3><p>​        假设我们主机是运行双栈，即存在 IPv4 协议栈和 IPv6 协议栈，双栈主机上的 IPv6 服务器既能处理 IPv4 客户端，也能处理 IPv6 客户端，因为 IPv4 可以映射成 IPv6 地址。下图是 IPv4 客户端与 IPv6 服务器之间的通信过程：</p>
<p><img src="http://img3.itkeyword.com/17/15/QFnY73.png" alt="img" loading="lazy"></p>
<p>​       IPv6 服务器程序创建的套接字绑定到 IPv6 通配地址和 TCP 端口号 9999。假设客户端和服务器主机都处于同一个以太网，当左侧两个客户端都发送 SYN 报文段请求与服务器建立连接时，IPv4 客户端主机在一个 IPv4 数据报中载送 SYN，IPv6 客户端主机在一个 IPv6 数据报中载送 SYN。在以太网线上包含以太网首部、IP 首部、TCP 首部以及 TCP 数据，根据以太网首部中包含的类型字段区分 IP 类型是为 IPv4 还是 IPv6，因此 IP 首部中的目的 IP 地址格式根据以太网类型字段分为 IPv4 地址和 IPv6 地址。两者的 TCP 首部是一样的，TCP 首部中包含目的端口号（即 IPv6 服务器的端口号 9999）。</p>
<p>​        服务器的接收数据链路通过查看以太网类型字段把每帧传递给相应的 IP 模块。IPv4 模块结合其上的 TCP 模块检测到 IPv4 数据报的目的端口对应的是一个 IPv6 套接字，于是把该数据报 IPv4 首部中的源 IPv4 地址转换成一个等价的 IPv4 映射的 IPv6 地址。当 accept 系统调用把这个已经接受的 IPv4 客户端连接返回给服务器进程时，这个映射后的地址将作为客户的 IPv6 地址返回给服务器的 IPv6 套接字（也就是说服务器根本不知道自己是在跟 IPv4 客户端通信，客户端也不知道自己和 IPv6 的服务器通信），该连接上其余的数据报都是 IPv4 数据报。对于 IPv6 客户端，当 accept 系统调用把接受的 IPv6 客户端连接返回给服务器进程时，该客户的 IPv6 地址就是原来 IPv6 首部中的源地址，不需要进行映射，该连接上其余的数据报都是 IPv6 数据报。</p>
<p>IPv4 的 TCP 客户端与 IPv6 的 TCP 服务器之间通信的步骤如下：</p>
<blockquote>
<p>推荐：<a href="http://www.itkeyword.com/doc/9277980099094691x126">第10章Ipv4和Ipv6的交互</a></p>
<p>在ipv4（32）地址不够用的时候，ipv6的使用（128位）将大大增加 地址的使用范围。但是毕竟还是用从ipv4到ipv6的过度期，这个时间还不知道多久呢，就像windows系</p>
</blockquote>
<ol>
<li>首先启动 IPv6 服务器，创建一个 IPv6 的监听套接字，并且该服务器把通配地址和端口号 9999 绑定到该套接字上；</li>
<li>IPv4 客户端调用 gethostbyname 函数找到服务器主机的一个 A 记录，服务器同时包含 A 记录和 AAAA 记录，即同时支持 IPv4 和 IPv6，对于 IPv4 客户端来说只需要 A 记录即可；</li>
<li>IPv4 客户端调用 connect 函数向服务器发出连接请求，即客户端主机向服务器主机发送一个 IPv4 的 SYN 数据报（该 IPv4 的 SYN 中的目的地是 IPv6 套接字）；</li>
<li>服务器主机接收到来自客户端的 IPv4 的 SYN 数据报后，设置一个标志指示本连接应使用 IPv4 映射的 IPv6 地址，并响应一个 IPv4 的SYN 和 ACK 数据报。当该链接建立后，由 accept 函数把这个 IPv4 映射的 IPv6 地址返回给服务器；</li>
<li>当服务器主机往这个 IPv4 映射的 IPv6 地址发送 TCP 报文段时，其 IP 栈产生目的地址为所映射 IPv4 地址的 IPv4 载送数据报。即客户端和服务器之间所有通信都使用 IPv4 的载送数据报；</li>
</ol>
<h3 id="IPv6-客户端与-IPv4-服务器"><a href="#IPv6-客户端与-IPv4-服务器" class="headerlink" title="IPv6 客户端与 IPv4 服务器"></a>IPv6 客户端与 IPv4 服务器</h3><p>IPv6 的 TCP 客户端与 IPv4 的 TCP 服务器之间通信的步骤如下：</p>
<ol>
<li>首先启动 IPv4 服务器，创建一个 IPv4 的监听套接字；</li>
<li>IPv6 客户端调用 getaddrinfo 函数查找 IPv6 地址；</li>
<li>IPv6 客户端在作为函数参数的 IPv6 套接字地址结构中设置这个 IPv4 映射的 IPv6 地址后调用 connect 函数向服务器发出连接请求，内核检测到这个映射地址后，自动向服务器主机发送一个 IPv4 的 SYN 数据报；</li>
<li>服务器主机接收到来自客户端的 IPv4 的 SYN 数据报后，响应一个 IPv4 的SYN 和 ACK 数据报。连接通过使用 IPv4 数据报建立；</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​        双栈主机上的 IPv6 服务器既能服务于 IPv4 客户，又能服务于 IPv6 客户。IPv4 客户发送给这种服务器的仍然是 IPv4 数据报，不过服务器的协议栈会把客户主机的地址转换成一个 IPv4 映射的 IPv6 地址。类似地，双栈主机上的 IPv6 客户能够与 IPv4 服务器通信，客户的解析器会把服务器主机所有的 A 记录作为 IPv4 映射的 IPv6 地址返回给客户，而客户指定这些地址之一调用 connect 将会使双栈发送一个 IPv4 的 SYN 数据报。为了使套接字编程具有可移植性，在编程实现过程中，尽量避免使用 gethostbyname 和 gethostbyaddr 函数，而应该使用 getaddrinfo 和 getnameinfo 函数。</p>
<p>参考资料：</p>
<p>《Unix 网络编程》</p>
]]></content>
      <categories>
        <category>IPv6</category>
      </categories>
      <tags>
        <tag>IPv6</tag>
      </tags>
  </entry>
  <entry>
    <title>安全可溯源的IPv6网络</title>
    <url>/2019/07/15/65/</url>
    <content><![CDATA[<p>　　2018年5月3日，工业和信息化部发布关于贯彻落实《推进互联网协议第六版（IPv6）规模部署行动计划》的通知，这份文件，成为智慧校园发展的巨大引擎，文件对教育网的IPv6改造做了明确要求：</p>
<p>　　到2018年底，教育网完成业务运营支撑系统升级改造，建立面向IPv6业务的运维管理体系和业务管理流程，具备IPv6用户统计、网络日志审计、流量统计以及IPv6业务受理、开通、运行维护等能力。</p>
<p>　　到2019年底，省教育计算机网以及高等学校校园网完成IPv6升级改造。鼓励有条件的高等学校开展纯IPv6试验网建设；鼓励中小学、幼儿园积极推进校园网IPv6改造。</p>
<p><img src="https://www.doctorcom.com/uploadfile/2019/0304/20190304122128489.jpg" alt="img" loading="lazy"></p>
<p>　　国家政策虽然一直在强调校园网的IPv6改造，但就目前IPv6升级而言，高校仍旧没有找到相关IPv6安全合规且系统有效的解决方案。</p>
<p>　　按照现有等级保护标准，网络安全主要有三个防护要求：</p>
<p>访问控制、边界完整性和安全审计</p>
<p>。</p>
<p>　　需要强调的是，访问控制是建立在实名认证的基础上，然后结合接入控制设备进行实名用户访问控制。</p>
<p>　　而实名认证分为准入和准出认证，准入认证的好处是实现边界完整和IP实名审计，但要实现IPv6准入认证就意味着现有准入和汇聚网络设备要改造，这对很多高校来说需要很大的预算。</p>
<p>　　网络设备仅仅简单支持IPv6准入认证还是不够，仍然需要解决很多细节才能建立安全的IPv6网络，这是由于IPv6的以下几个重要特性：</p>
<p>　　<a id="more"></a></p>
<p>1.终端兼容性。</p>
<p>　　原生的安卓设备不支持DHCPv6，意味着无线网需使用无状态地址自动配置方式（SLAAC）配置IPv6。</p>
<p>　　</p>
<p>2.地址变化频繁。</p>
<p>　　使用SLAAC后，所有PC和智能终端操作系统，因默认启用隐私保护策略（RFC4941、RFC7217），终端的IPv6地址就会每小时或切换网络时都会发生变化，目的是隐藏轨迹保护隐私，以防被跟踪攻击。</p>
<p>　　</p>
<p>3.NDP协议的组播特性。</p>
<p>　　IPv6的一个主要增强特性是邻居发现（ND， Neighbor Discovery）。ND用一种更全面、统一的方法取代了IPv4使用的ICMP和ARP。IPv6无状态地址的自动配置和地址变更过程也是基于NDP协议，但NDP协议使用了组播方式通信，意味着终端的IPv6无状态地址和MAC地址对应日志分布在不同的汇聚交换机，传统基于SNMP网管方式难以有效快速采集大规模网络中变化频繁的IPv6地址日志。</p>
<p>　　所以，校园网基础网络的IPv6改造，不是简单的网络设备改造，如果以上问题不能妥善解决，IPv6的校园场景应用，会面临以下挑战：</p>
<p>　　</p>
<p>1.安全无法溯源。</p>
<p>　　难以实现有效的IPv6 IP实名审计，同时，当IPv6网络出现安全威胁，面对变化频繁的无状态地址，无法溯源终端的网络轨迹，难以找到元凶；</p>
<p>　　</p>
<p>2.用户体验差。</p>
<p>　　在有IPv6准入认证的情况下，频繁变化的地址意味用户需要反复认证，使用体验很差，如果要实现无感知认证，要求认证系统能够兼容不同网络设备厂商的无感知认证方法。</p>
<p>　　</p>
<p>3.组网环境复杂。</p>
<p>　　不同的组网方案也需要不同的整体解决方案。传统三层网络、扁平化网络和SDN网络， IPv6地址审计、无感知认证、准入认证等需要满足的条件就各有不同，比如纯二层扁平化网络，相对于传统三层网络，核心BRAS更容易实现IPv6地址审计。</p>
]]></content>
      <categories>
        <category>IPv6</category>
      </categories>
      <tags>
        <tag>IPv6</tag>
      </tags>
  </entry>
  <entry>
    <title>IPv6 auto config 原理详解之-----前缀公告</title>
    <url>/2019/07/17/68/</url>
    <content><![CDATA[<p>人们常说，IPv6的一大特性就是移动性。</p>
<p>那么对于IP终端来说，如何去理解他的移动性呢？</p>
<p>其实就是IPv6的无状态自动配置。</p>
<p>前段时间有幸一个同事给我演示了一下这个功能，但是更多的疑问产生了。</p>
<p>IPv4中，比如说电脑，在网卡中设置自动获取IP地址和DNS.那么就可以自动从DHCP服务器上面获得IP地址和DNS还有网关了。</p>
<p>下面是IPv4的设置界面：</p>
<p><strong><img src="https://s1.51cto.com/attachment/201108/12/351531_1313151463aDzX.jpg" alt="clip_p_w_picpath002" loading="lazy"></strong></p>
<p>那么按照这个逻辑，IPv6就应该是没有这些选项，最终达到即插即用的目的嘛？答案是否，下面的截图IPv6也有：</p>
<p><strong><img src="https://s1.51cto.com/attachment/201108/12/351531_1313151470ZoVk.jpg" alt="clip_p_w_picpath004" loading="lazy"></strong></p>
<p>那么为什么还需要自动配置？</p>
<p>意义在哪里？</p>
<p>如何实现呢？</p>
<p>带着这些问题，我们慢慢来看看IPv6这个自动配置auto config到底是个什么原理。</p>
<a id="more"></a>

<p><strong>RFC2462上面写到，无状态自动配置是IPv6最有吸引力和最有用的新特性之一。他允许本地链路上得节点根据路由器在本地链路上公告信息自己配置单播IPv6地址。</strong></p>
<p><strong>PS:路由器可是不能用无状态自动配置来实现，无状态自动配置仅仅适用于IP终端.这点一定要记得。</strong></p>
<p><strong>所以换句话说，路由器上面是不能实现这个功能的，这个是RFC上面定义的。没有原因。可能主要的目的是统一规划，方便管理的目的。</strong></p>
<p><strong><img src="https://s1.51cto.com/attachment/201108/12/351531_1313151478ff9T.jpg" alt="clip_p_w_picpath006" loading="lazy"></strong></p>
<p>这个就是从auto config延伸出来的几个子工作机制。</p>
<p><strong>第一个知识点是前缀公告。</strong></p>
<p>前缀公告是无状态自动配置中的初始机制。前缀公告机制使用路由器公告信息ICMPv6 type=134和所有节点的多播地址FF02::1，路由器公告机制在本地链路上周期性的发送到所有节点的多播地址。</p>
<p><strong><img src="https://s1.51cto.com/attachment/201108/12/351531_1313151483WIIy.jpg" alt="clip_p_w_picpath008" loading="lazy"></strong></p>
<p>在CISCO路由器上面公告IPv6前缀.</p>
<p>只要在接口上面配置了一个本地站点或者全球可聚合单播IPv6地址还有掩码，实际上就启用了cisco路由器上面的IPv6前缀公告。</p>
<p><strong>IPv6前缀公告原理：</strong></p>
<p>路由器周期性的发送ICMPv6 type=134的路由器前缀公告，用她得本地链路地址link-local FE80::250:3EFF:FEE4:4C00作为源，所有节点的多播地址FF02::1作为目的。</p>
<p>路由器公告消息公告的前缀是FEC0:0:0:1::/64,生存周期首选无穷大.</p>
<p>当本地链路多播地址FF02::1的节点A和B得到路由器公告消息，可以自己配置他们的IPv6地址.</p>
<p><strong><img src="https://s1.51cto.com/attachment/201108/12/351531_13131514908wzt.jpg" alt="clip_p_w_picpath010" loading="lazy"></strong></p>
<p>这里我犯了一个错误，感觉这个是IPv6 前缀通告是配置了地址以后就自己有的一个机制。</p>
<p>实验结果并不是这样,我在R1和R2之间抓包，没有抓到ICMPv6 type = 134的报文，然后我又在网上查阅相关资。</p>
<p>为什么会这样，因为我忽略了一点很重要的，自动配置这个功能是仅仅限于路由器对PC终端之间的行为，路由器都不能支持这个auto config，所以为什么路由器要发前缀通告给邻居直连路由器呢？</p>
<p>后来我用路由器直连PC,得到了我想要的结果，PC自动获取到了IP地址，并且前缀和2012::/64是一样的.</p>
<p>:) 到这个时候我的心才稳下来。呵呵。下面是详细的实验结果：</p>
<p><strong><img src="https://s1.51cto.com/attachment/201108/12/351531_1313151497GaSV.jpg" alt="clip_p_w_picpath012" loading="lazy"></strong></p>
<p>在R1上面，用命令<strong>show ipv6 interface giga 1/0 prefix</strong>:</p>
<p>可以看到，R1有一个AD,是自己的前缀2012::/64:</p>
<p><strong><img src="https://s1.51cto.com/attachment/201108/12/351531_1313151506o0CW.jpg" alt="clip_p_w_picpath014" loading="lazy"></strong></p>
<p>呵呵，特意把giga 1/0的配置也show出来，2012::/64就是接口1/0的前缀。</p>
<p>在cisco上面，默认情况下有效生存期是30天.首选生存期是7天(604800s).</p>
<p>然后我做了一个实验，用迈普的路由器连接一个PC.</p>
<p>然后在PC机上面使能IPv6的功能(xp需要安装相关IPv6协议，默认是没有的，win7默认就加载了IPv6的协议栈了)</p>
<p>图谱图：</p>
<p>MAIPU router————PC</p>
<p>后来在PC上面成功获取到了IP地址，前缀为2012::/64,可以ping通路由器接口FE0 : 2012::1</p>
<p>我在路由器上面FE0配置的地址是：2012::1/64.</p>
<p>最后在PC机上获得的地址是:</p>
<p><strong><img src="https://s1.51cto.com/attachment/201108/12/351531_1313151513Glqz.jpg" alt="clip_p_w_picpath016" loading="lazy"></strong></p>
<p><strong><img src="https://s1.51cto.com/attachment/201108/12/351531_1313151517KyLU.jpg" alt="clip_p_w_picpath018" loading="lazy"></strong></p>
<p>在PC机接电脑以前，我就一直用wireshark进行抓包。抓到了ICMPv6 type=134的报文，下面是报文的具体格式：</p>
<p><strong><img src="https://s1.51cto.com/attachment/201108/12/351531_1313151529SyCj.jpg" alt="clip_p_w_picpath020" loading="lazy"></strong></p>
<p>当然也可以用一个命令来修改前缀公告：</p>
<p>ipv6 nd prefix.</p>
<p><strong><img src="https://s1.51cto.com/attachment/201108/12/351531_1313151534uw3q.jpg" alt="clip_p_w_picpath022" loading="lazy"></strong></p>
<p>还有一个小功能就是在接口上面禁止路由器公告。</p>
<p>在cisco 2011年1月的IOS上面，这个命令有点不一样：</p>
<p><strong><img src="https://s1.51cto.com/attachment/201108/12/351531_1313151538h3DK.jpg" alt="clip_p_w_picpath024" loading="lazy"></strong></p>
<p>命令是: <strong>ipv6 nd ra suppress</strong>.</p>
<p>而以前老得IOS上面，命令却是：</p>
<p><strong><img src="https://s1.51cto.com/attachment/201108/12/351531_1313151542jE75.jpg" alt="clip_p_w_picpath026" loading="lazy"></strong></p>
<p>其实无所谓，我们关注的是原理，命令行只是实现原理的一个手段罢了。</p>
<p>其实这里关于auto config还有几个参数，下面把几个参数都融合进行了一个接口中。</p>
<p><strong><img src="https://s1.51cto.com/attachment/201108/12/351531_13131515494vCl.jpg" alt="clip_p_w_picpath028" loading="lazy"></strong></p>
<p>关于DAD和前缀重新编址，将在后续的文档中做实验进行验证。</p>
]]></content>
      <categories>
        <category>IPv6</category>
      </categories>
      <tags>
        <tag>IPv6</tag>
      </tags>
  </entry>
  <entry>
    <title>IPsec VPN 分公司到总部</title>
    <url>/2019/04/18/7/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">因为公司战略需要，需要建立一个总部--分公司---分公司所属机构的网络架构，所以特意使用ios做了一次这样的实验。实验平台使用eve-ng。</span><br><span class="line">    拓扑如图所示：</span><br></pre></td></tr></table></figure>

<p><img src="https://ws1.sinaimg.cn/large/d3bb92edly1g2h4zfirezj218o0l8gs5.jpg" loading="lazy"><br>场景说明：<br>1.总部的外网是使用固定的IP地址。<br>2.分公司1有两条外网两个都是固定ip，分别是fa1/0和fa0/0。<br>3.分公司下属异地工程部使用的是adsl接入isp，接口是fa0（虽然图中是固定地址，但是效果也是一样的。）<br>4.现在要求的是分公司下属异地工程部要走分公司1的线路访问总部的服务器vpc。<br>如图所示：<br><img src="https://ws1.sinaimg.cn/large/d3bb92edly1g2h54ujj8wj21mm0vk4qp.jpg" loading="lazy"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    思路：</span><br><span class="line">    1.总部和分公司1的外网是固定ip地址的，所以我们可以使用gre进行对接，对于链路的稳定性来说是有保障。（不得不吐槽之前的那个it做的架构太差了，看了想打人。）</span><br><span class="line">    2.其实分公司的异地工程部也可以直接使用ipsec***接入总部的边界路由，但是由于点数比较多，避免总部设备高负载，所以需要使用异地工程部接入分公司再访问总部的访问方式。</span><br><span class="line">    3.如果以后有需要的话异地工程部也可以访问分公司系统。</span><br><span class="line"></span><br><span class="line">  步骤：</span><br><span class="line">    1.先建立总部和分公司的连接，因为总部和分公司使用gre，我们可以使用ospf进行路由。</span><br><span class="line">总部配置：</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Tunnel0</span><br><span class="line">ip address 10.0.0.1 255.255.255.0</span><br><span class="line">tunnel source FastEthernet0&#x2F;1</span><br><span class="line">tunnel destination 221.4.195.2</span><br><span class="line">!</span><br><span class="line">interface Tunnel1 &#x2F;&#x2F;使用gre对接到分公司。</span><br><span class="line">ip address 10.0.1.1 255.255.255.0</span><br><span class="line">tunnel source FastEthernet0&#x2F;1</span><br><span class="line">tunnel destination 121.4.195.2 </span><br><span class="line">!</span><br><span class="line">interface FastEthernet0&#x2F;0</span><br><span class="line">ip address 192.168.16.1 255.255.255.0</span><br><span class="line">speed auto</span><br><span class="line">full-duplex</span><br><span class="line">!</span><br><span class="line">interface FastEthernet0&#x2F;1</span><br><span class="line">ip address 222.4.195.2 255.255.255.0</span><br><span class="line">speed auto</span><br><span class="line">full-duplex</span><br><span class="line">no cdp enable</span><br><span class="line">!</span><br><span class="line">interface FastEthernet1&#x2F;0</span><br><span class="line">no ip address</span><br><span class="line">shutdown</span><br><span class="line">duplex auto</span><br><span class="line">speed auto</span><br><span class="line">!</span><br><span class="line">interface FastEthernet2&#x2F;0</span><br><span class="line">no ip address</span><br><span class="line">shutdown</span><br><span class="line">duplex auto</span><br><span class="line">speed auto</span><br><span class="line">!</span><br><span class="line">router ospf 1</span><br><span class="line">log-adjacency-changes</span><br><span class="line">network 10.0.0.0 0.0.0.255 area 0</span><br><span class="line">network 10.0.1.0 0.0.0.255 area 0</span><br><span class="line">network 192.168.16.0 0.0.0.255 area 0</span><br><span class="line">default-information originate</span><br><span class="line">!</span><br><span class="line">ip forward-protocol nd</span><br><span class="line">ip route 0.0.0.0 0.0.0.0 222.4.195.1</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分公司配置</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Tunnel0 &#x2F;&#x2F;使用gre对接到总公司的tun1</span><br><span class="line">ip address 10.0.1.2 255.255.255.0</span><br><span class="line">tunnel source FastEthernet1&#x2F;0</span><br><span class="line">tunnel destination 222.4.195.2</span><br><span class="line">!</span><br><span class="line">interface FastEthernet0&#x2F;0</span><br><span class="line">ip address 1.1.1.1 255.255.255.0</span><br><span class="line">ip nat outside</span><br><span class="line">ip virtual-reassembly</span><br><span class="line">duplex auto</span><br><span class="line">speed auto</span><br><span class="line">no cdp enable</span><br><span class="line">crypto map tob</span><br><span class="line">!</span><br><span class="line">interface FastEthernet0&#x2F;1</span><br><span class="line">ip address 192.168.160.1 255.255.255.128</span><br><span class="line">ip nat inside</span><br><span class="line">ip virtual-reassembly</span><br><span class="line">duplex auto</span><br><span class="line">speed auto</span><br><span class="line">no cdp enable</span><br><span class="line">!</span><br><span class="line">interface FastEthernet1&#x2F;0</span><br><span class="line">ip address 121.4.195.2 255.255.255.0</span><br><span class="line">duplex auto</span><br><span class="line">speed auto</span><br><span class="line">no cdp enable</span><br><span class="line">!</span><br><span class="line">interface FastEthernet2&#x2F;0</span><br><span class="line">no ip address</span><br><span class="line">shutdown</span><br><span class="line">duplex auto</span><br><span class="line">speed auto</span><br><span class="line">!</span><br><span class="line">router ospf 1</span><br><span class="line">log-adjacency-changes</span><br><span class="line">redistribute static subnets &#x2F;&#x2F;重分布异地工程部的静态路由</span><br><span class="line">network 10.0.1.0 0.0.0.255 area 0</span><br><span class="line">network 192.168.160.0 0.0.0.127 area 3</span><br><span class="line">default-information originate</span><br><span class="line">!</span><br><span class="line">ip forward-protocol nd</span><br><span class="line">ip route 0.0.0.0 0.0.0.0 121.4.195.1</span><br><span class="line">ip route 192.168.160.128 255.255.255.128 1.1.1.2 &#x2F;&#x2F;到异地工程部的路由</span><br><span class="line">!</span><br><span class="line">ip http server</span><br><span class="line">no ip http secure-server</span><br><span class="line">ip nat inside source list 100 interface FastEthernet0&#x2F;0 overload</span><br><span class="line">!</span><br><span class="line">access-list 100 deny ip 192.168.160.0 0.0.0.127 192.168.160.128 0.0.0.127 &#x2F;&#x2F;到异地工程部的非nat流量</span><br><span class="line">access-list 100 permit ip any any</span><br></pre></td></tr></table></figure>



<ol>
<li><p>分公司的ipsec-***的被动配置<br>分公司路由配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crypto isakmp policy 1</span><br><span class="line">encr 3des &#x2F;&#x2F;注意路由器版本，k8版本好像是没有3des的加密的哈</span><br><span class="line">hash md5</span><br><span class="line">authentication pre-share</span><br><span class="line">group 2</span><br><span class="line">crypto isakmp key 1q2w address 0.0.0.0 0.0.0.0 &#x2F;&#x2F;接受来自所有地址的验证</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">crypto ipsec transform-set tran esp-3des esp-md5-hmac </span><br><span class="line">!</span><br><span class="line">crypto dynamic-map mymap 10 </span><br><span class="line">set transform-set tran </span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">crypto map tob 100 ipsec-isakmp dynamic mymap discover </span><br><span class="line">.</span><br><span class="line">interface FastEthernet0&#x2F;0</span><br><span class="line">ip address 1.1.1.1 255.255.255.0</span><br><span class="line">ip nat outside</span><br><span class="line">ip virtual-reassembly</span><br><span class="line">duplex auto</span><br><span class="line">speed auto</span><br><span class="line">no cdp enable</span><br><span class="line">crypto map tob &#x2F;&#x2F;引用到fa0&#x2F;0接口</span><br></pre></td></tr></table></figure>

<p>异地工程部通用配置部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Ethernet0</span><br><span class="line">ip address 192.168.160.129 255.255.255.128</span><br><span class="line">ip nat inside</span><br><span class="line">ip virtual-reassembly</span><br><span class="line">half-duplex</span><br><span class="line">no cdp enable</span><br><span class="line">!</span><br><span class="line">interface FastEthernet0</span><br><span class="line">ip address 1.1.1.2 255.255.255.0</span><br><span class="line">ip nat outside</span><br><span class="line">ip virtual-reassembly</span><br><span class="line">speed auto</span><br><span class="line">crypto map tojt</span><br><span class="line">!</span><br><span class="line">ip forward-protocol nd</span><br><span class="line">ip route 0.0.0.0 0.0.0.0 1.1.1.1 &#x2F;&#x2F;链路只有一条，全部走这个就对了</span><br><span class="line">no ip http server</span><br><span class="line">no ip http secure-server</span><br><span class="line">!</span><br><span class="line">ip nat inside source list 100 interface FastEthernet0 overload</span><br><span class="line">access-list 100 deny ip 192.168.160.128 0.0.0.127 192.168.160.0 0.0.0.127 &#x2F;&#x2F;分公司流量不转换</span><br><span class="line">access-list 100 deny ip 192.168.160.128 0.0.0.127 192.168.16.0 0.0.0.255 &#x2F;&#x2F;去总部流量不转换</span><br><span class="line">access-list 100 permit ip any any</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>异地工程部ipsec***部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crypto isakmp policy 1</span><br><span class="line">encr 3des</span><br><span class="line">hash md5</span><br><span class="line">authentication pre-share</span><br><span class="line">group 2</span><br><span class="line">crypto isakmp key 1q2w address 1.1.1.1 &#x2F;&#x2F;对端iskamp认证地址及口令</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">crypto ipsec transform-set jc-branch esp-3des esp-md5-hmac </span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">crypto map tojt 1 ipsec-isakmp </span><br><span class="line">set peer 1.1.1.1</span><br><span class="line">set transform-set jc-branch </span><br><span class="line">match address 110 &#x2F;&#x2F;到分公司敏感流量</span><br><span class="line">crypto map tojt 2 ipsec-isakmp </span><br><span class="line">set peer 1.1.1.1</span><br><span class="line">set transform-set jc-branch </span><br><span class="line">match address 120 &#x2F;&#x2F;到总公司敏感流量</span><br><span class="line"></span><br><span class="line">access-list 110 permit ip 192.168.160.128 0.0.0.127 192.168.160.0 0.0.0.127</span><br><span class="line">access-list 120 permit ip 192.168.160.128 0.0.0.127 192.168.16.0 0.0.0.255</span><br></pre></td></tr></table></figure>

<p>异地工程部客户端及测试：</p>
<p>VPCS&gt; sh ip</p>
<p>NAME : VPCS[1]<br>IP/MASK : 192.168.160.130/25<br>GATEWAY : 192.168.160.129<br>DNS :<br>MAC : 00:50:79:66:68:0a<br>LPORT : 20000<br>RHOST:PORT : 127.0.0.1:30000<br>MTU : 1500</p>
<p>VPCS&gt; ping 192.168.160.2</p>
<p>84 bytes from 192.168.160.2 icmp_seq=1 ttl=62 time=121.675 ms<br>84 bytes from 192.168.160.2 icmp_seq=2 ttl=62 time=35.919 ms<br>84 bytes from 192.168.160.2 icmp_seq=3 ttl=62 time=58.214 ms<br>84 bytes from 192.168.160.2 icmp_seq=4 ttl=62 time=57.331 ms<br>84 bytes from 192.168.160.2 icmp_seq=5 ttl=62 time=55.250 ms</p>
<p>VPCS&gt; ping 192.168.16.2</p>
<p>84 bytes from 192.168.16.2 icmp_seq=1 ttl=61 time=95.665 ms<br>84 bytes from 192.168.16.2 icmp_seq=2 ttl=61 time=116.828 ms<br>84 bytes from 192.168.16.2 icmp_seq=3 ttl=61 time=87.677 ms<br>84 bytes from 192.168.16.2 icmp_seq=4 ttl=61 time=118.399 ms<br>84 bytes from 192.168.16.2 icmp_seq=5 ttl=61 time=87.571 ms</p>
<p>测试通过了。<br>但是想告诉大家，虽然测试通过了，但是要通过监控系统进行检测还是需要将lifttime配置上，要不然的话没有敏感流量通过就不会保持连接状态，监控系统会报错。</p>
]]></content>
      <categories>
        <category>VPN</category>
      </categories>
      <tags>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title>再谈双向NAT</title>
    <url>/2019/07/18/70/</url>
    <content><![CDATA[<h3 id="出现背景"><a href="#出现背景" class="headerlink" title="出现背景:"></a>出现背景:</h3><p><a href="https://www.tuchuang001.com/image/K83AW"><img src="https://www.tuchuang001.com/images/2017/06/09/0a5b4b39c301b479.png" alt="0a5b4b39c301b479.png" loading="lazy"></a><br>在防火墙上部署了NATserver后，外网用户可以访问内部服务器。一般内部服务器都会通过一个域名进行解析。但如果内网用户也想通过此域名访问服务器就会出现问题。</p>
<h3 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h3><ol>
<li>内网用户要想访问internet,需要在防火墙上做个源NAT，将内网用户的网段转换为公网ip</li>
<li>假设pc通过公网ip 200.1.1.100 访问服务器，在出防火墙时防火墙做可源NAT会将PC的原地址转换为200.1.1.100将数据包交出去。</li>
<li>防火墙上配置了NATserver，将公网ip 200.1.1.100映射为服务器的私网地址192.168.1.100。数据包会交给服务器。</li>
<li>去时的数据包走向没有问题，分析回来的，回来时就会出现问题。</li>
<li>由于服务器和PC处于同一网段（防火墙以放行PC所在区域和服务器所在区域的数据），回包时服务器发送ARP报文找到了PC的MAC地址，三层封装时源IP地址为：192.168.1.100，目的IP地址为192.168.1.1。源目MAC地址分别为服务器的MAC地址和PC的MAC地址。数据包直接走二层过去。</li>
<li>PC和服务进行通信需要建立TCP的三次握手,第一次握手时的目的IP地址为200.1.1.100，但此时却收到了192.168.1.100的回包。怎么办，凌乱了，握手不成功。TCP连接无法建立。</li>
</ol>
<a id="more"></a>

<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h3><blockquote>
<p>上述问题产生的根本原因是PC访问服务器的数据包来回路径不一致，要解决这个问题只要使服务器访问PC的数据包经过防火墙即可。</p>
</blockquote>
<p>防火墙的内网接口地址为192.168.1.254，在防火墙上在做一个策略将PC访问服务器的源地址也做一个转换，将192.168.1.1转换为192.168.1.254。</p>
<p><strong>转换过后在分析：</strong></p>
<ol>
<li>过去的数据包走向和上述相同，不在分析。只不过在服务器看来访问自己的地址变成了192.168.1.254</li>
<li>回来时，服务器会把数据包交给192.168.1.254，此时由于防火墙上做了NAT srver,会将服务器的地址转换为200.1.1.100，将目的地址192.168.1.254转换为192.168.1.1。此时就与之前的TCP三次握手对应上了，PC一看与我握手的是200.1.1.100，成功握手。</li>
<li>数据包来回路径一致，成功解救问题。</li>
</ol>
]]></content>
      <categories>
        <category>华为</category>
      </categories>
      <tags>
        <tag>NAT</tag>
      </tags>
  </entry>
  <entry>
    <title>无题</title>
    <url>/2019/08/09/71/</url>
    <content><![CDATA[<p>好久没来哔哔了。。。唉，静心静心。。。</p>
<p>nodejs挂了 重新装了一下可以用了。最近进步还是很慢。。。</p>
]]></content>
      <categories>
        <category>自嘲</category>
      </categories>
      <tags>
        <tag>自嘲</tag>
      </tags>
  </entry>
  <entry>
    <title>路由协议的优先级，以及管理距离AD和metric的区别</title>
    <url>/2019/08/14/72/</url>
    <content><![CDATA[<p>路由协议的优先级（Preference，即<strong>管理距离**</strong>Administrative Distance**）一般为一个0到255之间的数字，数字越大则优先级越低。表一是通常情况下各路由协议的优先级规定：</p>
<p>表一：一般路由协议优先级</p>
<table>
<thead>
<tr>
<th>路由协议</th>
<th>优先级</th>
</tr>
</thead>
<tbody><tr>
<td>DIRECT</td>
<td>0</td>
</tr>
<tr>
<td>OSPF</td>
<td>10</td>
</tr>
<tr>
<td>IS-IS Level 1</td>
<td>15</td>
</tr>
<tr>
<td>IS-IS Level 2</td>
<td>18</td>
</tr>
<tr>
<td>NSFnet主干的SPF</td>
<td>19</td>
</tr>
<tr>
<td>缺省网关和EGP缺省</td>
<td>20</td>
</tr>
<tr>
<td>重定向路由</td>
<td>30</td>
</tr>
<tr>
<td>由route socket得到的路由</td>
<td>40</td>
</tr>
<tr>
<td>由网关加入的路由</td>
<td>50</td>
</tr>
<tr>
<td>路由器发现的路由</td>
<td>55</td>
</tr>
<tr>
<td>静态路由</td>
<td>60</td>
</tr>
<tr>
<td>CISCO IGRP</td>
<td>80</td>
</tr>
<tr>
<td>DCN HELLO</td>
<td>90</td>
</tr>
<tr>
<td>Berkeley RIP</td>
<td>100</td>
</tr>
<tr>
<td>点对点接口聚集的路由</td>
<td>110</td>
</tr>
<tr>
<td>Down状态的接口路由</td>
<td>120</td>
</tr>
<tr>
<td>聚集的缺省路由</td>
<td>130</td>
</tr>
<tr>
<td>OSPF的扩展路由</td>
<td>140</td>
</tr>
<tr>
<td>BGP</td>
<td>170</td>
</tr>
<tr>
<td>EGP</td>
<td>200</td>
</tr>
</tbody></table>
<p>各产品厂商可能对路由协议的优先级有不同的规定，表二、表三分别列出了华为、思科路由器路由优先级列表：</p>
<p>表二：华为路由器路由优先级</p>
<table>
<thead>
<tr>
<th>路由协议</th>
<th>优先级</th>
</tr>
</thead>
<tbody><tr>
<td>DIRECT</td>
<td>0</td>
</tr>
<tr>
<td>OSPF</td>
<td>10</td>
</tr>
<tr>
<td>STATIC</td>
<td>60</td>
</tr>
<tr>
<td>IGRP</td>
<td>80</td>
</tr>
<tr>
<td>RIP</td>
<td>110</td>
</tr>
<tr>
<td>OSPFASE</td>
<td>150</td>
</tr>
<tr>
<td>BGP</td>
<td>170</td>
</tr>
</tbody></table>
<p>表三：思科路由器路由协议优先级</p>
<table>
<thead>
<tr>
<th>路由协议</th>
<th>优先级</th>
</tr>
</thead>
<tbody><tr>
<td>DIRECT</td>
<td>0</td>
</tr>
<tr>
<td>STATIC</td>
<td>1</td>
</tr>
<tr>
<td>EIGRP Summary</td>
<td>5</td>
</tr>
<tr>
<td>EBGP</td>
<td>20</td>
</tr>
<tr>
<td>内部EIGRP</td>
<td>90</td>
</tr>
<tr>
<td>IGRP</td>
<td>100</td>
</tr>
<tr>
<td>OSPF</td>
<td>110</td>
</tr>
<tr>
<td>IS-IS</td>
<td>115</td>
</tr>
<tr>
<td>RIP</td>
<td>120</td>
</tr>
<tr>
<td>EGP</td>
<td>140</td>
</tr>
<tr>
<td>外部EIGRP</td>
<td>170</td>
</tr>
<tr>
<td>IBGP</td>
<td>200</td>
</tr>
<tr>
<td>未知</td>
<td>255</td>
</tr>
</tbody></table>
<p>路由的优先级的概念是优先级高的新路由协议可替代优先级低的同信宿路由，反之，则不然。</p>
 <a id="more"></a>

<p>需要区别的是路由开销（metric）和路由优先级（preference）这两个概念。metric是针对同一种路由协议而言，对不同的路由协议，由于代表的含义不同，比较不同协议的metric是无意义的，所以要在两条不同协议的同信宿路由中作出选择，只能比较路由协议的优先级。相反，preference是针对不同路由协议而言，同协议的路由的preference优先级是一般情况下一样的，这时metric是在两条同信宿路由中作出选择的标准。</p>
<p><strong>总结：路由优先级在不同协议时候，比较preference**</strong>的大小，而在路由协议相同时候由于preference**<strong>相同，则再比较metric**</strong>的大小，进而确定最终选择的路由。**</p>
<p><strong>一般在ip route**</strong>命令中静态路由中的参数“Distance metric for this route**<strong>“都是指metric**</strong>参数，而Administrative Distance**<strong>在使用不同路由协议间比较时候，都使用默认值，如上表。一般Administrative Distance**</strong>值不单独写出来，除非要更改其默认值。**</p>
<p>PS：对于小规模的网络，使用静态路由方式很合适，以下为cisco的静态路由配置命令：</p>
<p>Static Routing</p>
<p>　　静态路由:手动填加路由线路到路由表中,优点是:<br>1.没有额外的router的CPU负担<br>2.节约带宽<br>3.增加安全性</p>
<p>　　缺点是:<br>1.网络管理员必须了解网络的整个拓扑结构<br>2.如果网络拓扑发生变化,管理员要在所有的routers上手动修改路由表<br>3.不适合在大型网络中<br>　　静态路由的配置命令:ip route [dest-network] [mask] [next-hop address或exit interface][administrative distance] [permanent]<br>ip route:创建静态路由<br>dest-network:决定放入路由表的路由表<br>mask:掩码<br>next-hop address:下1跳的router地址<br>exit interface:如果你愿意的话可以拿这个来替换next-hop address,但是这个是用于点对点(point-to-point)连接上,比如广域网(WAN)连接,这个命令不会工作在LAN上<br>administrative distance:默认情况下,静态路由的管理距离是1,如果你用exit interface代替next-hop address,那么管理距离是0 <strong>（不同协议是**</strong>AD**<strong>，但是对于相同路由协议时候，是指**</strong>metric**<strong>）</strong>permanent:如果接口被shutdown了或者router不能和下1跳router通信,这条路由线路将自动从路由表中被删除.使用这个参数保证即使出现上述情况,这条路线仍然保持在路由表中。</p>
<p><strong>路由表中的管理距离（**</strong>Administrative Distance**<strong>）和度量值（**</strong>Metric**<strong>）</strong></p>
<p>R1#show ip route<br>…省略<br><strong>R    10.2.0.0[120/1] via 10.1.1.2,00:00:21,Serial0/0</strong><br>C    10.3.0.0 is directly connected,Serial0/1<br>#####################################################################<br>在输出中，首先显示路由条目各种类型的简写，如“C”为直连网络，“S”为静态路由。<br>以上面粗体的路由为例：<br>“R”————————-表示这条路由是“RIP”协议学习得到的；<br>“10.2.0.0”—————–是目的网络；<br>“[120/1]”——————-是管理距离（Administrative Distance,AD）/ 度量值（Metric）；<br>“via 10.1.1.2”————-是指到达目的网络的下一跳路由器IP地址；<br>“00:00:21”—————–是指路由器最近一次得知路由到现在的时间；<br>“Serial 0/0”—————-是指到达下一跳应从哪个端口出去。</p>
<p>技术要点：<br><strong>管理距离（**</strong>AD**<strong>，**</strong>Administrative Distance**<strong>）：</strong><br>       用来表示路由器可能从多种途径获得同一路由，例如，一个路由器要获得“10.2.0.0/24”网络的路由，可以来自RIP，也可以是静态路由。不同途径获得的路由可能采取不同的路径到达目的网络，为了区分不同路由协议的可信度，用管理距离加以表示。<br>       管理距离越小，说明路由的可信度越高；静态路由的管理距离为1，说明手工输入的路由优先级高于其他的路由。</p>
<table>
<thead>
<tr>
<th>路由协议</th>
<th>优先级</th>
</tr>
</thead>
<tbody><tr>
<td>DIRECT</td>
<td>0</td>
</tr>
<tr>
<td>STATIC</td>
<td>1</td>
</tr>
<tr>
<td>EIGRP Summary</td>
<td>5</td>
</tr>
<tr>
<td>EBGP</td>
<td>20</td>
</tr>
<tr>
<td>内部EIGRP</td>
<td>90</td>
</tr>
<tr>
<td>IGRP</td>
<td>100</td>
</tr>
<tr>
<td>OSPF</td>
<td>110</td>
</tr>
<tr>
<td>IS-IS</td>
<td>115</td>
</tr>
<tr>
<td>RIP</td>
<td>120</td>
</tr>
<tr>
<td>EGP</td>
<td>140</td>
</tr>
<tr>
<td>外部EIGRP</td>
<td>170</td>
</tr>
<tr>
<td>IBGP</td>
<td>200</td>
</tr>
<tr>
<td>未知</td>
<td>255</td>
</tr>
</tbody></table>
<p> <strong>度量值（**</strong>Metric**<strong>）：</strong><br>       某一个路由协议（相同路由协议）判别到达目的的网络的最佳的方法。当一路由器有多条路径到达某一目的网络时，路由协议必须判断其中哪一条是最佳的并把它放到路由表中，路由协议会给每一条路径计算出一个数，这个数就是度量值，通常这个值是没有单位的。<br>       度量值越小，这条路径越佳。然而不同的路由协议定义度量值的方法不是一样的，所以不同的路由协议选择出的最佳距离可能也是不一样的。</p>
<p>重分发进rip或eigrp的其他协议若不指定metric的话，默认为无穷大。</p>
<p>重分发进ospf的其他协议若不指定metric的话，除了BGP为1外，默认为20.</p>
<p>重分发进BGP的其他协议的metric值为其本身的metric值不变<br>-————————————————————————————————————————–</p>
<p> <strong>度量值（**</strong>Metric**<strong>）指明了路径的优先权，而管理距离（**</strong>AD**<strong>）指明了发现路由方式的优先权**</strong>。**</p>
<p>同一种路由协议比较<a href="http://wenwen.soso.com/z/Search.e?sp=S%E5%BA%A6%E9%87%8F%E5%80%BC&ch=w.search.yjjlink&cid=w.search.yjjlink">度量值</a>，而不同路由协议比较<a href="http://wenwen.soso.com/z/Search.e?sp=S%E7%AE%A1%E7%90%86%E8%B7%9D%E7%A6%BB&ch=w.search.yjjlink&cid=w.search.yjjlink">管理距离</a>，OSPF还有E1 2之分 cost也不同</p>
<p>外部协议路由重分布进OSPF 默认是E2  默认是20 bgp除外 E1的话要把经过cost都计算在内 。</p>
<p><strong>同种协议管理距离一样**</strong>，所以比较**<strong>metric</strong> <strong>，不同协议比较管理距离**</strong>越小越优先** <strong>。</strong></p>
]]></content>
      <categories>
        <category>路由</category>
      </categories>
      <tags>
        <tag>路由</tag>
      </tags>
  </entry>
  <entry>
    <title>理解wireshark中的length字段含义</title>
    <url>/2019/08/22/73/</url>
    <content><![CDATA[<p>原文链接：<a href="https://www.louxiaohui.com/2018/06/29/understanding-the-length-field-in-wireshark/">https://www.louxiaohui.com/2018/06/29/understanding-the-length-field-in-wireshark/</a></p>
<p>主要介绍wireshark中的length计算方法，主要涉及MTU、MSS、常见协议头大小。</p>
<h2 id="length含义"><a href="#length含义" class="headerlink" title="length含义"></a>length含义</h2><p>Wireshark is showing you the length of the Ethernet frame that is handed to it, which may or may not include the FCS.</p>
<p>wireshark显示的长度为以太网帧的长度，不包括FCS(Frame check sequence)[帧校验序列]</p>
<h2 id="常见协议头大小"><a href="#常见协议头大小" class="headerlink" title="常见协议头大小"></a>常见协议头大小</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ethernet header: 14 bytes # 数据链路层帧头大小，一般为14bytes,其为源MAC(6bytes&#x2F;48bits)+目的MAC(6bytes&#x2F;48bits)+类型&#x2F;长度(2bytes)</span><br><span class="line">IP header (standard): 20 bytes # IP头部大小</span><br><span class="line">ICMP header: 8 bytes     # ICMP头部大小</span><br><span class="line">ICMP payload: 32 bytes   # ICMP缓冲区大小，可以通过ping的-l选项指定大小，默认为32。</span><br><span class="line">FCS 4 bytes of Ethernet checksum # 帧尾CRC校验</span><br></pre></td></tr></table></figure>

<h2 id="length计算"><a href="#length计算" class="headerlink" title="length计算"></a>length计算</h2><p>MTU=MSS+IP header(20 bytes)+tcp header(20 bytes)</p>
<p>length=MTU+Ethernet header(14bytes)</p>
<p>其中MSS为Maximum Segment Size，即最大报文段长度，其受MTU大小影响，这里的MTU指的是三层的，二层的MTU固定为1500，不能修改。</p>
<p>MTU为Maximum Transmission Unit,即最大传输单元，需要注意MTU如果太小会影响收到数据包的速度，表现为下载过慢。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">三层收到大数据包时，要将数据包分片后再往下层传输，这就是IP分片原理。既然IP分片可以改变一个IP数据包的大小 ，那么IP分片怎么设置呢？</span><br><span class="line">这也是网上人们所谓的修改MTU值达到最佳网速的方法，而这里所说的修改“MTU”大小其实是IP分片的大小。</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2018/06/29/5b351f365f656.png" alt="2.png" loading="lazy"><img src="https://i.loli.net/2018/06/29/5b351195a1754.png" alt="1.png" loading="lazy"></p>
<p>从截图中可以看到MSS为1460，MTU计算后为1500，1460 + 20(IP header) + 20(tcp header) = 1500</p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul>
<li>问题</li>
</ul>
<p>同一局域网中，同样的操作系统，同样的URL链接，同样的端口，使用ESXI虚拟出来的两台虚机，分别绑定host，使用wget测试下载速度，一个下载200K/s，一个10M/s。</p>
<table>
<thead>
<tr>
<th align="center">url</th>
<th align="center">IP</th>
<th align="center">下载速度</th>
<th align="center">截图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="http://192.168.28.210:8989/mac_3.4.196_1530084415522.zip">http://192.168.28.210:8989/mac_3.4.196_1530084415522.zip</a></td>
<td align="center">192.168.28.210</td>
<td align="center">10M/s</td>
<td align="center"><img src="https://i.loli.net/2018/06/29/5b352a1874907.png" alt="1.png" loading="lazy"></td>
</tr>
<tr>
<td align="center"><a href="http://192.168.28.41:8989/mac_3.4.196_1530084415522.zip">http://192.168.28.41:8989/mac_3.4.196_1530084415522.zip</a></td>
<td align="center">192.168.28.41</td>
<td align="center">200K/s</td>
<td align="center"><img src="https://i.loli.net/2018/06/29/5b352a188d348.png" alt="2.png" loading="lazy"></td>
</tr>
</tbody></table>
<ul>
<li>解决</li>
</ul>
<a id="more"></a>

<p>抓包后发现：</p>
<p>28.41的Length为1294，MSS为1240,推断其MTU为1280</p>
<p>28.210的Length为1514，MSS为1460，推断其MTU为1500</p>
<p>猜测其网卡设置不同，进入宿主机看网卡设置，28.41的网卡类型不是E1000，28.210的E1000，将28.41的网卡类型改为E1000后测试，恢复。</p>
<p><img src="https://i.loli.net/2018/06/29/5b352a189d02c.png" alt="3.png" loading="lazy"> <img src="https://i.loli.net/2018/06/29/5b352a18a2889.png" alt="4.png" loading="lazy"><img src="https://i.loli.net/2018/06/29/5b352a18a4726.png" alt="5.png" loading="lazy"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://osqa-ask.wireshark.org/questions/44865/length-field">length field</a></p>
<p><a href="http://www.hackingarticles.in/understanding-guide-icmp-protocol-wireshark/">Understanding Guide to ICMP Protocol with Wireshark</a></p>
<p><a href="https://blog.csdn.net/chiyuwei1766/article/details/50762894">ireshark实战之：MTU、MSS及计算方法</a></p>
]]></content>
      <categories>
        <category>wireshark</category>
      </categories>
      <tags>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>无线AP上线中需要的option</title>
    <url>/2019/08/27/74/</url>
    <content><![CDATA[<p> 　　华三AP支持的Option 43属性：</p>
<p>　　在L3 Switch上启用DHCP Server，正确配置Option43，例如AP属于VLAN100，是192.168.100.0/24网段，AC的IP地址为192.168.10.100/24，只支持16进制，DHCP Server配置如下：</p>
<p>　　[AC] dhcp server ip-pool vlan100</p>
<p>　　[AC-dhcp-pool-vlan100] network 192.168.100.0 mask 255.255.255.0</p>
<p>　　[AC-dhcp-pool-vlan100] gateway-list 192.168.100.254</p>
<p>　　[AC-dhcp-pool-vlan100] option 43 hex 80070000 01 C0A80A64</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　#80：选项类型，固定为80，1个字节。</span><br><span class="line"></span><br><span class="line">　　#07：选项长度，表示其后内容的长度(十六进制数的个数，这里表示后面有7个十六进制数，0B表示后面有11个十六进制数)，一个字节。</span><br><span class="line"></span><br><span class="line">　　#0000：Server type，固定配为0000两个字节。</span><br><span class="line"></span><br><span class="line">　　#01：后面IP地址的个数，一个字节。</span><br><span class="line"></span><br><span class="line">　　# C0A80A64： AC的IP地址192.168.10.100的十六进制表示。</span><br><span class="line"></span><br><span class="line">　　注意：dhcp server option 43的选项中最多支持下发14个ip地址，且为了满足这个最大的规格，option43的选项配置参照以下方式(每段最大4个字节，最小1个字节，大小写都可以)：</span><br><span class="line"></span><br><span class="line">　　option 43 hex 803f0000 0e c0a80a60 c0a80a61 c0a80a62 c0a80a63 c0a80a64 c0a80a65 c0a80a66 c0a80a67 c0a80a68 c0a80a69 c0a80a70 c0a80a71 c0a80a72 c0a80a73</span><br></pre></td></tr></table></figure>

<p>　　华为AP支持的Option 43属性：</p>
<p>　　AC的IP地址为192.168.10.100/24,既支持16进制又支持10进制</p>
<p>　　[Dhcp-hw] ip pool ap</p>
<p>　　[Dhcp-hw-ip-pool-huawei]network 192.168.100.0 255.255.255.0</p>
<p>　　[Dhcp-hw-ip-pool-huawei]gateaway-list 192.168.100.254</p>
<p>　　[Dhcp-hw-ip-pool-huawei]option 43 sub-option 3 hex 3139322e3136382e31302e313030 or option 43 sub-option 3 ascii 192.168.10.100</p>
<p>　　Sub-option 3为option 43的子类型，后面跟的16进制包含小数点一起，16进制数31对应字符“1”的ASCII值，32对应“2”的ASCII值，以此类推，2e代表“.”的值，2c代表“,”的值。</p>
<p>　　如果有两个AC地址的话，中间要用逗号隔开(asicc码：2c)，比如AC的IP地址为192.168.10.100和192.168.1.100.option 43属性如下：</p>
<p>　　[Dhcp-hw-ip-pool-huawei]option 43 sub-option 3 hex 3139322e3136382e31302e3130302c</p>
<p>　　3139322e3136382e312e313030 or option 43 sub-option 3 ascii 192.168.10.100，192.168.1.100</p>
<p>​    <a id="more"></a></p>
<p>　　思科AP支持的Option 43属性：</p>
<p>　　AC的IP地址为192.168.10.100/24,只支持16进制。</p>
<p>　　Dhcp-sw(config)#ip dhcp pool AP</p>
<p>　　Dhcp-sw(dhcp-config)#network 192.168.100.0 /24</p>
<p>　　Dhcp-sw(dhcp-config)#default-route 102.168.100.254</p>
<p>　　Dhcp-sw(dhcp-config)#option 43 hex f1040c0a80a64</p>
<p>　　Hex是固定的，标识为16进制，f1是固定type,04代表地址长度，一个地址4位，如果两个地址则为08，c0a80a64标识192.168.10.100</p>
<p>　　如果华为的交换机和思科的交换机不支持我们AP支持的option 43格式，那么我们AP就没办法识别，从而完成不了注册。</p>
<p>　　现场华为交换机下发的为自己AP支持的option 43的属性，而我们AP不识别，导致我们AP没有获取到AC的IP地址，出现注册不上的情况。</p>
<p><strong>在做WLAN工程时AP需要使用option 43方式注册到AC,下面讲解一下简单案例</strong><br><strong>注册一个192.168.1.2的AP此时option 43 hex应填数据为：80 07 00 00 01 c0 a8 01  02</strong><br><strong>下面解释一下这个结果是如何得出：</strong><br><strong>80 ：固定端口，不能改变</strong><br><strong>07：表示其后内容长度（16进制表示），这个后位是7位，16进制时还是7</strong><br><strong>0000：固定配置</strong><br><strong>01：表示只有一个IP</strong><br><strong>C0 A8 01 02：192.168.1.2的十六进制表示</strong></p>
<p><img src="https://s3.51cto.com/wyfs02/M01/33/E4/wKiom1OqlzrD8wuYAAFSflpEGcA131.jpg" alt="option 43.jpg" loading="lazy"></p>
]]></content>
      <categories>
        <category>无线</category>
      </categories>
      <tags>
        <tag>无线</tag>
      </tags>
  </entry>
  <entry>
    <title>wireshark分析网站打开过程</title>
    <url>/2019/08/28/75/</url>
    <content><![CDATA[<p>最近在看数字证书，https相关的知识，发现之前也是模棱两可的了解，一点都不深入，这篇文章从DNS解析开始，分析打开https的网站从开始到结束的过程。</p>
<p><img src="https://image01.zhang-zhe.cn/20190904105254.png" loading="lazy"></p>
<p>在从地址栏敲入域名之后，首先进行DNS的域名解析，抓包如下：</p>
<p><img src="https://image01.zhang-zhe.cn/20190904105458.png" loading="lazy"></p>
<p>1、DNS请求&amp;DNS解析阶段</p>
<p>​    1.1、本机向DNS服务器发起DNS解析请求，使用UDP协议，报文结构如下：</p>
<p>​    <img src="https://image01.zhang-zhe.cn/20190904105608.png" loading="lazy"></p>
<p>​    1.2、服务器向客户端发送请求的结果，同样使用UDP协议，报文结构如下：</p>
<p><img src="https://image01.zhang-zhe.cn/20190904105909.png" loading="lazy"></p>
<p>​    <a id="more"></a></p>
<p>​    1.3、answers结果如下：</p>
<p>​    由于网站托管在又拍云上，部署了CDN，所以先回返回一个cname的解析结果到我绑定的域名。</p>
<p><img src="C:\Users\zhangzhe23\AppData\Roaming\Typora\typora-user-images\1567566039341.png" alt="1567566039341" loading="lazy"></p>
<p>至此，DNS解析的阶段已经完成，只有两个包，客户端得到了服务端的IP地址，61.179.240.145</p>
<p>接下来就是客户端与服务端的交换。</p>
<p>3、开始进行TCP三次握手，抓包如下：</p>
<p><img src="https://image01.zhang-zhe.cn/20190904110407.png" loading="lazy"></p>
<p>图中可以看到，TCP三次握手已经完成，连接建立，在此大概说一下TCP三次握手的流程，可以参考下文链接。</p>
<p>原文链接：<a href="https://juejin.im/post/5b29d2c4e51d4558b80b1d8c">https://juejin.im/post/5b29d2c4e51d4558b80b1d8c</a> </p>
<p>4、建立过后，开始进行数据的传输</p>
<p>因为网站使用了https加密，在wireshark中使用追踪TLS流的功能进行过滤，所以可以看到如下报文：</p>
<p><img src="https://image01.zhang-zhe.cn/20190904140335.png" loading="lazy"></p>
<p>我们关注图中TLSV1.2的报文即可，报文记录了SSL握手从开始到结束的全过程，这也是笔者最近学习的，下面只是个人的理解，如有纰漏还请指出。</p>
<p><img src="https://image01.zhang-zhe.cn/20190904112100.png" loading="lazy"></p>
<p>​        4.1、客户端发起client hello请求。</p>
<p>​        <img src="https://image01.zhang-zhe.cn/20190904112246.png" loading="lazy"></p>
<p>​        其中包括了，浏览器给出协议的版本号为TLS 1.2，一个客户端生成的random随机数</p>
<p>​        <img src="https://image01.zhang-zhe.cn/20190904112708.png" loading="lazy"></p>
<p>​        支持下列加密算法。</p>
<p>​        <img src="https://image01.zhang-zhe.cn/20190904112642.png" loading="lazy"></p>
<p>​        其他相关参数。</p>
<p>​        <img src="https://image01.zhang-zhe.cn/20190904140238.png" loading="lazy"></p>
<p>​        签名算法，服务器名称等等。</p>
<p>​        </p>
<p>​        汇总来说，这一步进行了下列操作。</p>
<p>​        TLS的版本</p>
<p>​        随机数：这个是用来生成最后加密密钥的影响因子之一，包含两部分：时间戳（4-Bytes）和随机数（28-Bytes）</p>
<p>​        session-id：用来表明一次会话，第一次建立没有。如果以前建立过，可以直接带过去。后面的扩展内容会详细讲到。</p>
<p>​        加密算法套装列表：客户端支持的加密-签名算法的列表，让服务器去选择。</p>
<p>​        压缩算法：似乎一般都不用扩展字段：比如密码交换算法的参数、请求主机的名字等等</p>
<p>​    4.2、服务端响应Server hello给客户端。</p>
<p>​    <img src="https://image01.zhang-zhe.cn/20190904140420.png" loading="lazy"></p>
<p>​    其中包含的信息和client hello有异曲同工之妙。</p>
<p>​    4.3、服务端server hello完成。</p>
<p>​    <img src="https://image01.zhang-zhe.cn/20190904141337.png" loading="lazy"></p>
<p>​    这个报文中包含了两方面的信息，一个是</p>
<p>​    </p>
<p>​    写一半太忙，不想写了，这篇文章写得比我好。</p>
<p>​    <a href="https://www.jianshu.com/p/a3a25c6627ee">https://www.jianshu.com/p/a3a25c6627ee</a></p>
<p><img src="https://image01.zhang-zhe.cn/20190904144256.png" loading="lazy"></p>
]]></content>
      <categories>
        <category>wireshark</category>
      </categories>
      <tags>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP的几个状态 (SYN, FIN, ACK, PSH, RST, URG)</title>
    <url>/2019/09/09/76/</url>
    <content><![CDATA[<p>在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.</p>
<p>其中，对于我们日常的分析有用的就是前面的五个字段。</p>
<p>它们的含义是：</p>
<p>SYN表示建立连接，</p>
<p>FIN表示关闭连接，</p>
<p>ACK表示响应，</p>
<p>PSH表示有 DATA数据传输，</p>
<p>RST表示连接重置。</p>
<p>其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，</p>
<p>如果只是单个的一个SYN，它表示的只是建立连接。</p>
<p>TCP的几次握手就是通过这样的ACK表现出来的。</p>
<p>但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。</p>
<p>RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。</p>
<a id="more"></a>

<p>一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。</p>
<p>PSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。</p>
<p>TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。</p>
<p>概念补充-TCP三次握手：</p>
<p>TCP(Transmission Control Protocol)传输控制协议</p>
<p>TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：</p>
<p>位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)</p>
<p>第一次握手：主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；</p>
<p>第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包；</p>
<p>第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功。</p>
<p>完成三次握手，主机A与主机B开始传送数据。</p>
<p>在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。<br>第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；<br>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；<br>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。完成三次握手，客户端与服务器开始传送数据.</p>
]]></content>
      <categories>
        <category>wireshark</category>
      </categories>
      <tags>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux TCP连接Connection Refused和Connection timed out的问题</title>
    <url>/2019/04/18/8/</url>
    <content><![CDATA[<p>前段时间和其它系统做联调测试，对方系统采用的是负载均衡模式。调试时采用的是多台手机作为客户端发送到对方负载均衡服务器，然后再把报文转发送到我这边的服务端。在测试的时候，对方测试人员说有的手机客户端会偶尔出现报文发不过来的情况。</p>
<p>故事有点长，先发一张tcp三次握手的过程图镇楼~</p>
<p><img src="https://cdn.typecodes.com/2015/09/tcp_handshake.png" alt="Linux tcp三次握手" loading="lazy"></p>
<h5 id="1-自己服务端的socket监听出现问题"><a href="#1-自己服务端的socket监听出现问题" class="headerlink" title="1 自己服务端的socket监听出现问题"></a>1 自己服务端的socket监听出现问题</h5><p>一开始认为可能是自己作为服务端的监听有问题，因为后面排查监听端口的时候发现了<code>close_wait</code>的情况。当时没多想，认为对方负载均衡不会出错（先前跟其它系统联调过了），就急着解决close_wait的问题去了。</p>
<p>可是后面测试的时候，尽管服务端监听没有任何异常，但是手机APP还是有发包失败的情况，而且怪异的是服务端日志也没打印请求包内容。</p>
<h5 id="2-防火墙只收到对方系统的一个IP记录"><a href="#2-防火墙只收到对方系统的一个IP记录" class="headerlink" title="2 防火墙只收到对方系统的一个IP记录"></a>2 防火墙只收到对方系统的一个IP记录</h5><p>折腾了很久还是没找到原因所在，后面联系了对方系统测试人员得到回复说他们的日志报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.net.SocketTimeoutException: SocketTimeoutException invoking https:&#x2F;&#x2F;123.123.123.214:7070: connect timed out</span><br></pre></td></tr></table></figure>

<p>于是联系网络管理员，看防火墙是否拒掉了对方请求报文。结果网管回复防火墙正常，但是只收到对方的一台IP记录，另一IP没有发送过报文。</p>
<p>立即反映给对方开发人员，结果对方发现是负载均衡系统的一台服务器连接我这边系统的网络有问题。</p>
<h5 id="3-问题的总结"><a href="#3-问题的总结" class="headerlink" title="3 问题的总结"></a>3 问题的总结</h5><p>到这里问题已经解决了，但是自己对于tcp出现<code>Connection timed out</code>的错误认识不足，只想到是自己服务端<code>close_wait</code>引起的问题。下面是自己对tcp握手过程中出现<code>Connection refused</code>和<code>Connection timed out</code>的总结。</p>
<h6 id="3-1-Connection-refused"><a href="#3-1-Connection-refused" class="headerlink" title="3.1 Connection refused"></a>3.1 Connection refused</h6><p>使用telnet来检查tcp链路时，如果遇到”Connection refused”的错误，那么表示从本地客户端到目标IP地址的路由是正常的，但是该目标端口没有进程在监听，然后服务端拒绝掉了连接。</p>
<p>一个成功的tcp链接将会看到<code>Syn</code>，<code>Syn-Ack</code>，<code>Ack</code>，这也就是我们预期的TCP三次握手。当使用<code>tcpdump</code>或<code>wireshark</code>抓包工具来探测发送过来的请求报文包时，<code>Connection refused</code>将会看到<code>Syn</code>,<code>Rst</code>。</p>
<h6 id="3-2-Connection-timed-out"><a href="#3-2-Connection-timed-out" class="headerlink" title="3.2 Connection timed out"></a>3.2 Connection timed out</h6><p>如果telnet的时候，TCP路由不正常，那么会得到一个<code>Connection timed out</code>的错误。”Couldn’t connect”原因有很多，可能是服务器无法ping通，可能是服务器（防火墙等）丢弃了该请求报文包，也可能是服务器应答太慢，又或者存在间歇性的问题（这种情况很难从日志文件中排查问题）。</p>
<p>下面演示“Connection timed out”的情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 先打开一个ssh会话，telnet任意一个不存在IP</span><br><span class="line">[root@typecodes ~]# telnet 10.10.223.123 9010</span><br><span class="line">Trying 10.10.223.123...</span><br><span class="line"></span><br><span class="line"># 然后打开另一个ssh会话，netstat服务器上tcp连接状况</span><br><span class="line">[root@typecodes ~]# netstat -anpt</span><br><span class="line">tcp        0      1 10.169.218.97:53794     10.10.223.123:9010      SYN_SENT    4271&#x2F;telnet</span><br></pre></td></tr></table></figure>

<p>由下图可知，telnet进程作为客户端发送SYN包后，进入<code>SYN_SENT</code>状态，等待服务端应答。</p>
<p><img src="https://cdn.typecodes.com/2015/09/linux_netstat_antp.png" alt="netstat查看tcp连接状态" loading="lazy"></p>
<p>但是由于客户端和目标IP的路由无法建立（也就是BZ遇到的情况），所以在3分钟后该tcp链路显示<code>Connection timed out</code>。</p>
<p><img src="https://cdn.typecodes.com/2015/09/linux_telnet_timeout.png" alt="Linux telenet connection timed out" loading="lazy"></p>
]]></content>
      <categories>
        <category>LINUX</category>
      </categories>
      <tags>
        <tag>故障</tag>
      </tags>
  </entry>
  <entry>
    <title>Cisco 常用命令</title>
    <url>/2019/04/24/12/</url>
    <content><![CDATA[<p>一、交换部分</p>
<p>1.显示交换表<br>大型交换机：<br>Swtich-6509#show cam dynamic<br>小型交换机：<br>Switch-3548#show mac-address-table</p>
<p>2.连接交换机Console口进行配置<br>使用RJ-45到9针或25针异步串行接口的信号电缆<br>速率          9600<br>数据位        8<br>奇偶效验      无<br>停止位        1<br>数据流控制    硬件</p>
<p>3.进入特权模式<br>Switch-3548&gt;enable<br>Swtich-6509&gt;enable</p>
<p>4.配置主机名：<br>Switch-3548(config)#hostname Switch1<br>Swtich-6509&gt;(enable)set system name Switch1</p>
<p>5.设置系统提示：<br>Swtich-6509&gt;(enable)set prompt Switch1</p>
<p>6.配置超级用户口令<br>Switch-3548(config)#enable password cisco (明文口令)<br>Switch-3548(config)#enable password 7 cisco (加密口令)<br>Switch-3548(config)#enable secret cisco   (加密口令)</p>
<p>Swtich-6509&gt;(enable)set enablepass</p>
<p>7.配置远程登录口令<br>Switch-3548(config)#line vty 0 4<br>Switch-3548(config-line)#password 0 zzz   (明文口令)<br>Switch-3548(config-line)#password 7 zzz   (加密口令)</p>
<p>Swtich-6509&gt;(enable)set password</p>
<p>8.设置系统时间<br>Switch-3548#clock set 21:11:12 24 May 2010</p>
<p>Swtich-6509&gt;(enable)set time fri 2/23/2007 23:00:00</p>
<p>9.配置设备管理IP地址<br>Switch-3548(config)#interface vlan1<br>Switch-3548(config-if)#ip address 10.0.0.5 255.255.255.0 (配置IP地址为10.0.0.5/24)<br>Switch-3548(config-if)#ip default-gateway 10.0.0.1 (配置缺省路由为10.0.0.1)</p>
<p>Swtich-6509&gt;(enable)set interface sc0 10.0.0.5 255.255.255.0 10.0.0.255 (配置IP地址为10.0.0.5/24 最后为广播地址)<br>Swtich-6509&gt;(enable)set ip route 0.0.0.0 10.0.0.1 (配置缺省路由为10.0.0.1 0.0.0.0表示缺省路由)</p>
<p>10.配置交换机端口描述信息<br>Switch-3548(config)#interface fa0/2<br>Switch-3548(config-if)#description This_is_to_Xianan (设置描述信息为This_is_to_Xianan)</p>
<p>Swtich-6509&gt;(enable)set port name 0/2 This_is_to_Xianan (设置描述信息为This_is_to_Xianan)</p>
<p>11.开启关闭端口<br>Switch-3548(config)#interface fa0/2<br>Switch-3548(config-if)#shutdown    (关闭端口)<br>Switch-3548(config-if)#no shutdown (开启端口)</p>
<p>Swtich-6509&gt;(enable)set port enable 0/2   (关闭端口)<br>Swtich-6509&gt;(enable)set port disable 0/2 (开启端口)</p>
<p>12.配置交换机端口通信方式<br>Switch-3548(config)#interface fa0/2 (进入端口)<br>Switch-3548(config-if)#deplex auto   (设置端口为自适应)<br>Switch-3548(config-if)#duplex full   (设置端口为全双工)<br>Switch-3548(config-if)#duplex half   (设置端口为半双工)</p>
<p>Swtich-6509&gt;(enable)set port duplex 0/1 full     (设置端口为全双工)<br>Swtich-6509&gt;(enable)set port duplex 0/1-24 full<br>Swtich-6509&gt;(enable)set port duplex 0/1 half     (设置端口为半双工)<br>Swtich-6509&gt;(enable)set port duplex 0/1-24 half</p>
<p>12.配置交换机端口传输速率<br>Switch-3548(config-if)#speed auto    (设置端口自动速率配置)<br>Switch-3548(config-if)#speed 100    (设置端口速率为100M)<br>Switch-3548(config-if)#speed 10    (设置端口速率为10M)</p>
<p>Swtich-6509&gt;(enable)set port speed 0/1 auto      (设置端口自动速率配置)<br>Swtich-6509&gt;(enable)set port speed 0/1-24 auto<br>Swtich-6509&gt;(enable)set port speed 0/1-24 10      (设置端口速率为10M)<br>Swtich-6509&gt;(enable)set port speed 0/1-24 100     (设置端口速率为100M)<br>Swtich-6509&gt;(enable)set port speed 0/1-24 1000    (设置端口速率为1000M)</p>
<p>13.配置VTP<br>Switch-3548#config t<br>Switch-3548(config)#vtp domain cisco      (设置VTP域名为cisco)<br>Switch-3548(config)#vtp mode server       (设置为VTP Server模式，缺省值)<br>Switch-3548(config)#vtp mode client       (设置为VTP client模式)<br>Switch-3548(config)#vtp mode transparent (设置为VTP Transparent模式)<br>Switch-3548(config)#vtp password cisco    (设置为VTP密码为cisco)</p>
<p>Swtich-6509&gt;(enable)set vtp domain cisco      (设置VTP域名为cisco)<br>Swtich-6509&gt;(enable)set vtp mode server       (设置为VTP Server模式，缺省值)<br>Swtich-6509&gt;(enable)set vtp mode client       (设置为VTP client模式)<br>Swtich-6509&gt;(enable)set vtp mode transparent (设置为VTP Transparent模式)<br>Swtich-6509&gt;(enable)set vtp password cisco    (设置为VTP密码为cisco)<br>Swtich-6509&gt;(enable)set vtp mode off          (关闭VTP)</p>
<p>14.建立和删除VLAN<br>老版本：<br>Switch-3548#config t<br>Switch-3548(config)#vlan data<br>Switch-3548(vlan)#vlan 200 name vlan200 (建立vlan 200，命名为vlan200)<br>Switch-3548(vlan)#vlan 200 name v200     (修改vlan 200，命名为v200)<br>Switch-3548(vlan)#no vlan 200      (删除vlan 200)<br>Switch-3548(vlan)#exit<br>新版本：<br>Switch-3548#config t<br>Switch-3548(config)#vlan 200         (建立vlan 200)<br>Switch-3548(config-if)#name vlan200 (命名为vlan200)<br>Switch-3548(config-if)#exit<br>Switch-3548(config)#no vlan 200 (删除vlan 200)</p>
<p>Swtich-6509&gt;(enable)set vlan 200 name vlan200      (建立vlan 200，命名为vlan200)<br>Swtich-6509&gt;(enable)set vlan 200 name v200       (修改vlan 200，命名为v200)<br>Swtich-6509&gt;(enable)clear vlan 200       (删除vlan 200)</p>
<p>Switch-3548(config)#interface fa0/1<br>Switch-3548(config-if)#switchport mode access   (设置端口模式为access)<br>Switch-3548(config-if)#switchport mode trunk    (设置端口模式为trunk)<br>Switch-3548(config-if)#switchport access vlan 200 (将端口分配到vlan200)</p>
<p>Swtich-6509&gt;(enable)set vlan 200 0/1 (将端口0/1划分到vlan 200)</p>
<p>15.VLAN Trunk 的配置<br>Switch-3548(config-if)#switchport mode trunk    (设置端口模式为trunk)<br>Switch-3548(config-if)#switchport trunk encapsulation dot1q    (封装IEEE 802.1Q)<br>Switch-3548(config-if)#switchport trunk encapsulation ISL (封装ISL)<br>Switch-3548(config-if)#switchport trunk encapsulution negotiate P (自动协商封装方式)<br>Switch-3548(config-if)#switchport trunk allowed vlan 10,14   (设置允许中继的VLAN 10 24)<br>Switch-3548(config-if)#switchprot trunk allowed vlan 10-24 (设置允许中继的VLAN 10-24)<br>Switch-3548(config-if)#switchport trunk allowed valn except 100-1000 (除去100-1000的VLAN，其他允许中继)</p>
<p>Swtich-6509&gt;(enable)set trunk 0/1 on dot1q   (设置端口0/1模式为trunk 封装IEEE 802.1Q)<br>Swtich-6509&gt;(enable)set trunk 0/1 vlan 10-24   (设置允许中继的VLAN 10-24)<br>Swtich-6509&gt;(enable)clear trunk 0/1 vlan 13-20   (除去13-20的VLAN，其他允许中继)</p>
<p>16.打开关闭STP<br>Switch-3548(config)#spanning-tree valn 3 (VLAN3启用STP)<br>Switch-3548(config)#no spanning-tree vlan 3 (VLAN3关闭STP)</p>
<p>Swtich-6509&gt;(enable)set spantree enable 3   (VLAN3启用STP)<br>Swtich-6509&gt;(enable)set spantree disable 3 (VLAN3关闭STP)</p>
<p>17.配置根网桥和备份根网桥<br>Switch-3548(config)#spanning-tree vlan 3 root primary (配置VLAN3为主根网桥)<br>Switch-3548(config)#spanning-tree vlan 3 root secondary (配置VLAN3为备份根网桥)</p>
<p>Swtich-6509&gt;(enable)set spantree root 1,200-204   (配置VLAN1,VLAN200-VLAN204为主根网桥)<br>Swtich-6509&gt;(enable)set spantree root 1,200-204   (配置VLAN1,VLAN200-VLAN204为备份根网桥)<br>Swtich-6509&gt;(enable)set spantree disable 3 (VLAN3关闭STP)</p>
<p>18.配置生成树优先级<br>Switch-3548(config)#spanning-tree vlan 3 priority 8192 (配置VLAN3的优先级为8192)</p>
<p>Swtich-6509&gt;(enable)set spantree priority 8192 (配置优先级为8192)</p>
<p>19.配置生成树可选项<br>Switch-3548(config)#spanning-tree backbonefast (允许backbonefast功能)</p>
<p>Swtich-6509&gt;(enable)set spantree backbonefast enable (允许backbonefast功能)</p>
<p>Switch-3548(config)#spanning-tree uplinkfast max-update-rate 32000 (uplinkfast功能max-update-rate值为32000)<br>Switch-3548(config)#spanning-tree uplinkfast (允许uplinkfast功能)</p>
<p>Swtich-6509&gt;(enable)set spantree uplinkfast enable (允许uplinkfast功能)<br>Swtich-6509&gt;(enable)set spantree uplinkfastenable rate 32000 (uplinkfast功能max-update-rate值为32000)</p>
<p>Switch-3548(config)#spanning-tree portfast enable   (打开portfast)<br>Switch-3548(config)#spanning-tree portfast disable (关闭portfast)<br>Switch-3548(config)#spanning-tree portfast default (缺省启用portfast)</p>
<p>Swtich-6509&gt;(enable)set spantree portfast enable (允许portfast功能)<br>Swtich-6509&gt;(enable)set spantree portfast disable (关闭portfast功能)<br>Swtich-6509&gt;(enable)set spantree portfast default (缺省启用portfast功能)</p>
<p>Switch-3548(config)#spanning-tree portfast bpdufilter befault (缺省启用bpdu filter)</p>
<p>Swtich-6509&gt;(enable)set spantree bpdu-filter enable (所有端口启用bpdu-filter功能)<br>Swtich-6509&gt;(enable)set spantree bpdu-filter disable (关闭bpdu-filter功能)<br>Swtich-6509&gt;(enable)set spantree bpdu-filter default (缺省启用bpdu-filter功能)<br>Swtich-6509&gt;(enable)set spantree bpdu-filter 0/1-24 enable (打开0/1-24的bpdu-filter功能)</p>
<p>二、路由器配置</p>
<p>路由器接口配置<br>Router(config)#int g1/2   (进入g1/2接口)<br>Router(config-if)#description To-Beijin University (配置接口描述信息为To-Beijin University)<br>Router(config-if)#bandwidth 2500000 (设置接口带宽为2.5Gbps)<br>Router(config-if)#ip address 202.112.7.249 255.255.255.252 (配置接口IP地址)<br>Router(config-if)#shutdown   (关闭接口)<br>Router(config-if)#no shutdown (开启接口)<br>Router(config-if)#no ip directed-broadcast (禁止定向广播通过此接口)<br>Router(config-if)#no ip proxy-arp (禁止代理ARP)</p>
<p>Router(config)#interface a1 (进入异步串行接口a1)<br>Router(config-if)#ip unnumbered ethernet0<br>Router(config-if)#encapsulation ppp<br>Router(config-if)#async default ip address 202.112.7.129<br>Router(config-if)#async dynamic routing<br>Router(config-if)#async mode interactive<br>Router(config-if)#no shutdown</p>
<p>Router(config)#interface s1/1 (进入高速同步串行接口s1/1)<br>Router(config-if)#description To-Shanhai<br>Router(config-if)#bandwidth 2048<br>Router(config-if)#ip address 202.112.7.129 255.255.255.252<br>Router(config-if)#encapsulation hdlc<br>Router(config-if)#no shutdown (开启接口)<br>Router(config-if)#no ip directed-broadcast (禁止定向广播通过此接口)<br>Router(config-if)#no ip proxy-arp (禁止代理ARP)</p>
<p>Router(config)#interface POS3/0 (进入接口POS3/0)<br>Router(config-if)#description To-Wuhan<br>Router(config-if)#bandwidth 2500000<br>Router(config-if)#ip address 202.112.7.129 255.255.255.252<br>Router(config-if)#crc 32               (可选的CRC校验位是32)<br>Router(config-if)#pos framing sdh     (可选帧格式为SDH)<br>Router(config-if)#no ip directed-broadcast (禁止定向广播通过此接口)<br>Router(config-if)#pos flag s1s0 2 (s1s0=00表示是SONET帧的数据,s1s0=10(十进制2)表示是SDH帧的数据)<br>Router(config-if)#no shutdown (开启接口)</p>
<p>Router(config)#interface loopback 0 (进入回环接口loopback0)<br>Router(config-if)#ip address 192.167.176.6 255.255.255.255 (配置接口IP地址,注意掩码)<br>Router(config-if)#no ip route-cache<br>Router(config-if)#no ip mroute-cache</p>
<p>静态路由配置<br>Router(config)#ip route 10.0.0.0 255.255.255.0 192.168.1.1 (目的网络地址、子网掩码、下一跳路由器IP)</p>
<p>RIP动态路由配置<br>Router(config)#router rip (启用并进入RIP路由协议配置模式)<br>Router(config-router)#network 159.105.0.0 (设置参与RIP协议的网络地址)<br>Router(config-router)#network 212.112.7.0<br>Router(config-router)#exit</p>
<p>Router(config)#router rip (启用并进入RIP路由协议配置模式)<br>Router(config-router)#passive-interface ethernet 0 (e0接口启用被动接口)<br>Router(config-router)#exit</p>
<p>Router(config)#access-list 12 deny any (建立标准扩展列表12)<br>Router(config)#router rip (启用并进入RIP路由协议配置模式)<br>Router(config-router)#distribute-list 12 in ethernet0 (e0接口启用路由过滤功能)<br>Router(config-router)#exit</p>
<p>Router(config)#router rip (启用并进入RIP路由协议配置模式)<br>Router(config-router)#network 159.105.0.0 (设置参与RIP协议的网络地址)<br>Router(config-router)#network 212.112.7.0<br>Router(config-router)#distance 50   (设置管理距离为50)<br>Router(config-router)#neighbor 202.112.7.2 (设置邻居路由器地址为202.112.7.2)<br>Router(config-router)#exit</p>
<p>OSPF动态路由配置<br>Router(config)#router ospf 100 (启用并进入OSPF路由协议配置模式，进程号100)<br>Router(config-router)#network 131.107.25.1 0.0.0.0 area 0 (设置参与OSPF协议的网络地址,区域0)<br>Router(config-router)#network 133.181.0.0 0.0.255.255 area 0 (设置参与OSPF协议的网络地址,区域0)<br>Router(config-router)#area 0 range 212.37.123.0 255.255.255.0 (定义参与OSPF的子网地址)</p>
<p>Router(config)#router ospf 200 (启用并进入OSPF路由协议配置模式，进程号200)<br>Router(config-router)#passive-interface ethernet 0 (e0接口启用被动接口)<br>Router(config-router)#passive-interface vlan37 (vlan37启用被动接口)</p>
<p>Router(config)#access-list 12 deny any (建立标准扩展列表12)<br>Router(config)#router ospf 200 (启用并进入OSPF路由协议配置模式，进程号200)<br>Router(config-router)#distribute-list 12 in serial 0 (S0接口启用路由过滤功能)<br>Router(config-router)#exit</p>
<p>Router(config)#router ospf 100 (启用并进入OSPF路由协议配置模式，进程号100)<br>Router(config-router)#network 131.107.25.1 0.0.0.0 area 0 (设置参与OSPF协议的网络地址,区域0)<br>Router(config-router)#network 133.181.0.0 0.0.255.255 area 0 (设置参与OSPF协议的网络地址,区域0)<br>Router(config-router)#distance 10 (设置管理距离为10)<br>Router(config-router)#redistribute metric 100 (设置OSFP引入外部路由的花费值为100)<br>Router(config-router)#redistribute tag 10 (设置OSFP引入外部路由时缺省的标记值为10)<br>Router(config-router)#redistribut connected metric-type 1 subnets(设置OSFP引入外部路由时缺省的外部路由类型为1)</p>
<p>三、安全配置</p>
<p>DHCP服务器的配置(必要五步1建池、2网段、3缺省网关、4DNS、5租约时间)<br>Router(config)#ip dhcp pool mydhcp (配置IP地址池的名称为mydhcp,并进入DHCP Pool配置模式)<br>Router(dhcp-config)#network 201.23.98.0 255.255.255.0 (配置IP地址池的子网地址和子网掩码)<br>Router(dhcp-config)#network 201.23.98.0/24 (配置IP地址池的子网地址和子网掩码)<br>Router(dhcp-config)#default-router 201.23.98.1 (配置IP地址池的缺省网关为201.23.98.1)<br>Router(dhcp-config)#domain-name pku.edu.cn (配置IP地址池的域名系统)<br>Router(dhcp-config)#dns-server address 201.105.126.27 212.105.129.26 (配置IP地址池的域名服务器地址)<br>Router(dhcp-config)#lease 0 5 30 (配置IP地址池的地址租用时间为0天5小时30分)<br>Router(dhcp-config)#lease infinitr (配置IP地址池的地址租用时间为不限制时间)<br>Router(dhcp-config)#exit<br>Router(config)#no ip dhcp conflict logging (取消地址冲突记录日志)</p>
<p>Router(config)#ip dhcp excluded-address 201.23.98.2 201.23.98.10 (配置不用于动态分配的地址，排除从201.23.98.2到201.23.98.10的一段IP地址)<br>Router(config)#ip dhcp excluded-address 201.23.98.2 (配置不用于动态分配的地址，排除201.23.98.2单个地址)</p>
<p>访问控制列表的配置</p>
<p>标准访问控制列表(1-99 只限制源地址 两步1建立ACL、2应用于接口)<br>Router(config)#access-list 10 permit 211.105.130.0 0.0.0.255 (建立标准访问控制列表10，允许源地址211.105.130.0/24网络)<br>Router(config)#line vty 0 4     (进入vty端口模式)<br>Router(config-line)#access-class 10 in   (将访问控制列表10应用在进接口)</p>
<p>Router(config)#access-list 30 deny 10.0.0.0 0.255.255.255 log<br>Router(config)#access-list 30 deny 192.168.0.0.255.255<br>Router(config)#access-list 30 deny 172.16.0.0 0.15.255.255<br>Router(config)#access-list 30 permit any<br>Router(config)#interface g0/1<br>Router(config-if)#ip access-group 30 in</p>
<p>扩展访问控制列表(100-199)<br>Router(config)#access-list 130 deny udp any any eq 1434 (拒接转发所有IP地址进出的，端口号为1434的UDP协议数据包)<br>Router(config)#access-list 130 permit ip any any<br>Router(config)#interface g0/1<br>Router(config-if)#ip access-group 130 in<br>Router(config-if)#ip access-group 130 out</p>
<p>Router(config)#access-list 110 deny ip host 202.112.60.230 any log (封禁IP地址为202.112.60.23的主机)<br>Router(config)#access-list 110 deny ip any host 202.112.60.230 log<br>Router(config)#access-list 110 permit ip any any<br>Router(config)#interface g0/1<br>Router(config-if)#ip access-group 110 in<br>Router(config-if)#ip access-group 110 out</p>
<p>Router(config)#access-list 198 permit icmp 162.105.141.0 0.0.0.255 any (封禁ICMP协议，只允许162.105.141/24子网的ICMP数据包通过路由器)<br>Router(config)#access-list 198 deny icmp any any<br>Router(config)#access-list 198 permit ip any any<br>Router(config)#interface g0/1<br>Router(config-if)#ip access-group 198 in<br>Router(config-if)#ip access-group 198 out</p>
<p>Router(config)#ip access-list extended 130 (拒接转发所有IP地址进出的，端口号为1434的UDP协议数据包)<br>Router(config-ext-nacl)#deny upd any any eq 1434<br>Router(config-ext-nacl)#permit ip any any<br>Router(config-ext-nacl)#exit<br>Router(config)#interface g0/1<br>Router(config-if)#ip access-group 130 in<br>Router(config-if)#ip access-group 130 out</p>
<p>Router(config)#ip access-list standard mylist (禁止源地址为非法地址的数据包进入路由器或从路由器输出)<br>Router(config-std-nacl)#deny 10.0.0.0 0.255.255.255 log<br>Router(config-std-nacl)#deny 192.168.0.0 0.0.255.255<br>Router(config-std-nacl)#deny 172.16.0.0 0.15.255.255<br>Router(config-std-nacl)#permit any<br>Router(config-std-nacl)#exit<br>Router(config)#interface g0/1<br>Router(config-if)#ip access-group mylist in<br>Router(config-if)#ip access-group mylist out</p>
<p>Router(config)#ip access-list extended myextlist (拒接转发所有IP地址进出的，端口号为1434的UDP协议数据包)<br>Router(config-ext-nacl)#deny upd any any eq 1434<br>Router(config-ext-nacl)#permit ip any any<br>Router(config-ext-nacl)#exit<br>Router(config)#interface g0/1<br>Router(config-if)#ip access-group myextlist in<br>Router(config-if)#ip access-group myextlist out</p>
<p>防火墙的配置<br>Pix525(config)#nameif ethernet0 outside security0 (配置防火墙的接口名字并指定安全级别(数字越大安全级别越高))<br>Pix525(config)#nameif ethernet0 inside security100<br>Pix525(config)#nameif dmz security50</p>
<p>Pix525(config)#interface ethernet0 auto (配置e0口自动协商方式)<br>Pix525(config)#interface ethernet1 100full (配置e1口采用100Mbps全双工通信)</p>
<p>Pix525(config)#ip adddress outside 202.113.79.1 255.255.255.240 (配置外网的ip地址)<br>Pix525(config)#ip adddress inside 192.168.0.1 255.255.255.0 (配置内网的ip地址)</p>
<p>Pix525(config)#net (inside) 1 192.168.0.1 255.255.255.0 (192.168.0.1这个网段内的主机可以访问外网)</p>
<p>Pix525(config)#global(outside) 1 202.113.79.1-202.113.79.14 (设置外部地址池为202.113.79.1至202.113.79.14)</p>
<p>Pix525(config)#router outside 0 0 202.81.20.1 1 (设置指向内网和外网的静态路由为202.81.20.1)</p>
<p>Pix525(config)#static (inside,outside) 202.113.79.4 192.168.0.4 (建立了内部IP地址192.168.0.4和外部地址202.113.79.4之间的静态映射)</p>
<p>Pix525(config)#conduit permit tcp host 192.168.0.4 eq www any (允许任何外部主机对全局地址192.168.0.4的这台主机进行http访问)</p>
<p>Pix525(config)#fixup protocol http 80 (启用http协议，并指定端口为80，通过pix防火墙)<br>Pix525(config)#no fixup protocol smtp (禁止smtp协议通过pix防火墙)</p>
<p>SNMP设置<br>(config)#snmp-server community public ro 4 (建立一个团体,团体名称为public,访问权限为只读,管理站的IP地址范围由4号ACL规定)<br>(config)#snmp-server community admin view part rw (建立一个团体,团体名称为admin,访问权限为可读写,访问MIB库的范围由视阈part规定)</p>
<p>(config)#snmp-server view part mib-2 included (建立一个视阈,名称为part,它包括mib-2整个子树的所有对象)</p>
<p>(config)#snmp-server view ext system included (建立一个视阈,名称为ext,它包括mib-2库中系统组的所有对象和Cisco私有库的所有对象)<br>(config)#snmp-server view ext cisco included</p>
<p>(config-if)#snmp trap link-status (在某个接口的配置模式下，指定当该接口端口或连接时要向管理站发出通知)</p>
<p>(config)#snmp-server enable traps (使该路由器可以向主机monitor.tj.edu.cn按照团体名public发送消息)<br>(config)#snmp-server host monitor.tj.edu.cn public</p>
<p>配置镜像端口<br>Switch(config)#monitor session 1 source interface Gi2/16 (配置被镜像端口)<br>Switch(config)#monitor session 1 destination interface Gi2/12 (配置镜像端口)<br>Switch#show monitor session 1 (检查镜像端口配置)</p>
]]></content>
      <tags>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>H3C 交换机配置命令详解</title>
    <url>/2019/04/24/15/</url>
    <content><![CDATA[<p>华为3COM交换机配置命令详解<br>1、配置文件相关命令<br>[Quidway]display current-configuration         ;显示当前生效的配置<br>[Quidway]display saved-configuration           ；显示flash中配置文件，即下次上电启动时所用的配置文件<br><Quidway>reset saved-configuration           ；檫除旧的配置文件<br><Quidway>reboot                                    ；交换机重启<br><Quidway>display version                          ；显示系统版本信息<br>2、基本配置<br>[Quidway]super password                                     ；修改特权用户密码<br>[Quidway]sysname                                     ；交换机命名<br>[Quidway]interface ethernet 0/1                            ；进入接口视图<br>[Quidway]interface vlan x                            ；进入接口视图<br>[Quidway-Vlan-interfacex]ip address 10.65.1.1 255.255.0.0    ；配置VLAN的IP地址<br>[Quidway]ip route-static 0.0.0.0 0.0.0.0 10.65.1.2          ；静态路由＝网关<br>3、telnet配置<br>[Quidway]user-interface vty 0 4                            ；进入虚拟终端<br>[S3026-ui-vty0-4]authentication-mode password                ；设置口令模式<br>[S3026-ui-vty0-4]set authentication-mode password simple 222  ；设置口令<br>[S3026-ui-vty0-4]user privilege level 3                      ；用户级别<br>4、端口配置<br>[Quidway-Ethernet0/1]duplex {half|full|auto}                ；配置端口工作状态<br>[Quidway-Ethernet0/1]speed {10|100|auto}                ；配置端口工作速率<br>[Quidway-Ethernet0/1]flow-control                      ；配置端口流控<br>[Quidway-Ethernet0/1]mdi {across|auto|normal}                ；配置端口平接扭接<br>[Quidway-Ethernet0/1]port link-type {trunk|access|hybrid}    ；设置端口工作模式<br>[Quidway-Ethernet0/1]undo shutdown                      ；激活端口<br>[Quidway-Ethernet0/2]quit                            ；退出系统视图<br>5、链路聚合配置<br>[DeviceA] link-aggregation group 1 mode manual     ；创建手工聚合组1<br>[DeviceA] interface ethernet 1/0/1                             ；将以太网端口Ethernet1/0/1加入聚合组1<br>[DeviceA-Ethernet1/0/1] port link-aggregation group 1<br>[DeviceA-Ethernet1/0/1] interface ethernet 1/0/2              ；将以太网端口Ethernet1/0/1加入聚合组1<br>[DeviceA-Ethernet1/0/2] port link-aggregation group 1<br>[DeviceA] link-aggregation group 1 service-type tunnel        # 在手工聚合组的基础上创建Tunnel业务环回组。<br>[DeviceA] interface ethernet 1/0/1                                    # 将以太网端口Ethernet1/0/1加入业务环回组。<br>[DeviceA-Ethernet1/0/1] undo stp<br>[DeviceA-Ethernet1/0/1] port link-aggregation group 1<br>6、端口镜像<br>[Quidway]monitor-port <interface_type interface_num>       　；指定镜像端口<br>[Quidway]port mirror <interface_type interface_num>    　　；指定被镜像端口<br>[Quidway]port mirror int_list observing-port int_type int_num ；指定镜像和被镜像<br>7、VLAN配置<br>[Quidway]vlan 3                                  　　　　　　；创建VLAN<br>[Quidway-vlan3]port ethernet 0/1 to ethernet 0/4 　　　　　；在VLAN中增加端口<br>配置基于access的VLAN<br>[Quidway-Ethernet0/2]port access vlan 3          　　　　　；当前端口加入到VLAN<br>注意：缺省情况下，端口的链路类型为Access类型，所有Access端口均属于且只属于VLAN1<br>配置基于trunk的VLAN<br>[Quidway-Ethernet0/2]port link-type trunk                          ；设置当前端口为trunk<br>[Quidway-Ethernet0/2]port trunk permit vlan {ID|All}    　　；设trunk允许的VLAN<br>注意：所有端口缺省情况下都是允许VLAN1的报文通过的<br>[Quidway-Ethernet0/2]port trunk pvid vlan 3    　　　　　；设置trunk端口的PVID<br>配置基于Hybrid端口的VLAN<br>[Quidway-Ethernet0/2]port link-type hybrid                  ;配置端口的链路类型为Hybrid类型<br>[Quidway-Ethernet0/2]port hybrid vlan vlan-id-list { tagged | untagged }     ;允许指定的VLAN通过当前Hybrid端口<br>注意：缺省情况下，所有Hybrid端口只允许VLAN1通过<br>[Quidway-Ethernet0/2]port hybrid pvid vlan vlan-id              ;设置Hybrid端口的缺省VLAN<br>注意：缺省情况下，Hybrid端口的缺省VLAN为VLAN1<br>VLAN描述<br>[Quidway]description string                      　　　　　；指定VLAN描述字符<br>[Quidway]description                         　　　　　　；删除VLAN描述字符<br>[Quidway]display vlan [vlan_id]                            ；查看VLAN设置<br>私有VLAN配置<br>[SwitchA-vlanx]isolate-user-vlan enable          　　　　　；设置主vlan<br>[SwitchA]Isolate-user-vlan <x> secondary <list>    　　　　　；设置主vlan包括的子vlan<br>[Quidway-Ethernet0/2]port hybrid pvid vlan <id>    　　　　　；设置vlan的pvid<br>[Quidway-Ethernet0/2]port hybrid pvid             　　　　　；删除vlan的pvid<br>[Quidway-Ethernet0/2]port hybrid vlan vlan_id_list untagged 　；设置无标识的vlan<br>如果包的vlan id与PVId一致，则去掉vlan信息. 默认PVID=1。<br>所以设置PVID为所属vlan id, 设置可以互通的vlan为untagged.<br>8、STP配置<br>[Quidway]stp {enable|disable}                               ；设置生成树,默认关闭<br>[Quidway]stp mode rstp                                         ；设置生成树模式为rstp<br>[Quidway]stp priority 4096                         　　　　　；设置交换机的优先级<br>[Quidway]stp root {primary|secondary}             　　　　　；设置为根或根的备份<br>[Quidway-Ethernet0/1]stp cost 200                　　　　　；设置交换机端口的花费<br>MSTP配置：<br>配置MST域名为info，MSTP修订级别为1，VLAN映射关系为VLAN2～VLAN10映射到生成树实例1上，VLAN20～VLAN30映射生成树实例2上。<br><Sysname> system-view<br>[Sysname] stp region-configuration<br>[Sysname-mst-region] region-name info<br>[Sysname-mst-region] instance 1 vlan 2 to 10<br>[Sysname-mst-region] instance 2 vlan 20 to 30<br>[Sysname-mst-region] revision-level 1<br>[Sysname-mst-region] active region-configuration<br>9、MAC地址表的操作<br>在系统视图下添加MAC地址表项<br>[Quidway]mac-address { static | dynamic | blackhole } mac-address interface interface-type interface-number vlan vlan-id  ；添加MAC地址表项<br>在添加MAC地址表项时，命令中interface参数指定的端口必须属于vlan参数指定的VLAN，否则将添加失败。<br>如果vlan参数指定的VLAN是动态VLAN，在添加静态MAC地址之后，会自动变为静态VLAN。<br>在以太网端口视图下添加MAC地址表项<br>[Quidway-Ethernet0/2]mac-address { static | dynamic | blackhole } mac-address vlan vlan-id<br>在添加MAC地址表项时，当前的端口必须属于命令中vlan参数指定的VLAN，否则将添加失败；<br>如果vlan参数指定的VLAN是动态VLAN，在添加静态MAC地址之后，会自动变为静态VLAN。<br>[Quidway]mac-address timer { aging age | no-aging }   ；设置MAC地址表项的老化时间<br>注意：缺省情况下，MAC地址表项的老化时间为300秒，使用参数no-aging时表示不对MAC地址表项进行老化。<br>MAC地址老化时间的配置对所有端口都生效，但地址老化功能只对动态的（学习到的或者用户配置可老化的）MAC地址表项起作用。<br>[Quidway-Ethernet0/2]mac-address max-mac-count count   ；设置端口最多可以学习到的MAC地址数量<br>注意：缺省情况下，没有配置对端口学习MAC地址数量的限制。反之，如果端口启动了MAC地址认证和端口安全功能，则不能配置该端口的最大MAC地址学习个数。<br>[Quidway-Ethernet0/2]port-mac start-mac-address    ；配置以太网端口MAC地址的起始值<br>在缺省情况下，E126/E126A交换机的以太网端口是没有配置MAC地址的，因此当交换机在发送二层协议报文（例如STP）时，由于无法取用发送端口的MAC地址，<br>将使用该协议预置的MAC地址作为源地址填充到报文中进行发送。在实际组网中，由于多台设备都使用相同的源MAC地址发送二层协议报文，会造成在某台设备的不<br>同端口学习到相同MAC地址的情况，可能会对MAC地址表的维护产生影响。<br>[Quidway]display mac-address       ；显示地址表信息<br>[Quidway]display mac-address aging-time         ；显示地址表动态表项的老化时间<br>[Quidway]display port-mac            ；显示用户配置的以太网端口MAC地址的起始值<br>10、GVRP配置<br>[SwitchA] gvrp      # 开启全局GVRP<br>[SwitchA-Ethernet1/0/1] gvrp     # 在以太网端口Ethernet1/0/1上开启GVRP<br>[SwitchE-Ethernet1/0/1] gvrp registration { fixed | forbidden | normal }   #  配置GVRP端口注册模式    缺省为normal<br>[SwitchA] display garp statistics [ interface interface-list ]    ；显示GARP统计信息<br>[SwitchA] display garp timer [ interface interface-list ]       ；显示GARP定时器的值<br>[SwitchA] display gvrp statistics [ interface interface-list ]    ；显示GVRP统计信息<br>[SwitchA] display gvrp status                                             ；显示GVRP的全局状态信息<br>[SwitchA] display gvrp statusreset garp statistics [ interface interface-list ]    ；清除GARP统计信息<br>11、DLDP配置<br>[SwitchA] interface gigabitethernet 1/1/1        # 配置端口工作在强制全双工模式，速率为1000Mbits/s。<br>[SwitchA-GigabitEthernet1/1/1] duplex full<br>[SwitchA-GigabitEthernet1/1/1] speed 1000<br>[SwitchA] dldp enable       # 全局开启DLDP。<br>[SwitchA] dldp interval 15    # 设置发送DLDP报文的时间间隔为15秒。<br>[SwitchA]  dldp work-mode { enhance | normal }   # 配置DLDP协议的工作模式为加强模式。     缺省为normal<br>[SwitchA] dldp unidirectional-shutdown  { auto | manual }    # 配置DLDP单向链路操作模式为自动模式。  缺省为auto<br>[SwitchA] display dldp 1     # 查看DLDP状态。<br>当光纤交叉连接时，可能有两个或三个端口处于Disable状态，剩余端口处于Inactive状态。<br>当光纤一端连接正确，一端未连接时：<br>如果DLDP的工作模式为normal，则有收光的一端处于Advertisement状态，没有收光的一端处于Inactive状态。<br>如果DLDP的工作模式为enhance，则有收光的一端处于Disable状态，没有收光的一端处于Inactive状态。<br>dldp reset命令在全局下可以重置所有端口的DLDP状态，在接口下可以充值该端口的DLDP状态<br>12、端口隔离配置<br>通过端口隔离特性，用户可以将需要进行控制的端口加入到一个隔离组中，实现隔离组中的端口之间二层、三层数据的隔离，既增强了网络的安全性，也为用户<br>提供了灵活的组网方案。<br>[Sysname] interface ethernet1/0/2   # 将以太网端口Ethernet1/0/2加入隔离组。<br>[Sysname-Ethernet1/0/2] port isolate<br>[Sysname]display isolate port   # 显示隔离组中的端口信息<br>配置隔离组后，只有隔离组内各个端口之间的报文不能互通，隔离组内端口与隔离组外端口以及隔离组外端口之间的通信不会受到影响。<br>端口隔离特性与以太网端口所属的VLAN无关。<br>当汇聚组中的某个端口加入或离开隔离组后，本设备中同一汇聚组内的其它端口，均会自动加入或离开该隔离组。<br>对于既处于某个聚合组又处于某个隔离组的一组端口，其中的一个端口离开聚合组时不会影响其他端口，即其他端口仍将处于原聚合组和原隔离组中。<br>如果某个聚合组中的端口同时属于某个隔离组，当在系统视图下直接删除该聚合组后，该聚合组中的端口仍将处于该隔离组中。<br>当隔离组中的某个端口加入聚合组时，该聚合组中的所有端口，将会自动加入隔离组中。<br>13、端口安全配置<br>[Switch] port-security enable   # 启动端口安全功能<br>[Switch] interface Ethernet 1/0/1  # 进入以太网Ethernet1/0/1端口视图<br>[Switch-Ethernet1/0/1] port-security max-mac-count 80  # 设置端口允许接入的最大MAC地址数为80<br>[Switch-Ethernet1/0/1] port-security port-mode autolearn  # 配置端口的安全模式为autolearn<br>[Switch-Ethernet1/0/1] mac-address security 0001-0002-0003 vlan 1   # 将Host 的MAC地址0001-0002-0003作为Security MAC添加到VLAN 1中<br>[Switch-Ethernet1/0/1] port-security intrusion-mode disableport-temporarily   # 设置Intrusion Protection特性被触发后，暂时关闭该端口<br>[Switch]port-security timer disableport 30       # 关闭时间为30秒。<br>14、端口绑定配置<br>通过端口绑定特性，网络管理员可以将用户的MAC地址和IP地址绑定到指定的端口上。进行绑定操作后，交换机只对从该端口收到的指定MAC地址和IP地<br>址的用户发出的报文进行转发，提高了系统的安全性，增强了对网络安全的监控。<br>[SwitchA-Ethernet1/0/1] am user-bind mac-addr 0001-0002-0003 ip-addr 10.12.1.1   # 将Host 1的MAC地址和IP地址绑定到Ethernet1/0/1端口。<br>有的交换机上绑定的配置不一样<br>[SwitchA] interface ethernet 1/0/2<br>[SwitchA-Ethernet1/0/2] user-bind ip-address 192.168.0.3 mac-address 0001-0203-0405<br>端口过滤配置<br>[SwitchA] interface ethernet1/0/1      # 配置端口Ethernet1/0/1的端口过滤功能。<br>[SwitchA-Ethernet1/0/1] ip check source ip-address mac-address<br>[SwitchA] dhcp-snooping        # 开启DHCP Snooping功能。<br>[SwitchA] interface ethernet1/0/2       # 设置与DHCP服务器相连的端口Ethernet1/0/2为信任端口。<br>[SwitchA-Ethernet1/0/2] dhcp-snooping trust<br>在端口Ethernet1/0/1上启用IP过滤功能，防止客户端使用伪造的不同源IP地址对服务器进行攻击<br>15、BFD配置<br>Switch A、Switch B、Switch C相互可达，在Switch A上配置静态路由可以到达Switch C，并使能BFD检测功能。<br> 在Switch A上配置静态路由，并使能BFD检测功能，通过BFD echo报文方式实现BFD功能。<br><SwitchA> system-view<br>[SwitchA] bfd echo-source-ip 123.1.1.1<br>[SwitchA] interface vlan-interface 10<br>[SwitchA-vlan-interface10] bfd min-echo-receive-interval 300<br>[SwitchA-vlan-interface10] bfd detect-multiplier 7<br>[SwitchA-vlan-interface10] quit<br>[SwitchA] ip route-static 120.1.1.1 24 10.1.1.100 bfd echo-packet<br> 在Switch A上打开BFD功能调试信息开关。<br><SwitchA> debugging bfd event<br><SwitchA> debugging bfd scm<br><SwitchA> terminal debugging<br>在Switch A上可以打开BFD功能调试信息开关，断开Hub和Switch B之间的链路，验证配置结果。验证结果显示，<br>Switch A能够快速感知Switch A与Switch B之间链路的变化。<br>16、QinQ配置<br>Provider A、Provider B之间通过Trunk端口连接，Provider A属于运营商网络的VLAN1000，Provider B属于运营商网络的VLAN2000。<br>Provider A和Provider B之间，运营商采用其他厂商的设备，TPID值为0x8200。<br>希望配置完成后达到下列要求：<br>Customer A的VLAN10的报文可以和Customer B的VLAN10的报文经过运营商网络的VLAN1000转发后互通；Customer A的VLAN20的报文可以<br>和Customer C的VLAN20的报文经过运营商网络的VLAN2000转发后互通。<br>[ProviderA] interface ethernet 1/0/1   # 配置端口为Hybrid端口，且允许VLAN10，VLAN20，VLAN1000和VLAN2000的报文通过，并且在发送时去掉外层Tag。<br>[ProviderA-Ethernet1/0/1] port link-type hybrid<br>[ProviderA-Ethernet1/0/1] port hybrid vlan 10 20 1000 2000 untagged<br>[ProviderA-Ethernet1/0/1] qinq vid 1000     # 将来自VLAN10的报文封装VLAN ID为1000的外层Tag。<br>[ProviderA-Ethernet1/0/1-vid-1000] raw-vlan-id inbound 10<br>[ProviderA-Ethernet1/0/1-vid-1000] quit<br>[ProviderA-Ethernet1/0/1] qinq vid 2000    # 将来自VLAN20的报文封装VLAN ID为2000的外层Tag。<br>[ProviderA-Ethernet1/0/1-vid-2000] raw-vlan-id inbound 20<br>[ProviderA] interface ethernet 1/0/2    # 配置端口的缺省VLAN为VLAN1000。<br>[ProviderA-Ethernet1/0/2] port access vlan 1000<br>[ProviderA-Ethernet1/0/2] qinq enable   # 配置端口的基本QinQ功能，将来自VLAN10的报文封装VLAN ID为1000的外层Tag。<br>[ProviderA] interface ethernet 1/0/3   # 配置端口为Trunk端口，且允许VLAN1000和VLAN2000的报文通过。<br>[ProviderA-Ethernet1/0/3] port link-type trunk<br>[ProviderA-Ethernet1/0/3] port trunk permit vlan 1000 2000<br>[ProviderA-Ethernet1/0/3] qinq ethernet-type 8200   # 为与公共网络中的设备进行互通，配置端口添加外层Tag时采用的TPID值为0x8200。<br>[ProviderB] interface ethernet 1/0/1   # 配置端口为Trunk端口，且允许VLAN1000和VLAN2000的报文通过。<br>[ProviderB-Ethernet1/0/1] port link-type trunk<br>[ProviderB-Ethernet1/0/1] port trunk permit vlan 1000 2000<br>[ProviderB-Ethernet1/0/1] qinq ethernet-type 8200   # 为与公共网络中的设备进行互通，配置端口添加外层Tag时采用的TPID值为0x8200。<br>[ProviderB-Ethernet1/0/1] quit<br>[ProviderB] interface ethernet 1/0/2   # 配置端口的缺省VLAN为VLAN2000。<br>[ProviderB-Ethernet1/0/2] port access vlan 2000<br>[ProviderB-Ethernet1/0/2] qinq enable   # 配置端口的基本QinQ功能，将来自VLAN20的报文封装VLAN ID为2000的外层Tag。</p>
]]></content>
      <tags>
        <tag>H3C</tag>
      </tags>
  </entry>
  <entry>
    <title>H3C AC/AP 调试命令</title>
    <url>/2019/04/18/2/</url>
    <content><![CDATA[<h2 id="一、开启AP的远程telnet功能"><a href="#一、开启AP的远程telnet功能" class="headerlink" title="一、开启AP的远程telnet功能"></a>一、开启AP的远程telnet功能</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;AC&gt;sys</span><br><span class="line">[AC]_hidecmd</span><br><span class="line">[AC-hidecmd] wlan ap ap_name exec-control enable</span><br><span class="line">[AC-hidecmd] wlan ap ap_name telnet enable</span><br></pre></td></tr></table></figure>


<p>然后接可以telnet到AP上</p>
<h2 id="二、查看AP信道利用率、空口状态"><a href="#二、查看AP信道利用率、空口状态" class="headerlink" title="二、查看AP信道利用率、空口状态"></a>二、查看AP信道利用率、空口状态</h2><p>使用上述一开启telnet，并telnet到AP上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[WA...]_hidecmd</span><br><span class="line">[WA...-hidecmd]dis ar5drv 2 channelbusy</span><br><span class="line">[WA...-hidecmd]dis ar5drv 2 statistics</span><br></pre></td></tr></table></figure>


<p>1 是5G，2 是2.4G</p>
<h2 id="三、查看一个客户端的漫游状态"><a href="#三、查看一个客户端的漫游状态" class="headerlink" title="三、查看一个客户端的漫游状态"></a>三、查看一个客户端的漫游状态</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;AC&gt; display wlan client roam-track mac-address xxxx-xxxx-xxxx</span><br></pre></td></tr></table></figure>



<h2 id="四、高密度网络优化措施"><a href="#四、高密度网络优化措施" class="headerlink" title="四、高密度网络优化措施"></a>四、高密度网络优化措施</h2><h3 id="1-（必选）信号强度达标"><a href="#1-（必选）信号强度达标" class="headerlink" title="1.（必选）信号强度达标"></a>1.（必选）信号强度达标</h3><p>优化手段都是以满足信号强度为基础，无线覆盖区域内信号强度是第一位。企业级应用程序流量或笔记本，信号强度不能低于-75dBm；要想跑VoIP流量或PDA手持终端等，信号强度至少不低于-65dBm以上。</p>
<p>信号强度参考数值：</p>
<p><strong>-60dBm及以上：表示信号强度质量尚佳</strong><br><strong>-80dBm到-60dBm：表示无线信号质量尚可</strong><br><strong>-80dBm到-90dBm：表示无线信号较弱</strong><br><strong>-90dBm及以下：表示无线信号极弱</strong></p>
<p>信号覆盖涉及因素</p>
<p>天线类型：定向与全向天线 关键词 增益 方向校准<br>安装位置：壁挂、放装、入室 关键词 802.11与非802.11干扰<br>信号障碍物：金属、混泥土墙、玻璃 关键词 电磁波特性<br>在部署场景的选择上，AP或者天线要尽量离目标区域近，并保证无金属板、厚墙阻隔。对于宿舍或教室类场景，不建议AP楼道部署通过信号穿墙的方式完成覆盖。</p>
<h3 id="2-（必选）信道规划和设置固定信道"><a href="#2-（必选）信道规划和设置固定信道" class="headerlink" title="2.（必选）信道规划和设置固定信道"></a>2.（必选）信道规划和设置固定信道</h3><p>信道规划和功率调整是保障WLAN网络品质的最佳手段，外加频谱导航手段俗称优化三板斧，效果也就能达到70%~80%左右，但具体还是视实际部署情况而定，如高密环境考虑接入人数，提高的是AP间密度，牺牲了管理、控制报文对空口的占用率增大，同频段可见度增大，发生电磁波碰撞和报文传输等待时间增加，大大降低使用效率。</p>
<p>如果所用AP都工作在相同的信道，这些AP只能共享一个信道的频率资源，造成整个WLAN玩过性能过低。在多楼层无线覆盖时，考虑到三维空间的信号泄漏，在信道规划策略上，除了基于平面的非重叠交叉部署，还要考虑楼层间或立体空间下的信道交叉规划设计。</p>
<p>强烈推荐：802.11n网络在实际部署时，无论是2.4G频段或5G频段，建议都采用20MHz模式进行覆盖，以加强信道隔离与复用，提升WLAN网络整体性能。（注意：我司AP在802.11n 5G频段默认为40MHz频宽方式）</p>
<p>信道规划【V7版本举例】V5/V7无差异</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;sysname&gt; system-view</span><br><span class="line">[sysname]wlan ap ap1 model WA4320-ACN-SI</span><br><span class="line">[sysname-wlan-ap-ap1]radio 2</span><br><span class="line">[sysname-wlan-ap-ap1-radio-2]channel 1</span><br></pre></td></tr></table></figure>


<p>频宽设置【V7版本举例】V5/V7无差异</p>
<p>配置当前接口的带宽模式为20MHz。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;sysname&gt; system-view</span><br><span class="line">[sysname]wlan ap ap1 model WA4320-ACN-SI</span><br><span class="line">[sysname-wlan-ap-ap1]radio 2</span><br><span class="line">[sysname-wlan-ap-ap1-radio-2]channel band-width 20</span><br><span class="line">This operation might cause channel change. Continue? [Y&#x2F;N]:</span><br><span class="line">[sysname-wlan-ap-ap1-radio-2]y</span><br></pre></td></tr></table></figure>


<h3 id="3-（必选）功率规划和设置固定功率"><a href="#3-（必选）功率规划和设置固定功率" class="headerlink" title="3.（必选）功率规划和设置固定功率"></a>3.（必选）功率规划和设置固定功率</h3><p>无线局域网，信道资源是非常稀缺的，每个AP只能工作在非常有限的非重叠信道上，ISM频段又为一个公共共有资源，WLAN、蓝牙、ZigBee、微波炉等均工作在2.4Ghz频段，5Ghz频段被部分区域雷达所用。功率规划有效控制无线覆盖区域内的WLAN系统内与系统外的干扰，加强相同信道频谱资源的复用，实现通信的持续进行，为网络的可靠传输提供保证。</p>
<p>功率规划【V7版本举例】V5/V7无差异</p>
<p>配置射频的最大传输功率为5dBm。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;sysname&gt; system-view</span><br><span class="line">[sysname] wlan ap ap1 model WA2100</span><br><span class="line">[sysname-wlan-ap-ap1] radio 1</span><br><span class="line">[sysname-wlan-ap-ap1-radio-1]max-power 5</span><br></pre></td></tr></table></figure>


<h3 id="4（必选）为无线业务构建独立的VLAN"><a href="#4（必选）为无线业务构建独立的VLAN" class="headerlink" title="4（必选）为无线业务构建独立的VLAN"></a>4（必选）为无线业务构建独立的VLAN</h3><p>Wireless LAN无线局域网，Wireless传输介质为电磁波，易受外界环境的影响，协议本身需要ACK报文来确定数据包发送的完整性，LAN网络最大的特点是ARP广播包，传输介质频谱资源非常有限，ARP广播包往往会大大降低空口的带宽，使无线性能急剧降低。通过把同一个物理无线局域网的不同用户逻辑划分成多个不同广播域，从而控制广播和单播流，增大空口利用率。</p>
<p>注：当有线网络与无线网络共用一个广播域时，有线侧的ARP广播包对无线侧空口的冲击是相当大的，大大占用了空口资源。无线业务使用独立VLAN也可避免来自有线侧arp类的攻击。</p>
<h3 id="5-（必选）V7默认开启三层漫游功能，无需特别配置"><a href="#5-（必选）V7默认开启三层漫游功能，无需特别配置" class="headerlink" title="5.（必选）V7默认开启三层漫游功能，无需特别配置"></a>5.（必选）V7默认开启三层漫游功能，无需特别配置</h3><p>V7版本WLAN-ESS虚接口与服务模板service-template合并，且三层漫游功能默认开启，在service-template下VLAN优先级小于radio射频口。</p>
<p>三层漫游配置【V7版本举例】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wlan ap ap2 model WA2620i-AGN id 2</span><br><span class="line"> serial-id 219801A0CNC124004002</span><br><span class="line"> radio 1</span><br><span class="line"> radio 2</span><br><span class="line">  service-template 1 vlan-id 2</span><br><span class="line">  radio enable</span><br><span class="line"></span><br><span class="line">wlan ap ap3 model WA2620i-AGN id 3</span><br><span class="line"> serial-id 219801A0CNC124004003</span><br><span class="line"> radio 1</span><br><span class="line"> radio 2</span><br><span class="line">  service-template 1vlan-id 3</span><br><span class="line">  radio enable</span><br></pre></td></tr></table></figure>


<p>【V5差异】</p>
<p>V5需额外配置WLAN-ESS接口，端口类型为hybird，并使能mac-vlan功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface WLAN-ESS1</span><br><span class="line">link-type hybrid</span><br><span class="line">undo port hybridvlan 1</span><br><span class="line">port hybrid vlan100 untagged</span><br><span class="line">port hybrid pvidvlan 100</span><br><span class="line">mac-vlan enable</span><br></pre></td></tr></table></figure>

<p>交换机与AC互联口为trunk模式时，尽量避免使用port trunk permit vlan all，建议只放通在用业务VLAN。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface GigabitEthernet1&#x2F;0&#x2F;1</span><br><span class="line">description linkto hexin</span><br><span class="line">port link-typetrunk</span><br><span class="line">undo port trunkpermit vlan 1 #有线网络侧交换机默认端口属于VLAN1建议undo</span><br><span class="line">port trunkpermit vlan 10 20 30 100 200</span><br></pre></td></tr></table></figure>


<h3 id="6-（强烈推荐）无线用户VLAN内二层隔离"><a href="#6-（强烈推荐）无线用户VLAN内二层隔离" class="headerlink" title="6.（强烈推荐）无线用户VLAN内二层隔离"></a>6.（强烈推荐）无线用户VLAN内二层隔离</h3><p>在上述优化4中为无线业务构建独立的VLAN，也就是将大的局域网虚拟分割成若干份，分割份数越多，相互虚拟的局域网之间的广播/组播影响就越小。但在无线接入密度过高的场景下，用户行为无法约束（arp二层网络攻击），用户数量无法预测，无法统一控制管理，强烈建议使用无线用户VLAN二层隔离，AC上控制无线用户只能访问网关设备，而不能互相之间访问，同时配置undouser-isolation permit broadcast禁止有线用户（permit-mac允许的mac地址除外）发送广播、组播报文给无线用户。此功能对无线用户接入密度较大，用户属性不定难以集中控制的场景见效好，如企业无线guest用户，公共会议室guest用户，场馆guest用户。</p>
<p>无线业务VLAN网关尽量配置在核心交换机侧，尽量避免设置于AC控制板。交换机可分为交换模块和控制模块，交换模块更倾向于端口的快速转发功能，所需CPU资源较小，处理性能更快，控制模块用于IP层数据转发、ACL控制、路由计算，对CPU资源的依赖较大。</p>
<p>无线用户二层隔离配置【V7版本举例】</p>
<p> 基于VLAN，配置VLAN 2下用户隔离，放通网关MAC: 7425-8a36-d87d</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;sysname&gt; system-view</span><br><span class="line">[sysname] user-isolation vlan 2 enable</span><br><span class="line">[sysname] user-isolation vlan 2 permit-mac 7425-8a36-d87d</span><br><span class="line">[sysname] undo user-isolation permit broadcast</span><br><span class="line">网关地址10.10.240.1，命令cmd arp –a 或displayinterface vlan 2查看对应网关MAC</span><br></pre></td></tr></table></figure>

<p>基于SSID，配置SSID下的用户隔离</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;sysname&gt; system-view</span><br><span class="line">[sysname]Wlan service-template 1</span><br><span class="line">[sysname]user-isolation enable</span><br><span class="line">使能ARP Snooping功能，使AC可以显示学习到的IP地址</span><br><span class="line">[sysname] arp-snooping enable</span><br></pre></td></tr></table></figure>


<h3 id="7-（强烈推荐）关闭RRM低速率"><a href="#7-（强烈推荐）关闭RRM低速率" class="headerlink" title="7.（强烈推荐）关闭RRM低速率"></a>7.（强烈推荐）关闭RRM低速率</h3><p>无线WLAN网络中不是使用固定的速率发送所有的报文，而是使用一个速率集进行报文发送（例如11g支持1、2、5.5、11、6、9、12、18、24、36、48、54Mbps），实际无线终端或者AP在发送报文的时候会动态的在这些速率中选择一个速率进行发送。通常提到的11g可以达到速率主要指所有报文都采用54M速率进行发送的情况，而且是指的一个空口信道的能力。而实际上大量的广播报文和无线的管理报文都使用最低速率1Mbps进行发送，所以会消耗一定得空口资源。在无线网络中信号传输的距离不是问题的情况下，可以将1、2、6和9Mbps速率禁用，这样整体上减少广播报文和管理报文对空口资源的占用。</p>
<p>关闭RRM低速率【V7版本举例】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[sysname-wlan-ap-ap1-radio-2]rate disabled 1 2 5.5 6 9 &#x2F;&#x2F;APradio视图</span><br><span class="line">[sysname]wlan ap-group 1</span><br><span class="line">[sysname-wlan-ap-group-1]ap-model WA2610E</span><br><span class="line">[sysname-wlan-ap-group-1-ap-model-WA2610E]radio 1</span><br><span class="line">[sysname-wlan-ap-group-1-ap-model-WA2610E-radio-1]ratedisabled 1 2 5.5 6 9</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;AP组 radio视图</span><br></pre></td></tr></table></figure>


<p>【V5版本举例】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[sysname] wlan rrm</span><br><span class="line">[sysname-rrm] rate disabled 1 2 5.5 6 9</span><br></pre></td></tr></table></figure>


<p>V7版本关闭低速率更加灵活，可以基于单个AP实现，更有利于无线优化。</p>
<h3 id="8-（强烈推荐）开启无线用户限速"><a href="#8-（强烈推荐）开启无线用户限速" class="headerlink" title="8.（强烈推荐）开启无线用户限速"></a>8.（强烈推荐）开启无线用户限速</h3><p>WLAN网络中每一个AP提供的可用带宽有限，且由接入的无线客户端共享，如果个别的无线用户通过WLAN使用网络工具下载文件，可能达到非常大的流量，进而直接耗尽当前共享带宽，造成其他无线用户访问网络慢、ping抖动丢包等问题。通过配置用户限速功能，可以限制部分无线客户端对带宽的过多消耗，保证所有接入无线客户端均能正常使用网络业务。基于无线客户端的速率限制功能有两种模式：动态模式和静态模式，其中静态模式为静态的配置每个客户端的速率，即配置的速率是同一个AP内，每个客户端的最大速率。</p>
<p>无线用户限速【V7版本举例】</p>
<p>基于服务模板下的限速，单位kbps</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wlan service-template 1</span><br><span class="line">ssid wangp</span><br><span class="line">client-rate-limitenable</span><br><span class="line">client-rate-limitinbound mode static cir 512</span><br><span class="line">client-rate-limitoutbound mode static cir 512</span><br><span class="line">service-template enable</span><br></pre></td></tr></table></figure>

<p>基于radio射频口的限速，单位kbps</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">radio 2</span><br><span class="line">channel 6</span><br><span class="line">max-power 5</span><br><span class="line">radio enable</span><br><span class="line">client-rate-limitenable</span><br><span class="line">client-rate-limitinbound mode static cir 512</span><br><span class="line">client-rate-limitoutbound mode static cir 512</span><br></pre></td></tr></table></figure>

<p>基于AP-group组的限速，单位kbps</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[sysname-wlan-ap-group-1-ap-model-WA1208E-GNP-radio-1]client-rate-limitenable</span><br><span class="line">[sysname-wlan-ap-group-1-ap-model-WA1208E-GNP-radio-1]client-rate-limitinbound mode static cir 512</span><br><span class="line">[sysname-wlan-ap-group-1-ap-model-WA1208E-GNP-radio-1]client-rate-limitoutbound mode static cir 512</span><br></pre></td></tr></table></figure>


<h3 id="9-（强烈推荐）关闭广播Probe探测回应"><a href="#9-（强烈推荐）关闭广播Probe探测回应" class="headerlink" title="9.（强烈推荐）关闭广播Probe探测回应"></a>9.（强烈推荐）关闭广播Probe探测回应</h3><p>WLAN有两种探测机制：一种为无线终端被动的侦听Beacon帧之后，根据获取的无线网络情况，选择AP建立连接；另外一种为无线终端主动发送Probe request探测周围的无线网络，然后根据获取的Probe Response报文获取周围的无线网络，之后选择AP建立连接。</p>
<p>本功能主要针对Probe探测方式。根据Probe Request帧（探测请求帧）是否携带SSID，可以将主动扫描分为两种：1、广播方式的Probe探测，客户端发送Probe Request帧（Probe Request中SSID为空，也就是SSID IE的长度为0）；2、单播方式的Probe探测，客户端发送的Probe Request帧（携带指定的SSID）。</p>
<p>而大部分的无线终端都不会指定要链接的“无线接入服务”，这样就造成了无线终端会大量发送广播Probe Request探测，造成所有的接收到该报文的AP设备都会回应Probe Response报文。因此，在无线用户比较多的网络中，可能会出现一定量的Probe Response报文，而且这些报文都是使用低速率进行发送，会消耗一定的空间资源。如果网络条件允许可以考虑关闭广播Probe探测功能，AP针对SSID为空的探测请求不进行回复，有效降低空口的消耗，使整个WLAN网络应用得到一定的提升。</p>
<p>关闭广播Probe探测回应【V7版本举例】</p>
<p>基于单AP终端设备</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wlan ap ap1 model WA4320-ACN-SI</span><br><span class="line">serial-id219801A0T78166E07840</span><br><span class="line">broadcast-probereply disable</span><br></pre></td></tr></table></figure>

<p>基于AP组</p>
<p>【V5版本举例】</p>
<h3 id="10-（强烈推荐）开启频谱导航"><a href="#10-（强烈推荐）开启频谱导航" class="headerlink" title="10.（强烈推荐）开启频谱导航"></a>10.（强烈推荐）开启频谱导航</h3><p>在实际无线网络环境中，某些客户端只能工作在2.4GHz频段上，也有一部分客户端可以同时支持2.4GHz和5GHz频段，如果支持双频的客户端都工作在2.4GHz频段上，会导致2.4GHz频段过载，5GHz射频相对空余。在这种情况下，可以在设备上开启频谱导航功能。频谱导航功能可以将支持双频工作的客户端优先接入5GHz射频，使得两个频段上的客户端数量相对均衡，从而提高整网性能。</p>
<p>开启频谱导航功能后，AP会对发起连接请求的客户端进行导航，将其均衡地连接至该AP的不同射频上。首先当客户端与某个AP连接时，若该客户端只支持单频2.4GHz，则频谱导航功能不生效，客户端直接关联至AP的2.4GHz射频上。若客户端支持双频，AP则会将客户端优先引导至5GHz射频上。若客户端只支持单频5GHz，则会直接关联至AP的5GHz射频上。在双频客户端关联到5GHz射频前，AP会检查5GHz射频接收到的客户端的RSSI值，若该RSSI值低于设定值，则不会将此客户端导航至5GHz射频。</p>
<p>如果5GHz射频上已连接的客户端数量达到门限，且5GHz射频与2.4GHz射频上连接的客户端差值达到或超过差值门限，AP会拒绝客户端接入5GHz射频，且允许新客户端接入2.4GHz射频（即不会引导双频客户端优先接入5GHz射频）。如果客户端反复向该AP的5GHz射频上发起关联请求，且AP拒绝客户端关联请求次数达到/超过设定的最大拒绝关联请求次数，那么该AP会认为此时该客户端不能连接到其它任何的AP，在这种情况下，AP上的5GHz射频也会接受该客户端的关联请求。</p>
<p>【V7版本举例】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">开启全局频谱导航功能。</span><br><span class="line">[AC] wlan band-navigation enable</span><br><span class="line"> 开启AP组或单AP频谱导航功能。</span><br><span class="line">[Sysname] wlan ap-group 1</span><br><span class="line">[Sysname-wlan-ap-group-1] band-navigationenable</span><br><span class="line"></span><br><span class="line"> 开启频谱导航负载均衡功能功能，客户端连接数门限为5，客户端连接数差值门限为2。</span><br><span class="line">[AC] wlan band-navigation balance session10 gap 5</span><br><span class="line"></span><br><span class="line"> 配置拒绝客户端对5GHz射频关联请求的最大次数为3。</span><br><span class="line">[AC] wlan band-navigation balanceaccess-denial 3</span><br><span class="line"></span><br><span class="line"> 配置频谱导航RSSI门限值为30。</span><br><span class="line">[AC] wlan band-navigation rssi-threshold 20</span><br><span class="line"></span><br><span class="line"> 配置频谱导航的客户端信息老化时间为200秒。</span><br><span class="line">[AC] wlan band-navigation aging-time 200</span><br><span class="line">【实际配置】可参考</span><br><span class="line"></span><br><span class="line">[AC] wlan band-navigation enable</span><br><span class="line">[AC] wlan band-navigation rssi-threshold 25 #视具体项目环境而定</span><br><span class="line">[Sysname] wlan ap-group 1</span><br><span class="line">[Sysname-wlan-ap-group-1] band-navigationenable</span><br><span class="line">[Sysname-wlan-ap-group-1]apname #添加ap</span><br></pre></td></tr></table></figure>



<h3 id="11-（推荐）Beacon帧间隔调整到160TU"><a href="#11-（推荐）Beacon帧间隔调整到160TU" class="headerlink" title="11.（推荐）Beacon帧间隔调整到160TU"></a>11.（推荐）Beacon帧间隔调整到160TU</h3><p>默认情况下，射频卡radio上的每个SSID每100TU就会发送一个Beacon信标报文，这个报文通告WLAN网络服务，同时和无线网卡进行信息同步。Beacon报文通常使用最小速率进行发送，而且优先级比较高，所以考虑将Beacon发送的时间间隔从100TU调整到160-200TU之间，这样可以有效降低空口的消耗，使整个WLAN网络应用得到一定的提升。</p>
<p>通常情况下，一个radio下配置SSID的数量建议不超过5个。</p>
<p>调整Beacon帧间隔【V7版本举例】</p>
<p>基于radio射频口<br>[sysname-wlan-ap-ap1]radio 1<br>[sysname-wlan-ap-ap1-radio-1]beacon-interval 160</p>
<p>基于AP-group组<br>[sysname]wlan ap-group 1<br>[sysname-wlan-ap-group-1]ap-model WA1208E-GNP<br>[sysname-wlan-ap-group-1-ap-model-WA1208E-GNP]radio 1<br>[sysname-wlan-ap-group-1-ap-model-WA1208E-GNP-radio-1]beacon-interval160<br>【V5版本举例】</p>
<p><sysname> system-view<br>[sysname] wlan radio-policy radio1<br>[sysname-wlan-rp-radio1] beacon-interval 160<br>然后将radio-policy在各个AP的Radio接口上应用。</p>
<h3 id="12-（推荐）禁止弱信号终端接入"><a href="#12-（推荐）禁止弱信号终端接入" class="headerlink" title="12.（推荐）禁止弱信号终端接入"></a>12.（推荐）禁止弱信号终端接入</h3><p>在WLAN网络中，信号强度较弱的无线客户端，虽然也可以接入到网络中，但是所能够获取的网络性能和服务质量要比信号强度较强的无线客户端差很多。如果弱信号的无线客户端在接入到WLAN网络的同时还在大量地下载数据，就会占用较多的信道资源，最终必然对其他的无线客户端造成很大的影响。</p>
<p>禁止弱信号客户端接入功能，通过配置允许接入的无线客户端的最小信号强度门限值，可以直接拒绝信号强度低于指定门限的无线客户端接入到WLAN网络中，减少弱信号客户端对其他无线客户端的影响，从而提升整个WLAN网络的应用效果。</p>
<p>禁止弱信号终端接入【V7版本举例】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">基于radio射频口</span><br><span class="line">[sysname-wlan-ap-ap1]radio 1</span><br><span class="line">[sysname-wlan-ap-ap1-radio-1]option client rejectenable rssi 30</span><br><span class="line"></span><br><span class="line">基于AP-group组</span><br><span class="line">[sysname-wlan-ap-group-1-ap-model-WA1208E-GNP-radio-1]optionclient reject enable rssi 30</span><br><span class="line">【V5版本举例】</span><br><span class="line"></span><br><span class="line">&lt;sysname&gt; system-view</span><br><span class="line">[sysname] wlan option client-reject 15</span><br></pre></td></tr></table></figure>



<h3 id="13-主动出发客户端重新连接"><a href="#13-主动出发客户端重新连接" class="headerlink" title="13. 主动出发客户端重新连接"></a>13. 主动出发客户端重新连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wlan option client-reconnect-trigger</span><br></pre></td></tr></table></figure>



<h3 id="14-漫游导航"><a href="#14-漫游导航" class="headerlink" title="14. 漫游导航"></a>14. 漫游导航</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wlan optoin roam-navigateion level</span><br></pre></td></tr></table></figure>

<p>参考资料：</p>
<p><a href="https://wenku.baidu.com/view/e5b43a61524de518964b7df4.html">https://wenku.baidu.com/view/e5b43a61524de518964b7df4.html</a></p>
<p><a href="http://m.yopai.com/show-2-60868.html">http://m.yopai.com/show-2-60868.html</a></p>
<p>本文原创：中国科学技术大学 张焕杰</p>
<p>修改时间：2017.12.25</p>
]]></content>
      <categories>
        <category>H3C</category>
      </categories>
      <tags>
        <tag>无线 H3C</tag>
      </tags>
  </entry>
  <entry>
    <title>一些乱七八糟的</title>
    <url>/2019/04/24/21/</url>
    <content><![CDATA[<p>时间真快，一晃自己都快毕业一年了，大学期间有幸加入了校信息中心，和老师们一起维护网络并疯狂的学习着知识，但是说来惭愧，到现在工作快一年了也没有去考个什么证书，很多知识还是碎片，还很零散，希望自己接下来的一年能有所收获吧，最近整理锤子便签里面的东西，一些之前写的东西不算私密的。在这里留个底，留个纪念吧。</p>
<p>还记得15年大二的时候，学校出口被一个学长一直DDOS攻击，也是从那个时候开始意识到网络安全的重要性，也对黑客有了一丝敬佩（当然不是佩服那种）。看看当时写的公告还挺有意思的。</p>
<blockquote>
<p>关于校园网受到网络攻击公告<br>       北京时间2015年12月2日，上午十时许，校园网络、防火墙及出口带宽继续遭受到不明黑客的外网攻击，给广大师生造成的严重的不便，为此信息中心再次深表歉意。同时也感谢大家的理解和配合。<br>       虽然校园网机房使用了流量清洗设备进行防攻击服务，但是由于流量过大超过了防护上限。依然有大量流量攻击成功，导致校园网出口入口带宽阻塞，技术人员赶到机房现场重新部署服务器、调整防火墙策略等。<br>       众所周知，校园网前些日子由联通链路更换成电信线路，大家也许还会对电信网络质量感到不满。但更换电信线路的原因之一是接二连三的分布式拒绝攻击让整个黄骅的联通网络都吃不消，沧州网监大队要求中国电信全力支援。故采用了电信线路，也在防范攻击方面取得了一定的效果。<br>       但今天上午的网络故障，通过后台数据观察，又发现了疯狂的网络攻击。导致外网带宽堵死，严重影响师生上网体验，信息中心老师正在全力解决。烦请同学们耐心等待。共度难关，如果大家有什么关于网络攻击的线索，也请第一时间联系学校信息中心。<br>       校园网技术团队已经与ISP服务商协商好大幅提高流量防护上限，并部署好备用服务器，以提高特殊情况下的切换速度！ 最后对校园网络不能正常给您带来的不便再次进行道歉。<br>小知识：什么是DDOS攻击?<br>       DDOS是英文Distributed Denial of Service的缩写，意即“分布式拒绝服务”，那么什么又是拒绝服务（Denial of Service）呢？可以这么理解，凡是能导致合法用户不能够访问正常网络服务的行为都算是拒绝服务攻击。也就是说拒绝服务攻击的目的非常明确，就是要阻止合法用户对正常网络资源的访问，从而达成攻击者不可告人的目的。 DDOS的表现形式主要有两种，一种为流量攻击，主要是针对网络带宽的攻击，即大量攻击包导致网络带宽被阻塞，合法网络包被虚假的攻击包淹没而无法到达主机；另一种为资源耗尽攻击，主要是针对服务器主机的攻击，即通过大量攻击包导致主机的内存被耗尽或CPU被内核及应用程序占完而造成无法提供网络服务。<br>2015年12月2日<br>海滨学院信息中心</p>
</blockquote>
<p>老师们的回复更是很中肯，很受用。</p>
<blockquote>
<p>一封来自信息中心老师的信</p>
<p>在此我代表我个人对这件事做个阐述，首先说的是安全方面的问题。有的同学可能担心自己的银行卡可密码可能会泄露，自己完全没有隐私了。这个是不会有的，首先你的银行密码是被加密了的，好像还没有听说有谁家的设备能破解，因为算法只有银行自己知道。如果算法不可逆的话，就算是银行自己也破解不了，你忘记密码他们也只能帮你改。如果你自己了骗子的钓鱼网站，把银行卡跟密码告诉人家了，那就没办法了。还有什么qq聊天记录，那也都是经过加密的，不是别人说破解就能破解的。所以说该隐私的地方你们都不用担心。说到底设备厂商都是正经公司，不会开发那种像木马似的不道德的东西，昨天那个插件有什么用呢？那个可以检测你们电脑的版本，有没有安装杀毒软件，版本过低或者没有杀毒软件的可以禁止上网这是可以做到的。刚看了一个毕业学生cn雪狼组说的很有道理。现在好多学生在抱怨网络的问题，从暑假之后我们学院有一个半月连续遭受ddos攻击，之后陆陆续续的也出现过，这是事实。而且有将近两千台电脑种了僵尸网络病毒，这也是事实。咱们学校之所以会不断遭受攻击，是因为学校里面有内鬼，不然咱们换了外网出口地址他们也不可能知道，还有的同学在内网中使用p2p等可以攻击网络的软件来限制其他同学上网从而使其自己获得更大的网速。<br> 网络本来就是跟脆弱的东西，要想让他瘫痪，说上千种方法那有点撤，但是我有上百种方法。但是要是想维护好确不容易，就像你们想坏件事儿容易，但是想做好一件事儿就不容易了。<br> 我要说说那个什么红枫叶小组，好像实力还不小呢，这次攻击事件儿还有内网中这些僵尸网络病毒很有可能就是你们所为，买个软件，弄点代码瞎搞网络，弄的网络不稳定就说学校不作为。然后大肆宣扬，还说要报复，怎么报复？让网络更乱套，把服务器黑掉？之后受害的就我们学院的广大的同学们，使他们上网体验更查，服务器瘫痪之后，影响学生们正常的上课学习。然后你们还堂而皇之的说你们是为了同学们的利益，因为你们也是学生，你们会说是为了学生的利益，其实你们是在为攻击学校网络找借口。受害的是广大的同学们，受累的是我们，除了忙着维护各种网络故障之外还要应对你们的各种胡闹。你们是怕自己做了什么坏事儿，被学校知道，然后大肆的制造舆论说学校偷窥同学们的隐私。还以报复攻击学校作为要挟跟你们实施攻击的借口，说句不好听的，你们这是做了婊子还想立牌坊。别以为学生们都那么好骗，他们也不傻。也有看明白的，别说一个月30块钱学校就可以收入多少。谁家上网不交网费？一个月30，一天才一块钱，没有限流量吧，比起交大等高校按流量收费，这要划算得多了吧，而且有同学也说自己不愿意用移动联通等edu？而且还说了那个不仅贵还卡的要死，这说明什么？说明学校的网络还是很实惠的，学校并没有阻止联通移动等不让他们进来安装无线，所以学校在方面并没有垄断。至于有线这个如果让运营商做，那就会有很多不安全的因素在里面。而且流量是按照人分的，每个人5mb，每个人的上网速度可以达到500KB，这个速度不管是浏览网页还是看高清视频，还是打游戏，应该说妥妥的吧，别说下载慢，如果大家下载达到几兆之后，肯定会占用别人的带宽，所以流量按人分是最公平的了，你下载是你的事儿，也不能影响别人看电影打游戏上网对不对？再就是晚上十一点断网断电的事儿，那个属于管理工作，这是个集体环境大家熄灯之后不睡觉，通宵打游戏，嗷嗷嗷叫唤，肯定会影响别人休息，学校不是网吧，学校就是学校。这也是学生们反应的，你们打过游戏都知道自己打游戏时候的投入吧，嘴上还阵阵有辞的念叨，懂事的孩子都会理解这点。至于你们以食堂的饭菜贵为借口攻击学院网络那就更说不过去了，那是后勤的事儿，不是信息中心的事儿。你们以各种借口攻击学院网络那都是损害大家的事儿，学院还是以学生为主，受害最多的还是我们广大的学生。<br> 还有就是信息中心人手本来就少，要忙着搞信息化建设，现在各种网络攻击事件儿，让信息中心的老师们无暇顾及其他，耽误了正事儿，哪还有心思和时间精力去看什么隐私。罪魁祸首是谁？大家都好好想想，其实就是那些想攻击学校的内鬼，还打着各种旗号为其掩盖罪行，以满足他们扭曲的心里。如果大家都好好的上网，不搞攻击，那么网络质量还是很不错的，再有每个楼里都有一两个网络管理员，不但给他们提供了勤工助学的机会，还把服务做到了同学们的桌面，我想这是同学们有目共睹的。<br> 再就是百度贴吧这个地方是咱们集体共享信息的地方，在这里可以发表自己的建议跟学院的不足，有不足之处就说明海滨学院有可以前进的地方，别说是刚建校七年，就是上百年的老校，他们的学生也会有各种的不满，清华北大又怎么样，他们的学生照样也有不满，什么是母校，母校就是自己说他千般不好，别人说她一句都不行。在学校里老说学校不好，走上社会才知道母校的好。<br> 再有我看到的最变态最无耻的说法，是要把学校搞臭，同学们可以好好想想，学校是咱们自己的母校，搞臭了对咱们有什么好处？咱们自己拿着海滨学院的毕业证，出去找工作，最后自己的母校让自己搞臭了，你说人家能看的上你。像这种学生我们大家应该声讨他。招生的时候分数要高处三本分数线50分才有希望上咱们学院。海滨学院之所以能今天那都是学院的各界毕业生跟老师们的努力的得来的，我们作为学生最该做的是什么，是努力学习找个好工作，到时候在社会上得到各个用人企业的认可，为海滨争光，也为学弟学妹们争光，虽然是三本学生，但是咱们走到哪也头抬着头，让咱们作为海滨人感到骄傲，这才是正道理。</p>
</blockquote>
<p>当时还建了个群，规模庞大到2000人都装不下，呵呵。现在看来还挺有成就感的。</p>
<blockquote>
<p>这里是大家帮助大家的网络协会交流群<br>关于校内网的各种问题以及inode客户端下载<br>可参见百度网盘：<a href="http://pan.baidu.com/s/1eQ0gkRS">http://pan.baidu.com/s/1eQ0gkRS</a><br>同可见校内ftp（可上校内网的电脑）：<a href="ftp://10.10.54.176/">ftp://10.10.54.176</a><br>查询一卡通消费情况：<a href="http://ecard.bjtuhbxy.cn/selfsearch/">http://ecard.bjtuhbxy.cn/selfsearch/</a><br>网络自助暂停与查询：<a href="http://10.10.8.8/">http://10.10.8.8</a><br>PS：求管理的看活跃度 -3-<br>PPS：求头衔的请私密群主即可</p>
</blockquote>
<p>永恒之蓝还肆虐过，我的大学生活真丰富</p>
<blockquote>
<p>关于“永恒之蓝”以及比特币病毒的公告</p>
<p>校园网用户：<br>   近期国内众多高校出现了比特币病毒爆发的情况，信息中心网络运维小组解释如下：<br>此次新型勒索软件Onion是此前活跃的勒索软件Wallet的一类变种，该病毒不仅入侵企业的服务器设备，还会攻击个人用户。被感染的文件后缀名也被修改为onion，文件名中还附带上黑客的邮箱，用以向受害者索要赎金。被攻击者除了支付高额赎金外，往往没有办法解密文件，只能通过支付来恢复文件，对学习资料和个人数据造成严重的损失。<br>   根据网络安全机构通报，这是近期不法分子利用NSA黑客武器库泄露的“永恒之蓝”发起的病毒攻击事件。<br>   此次大面积感染病毒的机器基本均为教育网节点下的高校内部网络，以及没有更新补丁的盗版windows7及其以下系统。由于海滨学院校园网络使用的是本地联通链路，往往运营商对此次病毒泛滥的445端口已经进行禁用处理，而教育网并没有。所以初步得出结论此次病毒爆发暂时不会影响到海滨学院校园网络。但信息中心仍提醒如下：<br>1.察觉到电脑有莫名其妙变卡，杀软频频弹窗时请立刻断网关机。<br>2.不要打开任何陌生文件，包括但不限于来自邮件，聊天软件，等其他EXE可执行文件<br>3.win7及之前的系统请及时更新补丁，如仍有同学使用XP系统的，可使用360的防范工具<br>4.养成文档备份的好习惯，5月正值毕业季论文写作时间，其他高校均有毕业论文中毒导致严重后果的案例，毕业生同学们可养成备份文件的习惯，方法在此不赘述<br>5.如果真的有中毒的小伙伴，千万不要尝试使用比特币交易，因为你也交易不起。。。而且就算真的支付了，程序分析显示，黑客并不知道是谁支付的比特币。</p>
<p>​                                                     信息中心网络运维小组<br>​     2017.5.13</p>
</blockquote>
<p>又翻到了这个，现在想想离开了学校之后，还是学校好啊，唉。</p>
<blockquote>
<p>学院首任校长的信<br>各位同学，大家好：<br>首先应该祝贺我们的校园BBS正式开通了，这样进一步增加了学院与同学们的沟通渠道，为我们共同建设自己的海滨学院一起努力。对于同学们在这里发的每一个帖子我都已经看了一遍，大家有许多好的想法和意见学院会认真考虑。目前看来大家主要在生活上遇到的问题比较多，这里有学院工作不当的地方；同时的确对于一所新校来说要处理的问题很多，学院规模还小、人手也少、经费有限，很多工作有待进一步改善，希望学院的全体师生要团结一心、共同努力建设我们共同的家园。<br>对于同学们在这里已经谈到的几个问题，我谨发表一点自己的看法。<br>一、关于学院每周的工作作息时间。当初主要考虑到为了给同学们配备较好的任课教师以及利用公休日邀请一些社会名家来学院给同学们做一些学术报告、讲座创造条件。事实证明这样做对我们学院工作的开展是十分有利的；当然也对我们全校师生的日常生活带来一定的不协调，比如说有的同学打电话给我要求改成正常的作息时间，原因是在别的学校的同学联系不方便，有的老师休息时间与家里人休不到一起去，影响了享受家庭的天伦之乐，等等。而这一切我认为比起前面的理由是可以牺牲的，至少在学院近期的建设期间应该说是利大与弊，不知大家的意见如何。</p>
<p>二、关于学习用的计算机数量问题。现在学院在计算机房和图书馆电子阅览室共有公共用机近150台，全校平均大约每5个同学配备1台。总的比例可以说比其他任何学校都不少，但是现在看来数量还是不够，说明我们的同学学习的积极性比较高，这样很好。但是这里要注意几点：1、有个别同学上机时间真正用于学习的较少，而占用的机时数量较多，造成机时浪费；而我们的管理系统是可以记录每个同学的上机时间的，因此一个学期下来，对于某些如果学习成绩上不去而所用机时数量下不来的同学，是否可以限制他们总的上机时数。2、一般学校都不同意大学一年级的同学自己买计算机，主要是因为一部分同学买了以后不是用于学习而是用来打游戏，以至于玩物丧志，教训深刻。但是这样做也有因噫费废食之嫌。学校是鼓励学生学会掌握使用计算机的，因为这是未来走上社会后必须掌握的实用工具和基本技能，因此学院准备开设一个公共场所实行集中管理，对于家庭经济条件允许的同学可以自己购买计算机，但是要在公共场所统一管理个人使用，并由学院负责安全保障，这样是否可以。3、对于一些同学占座位的做法我认为有所不妥，此风不可长。先来的同学可以把别人用来占坐的物品用负责任的态度保管起来，但是不要损坏他人的东西。如果他来了就把东西给他（她），如果他要你把位子让给他，你就说是院长同意你这样做的，他要不信就让他来找我，好吧！<br>三、关于食堂的伙食品种、价格、质量和就餐秩序问题。学院领导一直十分重视，现在的品种和价格主要原因有规模效益问题，因为我们的就餐人数较少，所以餐饮公司的经营成本相对较高，学院也正在积极与餐饮公司沟通想办法降低成本、提高质量、增加品种。就餐秩序目前的确不是很好，我也每天在食堂就餐，无论有多少人独没有排队的习惯。这样不好，希望学工部组织一些同学勤工助学或学生志愿者来做好这方面的工作，请大家养成文明就餐的良好习惯。四、关于超市、热水、洗浴时间、体育设施等问题。将请学院有关部门进一步认真处理，在这里就不再一一来说了。总之，希望同学们把学院作为自己的家，因为是母校。我们将在这里共同度过人生最美好的四年大学生活。让我们一起把这个学校建设好。等你们二十年以后再回到这所学校的时候，可以用很自豪的口气对以后的学弟学妹们说，这是我们当年为学校所做过的一切。我相信这一天的到来，我也希望那时候也还有机会在与你们一起回学校看看。让我们共同努力吧。</p>
<p>章梓茂<br>2008年11月7日</p>
</blockquote>
<p>最后毕业的时候给学弟学妹们也留了点东西</p>
<blockquote>
<p>我这四年学上的算是圆满了 校园网换了三个环境 大一华三的iNode 大二大三锐捷的supplicant 这大四又来了个安朗 😂 刚才上贴吧看了看 还是老样子 就像我之前说的 中国人讲究含蓄内敛 被满足的用户不会发声说出来这个东西好 但是只要有不满的情况出现 就会有一堆键盘侠喷子 所以中国一概不缺喷子 但是归根结底还是我们做的不够好 这次换成移动的出口 无论有多便宜 都会有一小部分人得不到满足出来喷 如何做好舆论的引导 情绪的安抚 也正是我们需要做的 当时校园网被ddos的时候 我发了几个通知 虽然当时网络依旧时不时的抽风 但也起到了安抚同学的作用 因为移动的节点不在骨干网上 游戏提供商要是没有移动节点 大家打游戏肯定会卡 但我们要做到的是让大多数用户满意 99.9的同学满意了 证明我们的工作是有价值有意义的  不知道大家还记不记得我当时给你们做培训时写的 服务是我们的宗旨 解决问题一定要有耐心 但也不意味着我们就可以被欺负 有的时候他PC环境的问题导致的网络不稳定 这个锅我们不背 马上就要开学了 知道大家学业很忙 但是信息中心可能也很需要大家 做一些自己力所能及的 对自己的技术有个提升 何乐而不为呢？ 我马上就要毕业了 信息中心四年的工作也算有个了结 愿大家在技术的进阶之路上一往无前 对技术永远有一颗敬畏之心 愿大家一切都好 ！最后 如果生活学习上有需要我帮助的 我愿意提供一切力所能及能力范围内的帮助</p>
</blockquote>
<p>先这样吧 乱七八糟的</p>
]]></content>
      <tags>
        <tag>自嘲</tag>
      </tags>
  </entry>
  <entry>
    <title>OSPF 的 LSA 类型汇总（包括 OSPFv2 和 OSPFv3）</title>
    <url>/2019/04/25/26/</url>
    <content><![CDATA[<h3 id="OSPF-LSA"><a href="#OSPF-LSA" class="headerlink" title="OSPF LSA"></a>OSPF LSA</h3><p>LSA（Link-State Advertisement，链路状态广播）是链接状态协议使用的一个分组，它包括有关邻居和通道成本的信息。 LSAs 被路由器接收用于维护它们的 RIB（路由表）。</p>
<p>OSPF 路由协议是链路状态型路由协议，这里的链路即设备上的接口。链路状态型路由协议基于连接源和目标设备的链路状态作出路由的决定。链路状态是接口及其与邻接网络设备的的关系的描述，接口的信息即链路的信息，也就是链路的状态（信息）。这些信息包括接口的 IPv6 前缀（prefix）、网络掩码、接口连接的网络（链路）类型、与该接口在同一网络（链路）上的路由器等信息。这些链路状态信息由不同类型的 LSA 携带，在网络上传播。</p>
<p>路由器把收集到的 LSA 存储在链路状态数据库中，然后运行 SPF 算法计算出路由表。链路状态数据库和路由表的本质不同在于：数据库中包含的是完整的链路状态原始数据，而路由表中列出的是到达所有已知目标网络的最短路径的列表。</p>
<p>OSPF 协议是为 IP 协议提供路由功能的路由协议。OSPFv2（OSPF 版本 2）是支持 IPv4 的路由协议，为了让 OSPF 协议支持 IPv6，技术人员开发了 OSPFv3（OSPF 版本 3），OSPFv3 由 <a href="https://ccie.lol/knowledge-base/rfc-2740-en-ospf-for-ipv6/">RFC2740</a> 定义。</p>
<h3 id="LSA-类型"><a href="#LSA-类型" class="headerlink" title="LSA 类型"></a>LSA 类型</h3><h5 id="1、OSPFv2-LSA-类型："><a href="#1、OSPFv2-LSA-类型：" class="headerlink" title="1、OSPFv2 LSA 类型："></a><strong>1、OSPFv2 LSA 类型：</strong></h5><table>
<thead>
<tr>
<th><strong>LSA 类型</strong></th>
<th><strong>LSA 类型编号</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Router LSA</td>
<td>1</td>
</tr>
<tr>
<td>Network LSA</td>
<td>2</td>
</tr>
<tr>
<td>Network summary LSA</td>
<td>3</td>
</tr>
<tr>
<td>ASBR summary LSA</td>
<td>4</td>
</tr>
<tr>
<td>Autonomous system external LSA</td>
<td>5</td>
</tr>
<tr>
<td>Group membership LSA</td>
<td>6</td>
</tr>
<tr>
<td>NSSA External LSA</td>
<td>7</td>
</tr>
<tr>
<td>External attributes LSA for BGP</td>
<td>8</td>
</tr>
<tr>
<td>Opaque LSA（链路本地范围）</td>
<td>9</td>
</tr>
<tr>
<td>Opaque LSA（本地区域范围）</td>
<td>10</td>
</tr>
<tr>
<td>Opaque LSA（AS 范围）</td>
<td>11</td>
</tr>
</tbody></table>
<p>注意：下面的文字描述还是比较详细的，如果文字描述确实是太多了，您可以只看字体加粗的部分。再往下还有 LSA 1 / 2 / 3 / 4 / 5 / 7 的类型总结。</p>
<p><strong>（1）路由器 LSA（Router LSA）：每一台路由器都会产生 1 类 LSA 通告。这个最基本的 LSA 通告列出了路由器所有的链路或接口，并指明了它们的状态和沿每条链路方向出站的代价，以及该链路上所有已知的 OSPF 邻居；另外，1 类 LSA 同时也指出了路由器是不是 ABR 或 ASBR。这些 LSA 通告只会在始发它们的区域内部进行泛洪扩散（如下图所示）。</strong>通过命令 show ip ospf database router 可以查看数据库中列出的所有路由器 LSA 通告。</p>
<p><a href="https://ccie.lol/wp-content/uploads/2016/12/OSPFv2-LSA-1.jpg"><img src="https://ccie.lol/wp-content/uploads/2016/12/OSPFv2-LSA-1.jpg" alt="1 类 LSA：路由器 LSA" loading="lazy"></a>1 类 LSA：路由器 LSA</p>
<p>在链路状态 ID 字段中，使用通告路由器的路由器 ID 来标识 1 类 LSA。路由器的每条链路（接口）都被定义为 4 种类型之一：1、2、3 或 4 类。LSA 包含一个链路 ID 字段，用于标识链路的另一端；链路 ID 字段的含义随链路类型而异，下表描述了 1 类 LSA 链路类型及其链路 ID 字段的含义：</p>
<table>
<thead>
<tr>
<th><strong>链路类型</strong></th>
<th><strong>描述</strong></th>
<th><strong>链路 ID 字段的内容</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>到另一台路由器的点到点连接</td>
<td>邻居路由器的 ID</td>
</tr>
<tr>
<td>2</td>
<td>到中转网络的连接</td>
<td>DR 的接口地址</td>
</tr>
<tr>
<td>3</td>
<td>到末节网络的连接</td>
<td>IP 网络 / 子网号</td>
</tr>
<tr>
<td>4</td>
<td>虚链路</td>
<td>邻居路由器的 ID</td>
</tr>
</tbody></table>
<p>还有一个链路数据字段，它提供了 32 位的额外信息。对于大多数链路类型来说，这是相关路由器接口的 IP 地址；对于连接到末节网络的链路来说，这是该末节网络的子网掩码。</p>
<p><strong>（2）网络 LSA（Network LSA）：2 类 LSA 是 DR 为区域中每个中转的广播网络或 NBMA 网络生成的。中转网络至少与两台 OSPF 路由器直接相连，诸如以太网等多路访问网络就属于中转网络。2 类 LSA 列出了构成中转网络的所有路由器（包括 DR 本身）和链路的子网掩码。中转链路的 DR 负责通告 2 类 LSA，2 类 LSA 随后被扩散到区域内所有的路由器，2 类 LSA 不会跨越区域边界进行传播（如下图所示）。</strong>其链路状态 ID 为通告它的 DR 的 IP 接口地址。使用命令 show ip ospf database network 可以查看网络 LSA 通告的信息。请注意，和路由器 LSA 不同，网络 LSA 中没有度量字段。</p>
<p>关于网络 LSA 的其他解释：DR 路由器可以看作一个“伪”节点，或是一个虚拟路由器，用来描绘一个多路访问网络和与之相连的所有路由器。从这个角度来看，一条网络 LSA 通告也可以描绘一个逻辑上的“伪”节点，就像一条路由器 LSA 通告描绘一个物理上的单台路由器一样。网络 LSA 通告列出了所有与之相连的路由器，包括 DR 路由器本身。就像路由器 LSA 一样，网络 LSA 也仅仅在产生这条网络 LSA 的区域内部进行泛洪扩散。</p>
<p><a href="https://ccie.lol/wp-content/uploads/2016/12/OSPFv2-LSA-2.jpg"><img src="https://ccie.lol/wp-content/uploads/2016/12/OSPFv2-LSA-2.jpg" alt="2 类 LSA：网络 LSA" loading="lazy"></a>2 类 LSA：网络 LSA</p>
<p><strong>（3）网络汇总 LSA（Network summary LSA）：3 类 LSA 由 ABR 生成，它将一个区域内的网络通告给 OSPF 自治系统中的其他区域（1 类和 2 类 LSA 是被限制在区域内的）。如下图所示，ABR 从区域内的其他路由器那里收到 1 类 LSA 后，向外发送 3 类 LSA，以便将通过 1 类 LSA 获悉的网络通告给其他区域。3 类 LSA 只在一个区域内扩散，但 ABR 重新生成 3 类 LSA 以便将其扩散到其他区域。</strong>使用命令 show ip ospf database summary 可以显示链路状态数据库中的网络汇总 LSA 信息。</p>
<p><a href="https://ccie.lol/wp-content/uploads/2016/12/OSPFv2-LSA-3.jpg"><img src="https://ccie.lol/wp-content/uploads/2016/12/OSPFv2-LSA-3.jpg" alt="3 类 LSA：网络汇总 LSA" loading="lazy"></a>3 类 LSA：网络汇总 LSA</p>
<p>当一台 ABR 始发一条网络汇总 LSA 时，将包括从它本身到正在通告的这条 LSA 的目的地所耗费的代价。ABR 即使知道它有多条路由可以到达目的地，它也只会为这个目的地始发单条网络汇总 LSA 通告，因此：</p>
<ul>
<li>如果一台 ABR 在与它本身相连的区域内有多条路由可以到达目的地，那么它将只会始发单一的一条网络汇总 LSA 到骨干区域，而且这条网络汇总 LSA 是上述多条路由中代价最低的；</li>
<li>同样地，如果一台 ABR 经过骨干区域从其他的 ABR 收到多条网络汇总 LSA，那么这台始发的 ABR 将会选择这些 LSA 通告中代价最低的 LSA，并且将把这个 LSA 的最低代价通告给与它相连的非骨干区域。</li>
</ul>
<p>默认情况下：</p>
<ul>
<li>OSPF 不会自动对一组连续的子网进行汇总，更不会将网络汇总成分类网络；</li>
<li>ABR 总是将汇总 LSA 扩散到其他区域，而不管其中的路由是否是汇总路由；</li>
<li>ABR 网络管理员必须使用配置命令来指定如何进行汇总；</li>
<li>对于区域中的每个子网，都将一个 3 类 LSA 扩散到骨干区域；</li>
<li>汇总 LSA 并不包含汇总路由，因此默认情况下，将通告区域内的所有子网，这可能导致严重的扩散问题，所以应考虑在 ABR 上手工配置路由汇总。</li>
</ul>
<p>注意：收到 3 类 LSA 时，并不会导致路由器运行 SPF 算法。路由器将 3 类 LSA 通告的路由加入路由表或将其从路由表中删除时，并不一定执行完整的 SPF 计算。调试输出表明，这将导致执行部分 SPF 计算，但表示 SPF 算法执行次数的计数器并不会加 1。有些 Cisco 文档暗示 3 类 LSA 被注入区域时将运行 SPF 算法，但情况并非如此。</p>
<p>扩展：当其他的路由器从一台 ABR 收到一条网络汇总 LSA 通告时，它并不运行 SPF 算法。相反地，它只是简单地加上从它到那台 ABR 之间路由的代价，并将这个代价包含在这个 LSA 通告当中。通过 ABR 路由器，到达所通告的目的地的路由连同所计算的代价一起被记录进了路由表。这个行为 ―― 依赖中间路由器代替确定到达目的地的全程路由（Full route）的做法 ―― 其实是距离矢量协议的行为。因此，虽然在一个区域内部 OSPF 协议是一个链路状态协议，但是它却使用了距离矢量的算法来查找域间路由。</p>
<p><strong>（4）ASBR 汇总 LSA（ASBR summary LSA）：仅当区域中有 ASBR 时，ABR 才会生成 4 类 LSA。4 类 LSA 标识 ASBR，并提供一条前往该 ASBR 的路由。</strong>前往外部自治系统的数据流要求路由表包含有关通告外部路由的 ASBR 的信息。链路状态 ID 被设置为 ASBR 的路由器 ID。使用命令 show ip ospf database asbr-summary 可以查看 ASBR 汇总 LSA 的信息。这里要注意的是，其中目的地是一个主机地址，并且掩码是 0（通过 ASBR 汇总 LSA 通告的目的地将总是一个主机地址，因为它是一条到达一台路由器的路由）。</p>
<p><strong>如下图所示，ASBR 发送一个 1 类 LSA，并设置 E 位（外部位），指出发送方为 ASBR。1 类 LSA 被限定在区域内。然而，当 ABR（在路由器 LSA 中用边界[B]位标识）收到该 LSA 后，它会创建一个 4 类 LSA，并将其扩散到骨干区域（Area 0）。其他 ABR 将重新生成一个 4 类 LSA，并将其扩散到自己的区域中。</strong></p>
<p><a href="https://ccie.lol/wp-content/uploads/2016/12/OSPFv2-LSA-4.jpg"><img src="https://ccie.lol/wp-content/uploads/2016/12/OSPFv2-LSA-4.jpg" alt="4 类：ASBR 汇总 LSA" loading="lazy"></a>4 类：ASBR 汇总 LSA</p>
<p><strong>（5）自治系统外部 LSA （Autonomous system external LSA）：5 类 LSA 描述了前往 OSPF 自治系统外的网络的路由（也包括 OSPF 自治系统外部的缺省路由），它由 ASBR 发送并被扩散到整个 AS（如下图所示）。</strong>5 类 LSA 是链路状态数据库中唯一不与具体的区域相关联的 LSA 通告（即 O E1 和 O E2 路由不属于某个 Area，是独立的）。5 类 LSA 通告将在整个自治系统中进行泛洪扩散。其链路状态 ID 为外部网络的网络号。使用命令 show ip ospf database external 可以查看 5 类 LSA 的信息。</p>
<p><a href="https://ccie.lol/wp-content/uploads/2016/12/OSPFv2-LSA-5.jpg"><img src="https://ccie.lol/wp-content/uploads/2016/12/OSPFv2-LSA-5.jpg" alt="5 类：自治系统外部 LSA" loading="lazy"></a>5 类：自治系统外部 LSA</p>
<p>鉴于其扩散范围，如果采用默认设置，即不进行路由汇总，外部 LSA 也可能导致问题，这取决于外部网络数。网络管理员应在 ASBR 上对外部网络块进行汇总，以缓解扩散问题。</p>
<p><strong>关于 E1 和 E2 外部路由：</strong></p>
<ul>
<li><strong>E1：对于 O E1 外部路由，开销为外部开销加上分组经过的每条链路的内部开销。</strong>多个 ASBR 将同一条外部路由通告到同一个自治系统中时，应使用这种类型，以避免次优路由；</li>
<li><strong>E2（默认）：O E2 路由的开销总是只包含外部开销。</strong>只有一台 ASBR 将外部路由通告到自治系统中时，使用这种类型。</li>
</ul>
<p>如下图所示，前往外部自治系统 AS1 的路由的 E2 开销总是 1785。而 E1 开销每经过一条链路，就加了这条链路的 metric（图中链路的 metric 都是 10）。如果有多条前往外部 AS 的路径，且使用 E2 开销，则这些路径之间将没有差别。</p>
<p><a href="https://ccie.lol/wp-content/uploads/2016/12/OSPFv2-E1-E2.jpg"><img src="https://ccie.lol/wp-content/uploads/2016/12/OSPFv2-E1-E2.jpg" alt="计算 E1 和 E2 路由的开销" loading="lazy"></a>计算 E1 和 E2 路由的开销</p>
<p><strong>（6）组成员 LSA（Group membership LSA）：</strong>是用在 OSPF 协议的一个增强版本――组播 OSPF 协议（MOSPF协议）中的。MOSPF 协议将数据包从一个单一的源地址转发到多个目的地，或者是一组共享 D 类组播地址的成员。</p>
<p><strong>（7）NSSA 外部 LSA（NSSA External LSA）：是指在非纯末梢区域（Not-So-Stubby Area， NSSA）内始发于 ASBR 路由器的 LSA 通告。NSSA 外部 LSA 通告几乎和 5 类 LSA 通告是相同的。只是不像 5 类 LSA 通告那样在整个 OSPF 自治系统内进行泛洪扩散，NSSA 外部 LSA 通告仅仅在始发这个 NSSA 外部 LSA 通告的非纯末梢区域内部进行泛洪扩散。</strong>可以通过命令 show ip ospf database nssa-external 来显示 NSSA 外部 LSA 通告的信息。</p>
<p><strong>（8） BGP 的外部属性 LSA（External attributes LSA for BGP）：</strong>是被提议作为运行内部 BGP 协议（iBGP 协议）的另一种选择，以便用来传送 BGP 协议的信息穿过一个 OSPF 域。这个 LSA 从来没有在大范围部署过，IOS 也不支持该 LSA。</p>
<p><strong>（9 ~ 11）不透明 LSA（Opaque LSA）：</strong>是由标准的 LSA 头部后面跟随专用信息组成的一类 LSA。这个信息字段可以直接由 OSPF 协议使用，或者由其他应用分发信息到整个 OSPF 域间接使用。Opaque LSA 类型用于对 OSPF 增加可变的扩展特性，例如在 MPLS 网络中应用流量工程参数。</p>
<ul>
<li>（9）Opaque LSA（链路本地范围）：只在链路间泛洪</li>
<li>（10）Opaque LSA（本地区域范围）：只在本区域内泛洪</li>
<li>（11）Opaque LSA（AS 范围）：在整个 OSPF 域内泛洪</li>
</ul>
<p><strong>其他相关文章：</strong></p>
<ul>
<li>不透明 LSA（Opaque LSA）主要应用在基于 MPLS 的流量工程中，详情请看：《<a href="https://ccie.lol/knowledge-base/what-is-traffic-engineering-base-on-mpls/">什么是基于 MPLS 的流量工程（What is Traffic Engineering base on MPLS / What is MPLS TE）？</a>》</li>
</ul>
<h5 id="2、OSPFv2-LSA-类型总结："><a href="#2、OSPFv2-LSA-类型总结：" class="headerlink" title="2、OSPFv2 LSA 类型总结："></a><strong>2、OSPFv2 LSA 类型总结：</strong></h5><p><a href="https://ccie.lol/wp-content/uploads/2016/12/ospf_lsa_summary.jpg"><img src="https://ccie.lol/wp-content/uploads/2016/12/ospf_lsa_summary.jpg" alt="OSPFv2 LSA 类型总结" loading="lazy"></a>OSPFv2 LSA 类型总结</p>
<p>标注：图中 ADV 是通告路由器；ABR 是区域边界路由器；ASBR 是自治系统边界路由器。</p>
<p><strong>① LSA 1 路由器 LSA（Router LSA）</strong><br>描述路由器的直连链路状态信息。由每个发起路由器通告，只在本区域内传递，不会超过 ABR。</p>
<p><strong>② LSA 2 网络 LSA（Network LSA）</strong><br>描述本区域内 BMA / NBMA（串行连接信息不会在此出现）的网络信息以及连接到此网络的路由器。由本 BMA / NBMA 网络的 DR 或 BDR 通告，只在本区域传递。</p>
<p><strong>③ LSA 3 网络汇总 LSA（Network summary LSA）</strong><br>描述 OSPF 的区域间路由（在路由表中以 O IA 标识）。原 LSA 1 所描述的路由信息会由所在区域的 ABR 将其转换为 LSA 3。由 ABR 通告，3 类 LSA 只在一个区域内扩散，但 ABR 可以重新生成 3 类 LSA 以便将其扩散到其他区域（但是有的特殊区域会不让 LSA 3 进）。<br>注意：LSA 3 每穿越一个 ABR，其 ADV Router（通告路由器）都会发生改变，ADV Router 转变为最后一次穿越的 ABR 路由器。</p>
<p><strong>④ LSA 5 自治系统外部 LSA （Autonomous system external LSA）</strong><br>没有看错，这里是 LSA 5，我们先讲 LSA 5 再反过来看 LSA 4。<br>LSA 5 描述的是 OSPF 区域以外的路由（RIP、EIGRP、BGP 等，在路由表中以 O E1 / O E2 标识）。由 ASBR 通告，LSA 5 可以传播到整个 OSPF 的所有区域（特殊区域除外）。<br>注意：LSA 5 的 ADV Router 在穿越 ABR 的时候是不会改变的。</p>
<p><strong>⑤ LSA 4 ASBR 汇总 LSA（ASBR summary LSA）</strong><br>LSA 4 所承载的内容是：ASBR 的 Router-ID。LSA 4 其实就是图中 R4（通告路由器）将 Area 3 中 R11 的 Router-ID 信息转换为 LSA 4，在整个 OSPF 域中泛洪传播（特殊区域除外）。LSA 4 由 ABR 通告。</p>
<p>为什么需要 LSA 4？由于 LSA 5 的通告路由器在穿越 ABR 的时候不会改变，如图中 Area 3 的 LSA 5 在穿越 R4 到达 Area 0 时，通告路由器不改变仍然是 R11，因此除了 Area 3，Area 0 和其他区域都不知道 R11 的信息。此时就需要 LSA 4 为 Area 0 和其他区域提供 R11 的信息，可以这么说，LSA 4 是为 LSA 5 所服务的。</p>
<p><strong>⑥ LSA 7 NSSA 外部 LSA（NSSA External LSA）：</strong>LSA 7 通告几乎和 LSA 5 通告是相同的，由 ASBR 通告，只是不像 LSA 5 那样在整个 OSPF 自治系统内进行泛洪扩散，LSA 7 仅仅在始发这个 LSA 7 的 NSSA Area 和 Total NSSA Area 内部进行泛洪扩散。</p>
<p><strong>其他相关文章：</strong></p>
<ul>
<li>如果您想了解 OSPF 的特殊区域，请看：《<a href="https://ccie.lol/knowledge-base/ospf-area/">OSPF 的 Area 类型汇总（包括特殊区域：Stub Area、Total Stub Area、NSSA Area、Total NSSA Area）</a>》</li>
</ul>
<h5 id="3、OSPFv3-LSA-类型："><a href="#3、OSPFv3-LSA-类型：" class="headerlink" title="3、OSPFv3 LSA 类型："></a><strong>3、OSPFv3 LSA 类型：</strong></h5><p>在 IPv6 环境下生成和再次生成 LSA 的过程与 IPv4 环境下的过程是相同的。再次生成的 LSA 的序列码（LS sequence number）递增，LSA 的生存时间（LS age）被设置为 0，LSA 被写入链路状态数据库中，并从适当的接口扩散出去。在 IPv4 环境下能够触发再次生成 LSA 的事件，同样能够触发 IPv6 环境下的路由器再次生成 LSA，除此之外，下列事件或行为也能够触发 IPv6 路由器再次生成 LSA：</p>
<ul>
<li>任意一个路由器接口状态的改变；</li>
<li>DR 路由器身份的改变；</li>
<li>邻居路由器从 full 状态转变到其它状态，或者从其它状态转变到 full 状态；</li>
<li>邻居接口 ID 的改变；</li>
<li>为链路增加了新的地址前缀，或者删除了某个地址前缀；</li>
<li>收到了新的链路 LSA（link-LSA），并引起了链路前缀的变化。</li>
</ul>
<p>OSPFv3 继承了 OSPFv2 的大多数 LSA 类型，只是名称上有所改变，并增加了新的 LSA 类型。下表列出了 OSPFv3 使用的 LSA。</p>
<p>表 LSA 类型一览表</p>
<table>
<thead>
<tr>
<th><strong>LSA 名称</strong></th>
<th><strong>LSA 类型编号</strong></th>
<th><strong>LSA 类型编码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Router-LSA</td>
<td>1</td>
<td>0x2001</td>
</tr>
<tr>
<td>Network-LSA</td>
<td>2</td>
<td>0x2002</td>
</tr>
<tr>
<td>Inter-Area-Prefix-LSA</td>
<td>3</td>
<td>0x2003</td>
</tr>
<tr>
<td>Inter-Area-Router-LSA</td>
<td>4</td>
<td>0x2004</td>
</tr>
<tr>
<td>AS-External-LSA</td>
<td>5</td>
<td>0x2005</td>
</tr>
<tr>
<td>Group-membership-LSA</td>
<td>6</td>
<td>0x2006</td>
</tr>
<tr>
<td>Type-7-LSA</td>
<td>7</td>
<td>0x2007</td>
</tr>
<tr>
<td>Link-LSA</td>
<td>8</td>
<td>0x2008</td>
</tr>
<tr>
<td>Intra-Area-Prefix-LSA</td>
<td>9</td>
<td>0x2009</td>
</tr>
</tbody></table>
<p>（1）路由器 LSA（Router-LSA）：描述在特定区域内的路由器接口的链路状态及链路开销。该类型 LSA 仅在接口所在的区域内传播。该类型 LSA 还指示出产生该类型 LSA 的路由器是否是一台 ABR 或 ASBR，以及路由器是否是虚链路的一端。类型 1 LSA 也被用来通告末端（stub）网络。</p>
<p>（2）网络 LSA（Network-LSA）：由 DR 产生，用来描述 DR 所代表的网络的链路状态信息和链路开销信息。该 LSA 是 BMA 网络上的所有链路信息和链路开销信息的集合信息。</p>
<p>（3）区域间前缀 LSA（Inter-Area-Prefix-LSA）：这种类型 LSA 在 OSPFv2 中叫做概括的网络链路状态条目（summary net link states）。该类型 LSA 由 ABR 产生，用来把一个区域内的路由信息通告到另外一个区域。这种类型的 LSA 既可以描述一条具体的路由信息，也可以描述总结的路由信息。在 OSPFv3 中，地址是用前缀和前缀长度表达的，而不再使用地址和掩码的表达形式。缺省路由的前缀长度用 0 代表。</p>
<p>（4）区域间路由器 LSA（Inter-Area-Router-LSA）：由 ASBR 产生，用以通告 ASBR 的位置。试图把数据送达外网的路由器使用该 LSA 确定通往下一跳的最佳路径。</p>
<p>（5）自治系统外 LSA（AS-External-LSA）：用来携带自治系统外路由信息的 LSA。例如，把其它 AS 的路由再发布到 OSPF 中的路由信息。在该类型的 LSA 中，地址用前缀和前缀长度表达，缺省路由的前缀长度用 0 表达。</p>
<p>（6）类型 6 LSA（Group-membership-LSA）：用于组播，不做讨论。</p>
<p>（7）类型 7 LSA（Type-7 LSA）：由 NSSA 中的 ASBR 产生，只在 NSSA 中传播。在 ABR 上它被转换成类型 5 并且被扩散到骨干区域。</p>
<p>（8）链路 LSA（Link-LSA）：该类型 LSA 仅在本链路上传播，具有以下 3 种目的：向本链路上的其它路由器提供路由器的本链路地址；向本链路上的其它路由器通告 IPv6 地址前缀，使其与本链路相关联；允许路由器在该类型 LSA 中插入一些选项比特，与为本链路产生的网络 LSA 相关联。</p>
<p>（9）区域内前缀 LSA（Intra-Area-Prefix-LSA）：该类型 LSA 在本区域内传播，具有以下两种功能之一：通过参考网络 LSA 把 IPv6 地址前缀与转递网络（transit network）相关联；或者通过参考路由器 LSA 把 IPv6 地址前缀与路由器相关联。一台路由器可以为给定的区域产生多个该类型的 LSA，这些 LSA 使用链路状态 ID 字段（Link State ID）区分。DR 为它所代表的链路产生一个或多个该类型的 LSA，向整个区域内通告该链路的地址前缀。</p>
<p>以下引用均有删改：</p>
<ul>
<li>OSPFv2 的 LSA 类型，参考自：《CCNP ROUTE 学习指南（642-902）》，人民邮电出版社，2011 年 1 月第 1 版</li>
<li>OSPFv2 的 LSA 类型，部分描述还参考自：百度百科</li>
<li>OSPFv2 的 LSA 类型总结，参考自：<a href="http://blog.sina.com.cn/s/blog_5d24f0450100kxmi.html">http://blog.sina.com.cn/s/blog_5d24f0450100kxmi.html</a></li>
<li>OSPFv3 的 LSA 类型，参考自：<a href="http://blog.163.com/s_u/blog/static/133083672010622114215251/">http://blog.163.com/s_u/blog/static/133083672010622114215251/</a></li>
</ul>
<p>原文链接：<a href="https://ccie.lol/knowledge-base/ospf-ospfv3-lsa">https://ccie.lol/knowledge-base/ospf-ospfv3-lsa</a></p>
]]></content>
      <tags>
        <tag>路由</tag>
      </tags>
  </entry>
  <entry>
    <title>华为VRRP详解</title>
    <url>/2019/04/28/27/</url>
    <content><![CDATA[<p>原文链接：<a href="http://www.023wg.com/kkxpz/81.html">http://www.023wg.com/kkxpz/81.html</a> </p>
<h4 id="一、VRRP简介"><a href="#一、VRRP简介" class="headerlink" title="一、VRRP简介"></a>一、VRRP简介</h4><p>​    虚拟路由冗余协议VRRP（Virtual Router Redundancy Protocol）通过把几台路由设备联合组成一台虚拟的路由设备，将虚拟路由设备的IP地址作为用户的默认网关实现与外部网络通信。当网关设备发生故障时，VRRP机制能够选举新的网关设备承担数据流量，从而保障网络的可靠通信。</p>
<p>​    随着网络的快速普及和相关应用的日益深入，各种增值业务（如IPTV、视频会议等）已经开始广泛部署，基础网络的可靠性日益成为用户关注的焦点，能够保证网络传输不中断对于终端用户非常重要。</p>
<p>​    通常，同一网段内的所有主机上都设置一条相同的、以网关为下一跳的缺省路由。主机发往其他网段的报文将通过缺省路由发往网关，再由网关进行转发，从而实现主机与外部网络的通信。</p>
<p>​    当网关发生故障时，本网段内所有以网关为缺省路由的主机将无法与外部网络通信。增加出口网关是提高系统可靠性的常见方法，此时如何在多个出口之间进行选路就成为需要解决的问题。</p>
<p>​    VRRP的出现很好的解决了这个问题。VRRP能够在不改变组网的情况下，采用将多台路由设备组成一个虚拟路由器，通过配置虚拟路由器的IP地址为默认网关，实现默认网关的备份。当网关设备发生故障时，VRRP机制能够选举新的网关设备承担数据流量，从而保障网络的可靠通信。</p>
<p>​    在具有多播或广播能力的局域网（如以太网）中，借助VRRP能在网关设备出现故障时仍然提供高可靠的缺省链路，无需修改主机及网关设备的配置信息便可有效避免单一链路发生故障后的网络中断问题。</p>
<h4 id="二、VRRP原理"><a href="#二、VRRP原理" class="headerlink" title="二、VRRP原理"></a>二、VRRP原理</h4><h5 id="1、VRRP概述"><a href="#1、VRRP概述" class="headerlink" title="1、VRRP概述"></a>1、VRRP概述</h5><p><img src="https://image01.zhang-zhe.cn/20190428152037.png" loading="lazy"></p>
<p>​    如上图所示，HostA通过Switch双归属到SwitchA和SwitchB。在SwitchA和SwitchB上配置VRRP备份组，对外体现为一台虚拟路由器，实现链路冗余备份。</p>
<p>​    我们可以在如上图1所示的网络中部署VRRP协议，下面结合该图介绍VRRP协议的基本概念：</p>
<p>1、VRRP路由器（VRRP Router）：</p>
<p>运行VRRP协议的设备，它可能属于一个或多个虚拟路由器，如SwitchA和SwitchB。</p>
<p>2、虚拟路由器（Virtual Router）：</p>
<p>又称VRRP备份组，由一个Master设备和多个Backup设备组成，被当作一个共享局域网内主机的缺省网关。如SwitchA和SwitchB共同组成了一个虚拟路由器。</p>
<p>3、Master路由器（Virtual Router Master）：</p>
<p>承担转发报文任务的VRRP设备，如SwitchA。</p>
<p>4、Backup路由器（Virtual Router Backup）：</p>
<p>一组没有承担转发任务的VRRP设备，当Master设备出现故障时，它们将通过竞选成为新的Master设备，如SwitchB。</p>
<p>5、VRID：</p>
<p>虚拟路由器的标识。如SwitchA和SwitchB组成的虚拟路由器的VRID为1。</p>
<p>6、虚拟IP地址(Virtual IP Address)：</p>
<p>虚拟路由器的IP地址，一个虚拟路由器可以有一个或多个IP地址，由用户配置。如SwitchA和SwitchB组成的虚拟路由器的虚拟IP地址为10.1.1.10/24。</p>
<p>7、IP地址拥有者（IP Address Owner）：</p>
<p>如果一个VRRP设备将虚拟路由器IP地址作为真实的接口地址，则该设备被称为IP地址拥有者。如果IP地址拥有者是可用的，通常它将成为Master。</p>
<p>如SwitchA，其接口的IP地址与虚拟路由器的IP地址相同，均为10.1.1.10/24，因此它是这个VRRP备份组的IP地址拥有者。</p>
<p>8、虚拟MAC地址（Virtual MAC Address）：</p>
<p>虚拟路由器根据虚拟路由器ID生成的MAC地址。一个虚拟路由器拥有一个虚拟MAC地址，格式为：00-00-5E-00-01-{VRID}(VRRP for IPv4)；00-00-5E-00-02-{VRID}(VRRP for IPv6)。</p>
<p>当虚拟路由器回应ARP请求时，使用虚拟MAC地址，而不是接口的真实MAC地址。如SwitchA和SwitchB组成的虚拟路由器的VRID为1，因此这个VRRP备份组的MAC地址为00-00-5E-00-01-01。</p>
<h5 id="2、VRRP协议报文"><a href="#2、VRRP协议报文" class="headerlink" title="2、VRRP协议报文"></a>2、VRRP协议报文</h5><p>​    VRRP协议报文用来将Master设备的优先级和状态通告给同一备份组的所有Backup设备。</p>
<p>​    <strong>VRRP协议报文封装在IP报文中，发送到分配给VRRP的IP组播地址。在IP报文头中，源地址为发送报文接口的主IP地址（不是虚拟IP地址），目的地址是224.0.0.18，TTL是255，协议号是112。</strong></p>
<p>​    主IP地址（Primary IP Address）：从接口的真实IP地址中选出来的一个主用IP地址，通常选择配置的第一个IP地址。</p>
<p>​    目前，VRRP协议包括两个版本：</p>
<p>​    VRRPv2和VRRPv3。VRRPv2仅适用于IPv4网络，VRRPv3适用于IPv4和IPv6两种网络。</p>
<p>​    基于不同的网络类型，VRRP可以分为VRRP for IPv4和VRRP for IPv6（简称VRRP6）。VRRP for IPv4支持VRRPv2和VRRPv3，而VRRP for IPv6仅支持VRRPv3。</p>
<h5 id="3、VRRP报文结构"><a href="#3、VRRP报文结构" class="headerlink" title="3、VRRP报文结构"></a>3、VRRP报文结构</h5><p>VRRPv2报文结构</p>
<p><img src="https://image01.zhang-zhe.cn/20190428152819.png" loading="lazy"></p>
<p>VRRPv3报文结构</p>
<p><img src="https://image01.zhang-zhe.cn/20190428152856.png" loading="lazy"></p>
<p>各字段的含义如下表1所示：</p>
<table>
<thead>
<tr>
<th>表1 VRRP报文字段含义</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>报文字段</td>
<td>含义</td>
<td></td>
<td></td>
</tr>
<tr>
<td>VRRPv2</td>
<td>VRRPv3</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Version</td>
<td>VRRP协议版本号，取值为2。</td>
<td>VRRP协议版本号，取值为3。</td>
<td></td>
</tr>
<tr>
<td>Type</td>
<td>VRRP通告报文的类型，取值为1，表示Advertisement。</td>
<td>VRRP通告报文的类型，取值为1，表示Advertisement。</td>
<td></td>
</tr>
<tr>
<td>Virtual Rtr ID（VRID）</td>
<td>虚拟路由器ID，取值范围是1～255。</td>
<td>虚拟路由器ID，取值范围是1～255。</td>
<td></td>
</tr>
<tr>
<td>Priority</td>
<td>Master设备在备份组中的优先级，取值范围是0～255。0表示设备停止参与VRRP备份组，用来使备份设备尽快成为Master设备，而不必等到计时器超时；255则保留给IP地址拥有者。缺省值是100。</td>
<td>Master设备在备份组中的优先级，取值范围是0～255。0表示设备停止参与VRRP备份组，用来使备份设备尽快成为Master设备，而不必等到计时器超时；255则保留给IP地址拥有者。缺省值是100。</td>
<td></td>
</tr>
<tr>
<td>Count IP Addrs/Count IPvX Addr</td>
<td>备份组中虚拟IPv4地址的个数。</td>
<td>备份组中虚拟IPv4或虚拟IPv6地址的个数。</td>
<td></td>
</tr>
<tr>
<td>Auth Type</td>
<td>VRRP报文的认证类型。协议中指定了3种类型：0：Non Authentication，表示无认证。1：Simple Text Password，表示明文认证方式。2：IP Authentication Header，表示MD5认证方式。</td>
<td>-</td>
<td></td>
</tr>
<tr>
<td>Adver Int/Max Adver Int</td>
<td>VRRP通告报文的发送时间间隔，单位是秒，缺省值为1秒。</td>
<td>VRRP通告报文的发送时间间隔，单位是厘秒，缺省值为100厘秒（1秒）。</td>
<td></td>
</tr>
<tr>
<td>Checksum</td>
<td>16位校验和，用于检测VRRP报文中的数据破坏情况。</td>
<td>16位校验和，用于检测VRRP报文中的数据破坏情况。</td>
<td></td>
</tr>
<tr>
<td>IP Address/IPvX Address(es)</td>
<td>VRRP备份组的虚拟IPv4地址，所包含的地址数定义在Count IP Addrs字段。</td>
<td>VRRP备份组的虚拟IPv4地址或者虚拟IPv6地址，所包含的地址数定义在Count IPvX Addrs字段。</td>
<td></td>
</tr>
<tr>
<td>Authentication Data</td>
<td>VRRP报文的认证字。目前只有明文认证和MD5认证才用到该部分，对于其它认证方式，一律填0。</td>
<td></td>
<td></td>
</tr>
<tr>
<td>rsvd</td>
<td></td>
<td>VRRP报文的保留字段，必须设置为0。</td>
<td></td>
</tr>
</tbody></table>
<p>由报文结构可以看出，VRRPv2和VRRPv3的主要区别为：</p>
<p>1、支持的网络类型不同:</p>
<p>VRRPv3适用于IPv4和IPv6两种网络，而VRRPv2仅适用于IPv4网络。</p>
<p>2、认证功能不同:</p>
<p>VRRPv3不支持认证功能，而VRRPv2支持认证功能。</p>
<p>VRRPv2版本保留报文的认证字段，是为了兼容早期版本（RFC2338），VRRP认证并不能提高安全性。</p>
<p>发送通告报文的时间间隔的单位不同。VRRPv3支持的是厘秒级，而VRRPv2支持的是秒级。</p>
<h5 id="4、VRRP认证"><a href="#4、VRRP认证" class="headerlink" title="4、VRRP认证"></a>4、VRRP认证</h5><p>VRRPv2支持在通告报文中设定不同的认证方式和认证字。</p>
<p>1、无认证方式：</p>
<p>设备对要发送的VRRP通告报文不进行任何认证处理，收到通告报文的设备也不进行任何认证，认为收到的都是真实的、合法的VRRP报文。</p>
<p>2、简单字符（Simple）认证方式：</p>
<p>发送VRRP通告报文的设备将认证方式和认证字填充到通告报文中，而收到通告报文的设备则会将报文中的认证方式和认证字与本端配置的认证方式和认证字进行匹配。如果相同，则认为接收到的报文是合法的VRRP通告报文；否则认为接收到的报文是一个非法报文，并丢弃这个报文。</p>
<p>3、MD5认证方式：</p>
<p>发送VRRP通告报文的设备利用MD5算法对认证字进行加密，加密后保存在Authentication Data字段中。收到通告报文的设备会对报文中的认证方式和解密后的认证字进行匹配，检查该报文的合法性。</p>
<h5 id="5、VRRP状态机"><a href="#5、VRRP状态机" class="headerlink" title="5、VRRP状态机"></a>5、VRRP状态机</h5><p>VRRP协议中定义了三种状态机：初始状态（Initialize）、活动状态（Master）、备份状态（Backup）。其中，只有处于Master状态的设备才可以转发那些发送到虚拟IP地址的报文。</p>
<table>
<thead>
<tr>
<th>表1 VRRP协议状态</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>状态</td>
<td>说明</td>
</tr>
<tr>
<td>Initialize</td>
<td>该状态为VRRP不可用状态，在此状态时设备不会对VRRP报文做任何处理。通常刚配置VRRP时或设备检测到故障时会进入Initialize状态。收到接口Up的消息后，如果设备的优先级为255，则直接成为Master设备；如果设备的优先级小于255，则会先切换至Backup状态。</td>
</tr>
<tr>
<td>Master</td>
<td>当VRRP设备处于Master状态时，它将会做下列工作：定时（Advertisement Interval）发送VRRP通告报文。以虚拟MAC地址响应对虚拟IP地址的ARP请求。转发目的MAC地址为虚拟MAC地址的IP报文。如果它是这个虚拟IP地址的拥有者，则接收目的IP地址为这个虚拟IP地址的IP报文。否则，丢弃这个IP报文。如果收到比自己优先级大的报文，立即成为Backup。如果收到与自己优先级相等的VRRP报文且本地接口IP地址小于对端接口IP，立即成为Backup。</td>
</tr>
<tr>
<td>Backup</td>
<td>当VRRP设备处于Backup状态时，它将会做下列工作：1、接收Master设备发送的VRRP通告报文，判断Master设备的状态是否正常。2、对虚拟IP地址的ARP请求，不做响应。 3、丢弃目的IP地址为虚拟IP地址的IP报文。 4、如果收到优先级和自己相同或者比自己大的报文，则重置Master_Down_Interval定时器，不进一步比较IP地址。Master_Down_Interval定时器：Backup设备在该定时器超时后仍未收到通告报文，则会转换为Master状态。计算公式如下：Master_Down_Interval=(3* Advertisement_Interval) + Skew_time。其中，Skew_Time=(256–Priority)/256。如果收到比自己优先级小的报文且该报文优先级是0时，定时器时间设置为Skew_time（偏移时间），如果该报文优先级不是0，丢弃报文，立刻成为Master。</td>
</tr>
</tbody></table>
<h5 id="6、VRRP工作过程"><a href="#6、VRRP工作过程" class="headerlink" title="6、VRRP工作过程"></a>6、VRRP工作过程</h5><p>​    VRRP的工作过程如下：</p>
<p>​    VRRP备份组中的设备根据优先级选举出Master。Master设备通过发送免费ARP报文，将虚拟MAC地址通知给与它连接的设备或者主机，从而承担报文转发任务。</p>
<p>​    Master设备周期性向备份组内所有Backup设备发送VRRP通告报文，以公布其配置信息（优先级等）和工作状况。</p>
<p>​    如果Master设备出现故障，VRRP备份组中的Backup设备将根据优先级重新选举新的Master。</p>
<p>​    VRRP备份组状态切换时，Master设备由一台设备切换为另外一台设备，新的Master设备会立即发送携带虚拟路由器的虚拟MAC地址和虚拟IP地址信息的免费ARP报文，<strong>刷新与它连接的主机或设备中的MAC表项，从而把用户流量引到新的Master设备上来，整个过程对用户完全透明。</strong></p>
<p>​    原Master设备故障恢复时，若该设备为IP地址拥有者（优先级为255），将直接切换至Master状态。若该设备优先级小于255，将首先切换至Backup状态，且其优先级恢复为故障前配置的优先级。</p>
<p>​    Backup设备的优先级高于Master设备时，由Backup设备的工作方式（抢占方式和非抢占方式）决定是否重新选举Master。 </p>
<p><strong>抢占模式：</strong></p>
<p>​    在抢占模式下，如果Backup设备的优先级比当前Master设备的优先级高，则主动将自己切换成Master。</p>
<p><strong>非抢占模式：</strong></p>
<p>​    在非抢占模式下，只要Master设备没有出现故障，Backup设备即使随后被配置了更高的优先级也不会成为Master设备。</p>
<p>​    由此可见，为了保证Master设备和Backup设备能够协调工作，VRRP需要实现以下功能：</p>
<p>​    1、Master设备的选举；</p>
<p>​    2、Master设备状态的通告。</p>
<p>下面将从上述两个方面详细介绍VRRP的工作过程。</p>
<h5 id="7、Master设备的选举"><a href="#7、Master设备的选举" class="headerlink" title="7、Master设备的选举"></a>7、Master设备的选举</h5><p>​    VRRP根据优先级来确定虚拟路由器中每台设备的角色（Master设备或Backup设备）。优先级越高，则越有可能成为Master设备。</p>
<p>​    初始创建的VRRP设备工作在Initialize状态，收到接口Up的消息后，如果设备的优先级为255，则直接成为Master设备；如果设备的优先级小于255，则会先切换至Backup状态，待Master_Down_Interval定时器超时后再切换至Master状态。首先切换至Master状态的VRRP设备通过VRRP通告报文的交互获知虚拟设备中其他成员的优先级，进行Master的选举：</p>
<p>​    如果VRRP报文中Master设备的优先级高于或等于自己的优先级，则Backup设备保持Backup状态；</p>
<p>​    如果VRRP报文中Master设备的优先级低于自己的优先级，采用抢占方式的Backup设备将切换至Master状态，采用非抢占方式的Backup设备仍保持Backup状态。</p>
<p>​    如果多个VRRP设备同时切换到Master状态，通过VRRP通告报文的交互进行协商后，优先级较低的VRRP设备将切换成Backup状态，优先级最高的VRRP设备成为最终的Master设备；优先级相同时，VRRP设备上VRRP备份组所在接口主IP地址较大的成为Master设备。</p>
<p>​    如果创建的VRRP设备为IP地址拥有者，收到接口Up的消息后，将会直接切换至Master状态。</p>
<h5 id="8、Master设备状态的通告"><a href="#8、Master设备状态的通告" class="headerlink" title="8、Master设备状态的通告"></a>8、Master设备状态的通告</h5><p>​    Master设备周期性地发送VRRP通告报文，在VRRP备份组中公布其配置信息（优先级等）和工作状况。Backup设备通过接收到VRRP报文的情况来判断Master设备是否工作正常。</p>
<p>​    当Master设备主动放弃Master地位（如Master设备退出备份组）时，会发送优先级为0的通告报文，用来使Backup设备快速切换成Master设备，而不用等到Master_Down_Interval定时器超时。这个切换的时间称为Skew time，计算方式为：（256－Backup设备的优先级）/256，单位为秒。</p>
<p>​    当Master设备发生网络故障而不能发送通告报文的时候，Backup设备并不能立即知道其工作状况。等到Master_Down_Interval定时器超时后，才会认为Master设备无法正常工作，从而将状态切换为Master。其中，Master_Down_Interval定时器取值为：3×Advertisement_Interval＋Skew_time，单位为秒。</p>
<p>​    在性能不稳定的网络中，网络堵塞可能导致Backup设备在Master_Down_Interval期间没有收到Master设备的报文，Backup设备则会主动切换为Master。如果此时原Master设备的报文又到达了，新Master设备将再次切换回Backup。如此则会出现VRRP备份组成员状态频繁切换的现象。</p>
<p>​    为了缓解这种现象，可以配置<strong>抢占延时</strong>，使得Backup设备在等待了Master_Down_Interval后，再等待抢占延迟时间。如在此期间仍没有收到通告报文，Backup设备才会切换为Master设备。</p>
<h4 id="三、VRRP功能"><a href="#三、VRRP功能" class="headerlink" title="三、VRRP功能"></a>三、VRRP功能</h4><h5 id="1、VRRP主备备份"><a href="#1、VRRP主备备份" class="headerlink" title="1、VRRP主备备份"></a>1、VRRP主备备份</h5><p>主备备份是VRRP提供备份功能的基本方式。</p>
<p><img src="https://image01.zhang-zhe.cn/20190428161251.png" loading="lazy"></p>
<p>​    如上图所示。该方式需要建立一个虚拟路由器，该虚拟路由器包括一个Master设备和若干Backup设备。</p>
<p>​    正常情况下，SwitchA为Master设备并承担业务转发任务，SwitchB和SwitchC为Backup设备且不承担业务转发。</p>
<p>​    SwitchA定期发送VRRP通告报文通知SwitchB和SwitchC自己工作正常。如果SwitchA发生故障，    SwitchB和SwitchC会根据优先级选举新的Master设备，继续为主机转发数据，实现网关备份的功能。</p>
<p>​    SwitchA故障恢复后，在抢占方式下，将重新选举成为Master；在非抢占方式下，将保持在Backup状态。</p>
<p>​    下面以上图1为例简要说明VRRP主备备份的基本原理。</p>
<p>​    SwitchA为Master设备，优先级设置为120，抢占方式为延迟抢占。</p>
<p>​    SwitchB为Backup设备，优先级为默认值100，抢占方式为立即抢占。</p>
<p>​    SwitchC为Backup设备，优先级设置为110，抢占方式为立即抢占。</p>
<p>​    正常情况下，用户侧的上行流量路径为：Switch-&gt;SwitchA-&gt;Router。此时，SwitchA定期发送VRRP报文通知SwitchB和SwitchC自己工作正常。</p>
<p>​    当SwitchA发生故障时，SwitchA上的VRRP会处于不可用状态。由于SwitchC优先级高于SwitchB，因此SwitchC变为Master设备，并开始发送VRRP报文和免费ARP报文，SwitchB继续保持为Backup设备。用户侧的上行流量路径为：Switch-&gt;SwitchC-&gt;Router。</p>
<p>​    当SwitchA故障恢复时，VRRP的优先级为120，状态变为Backup。此时SwitchC继续定期发送VRRP报文，当SwitchA收到VRRP报文后，会比较优先级，发现自己的优先级更高，等待抢占延迟后抢占为Master设备，并开始发送VRRP报文和免费ARP报文。用户侧的上行流量路径恢复为：Switch-&gt;SwitchA-&gt;Router。</p>
<h5 id="2、VRRP负载分担"><a href="#2、VRRP负载分担" class="headerlink" title="2、VRRP负载分担"></a>2、VRRP负载分担</h5><p>​    负载分担方式是指多台设备同时承担业务，因此负载分担方式需要两个或者两个以上的虚拟路由器，每个虚拟路由器都包括一个Master路由器和若干个Backup路由器，各虚拟路由器的Master路由器可以各不相同。</p>
<p>​    VRRP负载分担与VRRP主备备份的基本原理和报文协商过程都是相同的。VRRP负载分担与VRRP主备备份方式不同点在于：</p>
<p>​    负载分担方式需要建立多个VRRP备份组，各备份组的Master设备可以不同；</p>
<p>​    同一台VRRP设备可以加入多个备份组，在不同的备份组中具有不同的优先级。</p>
<p>​    在网关设备上配置VRRP主备备份功能，可以很方便的实现网关的冗余备份。为减轻主用设备上数据流量的承载压力，用户可以通过配置VRRP负载分担实现上行流量的负载均衡。</p>
<p>​    通过创建多个带虚拟IP地址的VRRP备份组，为不同的用户指定不同的VRRP备份组作为网关，实现负载分担。</p>
<p><img src="https://image01.zhang-zhe.cn/20190428163048.png" loading="lazy"></p>
<p>如上图所示，配置两个VRRP备份组。</p>
<p>VRRP备份组1：SwitchA为Master设备，SwitchB为Backup设备。</p>
<p>VRRP备份组2：SwitchB为Master设备，SwitchA为Backup设备。</p>
<p>一部分用户将VRRP备份组1作为网关，另一部分用户将VRRP备份组2作为网关。这样即可实现对业务流量的负载分担，同时，也起到了相互备份的作用。</p>
<h5 id="3、VRRP平滑倒换"><a href="#3、VRRP平滑倒换" class="headerlink" title="3、VRRP平滑倒换"></a>3、VRRP平滑倒换</h5><p>​    VRRP备份组中，Master设备进行主控板的主备倒换时，从发生主备倒换到新的主控板正常工作期间，Master设备可能无法正常发送VRRP协议报文。Backup设备在Master_Down_Interval定时器超时后，由于未收到VRRP通告报文而切换为Master。当原Master设备完成主备倒换后，由于原Master设备的优先级高于新Master设备，抢占模式下，会重新抢占成为Master，从而引起链路两次切换，导致系统业务流量的不稳定。</p>
<p>​    为了避免主备倒换对业务流量的影响，可以在Master设备上使能VRRP平滑倒换功能。在VRRP平滑倒换的过程中，Master和Backup分工不同，相互配合，共同保证业务的平滑传输。</p>
<p>​    平滑倒换前，必须在Backup设备上使能VRRP协议报文时间间隔学习功能。使能后，Backup设备收到通告报文时，会检查报文中的发送时间间隔值，如果和自己的不同，Backup设备就会学习到报文中的时间间隔，并调整自己的协议报文时间间隔值，与报文中的值保持一致。</p>
<p>​    Master设备主控板的主备倒换启动时，首先保存当前配置的VRRP通告报文发送间隔，然后调整VRRP通告报文发送间隔（一般远大于倒换前的发送间隔），并以新的时间间隔发送通告报文。</p>
<p>​    Backup设备收到通告报文后，学习报文中的时间间隔值，并调整自己的定时器，与其保持一致。</p>
<p>倒换结束后，Master设备恢复倒换前的报文发送间隔，并以新的时间间隔发送通告报文。Backup设备收到报文后会再一次学习时间间隔。</p>
<p>​    在平滑倒换的过程中，VRRP的报文时间间隔学习功能优先于抢占功能，即如果Backup状态的VRRP收到的协议报文里面的时间间隔和自己当前配置的不一致，并且报文中携带的优先级低于自己当前的配置优先级，这种情况VRRP首先考虑的是学习这个时间间隔并重置超时定时器，而后才会考虑是否抢占。</p>
<p>​    VRRP平滑倒换功能还依赖于系统本身，如果设备自身从主备倒换一开始系统便非常繁忙，无法调度VRRP模块运行的情况，VRRP平滑倒换功能无效。</p>
<h5 id="4、管理VRRP"><a href="#4、管理VRRP" class="headerlink" title="4、管理VRRP"></a>4、管理VRRP</h5><p>​    为了提高网络可靠性，通常部署主备双归属。为了满足不同的业务需要，设备之间可以运行多个VRRP备份组。此时每个VRRP备份组都需要维护自己的状态机，这样设备之间就会存在大量的VRRP协议报文。</p>
<p><img src="https://image01.zhang-zhe.cn/20190428163339.png" loading="lazy"></p>
<p>​    如上图所示，为了减少协议报文对带宽的占用及CPU资源的消耗，可以将其中一个VRRP备份组配置为管理VRRP备份组（mVRRP），其余的业务VRRP备份组与管理VRRP备份组进行绑定。</p>
<p>​    此时，管理VRRP负责发送协议报文来协商设备的主备状态；业务VRRP不发送协议报文，其主备状态与管理VRRP的主备保持一致，以此减少协议报文对CPU与带宽资源的消耗。</p>
<p>1、管理VRRP备份组</p>
<p>​    管理VRRP备份组与普通VRRP备份组一样，会通过VRRP协议报文来协商VRRP设备的主备状态。管理VRRP可以部署在网络中的以下位置：</p>
<p>​    管理VRRP与业务VRRP部署在同一侧。此时管理VRRP备份组作为网关使用（如上图1中的mVRRP1），管理VRRP既负责协商设备的主备状态，也承担业务流量。此时在配置管理VRRP之前必须先创建普通VRRP备份组并配置虚拟IP地址，该虚拟IP地址即为用户设置的网关地址。</p>
<p>​    管理VRRP部署在SwitchA和SwitchB之间的直连链路上。此时管理VRRP备份组不作为网关使用时（如上图1中的mVRRP2），管理VRRP只负责协商设备的主备状态，不承担业务流量。因此管理VRRP不需要具有虚拟IP地址，用户可以直接在接口上创建管理VRRP备份组。该配置在一定程度上降低了用户维护的复杂度。 </p>
<p>2、业务VRRP备份组</p>
<p>​    普通VRRP备份组与管理VRRP备份组绑定后成为业务VRRP备份组（也叫成员VRRP备份组）。业务VRRP备份组不再发送VRRP协议报文，它的状态由所在接口状态及与其绑定的管理VRRP备份组的状态共同决定。</p>
<h5 id="5、VRRP监视上行链路"><a href="#5、VRRP监视上行链路" class="headerlink" title="5、VRRP监视上行链路"></a>5、VRRP监视上行链路</h5><p>​    VRRP主备备份功能有时需要额外的技术来完善其工作。</p>
<p>​    例如，Master设备到达某网络的链路突然断掉时，VRRP无法感知故障进行切换，此时主机无法通过Master设备远程访问该网络。</p>
<p>​    此时，可以通过VRRP监视指定接口或上行链路，解决这个问题。</p>
<p>​    当Master设备发现上行接口或链路发生故障时，Master设备降低自己的优先级（使得Master设备的优先级低于Backup设备的优先级），并立即发送VRRP报文。</p>
<p>​    Backup设备接收到优先级比自己低的VRRP报文后，等待Master_Down_Interval后切换至Master状态，充当VRRP备份组中新的Master设备，从而保证了流量的正常转发。</p>
<p>1、VRRP直接监视连接上行链路的接口状态</p>
<p>​       当连接上行链路的接口Down时，Master设备通过降低自身的优先级，使得Backup设备抢占成为Master，承担转发任务。</p>
<p><img src="https://image01.zhang-zhe.cn/20190428164032.png" loading="lazy"></p>
<p>​    如上图1所示，SwitchA和SwitchB之间配置VRRP备份组，其中SwitchA为Master设备，SwitchB为Backup设备，SwitchA和SwitchB皆工作在抢占方式下。</p>
<p>​    在SwitchA上配置VRRP监视上行接口Interface1，当Interface1故障时，SwitchA降低自身优先级，通过报文协商，SwitchB抢占成为Master，确保用户流量正常转发。</p>
<p>2、VRRP利用BFD/NQA/路由技术监视上行链路连接的远端主机或者网络状况</p>
<p>​    BFD/NQA/路由用于检测Master设备上行链路的连通状况，当Master设备的上行链路发生故障时，BFD/NQA/路由可以检测故障并通知Master设备调整自身优先级，触发主备切换，确保流量正常转发。</p>
<p><img src="https://image01.zhang-zhe.cn/20190428164122.png" loading="lazy"></p>
<p>​    如上图所示，SwitchA和SwitchB之间配置VRRP备份组，其中SwitchA为Master设备，SwitchB为Backup设备，SwitchA和SwitchB皆工作在抢占方式下。</p>
<p>​    配置BFD/NQA/路由监测SwitchA到SwitchE之间的链路，并在SwitchA上配置VRRP与BFD/NQA/路由联动。当BFD/NQA/路由检测到SwitchA到SwitchE之间的链路故障时，通知SwitchA降低自身优先级，通过VRRP报文协商，SwitchB抢占成为Master，确保用户流量正常转发。</p>
<h5 id="6、VRRP与BFD联动"><a href="#6、VRRP与BFD联动" class="headerlink" title="6、VRRP与BFD联动"></a>6、VRRP与BFD联动</h5><p>​    VRRP备份组通过收发VRRP协议报文进行主备状态的协商，以实现设备的冗余备份功能。当VRRP备份组之间的链路出现故障时，由于此时VRRP报文无法正常协商，Backup设备需要等待3倍协商周期（通常为3秒左右）后才会切换为Master设备，在等待切换期间内，业务流量仍会发往Master设备，此时会造成业务流量丢失。</p>
<p>​    BFD能够快速检测、监控网络中链路或者IP路由的连通状况，通过部署VRRP与BFD联动，可以使主备切换的时间控制在1秒以内，有效解决上述问题。</p>
<p>​    通过在Master设备和Backup设备之间建立BFD会话并与VRRP备份组进行绑定，由BFD机制快速检测VRRP备份组之间的通信故障，并在出现故障时及时通知VRRP备份组进行主备切换，从而大大减少应用中断时间。</p>
<p>​       VRRP支持与静态的BFD会话类型或静态标识符自协商的BFD会话类型的联动。</p>
<p><img src="https://image01.zhang-zhe.cn/20190428164224.png" loading="lazy"></p>
<p>​    如上图所示，SwitchA和SwitchB之间配置VRRP备份组，SwitchA为Master设备，SwitchB为Backup设备，用户侧的流量通过SwitchA转发。SwitchA和SwitchB皆工作在抢占方式下，其中SwitchB为立即抢占。</p>
<p>​    在SwitchA和SwitchB两端配置BFD会话，并在SwitchB上配置VRRP与BFD联动。</p>
<p>​    当VRRP备份组间出现故障时，BFD快速检测故障并通知SwitchB增加指定的优先级（此时SwitchB的优先级须高于SwitchA的优先级），SwitchB立即抢占为Master，用户侧流量通过SwitchB转发，实现了主备的快速切换。</p>
<p>7、VRRP心跳线</p>
<p><img src="https://image01.zhang-zhe.cn/20190428164303.png" loading="lazy"></p>
<p>​    如上图所示，在VRRP+STP场景中，SwitchA和SwitchB上配置VRRP备份组。若与用户相连的Switch不能转发VRRP协议报文（如配置了未知组播丢弃），或者为了防止VRRP协议报文（心跳报文）所经过的链路不通或不稳定，可以在SwitchA和SwitchB之间部署一条心跳线，用于传递VRRP协议报文。</p>
<p>​    由于配置了心跳线之后，需要将Interface1和Interface2加入与VRRP备份组相对应的VLAN（例如，VRRP备份组配置在VLANIF100接口下，则需要配置Interface1和Interface2加入VLAN100），SwitchA、SwitchB和Switch之间会存在环路，因此还需要配置破环协议来破除环路（例如，可以配置STP协议来破除环路）。</p>
]]></content>
      <tags>
        <tag>华为</tag>
      </tags>
  </entry>
  <entry>
    <title>有线802.1X认证在企业用户接入中的应用（加入AD域场景）</title>
    <url>/2019/04/18/3/</url>
    <content><![CDATA[<h4 id="1-1-方案简介"><a href="#1-1-方案简介" class="headerlink" title="1.1 方案简介"></a>1.1 方案简介</h4><p>计算机在企业的应用越来越广泛。企业在享受高效便捷办公服务的同时，也遇到了不小的烦恼。</p>
<p>在接入网络的终端越来越多的情况下，如果不推行终端规范化接入制度，则来访客人可借助一台便携机和一根网线轻易接入网络并拷走机要信息。这对任何企业都属于不可承受之痛。推行终端接入控制方案的重要性不言而喻，并且迫在眉睫。</p>
<p>要在接入层把非授权的终端拒之门外，推荐部署基于接入层的802.X认证接入方案。</p>
<p>802.1X认证接入方案组成图如下。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2015/0803/10/55bed38464923.jpg" alt="img" loading="lazy"></p>
<p>802.1X认证接入方案由终端、交换机和RADIUS服务器组成。</p>
<p>l   终端：在802.1X认证接入方案中充当客户端角色。根据是否支持主动触发802.1X认证，终端可分为普通终端和哑终端。</p>
<pre><code>   普通终端最显著的特点是能够安装802.1X认证客户端。例如办公PC。终端用户输入帐号和密码后主动触发认证，认证通过后接入网络。

   哑终端最显著的特点是无法安装802.1X认证客户端。例如IP电话、网络打印机。哑终端无法通过主动触发认证方式接入网络，而是通过交换机主动向RADIUS服务器触发MAC旁路认证，认证通过后接入网络。</code></pre>
<p>l   交换机：在802.1X认证接入控制方案充当接入控制设备角色。</p>
<p>l   RADIUS服务器：在802.1X认证接入方案中充当服务器角色。RADIUS服务器负责对交换机发来终端用户的帐号和密码进行校验，并且根据身份认证结果给交换机下发网络访问权限。在下面的配置举例中，以华为Policy Center作为RADIUS服务器为例介绍有线802.1X认证在企业用户接入中的应用。</p>
<p>方案的核心思想可简单概括为身份认证和网络授权：</p>
<p>l  在终端未进行身份认证或身份认证失败时，接入层交换机只给终端开放有限的网络访问权限。</p>
<p>例如，在新员工入职领取新电脑，尚未从管理员处获取帐号和密码，只能访问文件服务器下载必要的软件，而无法接入办公网。</p>
<p>或者在员工遗忘密码无法接入办公网，只能访问密码重新初始化应用。</p>
<p>l  终端认证成功后，RADIUS服务器会给交换机下发正常的网络访问权限，确保终端用户能够接入网络。</p>
<p>下面以某金融企业为例，介绍基于接入层802.1X认证接入方案。</p>
<p>1.2 组网需求</p>
<p>图1-1 公司原有网络组网</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2015/0803/10/55bed3847228d.jpg" alt="img" loading="lazy"></p>
<p>某公司原有网络如上图所示，所有终端用户通过AD域控制器进行身份认证。接入网络的设备包括终端主机（台式机、笔记本电脑）和打印机，台式机和笔记本电脑使用的操作系统有Windows 7和Windows XP。网络中接入的所有设备通过DHCP方式获取IP地址。</p>
<p>虽有AD域控制器对终端用户进行身份认证，但AD域控制器不是网络设备，本身对网络授权无能为力。在遇到终端身份认证失败时也无法向接入层交换机发送隔离消息，无法阻止非授权终端接入网络。</p>
<p>对于已经加入AD域的终端而言，加入AD域并不能阻止来自未加入域终端（例如未授权终端）的访问。AD域控制器在网络访问控制方面形同虚设。</p>
<p>现存的网络环境无法提供一套完备的网络授权方案，一旦恶意用户携带便携机接入公司网络，可能会把公司核心信息拷贝带走，给公司带来无法估量的损失。</p>
<p>现在出于保护竞争力的需要，需要部署一套身份认证系统，对所有接入企业网络的员工和外来人员在接入层进行准入控制。</p>
<p>l   当终端用户使用合法的AD域帐号和密码登录时，身份认证系统允许终端用户接入办公网络正常办公。</p>
<p>l   当外来终端接入到交换机的接口时，无法访问网络中的其他合法终端，也无法访问数据中心的服务器资源，以达到隔离外来终端的效果。</p>
<h4 id="1-3-部署方案"><a href="#1-3-部署方案" class="headerlink" title="1.3 部署方案"></a>1.3 部署方案</h4><p>根据现有的网络环境，在网络中部署一套Policy Center系统作为RADIUS服务器，然后采用接入层802.1X交换机作为准入控制设备，解决各种用户的网络接入需求。如<a href="https://forum.huawei.com/enterprise/zh/#tsm_cfg_con_0001_fig_02">图1-2</a>所示。</p>
<p>图1-2 公司现有网络组网</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2015/0803/10/55bed38485a1a.jpg" alt="img" loading="lazy"></p>
<p>Microsoft AD域控制器负责对终端用户的身份作校验，Policy Center负责根据终端用户的身份认证结果进行网络授权。</p>
<p>采用接入层802.1X接入控制方案的目的在于把接入控制点延伸至网络最底层。当发现外来终端尝试接入网络时，通过网络最底层的交换机实现隔离。如果终端用户身份认证成功，RADIUS服务器给交换机端口下发办公VLAN ID，终端用户能够正常接入网络办公。否则，交换机端口进入Guest VLAN，终端用户只允许访问有限的网络资源。</p>
<p>出于终端稳定性考虑，建议通过Windows 7和Windows XP自带的802.1X认证客户端进行身份认证，避免再安装其他的认证客户端，减轻管理员故障维护压力。</p>
<h4 id="1-4-场景分析"><a href="#1-4-场景分析" class="headerlink" title="1.4 场景分析"></a>1.4 场景分析</h4><h4 id="1-4-1-场景一：员工接入场景"><a href="#1-4-1-场景一：员工接入场景" class="headerlink" title="1.4.1 场景一：员工接入场景"></a>1.4.1 场景一：员工接入场景</h4><p>员工使用已经加入域的终端接入网络</p>
<ol>
<li><p>在终端主机的Windows操作系统启用后，网卡主动向交换机发起以主机名为帐号的802.1X认证。因该终端已经加入域，计算机身份认证成功，终端从Guest VLAN进入主机名认证VLAN。</p>
</li>
<li><p>终端用户使用域账号登录操作系统，终端主动发起802.1X认证请求，操作系统自动完成域账号的用户身份认证。认证成功(不需要提示用户输入用户名/口令)后终端进入员工工作VLAN。</p>
</li>
<li><p>终端获取员工工作VLAN的IP地址，能够访问其他正常认证的员工的终端，以及网络打印机和数据中心的服务器。</p>
</li>
</ol>
<p>员工忘记域账号密码</p>
<ol>
<li><p>员工忘记域账号的密码，无法使用域账号登录Windows操作系统，于是向管理员申请重新初始化密码。</p>
</li>
<li><p>管理员在AD域控制器上重新初始化该账号的密码，并且告知员工新密码。</p>
</li>
<li><p>员工使用已经加入域的终端接入网络。</p>
</li>
</ol>
<p>员工使用新密码接入网络的过程，与“员工使用已经加入域的终端接入网络”过程相同，剩下的流程请参见“员工忘记域账号密码”，此处不再赘述。</p>
<h4 id="1-4-2-场景二：哑终端接入场景"><a href="#1-4-2-场景二：哑终端接入场景" class="headerlink" title="1.4.2 场景二：哑终端接入场景"></a>1.4.2 场景二：哑终端接入场景</h4><p>哑终端是指不能通过802.1X客户端完成认证的终端，802.1X客户端包括Policy Center的客户端和Windows自带的802.1X客户端。本案例中，哑终端是指网络打印机。</p>
<ol>
<li><p>网络打印机接入网络后，接入交换机发起802.1X认证。网络打印机无法应答该802.1X认证请求。</p>
</li>
<li><p>接入交换机在等待响应超时（默认是30s）后直接使用该网络打印机的MAC地址作为帐号和密码，向Policy Center服务器发起身份认证。</p>
</li>
<li><p>Policy Center服务器验证允许该哑终端接入，给交换机发送认证成功。</p>
</li>
<li><p>网络打印机根据交换机的配置，进入哑终端VLAN，获取哑终端VLAN的IP地址。</p>
</li>
</ol>
<h4 id="1-4-3-场景三：外来非法终端接入场景"><a href="#1-4-3-场景三：外来非法终端接入场景" class="headerlink" title="1.4.3 场景三：外来非法终端接入场景"></a>1.4.3 场景三：外来非法终端接入场景</h4><p>外来非法终端是指没有加入公司AD域的终端。</p>
<p>外来非法终端尝试接入被接入层交换机隔离的过程：</p>
<ol>
<li><p>外来非法终端连接网线尝试接入网络。</p>
</li>
<li><p>由于该终端未加入公司AD域，主机名认证失败。该终端只能在未认证终端VLAN，获取未认证终端VLAN的IP地址。</p>
</li>
<li><p>外来非法终端的网络访问权限，取决于未认证终端VLAN的权限，通常情况下只允许访问AD域控制器、DNS服务器和DHCP服务器。如果是公司员工新领的电脑，可通过AD域控制器和DSN服务器加入AD域。</p>
</li>
</ol>
<h4 id="1-5-业务规划"><a href="#1-5-业务规划" class="headerlink" title="1.5 业务规划"></a>1.5 业务规划</h4><h4 id="1-5-1-规划VLAN"><a href="#1-5-1-规划VLAN" class="headerlink" title="1.5.1 规划VLAN"></a>1.5.1 规划VLAN</h4><p>对于交换机而言，按下面表格划分VLAN。</p>
<ol>
<li><p>根据所划分的VLAN，调整DHCP的地址分配策略，确保不同的VLAN使用不同的IP地址段。</p>
</li>
<li><p>在汇聚交换机（网关）上配置各个VLAN允许访问的网络资源。</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>VLAN ID</th>
<th>说明</th>
<th>权限</th>
</tr>
</thead>
<tbody><tr>
<td>102</td>
<td>办公VLAN，有独立的IP地址段。员工通过802.1X接入网络后，进入该VLAN，获得正常的网络访问权限。哑终端认证通过后也接入办公VLAN。</td>
<td>可以访问数据中心的所有资源。</td>
</tr>
<tr>
<td>109</td>
<td>Guest VLAN。新接入网络的计算机一开始尚未加入AD域，不能使用域的相关信息自动完成802.1X认证。为此需要提供一个网络环境，在终端在没有通过身份认证时，具备受限的网络访问权限，只能访问AD域控制器/DNS服务器/DHCP服务器，以便终端用户使用该VLAN能够把PC加入域。</td>
<td>可以访问数据中心的AD域控制器/DNS服务器/DHCP服务器，不可以访问数据中心的其他资源、办公VLAN和主机名认证VLAN。</td>
</tr>
<tr>
<td>130</td>
<td>主机名认证VLAN。确保终端用户在遗忘密码时具有基本的网络访问权限，例如填写密码重置申请单。</td>
<td>可以访问数据中心的AD域控制器/DNS服务器/DHCP服务器/密码重新初始化应用，不可以访问数据中心的其他资源和办公VLAN。</td>
</tr>
</tbody></table>
<h4 id="1-5-2-指定AD域控制器和认证服务器"><a href="#1-5-2-指定AD域控制器和认证服务器" class="headerlink" title="1.5.2 指定AD域控制器和认证服务器"></a>1.5.2 指定AD域控制器和认证服务器</h4><p>AD服务器作为Policy Center服务器的外部认证源。</p>
<p>l   终端在员工登录前进行主机名认证。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2015/0803/10/55bed38498dd0.jpg" alt="img" loading="lazy"></p>
<p>主机名保存在AD域控制器。终端发来的主机名，RADIUS服务器会送往AD域控制器进行验证。</p>
<p>l   终端用户使用Microsoft AD域帐号进行身份认证。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2015/0803/10/55bed384a7267.jpg" alt="img" loading="lazy"></p>
<p>帐号和密码本身不是保存在RADIUS服务器，而是保存在AD域控制器。AD域控制器用来校验终端用户的身份是否合法。员工的身份信息最终由RADIUS服务器送往AD域控制器进行校验。</p>
<p>Policy Center服务器必须加入AD域，否则，RADIUS认证和授权业务配置完后，终端用户认证不通过。</p>
<p>Policy Center服务器、AD域控制器、终端各自的时区设置必须保持一致，各自的时间误差必须小于5分钟，否则终端用户认证不通过。</p>
<p>RADIUS服务器除了把AD域帐号、密码、主机名转发给AD域控制器校验之外，还会亲自校验哑终端的MAC地址。哑终端的MAC地址需要添加到RADIUS服务器，方便RADIUS服务器对哑终端进行放行。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2015/0803/10/55bed384b379a.jpg" alt="img" loading="lazy"></p>
<p>表1-1 指定AD域控制器和认证服务器</p>
<table>
<thead>
<tr>
<th>服务器</th>
<th>参数</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>AD域控制器</td>
<td>域名</td>
<td>example.com</td>
</tr>
<tr>
<td>IP地址</td>
<td>10.1.1.3</td>
<td></td>
</tr>
<tr>
<td>认证端口</td>
<td>389</td>
<td></td>
</tr>
<tr>
<td>同步账号/密码</td>
<td>tony/ Admin@123</td>
<td></td>
</tr>
<tr>
<td>员工帐号/密码</td>
<td><a href="mailto:&#106;&#x61;&#x63;&#x6b;&#64;&#x65;&#120;&#x61;&#109;&#112;&#108;&#x65;&#46;&#x63;&#111;&#x6d;">&#106;&#x61;&#x63;&#x6b;&#64;&#x65;&#120;&#x61;&#109;&#112;&#108;&#x65;&#46;&#x63;&#111;&#x6d;</a>/Admin@123</td>
<td></td>
</tr>
<tr>
<td>SM+SC（RADIUS服务器，对应于交换机上配置的认证服务器、计费服务器和授权服务器）</td>
<td>版本</td>
<td>Policy Center V100R003C10</td>
</tr>
<tr>
<td>主用服务器IP地址</td>
<td>172.18.12.4</td>
<td></td>
</tr>
<tr>
<td>备用服务器IP地址</td>
<td>172.18.12.3</td>
<td></td>
</tr>
<tr>
<td>认证端口</td>
<td>1812</td>
<td></td>
</tr>
<tr>
<td>计费端口</td>
<td>1813</td>
<td></td>
</tr>
<tr>
<td>网络打印机MAC旁路认证帐号（MAC地址）</td>
<td>00-E0-4C-83-C9-EB</td>
<td></td>
</tr>
</tbody></table>
<h4 id="1-5-3-配置802-1x认证"><a href="#1-5-3-配置802-1x认证" class="headerlink" title="1.5.3 配置802.1x认证"></a>1.5.3 配置802.1x认证</h4><p>普通终端安装的是Microsoft Windows操作系统，可通过操作系统自带802.1X认证客户端进行认证，无须再安装其他第三方认证客户端。</p>
<p>员工自行输入AD域帐号和密码进行认证。管理员需要在连接终端的交换机接口配置802.1X认证。</p>
<p>由于无法在哑终端安装802.1X认证客户端，管理员必须在连接哑终端的交换机接口配置MAC旁路认证，方便交换机以哑终端的MAC地址作为帐号和密码自动向RADIUS服务器发起认证，确保哑终端在无人值守的情况下自动接入网络。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>设备型号</td>
<td>HUAWEI S5700</td>
</tr>
<tr>
<td>软件版本</td>
<td>V200R001C00SPC300</td>
</tr>
<tr>
<td>IP地址</td>
<td>172.18.10.7</td>
</tr>
<tr>
<td>预共享秘钥</td>
<td>Admin@123</td>
</tr>
<tr>
<td>认证方式</td>
<td>RADIUS</td>
</tr>
<tr>
<td>认证方法</td>
<td>EAP</td>
</tr>
<tr>
<td>计费方式</td>
<td>RADIUS</td>
</tr>
<tr>
<td>实时计费周期</td>
<td>15min</td>
</tr>
<tr>
<td>接口</td>
<td>Gigabit Ethernet 0/0/9连接打印机，未认证时加入VLAN 109（认证后加入的VLAN由RADIUS服务器下发），配置MAC旁路认证。</td>
</tr>
<tr>
<td>Gigabit Ethernet 0/0/10连接PC，未认证时加入VLAN 109（认证后加入的VLAN由RADIUS服务器下发），配置802.1X认证。</td>
<td></td>
</tr>
</tbody></table>
<h4 id="1-6-配置过程"><a href="#1-6-配置过程" class="headerlink" title="1.6 配置过程"></a>1.6 配置过程</h4><h4 id="1-6-1-配置接入交换机（终端接入侧）"><a href="#1-6-1-配置接入交换机（终端接入侧）" class="headerlink" title="1.6.1 配置接入交换机（终端接入侧）"></a>1.6.1 配置接入交换机（终端接入侧）</h4><ol>
<li><h4 id="配置RADIUS服务器模板。"><a href="#配置RADIUS服务器模板。" class="headerlink" title="配置RADIUS服务器模板。"></a>配置RADIUS服务器模板。</h4></li>
</ol>
<p>配置RADIUS服务器模板policy。把Policy Center的服务器配置为RADIUS服务器，为终端用户提供认证和计费服务。</p>
<p><Quidway> <strong>system-view</strong><br>[Quidway] <strong>radius-server template policy</strong></p>
<p>配置RADIUS主用认证服务器的IP地址和认证端口。</p>
<p>[Quidway-radius-policy] <strong>radius-server authentication 172.18.12.4 1812</strong></p>
<p>配置主用计费服务器的IP地址和计费端口。</p>
<p>[Quidway-radius-policy] <strong>radius-server accounting 172.18.12.4 1813</strong></p>
<p>[Quidway-radius-policy] <strong>radius-server authentication 172.18.12.3 1812 secondary</strong></p>
<p>[Quidway-radius-policy] <strong>radius-server accounting 172.18.12.3 1813 secondary</strong></p>
<p>RADIUS服务器要与交换机联动对终端进行接入控制，管理员必须为交换机配置预共享密钥，以便交换机验证RADIUS服务器是否合法。</p>
<p>配置认证密钥和计费密钥。</p>
<p>[Quidway-radius-policy] <strong>radius-server shared-key cipher Admin@123</strong><br>[Quidway-radius-policy] <strong>quit</strong></p>
<ol start="2">
<li><h4 id="配置RADIUS授权服务器。"><a href="#配置RADIUS授权服务器。" class="headerlink" title="配置RADIUS授权服务器。"></a>配置RADIUS授权服务器。</h4></li>
</ol>
<p>#配置RADIUS授权服务器的地址和共享密钥。授权密钥必须与认证密钥、计费密钥保持一致，否则802.1X认证会失败。</p>
<p>[Quidway] <strong>radius-server authorization 172.18.12.4 shared-key cipher Admin@123</strong><br>[Quidway] <strong>radius-server authorization 172.18.12.3 shared-key cipher Admin@123</strong></p>
<ol start="3">
<li>配置认证方案和计费方案。</li>
</ol>
<p>基于接入层的802.1X接入控制方案使用Policy Center作为RADIUS服务器给终端进行认证和授权，交换机的认证模式和计费模式必须配置为RADIUS。</p>
<p>[Quidway] <strong>aaa</strong><br>[Quidway-aaa] <strong>authentication-scheme auth</strong><br>[Quidway-aaa-authen-auth] <strong>authentication-mode radius</strong><br>[Quidway-aaa-authen-auth] <strong>quit</strong></p>
<p>RADIUS服务器的计费业务并非真实意义上的计费。配置计费的目的在于通过配置计费从RADIUS服务器与接入控制设备交互的计费报文获取终端用户的上线时间和下线时间，在需要时通过发送计费报文强制终端用户下线。最终目的是通过RADIUS计费来实现RADIUS在线用户管理功能，控制终端用户的在线时长。</p>
<p>如果不配置计费功能，管理员在RADIUS在线用户列表中将无法查到在线用户，终端无法正常下线，License计算也会不准确。</p>
<p>配置计费方案，计费模式设为radius，启用实时计费并设置计费间隔为15min。</p>
<p>[Quidway-aaa] <strong>accounting-scheme acco</strong><br>[Quidway-aaa-accounting-acco] <strong>accounting-mode radius</strong><br>[Quidway-aaa-accounting-acco] <strong>accounting realtime 15</strong><br>[Quidway-aaa-accounting-acco] <strong>quit</strong></p>
<p>在Policy Center作为RADIUS服务器提供认证和授权服务时，认证模式和计费模式必须配置成radius。</p>
<p><strong>accounting realtime</strong>命令用来配置实时计费周期。实时计费间隔的取值对设备和RADIUS服务器的性能有要求，实时计费间隔的取值越小，对设备和RADIUS服务器的性能就越高。请根据用户数设置计费间隔。</p>
<table>
<thead>
<tr>
<th>用户数</th>
<th>实时计费间隔</th>
</tr>
</thead>
<tbody><tr>
<td>1～99</td>
<td>3min</td>
</tr>
<tr>
<td>100～499</td>
<td>6min</td>
</tr>
<tr>
<td>500～999</td>
<td>12min</td>
</tr>
<tr>
<td>≥1000</td>
<td>≥15min</td>
</tr>
</tbody></table>
<ol start="4">
<li>配置域。</li>
</ol>
<p>配置域default。</p>
<p>[Quidway-aaa] <strong>domain default</strong></p>
<p>绑定域default和已配置的RADIUS服务器模板、认证方案及计费方案。</p>
<p>[Quidway-aaa-domain-default] radius-server policy <br>[Quidway-aaa-domain-default] authentication-scheme auth <br>[Quidway-aaa-domain-default] accounting-scheme acco <br>[Quidway-aaa-domain-default] quit <br>[Quidway-aaa] quit</p>
<ol start="5">
<li>配置802.1X认证。</li>
</ol>
<p>启用全局的802.1X认证。</p>
<p>[Quidway] <strong>dot1x enable</strong></p>
<p>配置认证方法。</p>
<p>[Quidway] <strong>dot1x authentication-method eap</strong></p>
<p>在Policy Center作为RADIUS服务器时，认证方法必须是EAP。如果设成其他选项（例如CHAP）会导致认证不通过。</p>
<ol start="6">
<li>配置接口。</li>
</ol>
<p>配置接口的链路类型。</p>
<p>[Quidway] <strong>interface GigabitEthernet 0/0/9</strong><br>[Quidway-GigabitEthernet 0/0/9] <strong>port link-type access</strong></p>
<p>在接入层交换机应用802.1X接入方案，交换机连接的属于需要认证的终端，接入控制点已经下探到网络末梢，故接口类型设为Acess。</p>
<p>配置接口的VLAN。</p>
<p>[Quidway-GigabitEthernet 0/0/9] <strong>port default vlan 109</strong></p>
<p>启用接口的802.1X认证。</p>
<p>[Quidway-GigabitEthernet 0/0/9] <strong>dot1x enable</strong></p>
<p>启用MAC旁路认证和MAC旁路认证过程中优先进行MAC认证。</p>
<p>[Quidway-GigabitEthernet 0/0/9] <strong>dot1x mac-bypass mac-auth-first</strong><br>[Quidway-GigabitEthernet 0/0/9] <strong>dot1x mac-bypass</strong></p>
<p>MAC旁路认证是指交换机对终端先尝试802.1X认证。如果802.1X认证失败，则以终端的MAC地址作为账号和密码向RADIUS服务器发起身份认证，这个阶段又称为MAC认证。</p>
<p>考虑到哑终端无法安装802.1X认证客户端，802.1X认证必然会失败。如此一来，诸如打印机之类的哑终端必然会经历一次802.1X认证失败，再经过一次MAC认证才能接入网络，认证时间较长。</p>
<p><strong>dot1x mac-bypass mac-auth-first</strong>命令的作用是颠倒MAC旁路认证的两个认证阶段的顺序，先尝试MAC认证，认证失败后再尝试802.1X认证。这样能缩短哑终端进行认证的时间，确保哑终端能够快速接入网络提供服务。</p>
<p>配置该接口允许认证的最大用户数。</p>
<p>[Quidway-GigabitEthernet 0/0/9] <strong>dot1x mac-user 1</strong></p>
<p>在接入层交换机应用802.1X接入方案，交换机连接的属于需要认证的终端，接入控制点已经下探到网络末梢，单个接口最大接入用户数为1。</p>
<p>配置接口的Guest VLAN。</p>
<p>[Quidway-GigabitEthernet 0/0/9] <strong>authentication guest-vlan 109</strong></p>
<p>Guest VLAN是终端处于未认证状态或者认证失败时允许访问的网络资源。通常Guest VLAN会部署必要的网络资源，如DHCP服务器、DNS服务器、RADIUS服务器，允许终端在未能正常接入网络的情况下，依然有权限获取必要的、有限的网络服务。</p>
<p>配置接口的接入方式为基于port方式。</p>
<p>[Quidway-GigabitEthernet 0/0/9] <strong>dot1x port-method port</strong></p>
<p>交换机接入控制方式设为port，是表示一台终端通过认证，所有终端均能接入网络。在接入层交换机应用802.1X接入方案，交换机连接的属于需要认证的终端，接入控制点已经下探到网络末梢，终端认证基于交换机端口即可满足要求。</p>
<p>重复以上步骤，配置接口GigabitEthernet 0/0/10。</p>
<p>[Quidway] interface GigabitEthernet 0/0/10 <br>[Quidway-GigabitEthernet 0/0/10] port link-type access <br>[Quidway-GigabitEthernet 0/0/10] port default vlan 109 <br>[Quidway-GigabitEthernet 0/0/10] dot1x enable <br>[Quidway-GigabitEthernet 0/0/10] dot1x mac-bypass mac-auth-first <br>[Quidway-GigabitEthernet 0/0/10] dot1x mac-bypass <br>[Quidway-GigabitEthernet 0/0/10] dot1x mac-user 1 <br>[Quidway-GigabitEthernet 0/0/10] authentication guest-vlan 109 <br>[Quidway-GigabitEthernet 0/0/10] dot1x port-method port</p>
<h4 id="1-6-2-配置策略管理中心"><a href="#1-6-2-配置策略管理中心" class="headerlink" title="1.6.2 配置策略管理中心"></a>1.6.2 配置策略管理中心</h4><ol>
<li>进入“接入控制策略 &gt; 接入设备 &gt; 接入设备 &gt; 设备”增加设备。方便Policy Center向接入层控制设备下发VLAN ID。认证密钥、计费密钥、实时计费周期必须与交换机侧的配置保持一致，否则终端认证会失败。</li>
</ol>
<p>l   RADIUS认证密钥：Admin@123</p>
<p>l   RADIUS计费密钥：Admin@123</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2015/0803/10/55bed384c2438.jpg" alt="img" loading="lazy"></p>
<ol start="2">
<li>增加网络打印机接入、终端主机接入和主机名认证接入的授权结果。</li>
</ol>
<p>选择“接入控制策略 &gt; 认证授权 &gt; 授权结果”增加授权结果。</p>
<p>l   网络打印机在MAC旁路认证通过后，RADIUS服务器向交换机下发VLAN ID 102，确保哑终端能够接入办公VLAN，为员工办公时访问。</p>
<p>l   员工在802.1X认证通过后，RADIUS服务器向交换机下发VLAN ID 102，确保员工能够接入办公VLAN，有权限访问数据中心的网络资源。</p>
<p>l   普通终端在通过主机名认证通过后，RADIUS服务器向交换机下发VLAN ID 130，确保终端能够接入主机名认证VLAN。确保终端用户在遗忘密码时具有基本的网络访问权限，例如填写密码重置申请单。</p>
<table>
<thead>
<tr>
<th>授权结果</th>
<th>打印机的授权结果</th>
<th>员工的授权结果</th>
<th>主机名认证的授权结果</th>
</tr>
</thead>
<tbody><tr>
<td>名称</td>
<td>打印机</td>
<td>员工</td>
<td>主机名认证</td>
</tr>
<tr>
<td>业务类型</td>
<td>MAC旁路认证业务</td>
<td>接入业务</td>
<td>接入业务</td>
</tr>
<tr>
<td>VLAN</td>
<td>102</td>
<td>102</td>
<td>130</td>
</tr>
</tbody></table>
<p>终端身份认证失败或未进行身份认证接入Guest VLAN已经在交换机上进行配置，在Policy Center服务器不需要配置。</p>
<ol start="3">
<li>增加网络打印机接入、终端主机接入和主机名认证接入授权规则，分别对应上面步骤创建的授权结果。</li>
</ol>
<p>选择“接入控制策略 &gt; 认证授权 &gt; 授权规则”。</p>
<p>l   网络打印机接入的授权规则，确保网络打印机通过MAC旁路认证后能够获得办公VLAN的访问权限。</p>
<p>l   普通终端在输入帐号和密码后接入的授权规则，确保员工在通过AD认证后能够获得办公VLAN的访问权限。</p>
<p>l   主机名认证接入的授权规则，确保终端能够接入主机名认证VLAN。</p>
<table>
<thead>
<tr>
<th>授权规则</th>
<th>打印机的授权规则</th>
<th>员工的授权规则</th>
<th>主机名认证的授权规则</th>
</tr>
</thead>
<tbody><tr>
<td>业务类型</td>
<td>MAC旁路认证业务</td>
<td>接入业务</td>
<td>接入业务</td>
</tr>
<tr>
<td>定制条件</td>
<td>-</td>
<td>-</td>
<td>Windows主机名认证</td>
</tr>
<tr>
<td>授权结果</td>
<td>打印机</td>
<td>员工</td>
<td>主机名认证</td>
</tr>
</tbody></table>
<p>将默认授权规则的“授权结果”修改为“禁止接入”，表示其他的终端属于非授权终端，接入时将会被禁止接入。</p>
<ol start="4">
<li>收集所有哑终端的MAC地址，把这些哑终端添加到哑终端设备组。在MAC旁路认证列表中添加网络打印机的MAC地址，只有MAC地址在MAC地址列表中的哑终端能允许接入办公VLAN。</li>
</ol>
<p>选择“用户与终端 &gt; 设备管理 &gt;设备管理”增加设备组。</p>
<pre><code>   设备组名称：网络打印机</code></pre>
<p>选择“网络打印机” 组，选择“设备列表”增加打印机的MAC地址。</p>
<pre><code>   MAC地址：00-E0-4C-83-C9-EB</code></pre>
<ol start="5">
<li>配置AD控制器，终端主机名认证和员工认证能够到AD控制器上进行验证。</li>
</ol>
<p>选择“用户与终端 &gt; 外部数据源 &gt; AD/LDAP同步”。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2015/0803/10/55bed384d10c9.jpg" alt="img" loading="lazy"></p>
<p>同步方式选择“不同步帐号/组织结构”。</p>
<ol start="6">
<li>增加AD域帐号和MAC旁路认证的认证规则。</li>
</ol>
<p>如果不增加AD域帐号的认证规则，则员工无法到AD域控制器进行认证。</p>
<p>如果不增加MAC旁路认证的认证规则，则哑终端无法通过认证。</p>
<p>选择“接入控制策略 &gt; 认证授权 &gt; 认证规则”增加认证规则。</p>
<table>
<thead>
<tr>
<th>认证规则</th>
<th>AD的认证规则</th>
<th>哑终端的认证规则</th>
</tr>
</thead>
<tbody><tr>
<td>业务类型</td>
<td>接入业务</td>
<td>MAC旁路认证业务</td>
</tr>
<tr>
<td>数据源</td>
<td>AD</td>
<td>本地数据源</td>
</tr>
<tr>
<td>终端设备组</td>
<td>-</td>
<td>网络打印机</td>
</tr>
<tr>
<td>认证协议</td>
<td>所有协议</td>
<td>所有协议</td>
</tr>
</tbody></table>
<ol start="7">
<li>配置终端主机。</li>
</ol>
<p>l   配置Microsoft Windows XP</p>
<p>(1)选择“开始 &gt; 设置 &gt; 控制面板”。</p>
<p>(2)依次单击“管理工具”和“服务”。</p>
<p>(3)右键单击“Wired AutoConfig”服务，选择“启动”。</p>
<p>(4)在“控制面板”单击“网络连接”，并右键单击终端主机使用的网络连接，选择“属性”。</p>
<p>(5)在“身份验证”页签选中“启用 IEEE 802.1X 身份验证”，在“选择网络身份验证方法”区域框选择“受保护的 EAP (PEAP)”，并单击“设置”。</p>
<p>(6)取消“验证服务器证书”，在“选择身份验证方法”区域框选择“安全密码 (EAP-MSCHAP v2)”，并在右侧单击“配置”。</p>
<p>(7)选中“自动使用 Windows 登录名和密码”。</p>
<p>l   配置Microsoft Windows 7</p>
<p>(1)选择“开始 &gt; 控制面板”。</p>
<p>(2)依次单击“管理工具”和“服务”。</p>
<p>(3)右键单击“Wired AutoConfig”服务，选择“启动”。</p>
<p>(4)在“控制面板”单击“网络和共享中心”，并单击终端主机使用的网络连接，单击“属性”。</p>
<p>(5)在“身份验证”页签选中“启用 IEEE 802.1X 身份验证”，在“选择网络身份验证方法”区域框选择“受保护的 EAP (PEAP)”，并单击“设置”。</p>
<p>(6)取消“验证服务器证书”，在“选择身份验证方法”区域框选择“安全密码 (EAP-MSCHAP v2)”，并在右侧单击“配置”。</p>
<p>(7)选中“自动使用 Windows 登录名和密码”。</p>
<p>—-结束</p>
<h4 id="1-7-总结与建议"><a href="#1-7-总结与建议" class="headerlink" title="1.7 总结与建议"></a>1.7 总结与建议</h4><p>基于接入层的802.1X接入方案，其关键步骤是：</p>
<ol>
<li><p>把不同访问级别的网络资源规划到不同的VLAN。</p>
</li>
<li><p>在接入层交换机对终端用户启用802.1X认证，对哑终端实施MAC旁路认证，以便阻击未授权终端浑水摸鱼接入网络。</p>
</li>
<li><p>根据身份认证结果给交换机接口下发不同的VLAN ID，以便普通终端和哑终端接入办公网络。</p>
</li>
</ol>
<p>举例中把终端认证后的访问权限（办公VLAN 102）设置成完全一样，对接入控制模型作了一定程度的简化，方便读者理解。</p>
<p>如果管理员想进行精细化的网络权限控制，例如研发、财务、市场员工在认证后拥有独立访问的网络资源，可把每个部门认证后允许访问的网络资源划分到不同的VLAN，在认证后Policy Center服务器下发不同的VLAN ID即可达成。</p>
<p>以Policy Center服务器为核心，基于接入层的接入控制方案中的二次身份认证设计非常巧妙：</p>
<p>l   在开机时通过Microsoft Windows自带的802.1X认证客户端自动尝试使用主机名进行认证。为已加入域的终端开放了比认证前域更大的权限，解决域密码遗忘无法正常接入办公网络的问题。</p>
<p>l   终端用户使用AD帐号登录操作系统，自动完成身份认证。认证通过后接入办公网络。</p>
<p>同时，未加入域未通过身份认证的终端留有加入域所依赖的网络资源，为新购入的终端接入网络作好铺垫，所谓一石三鸟。</p>
<p>原文链接：<a href="https://forum.huawei.com/enterprise/zh/thread-234187.html">https://forum.huawei.com/enterprise/zh/thread-234187.html</a></p>
]]></content>
      <categories>
        <category>华为</category>
      </categories>
      <tags>
        <tag>华为 802.1x</tag>
      </tags>
  </entry>
  <entry>
    <title>校招面试知识点复习之计算机网络</title>
    <url>/2019/04/30/31/</url>
    <content><![CDATA[<p>原文链接：<a href="https://juejin.im/post/593de67261ff4b006c97452e">https://juejin.im/post/593de67261ff4b006c97452e</a></p>
<h4 id="1、电路交换与分组交换"><a href="#1、电路交换与分组交换" class="headerlink" title="1、电路交换与分组交换"></a><strong>1、电路交换与分组交换</strong></h4><ul>
<li>电路交换特点：资源会被预留</li>
<li>电路交换分为：频分多路复用以及时分多路复用</li>
<li>优点：可以为一个通话保证特定数量的端到端带宽</li>
<li>缺点：效率低</li>
</ul>
<ul>
<li>分组交换特点：资源不会被预留</li>
<li>优点：效率高</li>
</ul>
<p>今天的因特网就是分组交换的典范！</p>
<p><strong>分组交换中的时延</strong></p>
<p>处理时延、排队时延、传输时延、传播时延、传输时延</p>
<p><strong>这其中要特别注意传输时延与传播时延的区别!!!</strong></p>
<p>传输时延:</p>
<p>R= 链路带宽 (bps)<br>L= 分组长度 (比特)<br>发送比特进入链路的时间= L/R</p>
<p>传播时延:</p>
<p>d = 物理链路的长度<br>s = 在媒体中传播的速度 (~2x108 m/sec)<br>传播时延 = d/s</p>
<p><strong>分组交换对比电路交换</strong></p>
<p>电路交换</p>
<ul>
<li>在数据传输前，必须建立端到端的连接</li>
<li>一旦某个节点故障，必须重新建立连接</li>
<li>连接建立后，数据的传输没有额外的延时</li>
<li>数据中不必包含地址域，仅需较短的虚电路号</li>
<li>数据按序传输，但信道的使用率较低</li>
<li>适合长时间传输大批量的数据，如流数据</li>
</ul>
<p>分组交换</p>
<ul>
<li>在数据传输前，不必建立端到端的连接</li>
<li>只要下一个节点空闲，即可传输</li>
<li>信道的使用率较高</li>
<li>数据的传输采用存储转发，延时不可估计</li>
<li>数据中必须包含地址域</li>
<li>接收到的分组不一定按序，可能还需重组</li>
<li>适合传输文本型数据</li>
</ul>
<h4 id="2、因特网的分层模型："><a href="#2、因特网的分层模型：" class="headerlink" title="2、因特网的分层模型："></a><strong>2、因特网的分层模型：</strong></h4><ul>
<li>应用层: 支持网络应用<br>FTP、HTTP、DNS、SMTP、DHCP、 RIP 等</li>
<li>运输层: 主机到主机数据传输<br>TCP, UDP</li>
<li>网络层: 从源到目的地数据报的选路<br>ARP、IP、ICMP、OSPF、BGP等</li>
<li>数据链路层: 在邻近网元之间传输数据<br>ALOHA、CSMA或CSMA/CD、TDMA、FDMA、CDMA</li>
<li>物理层: “在线上”的比特<br>任何一种调制解调体制</li>
</ul>
<p>应用层报文：　应用层协议分布在多个端系统上。一个端系统中的应用程序使用协议交换信息分组。我们将这种位于应用层的信息分组称为报文。</p>
<p>运输层报文段：运输层的分组</p>
<p>网络层数据报：因特网中的网络层分组</p>
<p>数据链路层帧：链路层分组</p>
<p>物理层比特：　物理层分组</p>
<h4 id="3、UDP和TCP详解"><a href="#3、UDP和TCP详解" class="headerlink" title="3、UDP和TCP详解"></a><strong>3、UDP和TCP详解</strong></h4><p>UDP特点：是无连接的运输层协议</p>
<p><img src="https://image01.zhang-zhe.cn/20190430110613.png" loading="lazy"></p>
<p>优点：</p>
<ul>
<li>应用层能够更好地控制要发送的数据和发送时间</li>
<li>无需建立连接</li>
<li>无连接状态</li>
<li>分组首部开销小</li>
</ul>
<p>应用：</p>
<ul>
<li>常用于流式多媒体应用<ul>
<li>丢包容忍</li>
<li>速率敏感</li>
</ul>
</li>
<li>其他<ul>
<li>DNS</li>
<li>SNMP</li>
</ul>
</li>
</ul>
<p>TCP特点：</p>
<ul>
<li>点到点</li>
<li>可靠、有序</li>
<li>全双工</li>
<li>面向连接</li>
<li>流量控制</li>
<li>拥塞控制</li>
</ul>
<p><img src="https://image01.zhang-zhe.cn/20190430110915.png" loading="lazy"></p>
<p><img src="https://image01.zhang-zhe.cn/20190430110938.png" loading="lazy"></p>
<p><img src="https://image01.zhang-zhe.cn/20190430111010.png" loading="lazy"></p>
<p><strong>问题：TCP协议采用了哪些机制保证数据的可靠传输？</strong></p>
<ul>
<li>连接时的 三次握手以及断开时的四次握手</li>
<li>确认机制（超时、稍带确认）</li>
<li>拥塞控制、流量控制</li>
</ul>
<p><strong>TCP中拥塞控制的方法：</strong></p>
<ul>
<li>加性增，乘性减</li>
<li>慢启动</li>
<li>对超时事件做出反应</li>
</ul>
<p>加性增：没有检测到拥塞的情况下，收到一个确认后就把拥塞窗口值增大一点（线性）</p>
<p>乘性减：每发生一次丢包事件就将当前的拥塞窗口值减半</p>
<p><strong>这里要特别注意拥塞控制、流量控制的区别</strong></p>
<ul>
<li>拥塞控制：防止过多的数据注入到网络中，这样可以使网络中的路由器不至于过载。拥塞控制的前提是：网络能够承受现有的网络负荷。</li>
<li>流量控制：点对点通信量的控制。控制发送端的发送数据的速率。 </li>
</ul>
<p><strong>这里要特别注意选择重传、回退N步的区别</strong></p>
<ul>
<li>选择重传：只重传出现差错的数据帧。但这时必须加大接收窗口，以便先收下发送序列号不连续但仍在接收窗口中的数据帧。等到所缺序号的数据帧收到后再一并交给主机。</li>
<li>回退N步：当接收方检测出失序的数据帧后，要求发送方重发最后一个正确接收的信息之后所有未确认的帧；或者当发送方发了N个帧以后，发现N帧的前一帧在计时器超时后仍未返回其确认信息，则该帧被判超时或者出错，此时发送方不得不重新发送出错帧以及其后的帧。</li>
</ul>
<hr>
<h4 id="4、选路和转发"><a href="#4、选路和转发" class="headerlink" title="4、选路和转发"></a><strong>4、选路和转发</strong></h4><ul>
<li>转发：当一个分组到达某路由器的一条输入链路时，该路由器必须将该分组移动到适当的输出链路。</li>
<li>选路：当分组从发送方流向接收方时，网络层必须决定这些分组所采用的路由或路径。</li>
</ul>
<blockquote>
<p><strong>选路</strong>是指分组从源到目的地时，决定端到端路径的网络范围的进程。</p>
<p><strong>转发</strong>是指将分组从一个输入链路接口转移到适当的输出链路接口的路由器本地动作。</p>
</blockquote>
<h4 id="5、IP"><a href="#5、IP" class="headerlink" title="5、IP"></a><strong>5、IP</strong></h4><p>IP的报文格式如下图所示：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/7/20/a871001c14f23a4f1046ab687528f690?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="这里写图片描述" loading="lazy">这里写图片描述</p>
<p>因特网的地址分配策略被称为无类别域间选路（CIRD）。在采用CIRD之前，IP地址被分为A,B,C,D,E五类，分别为：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/7/20/7f34ab4373e42f75f9ff935bda594907?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="这里写图片描述" loading="lazy">这里写图片描述</p>
<p>不过在这之间，有几个私有地址，是不能够被使用的，包括：</p>
<ul>
<li>A类 　　10.0.0.0 –10.255.255.255</li>
<li>B类 　　172.16.0.0–172.31.255.255</li>
<li>C类 　　192.168.0.0–192.168.255.255 </li>
</ul>
<hr>
<h4 id="６、选路算法"><a href="#６、选路算法" class="headerlink" title="６、选路算法"></a><strong>６、选路算法</strong></h4><ul>
<li>链路状态选路算法（LS算法）<ul>
<li>使用迪杰斯特拉算法来计算</li>
</ul>
</li>
<li>距离向量算法（DV算法）<ul>
<li>分布式的，是因为每个节点都要从一个或多个直接相连的邻居接收某些信息，执行计算，然后将计算结果发回给邻居；</li>
<li>迭代的，是因为此过程一直要持续到邻居之间没有更多的信息要交换为止；</li>
<li>异步的，是因为它不要求所有节点相互之间步伐一致地操作；</li>
</ul>
</li>
</ul>
<p>每个节点x以Dx(y)开始，对N中的所有节点估计从它自己到节点y的最低费用路径的费用；当节点x从它的任何一个邻居v接收到一个新距离向量时，它保存v的距离向量，然后使用Bellman-Ford方程更新它自己的距离向量<br>$$D_x(y) ← min_v(c(x,v) + D_v(y))$$</p>
<p>只要所有的节点继续以异步方式交换它们的距离向量，每个费用估计Dx(y)就收敛到dx(y)，dx(y)是从节点x到节点y的实际最低费用路径的费用。</p>
<p>两者之间的比较：</p>
<ul>
<li>LS：<ul>
<li>向网络上所有其它节点广播消息</li>
<li>消息仅包括到邻居节点的距离</li>
<li>收敛速度比较快</li>
<li>能够广播不正确的链路信息</li>
<li>没有无穷计数的问题</li>
</ul>
</li>
<li>DV：<ul>
<li>仅与邻居节点交换消息</li>
<li>消息包括到所有节点的最短距离</li>
<li>收敛速度比较慢</li>
<li>能够广播不正确的路径信息</li>
<li>有无穷计数的问题</li>
</ul>
</li>
</ul>
<p>其他选路算法还包括层次选路。</p>
<hr>
<h4 id="7、多路访问协议"><a href="#7、多路访问协议" class="headerlink" title="7、多路访问协议"></a><strong>7、多路访问协议</strong></h4><p><strong>1、信道划分协议</strong></p>
<p>信道划分协议主要分为时分多路复用 (TDM)、频分多路复用 (FDM)、码分多址（CDMA ）。</p>
<p>设信道支持N个节点，传输速率是R b/s。</p>
<ul>
<li>时分多路复用 (TDM)：<br>将时间划分为时间帧，每个时间帧再划分为N个时隙（长度保证发送一个分组），分别分配给N个节点。每个节点只在固定分配的时隙中传输。<br>例：6个站点的LAN, 时隙1、3、4 有分组, 时隙2、5、6 空闲 </li>
</ul>
<p><img src="https://user-gold-cdn.xitu.io/2017/7/20/482a3e73b0142e8186430822a76591b4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="这里写图片描述" loading="lazy">这里写图片描述</p>
<p>特点：</p>
<p>1、避免冲突、公平：每个节点专用速率R/N b/s<br>2、节点速率有限：R/N b/s<br>3、效率不高：节点必须等待它的传输时隙</p>
<ul>
<li><p>频分多路复用 (FDM)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将总信道带宽R b&#x2F;s划分为N个较小信道（频段，带宽为R&#x2F;N），分别分配给N个节点。复制代码</span><br></pre></td></tr></table></figure>

<p>例： 6个站点的LAN, 频带1、3、4 有分组, 频带2、5、6 空闲</p>
</li>
</ul>
<p><img src="https://user-gold-cdn.xitu.io/2017/7/20/b3941dd130a8cf6ffa9bec6a9acc0be0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="这里写图片描述" loading="lazy">这里写图片描述</p>
<p>特点：</p>
<p>1、避免冲突、公平：N个节点公平划分带宽；<br>2、节点带宽有限、效率不高<br>3、节点带宽为R/N</p>
<ul>
<li><p>码分多址（CDMA ）</p>
<ul>
<li><p>给每个节点分配一个不同的代码（CDMA代码，码片序列）；</p>
</li>
<li><p>每个节点用惟一的代码对要发送的数据进行编码；</p>
</li>
<li><p>不同节点可以同时发送，并正确到达接收方（不会互相干扰）。</p>
<p>最初：用于军事通信，抗干扰能力强；<br>目前：用于移动通信、无线多路访问信道等。</p>
</li>
</ul>
</li>
</ul>
<p><strong>2、随机接入协议</strong></p>
<p>基本思想：</p>
<ul>
<li>发送节点以信道全部速率（R b/s）发送；</li>
<li>发生冲突时，冲突的每个节点分别等待一个随机时间，再重发，直到帧(分组)发送成功。</li>
</ul>
<p>典型的随机接入协议：<br>1.ALOHA协议（要求所有的节点同步它们的传输）<br>2.载波监听多路访问CSMA协议<br>3.带冲突检测载波监听多路访问CSMA/CD</p>
<p><strong>载波监听：</strong>一个节点在传输前先听信道。如果来自另一个节点的帧正在向信道上发送，节点则等待一段随机时间。再监听信道。如果监听到该信道是空闲的，则该节点进行帧传输。否则，该节点等待另一段随机时间，继续重复这个过程。</p>
<p><strong>碰撞检测：</strong>一个传输节点在传输时一直在监听信道，如果它检测到另一个节点正在传输干扰帧，它就停止传输，用某个协议来确定它应该在什么时候再尝试下一次传输。</p>
<p><strong>CSMA</strong></p>
<p>特点：<br>1、发前监听，可减少冲突。<br>2、由于传播时延的存在，仍有可能出现冲突，并造成信道浪费。</p>
<p>例子：一个广播总线连接4个节点(A、B、C、D)传输的时空图。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/7/20/894968a735c1b1112460f17ce0d246b6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="这里写图片描述" loading="lazy">这里写图片描述</p>
<p>时间t0：节点B侦听到信道空，开始传输帧，沿着媒体传播比特。</p>
<p>时间t1（t1&gt;t0）：节点D有帧要发送。B的传输信号未到D，D检测到信道空，开始传输。很快，B的传输开始在D节点干扰D的传输（冲突）。</p>
<p>端到端信道传播时延：信号从一个节点到另一个节点所花费的传播时间。</p>
<p>传播时延越长，节点不能侦听到另一个节点已经开始传输的可能性越大。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/7/20/b077e1f482555fd5f187cafebf1d9dbe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="这里写图片描述" loading="lazy">这里写图片描述</p>
<p>很显然，这就带来了一些问题：</p>
<p>节点没有进行冲突检测，既使发生了冲突，节点仍继续传输它们的帧。但该帧已经被破坏、是无用的帧，信道传输时间被浪费。</p>
<p><strong>CSMA/CD（以太网即采用CSMA/CD协议）</strong></p>
<p>两个节点B、D在检测到冲突之后很短的时间内都放弃传输。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/7/20/20f4c9dfaef6010576d8903e865ff7ed?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="这里写图片描述" loading="lazy">这里写图片描述</p>
<p><strong>3、轮流协议</strong></p>
<ul>
<li>轮询协议</li>
</ul>
<p>指定一个主节点，以循环的方式轮询每个节点。并告诉节点能够传输的最大帧数。轮询顺序：   1-&gt;2-&gt; …… -&gt;n 。<br>主节点通过观察信道上是否有信号来判断节点何时完成了帧的发送，再询问下一节点。</p>
<p>特点<br>1、消除冲突和空时隙，效率高。<br>2、有轮询时延：活动节点不能立即传输帧，等待被轮询。<br>3、如果主节点失效，整个信道都不能用。</p>
<ul>
<li>令牌传递协议</li>
</ul>
<p>没有主节点。设置一个令牌(token，小的专用帧)；令牌以固定顺序循环传递，给节点传输机会。如：1-&gt;2-&gt; …… -&gt;n<br>节点收到令牌：<br>1.有帧要发送，传输，传完后将令牌转发到下一节点；<br>2.否则，直接将令牌转发到下一节点。</p>
<p>特点：<br>1、令牌传递是分散的，效率高。<br>2、一个节点的失效会使整个信道崩溃。<br>3、一个节点忘记释放令牌，必须恢复令牌到环中。</p>
<hr>
<h4 id="8、地址解析协议——ARP"><a href="#8、地址解析协议——ARP" class="headerlink" title="8、地址解析协议——ARP"></a><strong>8、地址解析协议——ARP</strong></h4><p>ARP协议的主要功能是将32位IP地址转换为48位物理地址。</p>
<p>工作过程：首先每台主机都会在缓冲区建立一个ARP列表，以表示IP与MAC的对应关系。当有数据包发送时，会先检查ARP列表中是否存在该IP对应的MAC地址，如果有，则直接将包发送到这个MAC地址，如果没有，就向本地网段发起一个ARP请求的广播包，网络中所有主机收到这个ARP包后，会先检查自己的IP是否与包中的IP地址一致，如果不一致则忽略，如果一致，则将发送端的MAC地址和IP地址添加到自己的ARP列表中（已存在的则覆盖），然后向发送端发送一个响应包，当发送方收到该响应包后,将接收方的IP与MAC添加到自己的ARP列表中。然后开始数据的传输。</p>
<hr>
<h4 id="9、交换机与路由器的比较"><a href="#9、交换机与路由器的比较" class="headerlink" title="9、交换机与路由器的比较"></a><strong>9、交换机与路由器的比较</strong></h4><table>
<thead>
<tr>
<th align="center">交换机</th>
<th align="center">路由器</th>
</tr>
</thead>
<tbody><tr>
<td align="center">即插即用</td>
<td align="center">不是即插即用</td>
</tr>
<tr>
<td align="center">较高的分组过滤和转发率</td>
<td align="center">网络寻址是层次的</td>
</tr>
<tr>
<td align="center">可能产生“广播风暴”</td>
<td align="center">冗余路径分组不会在路由器中循环</td>
</tr>
</tbody></table>
<p>总结：小网络采用交换机，大网络采用路由器</p>
<hr>
<h4 id="10、简答题部分："><a href="#10、简答题部分：" class="headerlink" title="10、简答题部分："></a><strong>10、简答题部分：</strong></h4><h5 id="RIP工作原理："><a href="#RIP工作原理：" class="headerlink" title="RIP工作原理："></a><strong>RIP工作原理：</strong></h5><p>　　RIP协议是基于距离向量算法的一种动态路由协议，路由实现时，RIP作为一个系统长驻进程（daemon）而存在于路由器中，负责从网络系统的其它路由器接收路由信息，从而对本地IP层路由表作动态的维护，保证IP层发送报文时选择正确的路由。同时负责广播本路由器的路由信息，通知相邻路由器作相应的修改。RIP协议处于UDP协议的上层，RIP所接收的路由信息都封装在UDP协议的数据报中，所以它是种应用层协议。</p>
<hr>
<h5 id="说明局域网的介质访问控制协议的主要目的，并概述CSMA-CD协议的工作过程。"><a href="#说明局域网的介质访问控制协议的主要目的，并概述CSMA-CD协议的工作过程。" class="headerlink" title="说明局域网的介质访问控制协议的主要目的，并概述CSMA/CD协议的工作过程。"></a><strong>说明局域网的介质访问控制协议的主要目的，并概述CSMA/CD协议的工作过程。</strong></h5><p>　　主要目的是：提供寻址及媒体存取的控制方式，使得不同设备或网络上的节点可以在多点的网络上通讯而不互相冲突<br>工作过程：CSMA/CD（载波侦听多路访问/冲突检测）在发送帧的同时对信道进行侦听，以确定是否发生冲突，若在发送数据过程中检测到了冲突，则发送阻塞信息并立即停止发送数据，然后等待随机时间再次发送。</p>
<hr>
<h5 id="MAC地址和IP地址有什么本质区别？"><a href="#MAC地址和IP地址有什么本质区别？" class="headerlink" title="MAC地址和IP地址有什么本质区别？"></a><strong>MAC地址和IP地址有什么本质区别？</strong></h5><p>　　MAC地址是数据链路层地址，IP地址是网络层地址；<br>　　MAC地址没有结构性涵义，IP地址有结构性涵义，表示计算机与网络之间的连接关系。<br>　　IP地址就是给每个连接在因特网上的主机（或路由器）分配一个在全世界范围内是唯一的32位的标识符，从而把整个因特网看成是一个单一的，抽象的网络；在实际网络的链路上传输数据帧时，最终还是要用到物理地址；<br>　　MAC地址在一定程度属于硬件一致，基于物理层。能标识具体的链路通信对象，IP地址给予逻辑域的划分，不受硬件控制；</p>
<hr>
<h5 id="作为中间系统。转发器、网桥、路由器和网关有何区别？"><a href="#作为中间系统。转发器、网桥、路由器和网关有何区别？" class="headerlink" title="作为中间系统。转发器、网桥、路由器和网关有何区别？"></a><strong>作为中间系统。转发器、网桥、路由器和网关有何区别？</strong></h5><p>转发器：是物理层中间设备。主要作用是在物理层中实现透明的二进制比特复制，以补偿信号衰减。</p>
<p>网桥：是数据链路层的中间设备。主要作用是根据MAC帧的目的地址对收到的帧进行转发。网桥具有过滤帧的功能。</p>
<p>路由器：网络层的中间设备。作用是在互连网中完成路由选择的功能。</p>
<p>网关：网络层以上的中间系统。作用是在高层进行协议的转换以连接两个不兼容的系统。</p>
<hr>
<h5 id="试简单说明下列协议的作用：IP、ARP、RARP和ICMP。"><a href="#试简单说明下列协议的作用：IP、ARP、RARP和ICMP。" class="headerlink" title="试简单说明下列协议的作用：IP、ARP、RARP和ICMP。"></a><strong>试简单说明下列协议的作用：IP、ARP、RARP和ICMP。</strong></h5><p>IP协议：实现网络互连。使参与互连的性能各异的网络从用户看起来好像是一个统一的网络。</p>
<p>ARP协议：完成IP地址到MAC地址的映射。</p>
<p>RARP：使只知道自己硬件地址的主机能够知道其IP地址。</p>
<p>ICMP：允许主机或路由器报告差错情况和提供有关异常情况的报告。从而提高IP数据报交付成功的机会。</p>
<hr>
<h5 id="C-S模式和P2P模式的区别"><a href="#C-S模式和P2P模式的区别" class="headerlink" title="C/S模式和P2P模式的区别"></a><strong>C/S模式和P2P模式的区别</strong></h5><p>①：C/S结构是一种客户端/服务器结构，客户端与服务器之间是主从关系，是一种一对多的模式。它的信息和数据需要保存在服务器上，若用户要浏览和下载信息，必须先访问服务器，才能浏览和下载信息，而且客户机之间没有交互的能力。相反，P2P模式不分提供信息服务器和索取信息的客户端，每一台电脑都是信息的发布者和索取者，对等点之间能交互，无需使用服务器。<br>②：C/S模式中信息的存储和管理比较集中、稳定，服务器只公布用户想公布的信息，并且会在服务器中稳定地保存一段时间，该服务器通常也不间断的运行在网络间。而P2P缺乏安全机制，P2P是能给用户带来方便，但也会带来大量垃圾信息，而且各个对等点可以随便进入或者退出网络，会造成网络的不稳定。<br>③：从安全的角度来说，因为系统会出现漏洞，而C/S模式采用集中管理模式，客户端只能被动地从服务器获取信息，所以一旦客户端出了差错，并不会影响整个系统。<br>④：C/S模式的管理软件更新的较快，要跟上技术，必须花费大量精力和金钱在软件的更新换代上，而且工作人员要维护服务器和数据库，也要耗费大量资金。相反的P2P不需要服务器，也就不必耗费大量资金，而且每个对等点都可以在网络上发布和分享信息，这使得闲散资源得以充分的利用。 </p>
<hr>
<h5 id="在一个互联网中，能否使用一个很大的交换机-switch-来代替互联网中很多的路由器？"><a href="#在一个互联网中，能否使用一个很大的交换机-switch-来代替互联网中很多的路由器？" class="headerlink" title="在一个互联网中，能否使用一个很大的交换机(switch)来代替互联网中很多的路由器？"></a><strong>在一个互联网中，能否使用一个很大的交换机(switch)来代替互联网中很多的路由器？</strong></h5><p>　　不行。交换机和路由器的功能是很不一样的。<br>    　　交换机可在一个单个的网络中和若干个计算机相连，并且可以将一个计算机发送过来的帧转发给另一个计算机。从这一点上看，交换机具有集线器的转发帧的功能。<br>但交换机比集线器的功能强很多。集线器在同一时间只允许一个计算机和其他计算机进行通信，但交换机允许多个计算机同时进行通信。<br>　　路由器连接两个或好几个网络。路由器可在网络之间转发分组（即IP数据报）。特别是，这些互连的网络可以是异构的。<br>因此，如果是许多相同类型的网络互连在一起，那么用一个很大的交换机（如果能够找得到）代替原来的一些路由器是可以的。但若这些互连的网络是异构的网络，那么就必须使用路由器来进行互连。</p>
<hr>
<h5 id="路由表中只给出到目的网络的下一跳路由器的IP地址，然后在下一个路由器的路由表中再给出再下一跳的路由器的IP地址，最后才能到达目的网络进行直接交付。采用这样的方法有什么好处？"><a href="#路由表中只给出到目的网络的下一跳路由器的IP地址，然后在下一个路由器的路由表中再给出再下一跳的路由器的IP地址，最后才能到达目的网络进行直接交付。采用这样的方法有什么好处？" class="headerlink" title="路由表中只给出到目的网络的下一跳路由器的IP地址，然后在下一个路由器的路由表中再给出再下一跳的路由器的IP地址，最后才能到达目的网络进行直接交付。采用这样的方法有什么好处？"></a><strong>路由表中只给出到目的网络的下一跳路由器的IP地址，然后在下一个路由器的路由表中再给出再下一跳的路由器的IP地址，最后才能到达目的网络进行直接交付。采用这样的方法有什么好处？</strong></h5><p>　　这样做的最大好处就是使得路由选择成为动态的，十分灵活。当IP数据报传送到半途时，若网络的情况发生了变化（如网络拓扑变化或出现了拥塞），那么中途的路由器就可以改变其下一跳路由，从而实现了动态路由选择。 　　</p>
<hr>
<h5 id="IP协议有分片的功能，但广域网中的分组则不必分片。这是为什么？"><a href="#IP协议有分片的功能，但广域网中的分组则不必分片。这是为什么？" class="headerlink" title="IP协议有分片的功能，但广域网中的分组则不必分片。这是为什么？"></a><strong>IP协议有分片的功能，但广域网中的分组则不必分片。这是为什么？</strong></h5><p>　　IP数据报可能要经过许多个网络，而源主机事先并不知道数据报后面要经过的这些网络所能通过的分组的最大长度是多少。等到IP数据报转发到某个网络时可能才发现数据报太长了，因此在这时就必须进行分片。<br>　　<strong>重点内容</strong>但广域网能够通过的分组的最大长度是该广域网中所有主机都事先知道的。源主机不可能发送网络不支持的过长分组。因此广域网就没有必要将已经发送出的分组再进行分片。</p>
<hr>
<h5 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a><strong>TCP三次握手</strong></h5><p>　　在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。<br>　　第一次握手：建立连接时，客户端发送SYN包(SYN=j)到服务器，并进入SYN_SEND状态，等待服务器确认；<br>　　第二次握手：服务器收到SYN包，必须确认客户的SYN（ACK=j+1），同时自己也发送一个SYN包（SYN=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；<br>　　三次握手协议第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ACK=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</p>
<p>通过这样的三次握手，客户端与服务端建立起可靠的双工的连接，开始传送数据。 </p>
<p>三次握手的最主要目的是保证连接是双工的，可靠更多的是通过重传机制来保证的。 </p>
<p>但是为什么一定要进行三次握手来保证连接是双工的呢，一次不行么？两次不行么？ </p>
<p>“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。</p>
<hr>
<h5 id="简述IPv4到IPv6的过渡技术"><a href="#简述IPv4到IPv6的过渡技术" class="headerlink" title="简述IPv4到IPv6的过渡技术"></a><strong>简述IPv4到IPv6的过渡技术</strong></h5><p>1、双协议栈技术<br>2、隧道技术<br>3、网络地址转换技术</p>
<hr>
<p>LAN：是局部地区网络的简称，是一种通用普及的局域网络，其主要特点是：<br>（1）地理范围小；<br>（2）具有较高的通频带宽；<br>（3）数据传输可靠，误码率低；<br>（4）结构简单，容易实现；<br>（5）网络的控制趋向于分布式；<br>（6）通常归单一组织所有，更容易进行设备的更新和新技术的引用。</p>
<hr>
<p>TCP优缺点：</p>
<p>优点：<br>        1．TCP提供以认可的方式显式地创建和终止连接。<br>        2．TCP保证可靠的、顺序的（数据包以发送的顺序接收）以及不会重复的数据传输。<br>        3．TCP处理流控制。<br>        4．允许数据优先<br>        5．如果数据没有传送到，则TCP套接口返回一个出错状态条件。<br>        6．TCP通过保持连续并将数据块分成更小的分片来处理大数据块。—无需程序员知道</p>
<p>缺点： TCP在转移数据时必须创建（并保持）一个连接。这个连接给通信进程增加了开销，让它比UDP速度要慢。</p>
<p>UDP优缺点：<br>        1．UDP不要求保持一个连接<br>        2．UDP没有因接收方认可收到数据包（或者当数据包没有正确抵达而自动重传）而带来的开销。<br>        3．设计UDP的目的是用于短应用和控制消息<br>        4．在一个数据包连接一个数据包的基础上，UDP要求的网络带宽比TCP更小。</p>
<hr>
<p>TCP编程的服务器端一般步骤是：</p>
<p>1、创建一个socket，用函数socket()；<br>2、设置socket属性，用函数setsockopt(); * 可选<br>3、绑定IP地址、端口等信息到socket上，用函数bind();<br>4、开启监听，用函数listen()；<br>5、接收客户端上来的连接，用函数accept()；<br>6、收发数据，用函数send()和recv()，或者read()和write();<br>7、关闭网络连接；<br>8、关闭监听；</p>
<p>TCP编程的客户端一般步骤是：</p>
<p>1、创建一个socket，用函数socket()；<br>2、设置socket属性，用函数setsockopt(); <em>可选3、绑定IP地址、端口等信息到socket上，用函数bind();</em> 可选<br>4、设置要连接的对方的IP地址和端口等属性；<br>5、连接服务器，用函数connect()；<br>6、收发数据，用函数send()和recv()，或者read()和write();<br>7、关闭网络连接；</p>
<p>UDP编程的服务器端一般步骤是：</p>
<p>1、创建一个socket，用函数socket()；<br>2、设置socket属性，用函数setsockopt();* 可选<br>3、绑定IP地址、端口等信息到socket上，用函数bind();<br>4、循环接收数据，用函数recvfrom();<br>5、关闭网络连接；</p>
<p>UDP编程的客户端一般步骤是：</p>
<p>1、创建一个socket，用函数socket()；<br>2、设置socket属性，用函数setsockopt(); <em>可选3、绑定IP地址、端口等信息到socket上，用函数bind();</em> 可选<br>4、设置对方的IP地址和端口等属性;<br>5、发送数据，用函数sendto();<br>6、关闭网络连接；</p>
<hr>
<p>301重定向与302重定向的区别：</p>
<p>301重定向是永久的重定向，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址。</p>
<p>302重定向是临时的重定向，搜索引擎会抓取新的内容而保留旧的网址。因为服务器返回302代码，搜索引擎认为新的网址只是暂时的。</p>
<hr>
<p>目前web上的消息通讯方式主要有以下几种：</p>
<p>1、轮询：隔一段时间访问服务器，服务器不管有没有新消息都立刻返回。</p>
<p>2、长连接：页面向服务器发出请求，由服务器决定什么时候返回。（如果有新消息则立刻返回，没有的话就保持连接，直到有新消息才返回）</p>
<p>3、WebSocket：类似Java Socket，由Http请求模拟实现的Socket。它实现了浏览器与服务器全双工(full-duplex)通信——允许服务器主动发送信息给客户端。</p>
<hr>
<p>从输入网址到显示网页，过程 ？</p>
<p>DNS域名解析 –&gt; 发起TCP的三次握手 –&gt; 建立TCP连接后发起http请求 –&gt; 服务器响应http请求，浏览器得到html代码 –&gt; 浏览器解析html代码，并请求html代码中的资源（如JavaScript、css、图片等） –&gt; 浏览器对页面进行渲染呈现给用户。</p>
<hr>
<p>一个HTTP请求报文由请求行（request line）、请求头部（header）、空行和请求数据4个部分组成</p>
<p>1.请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。<br>2.请求头部由关键字/值对组成，每行一对，关键字和值用英文冒号“:”分隔。请求头部通知服务器有关于客户端请求的信息。<br>3.最后一个请求头之后是一个空行，发送回车符和换行符，通知服务器以下不再有请求头。<br>4.请求数据不在GET方法中使用，而是在POST方法中使用。</p>
<p>HTTP响应也由三个部分组成，分别是：状态行、消息报头、响应正文。</p>
<hr>
<p>递归查询是一种DNS 服务器的查询模式，在该模式下DNS 服务器接收到客户机请求，必须使用一个准确的查询结果回复客户机。如果DNS 服务器本地没有存储查询DNS 信息，那么该服务器会询问其他服务器，并将返回的查询结果提交给客户机。</p>
<p>DNS 服务器另外一种查询方式为迭代查询，DNS 服务器会向客户机提供其他能够解析查询请求的DNS 服务器地址，当客户机发送查询请求时，DNS 服务器并不直接回复查询结果，而是告诉客户机另一台DNS 服务器地址，客户机再向这台DNS 服务器提交请求，依次循环直到返回查询的结果为止。</p>
<p>从客户端到本地DNS服务器是属于递归查询，而DNS服务器之间就是的交互查询就是迭代查询。</p>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>H3C常用命令</title>
    <url>/2019/05/10/38/</url>
    <content><![CDATA[<h4 id="1-配置文件相关命令"><a href="#1-配置文件相关命令" class="headerlink" title="1.配置文件相关命令"></a>1.配置文件相关命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Quidway]display current-configuration         &#x2F;&#x2F;显示当前生效的配置  </span><br><span class="line">[Quidway]display saved-configuration           &#x2F;&#x2F;显示flash中配置文件，即下次上电启动时所用的配置文件</span><br><span class="line">&lt;Quidway&gt;reset saved-configuration             &#x2F;&#x2F;重置旧的配置文件</span><br><span class="line">&lt;Quidway&gt;reboot                                &#x2F;&#x2F;交换机重启</span><br><span class="line">&lt;Quidway&gt;display version                       &#x2F;&#x2F;显示系统版本信息</span><br><span class="line">12345</span><br></pre></td></tr></table></figure>

<h4 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2.基本配置"></a>2.基本配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Quidway]super password                              &#x2F;&#x2F;修改特权用户密码</span><br><span class="line">[Quidway]sysname                                     &#x2F;&#x2F;交换机命名</span><br><span class="line">[Quidway]interface ethernet 0&#x2F;1                      &#x2F;&#x2F;进入接口视图</span><br><span class="line">[Quidway]interface vlan x                            &#x2F;&#x2F;进入接口视图</span><br><span class="line">[Quidway-Vlan-interfacex]ip address 10.65.1.1 255.255.0.0    &#x2F;&#x2F;配置VLAN的IP地址</span><br><span class="line">[Quidway]ip route-static 0.0.0.0 0.0.0.0 10.65.1.2           &#x2F;&#x2F;静态路由＝网关</span><br><span class="line">123456</span><br></pre></td></tr></table></figure>

<h4 id="3-telnet配置"><a href="#3-telnet配置" class="headerlink" title="3.telnet配置"></a>3.telnet配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Quidway]user-interface vty 0 4                              &#x2F;&#x2F;进入虚拟终端</span><br><span class="line">[S3026-ui-vty0-4]authentication-mode password                &#x2F;&#x2F;设置口令模式</span><br><span class="line">[S3026-ui-vty0-4]set authentication-mode password simple 222 &#x2F;&#x2F;设置口令</span><br><span class="line">[S3026-ui-vty0-4]user privilege level 3                      &#x2F;&#x2F;用户级别</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>

<h4 id="4-端口配置"><a href="#4-端口配置" class="headerlink" title="4.端口配置"></a>4.端口配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Quidway-Ethernet0&#x2F;1]duplex &#123;half|full|auto&#125;            &#x2F;&#x2F;配置端口工作状态</span><br><span class="line">[Quidway-Ethernet0&#x2F;1]speed &#123;10|100|auto&#125;                &#x2F;&#x2F;配置端口工作速率</span><br><span class="line">[Quidway-Ethernet0&#x2F;1]flow-control                       &#x2F;&#x2F;配置端口流控</span><br><span class="line">[Quidway-Ethernet0&#x2F;1]mdi &#123;across|auto|normal&#125;                &#x2F;&#x2F;配置端口平接扭接</span><br><span class="line">[Quidway-Ethernet0&#x2F;1]port link-type &#123;trunk|access|hybrid&#125;    &#x2F;&#x2F;设置端口工作模式</span><br><span class="line">[Quidway-Ethernet0&#x2F;1]undo shutdown                      &#x2F;&#x2F;激活端口</span><br><span class="line">[Quidway-Ethernet0&#x2F;2]quit                               &#x2F;&#x2F;退出系统视图</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure>

<h4 id="5-链路聚合配置"><a href="#5-链路聚合配置" class="headerlink" title="5.链路聚合配置"></a>5.链路聚合配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[DeviceA] link-aggregation group 1 mode manual     &#x2F;&#x2F;创建手工聚合组1</span><br><span class="line">[DeviceA] interface ethernet 1&#x2F;0&#x2F;1                 &#x2F;&#x2F;将以太网端口Ethernet1&#x2F;0&#x2F;1加入聚合组1  </span><br><span class="line">[DeviceA-Ethernet1&#x2F;0&#x2F;1] port link-aggregation group 1</span><br><span class="line">[DeviceA-Ethernet1&#x2F;0&#x2F;1] interface ethernet 1&#x2F;0&#x2F;2              &#x2F;&#x2F;将以太网端口Ethernet1&#x2F;0&#x2F;1加入聚合组1</span><br><span class="line">[DeviceA-Ethernet1&#x2F;0&#x2F;2] port link-aggregation group 1</span><br><span class="line">[DeviceA] link-aggregation group 1 service-type tunnel        &#x2F;&#x2F;在手工聚合组的基础上创建Tunnel业务环回组</span><br><span class="line">[DeviceA] interface ethernet 1&#x2F;0&#x2F;1                      &#x2F;&#x2F;将以太网端口Ethernet1&#x2F;0&#x2F;1加入业务环回组</span><br><span class="line">[DeviceA-Ethernet1&#x2F;0&#x2F;1] undo stp</span><br><span class="line">[DeviceA-Ethernet1&#x2F;0&#x2F;1] port link-aggregation group 1</span><br><span class="line">123456789</span><br></pre></td></tr></table></figure>

<h4 id="6-端口镜像"><a href="#6-端口镜像" class="headerlink" title="6.端口镜像"></a>6.端口镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Quidway]monitor-port &lt;interface_type interface_num&gt;       　&#x2F;&#x2F;指定镜像端口</span><br><span class="line">[Quidway]port mirror &lt;interface_type interface_num&gt;    　　&#x2F;&#x2F;指定被镜像端口</span><br><span class="line">[Quidway]port mirror int_list observing-port int_type int_num &#x2F;&#x2F;指定镜像和被镜像</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<h4 id="7-VLAN配置"><a href="#7-VLAN配置" class="headerlink" title="7.VLAN配置"></a>7.VLAN配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Quidway]vlan 3                                  　　　　　&#x2F;&#x2F;创建VLAN</span><br><span class="line">[Quidway-vlan3]port ethernet 0&#x2F;1 to ethernet 0&#x2F;4 　　　　　&#x2F;&#x2F;在VLAN中增加端口，配置基于access的VLAN</span><br><span class="line">[Quidway-Ethernet0&#x2F;2]port access vlan 3          　　　　　&#x2F;&#x2F;当前端口加入到VLAN  </span><br><span class="line"></span><br><span class="line">注意：缺省情况下，端口的链路类型为Access类型，所有Access端口均属于且只属于VLAN1</span><br><span class="line">12345</span><br></pre></td></tr></table></figure>

<p>配置基于trunk的VLAN</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Quidway-Ethernet0&#x2F;2]port link-type trunk                 &#x2F;&#x2F;设置当前端口为trunk</span><br><span class="line">[Quidway-Ethernet0&#x2F;2]port trunk permit vlan &#123;ID|All&#125;    　&#x2F;&#x2F;设trunk允许的VLAN  </span><br><span class="line"></span><br><span class="line">注意：所有端口缺省情况下都是允许VLAN1的报文通过的  </span><br><span class="line"></span><br><span class="line">[Quidway-Ethernet0&#x2F;2]port trunk pvid vlan 3    　　　　　 &#x2F;&#x2F;设置trunk端口的PVID</span><br><span class="line">123456</span><br></pre></td></tr></table></figure>

<p>配置基于Hybrid端口的VLAN</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Quidway-Ethernet0&#x2F;2]port link-type hybrid                      &#x2F;&#x2F;配置端口的链路类型为Hybrid类型</span><br><span class="line">[Quidway-Ethernet0&#x2F;2]port hybrid vlan vlan-id-list &#123; tagged | untagged &#125;     &#x2F;&#x2F;允许指定的VLAN通过当前Hybrid端口  </span><br><span class="line"></span><br><span class="line">注意：缺省情况下，所有Hybrid端口只允许VLAN1通过  </span><br><span class="line"></span><br><span class="line">[Quidway-Ethernet0&#x2F;2]port hybrid pvid vlan vlan-id              &#x2F;&#x2F;设置Hybrid端口的缺省VLAN  </span><br><span class="line"></span><br><span class="line">注意：缺省情况下，Hybrid端口的缺省VLAN为VLAN1</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure>

<p>VLAN描述</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Quidway]description string                      　　　　　&#x2F;&#x2F;指定VLAN描述字符</span><br><span class="line">[Quidway]description                         　　　　　　  &#x2F;&#x2F;删除VLAN描述字符</span><br><span class="line">[Quidway]display vlan [vlan_id]                           &#x2F;&#x2F;查看VLAN设置</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<p>私有VLAN配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA-vlanx]isolate-user-vlan enable          　　　　　  &#x2F;&#x2F;设置主vlan</span><br><span class="line">[SwitchA]Isolate-user-vlan &lt;x&gt; secondary &lt;list&gt;    　　　　　&#x2F;&#x2F;设置主vlan包括的子vlan</span><br><span class="line">[Quidway-Ethernet0&#x2F;2]port hybrid pvid vlan &lt;id&gt;    　　　　　&#x2F;&#x2F;设置vlan的pvid</span><br><span class="line">[Quidway-Ethernet0&#x2F;2]port hybrid pvid             　　　　　 &#x2F;&#x2F;删除vlan的pvid</span><br><span class="line">[Quidway-Ethernet0&#x2F;2]port hybrid vlan vlan_id_list untagged &#x2F;&#x2F;设置无标识的vlan  </span><br><span class="line"></span><br><span class="line">如果包的vlan id与PVID一致，则去掉vlan信息. 默认PVID&#x3D;1。</span><br><span class="line">所以设置PVID为所属vlan id, 设置可以互通的vlan为untagged。</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure>

<h4 id="8-STP配置"><a href="#8-STP配置" class="headerlink" title="8.STP配置"></a>8.STP配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Quidway]stp &#123;enable|disable&#125;                               &#x2F;&#x2F;设置生成树,默认关闭</span><br><span class="line">[Quidway]stp mode rstp                                      &#x2F;&#x2F;设置生成树模式为rstp</span><br><span class="line">[Quidway]stp priority 4096                         　　　　 &#x2F;&#x2F;设置交换机的优先级</span><br><span class="line">[Quidway]stp root &#123;primary|secondary&#125;             　　　　　&#x2F;&#x2F;设置为根或根的备份</span><br><span class="line">[Quidway-Ethernet0&#x2F;1]stp cost 200                　　　　　 &#x2F;&#x2F;设置交换机端口的花费</span><br><span class="line">12345</span><br></pre></td></tr></table></figure>

<p>MSTP配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置MST域名为info，MSTP修订级别为1，VLAN映射关系为VLAN2～VLAN10映射到生成树实例1上，VLAN20～VLAN30映射生成树实例2上。</span><br><span class="line"></span><br><span class="line">&lt;Sysname&gt; system-view</span><br><span class="line">[Sysname] stp region-configuration</span><br><span class="line">[Sysname-mst-region] region-name info</span><br><span class="line">[Sysname-mst-region] instance 1 vlan 2 to 10</span><br><span class="line">[Sysname-mst-region] instance 2 vlan 20 to 30</span><br><span class="line">[Sysname-mst-region] revision-level 1</span><br><span class="line">[Sysname-mst-region] active region-configuration</span><br><span class="line">123456789</span><br></pre></td></tr></table></figure>

<h4 id="9-MAC地址表的操作"><a href="#9-MAC地址表的操作" class="headerlink" title="9.MAC地址表的操作"></a>9.MAC地址表的操作</h4><p>在系统视图下添加MAC地址表项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Quidway]mac-address &#123; static | dynamic | blackhole &#125; mac-address interface interface-type interface-number vlan vlan-id  &#x2F;&#x2F;添加MAC地址表项  </span><br><span class="line"></span><br><span class="line">在添加MAC地址表项时，命令中interface参数指定的端口必须属于vlan参数指定的VLAN，否则将添加失败。</span><br><span class="line">如果vlan参数指定的VLAN是动态VLAN，在添加静态MAC地址之后，会自动变为静态VLAN。</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>

<p>在以太网端口视图下添加MAC地址表项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Quidway-Ethernet0&#x2F;2]mac-address &#123; static | dynamic | blackhole &#125; mac-address vlan vlan-id  </span><br><span class="line"></span><br><span class="line">在添加MAC地址表项时，当前的端口必须属于命令中vlan参数指定的VLAN，否则将添加失败；</span><br><span class="line">如果vlan参数指定的VLAN是动态VLAN，在添加静态MAC地址之后，会自动变为静态VLAN。</span><br><span class="line">1234</span><br><span class="line">[Quidway]mac-address timer &#123; aging age | no-aging &#125;     &#x2F;&#x2F;设置MAC地址表项的老化时间  </span><br><span class="line"></span><br><span class="line">注意：缺省情况下，MAC地址表项的老化时间为300秒，使用参数no-aging时表示不对MAC地址表项进行老化。</span><br><span class="line">MAC地址老化时间的配置对所有端口都生效，但地址老化功能只对动态的（学习到的或者用户配置可老化的）MAC地址表项起作用。</span><br><span class="line">1234</span><br><span class="line">[Quidway-Ethernet0&#x2F;2]mac-address max-mac-count count   &#x2F;&#x2F;设置端口最多可以学习到的MAC地址数量  </span><br><span class="line"></span><br><span class="line">注意：缺省情况下，没有配置对端口学习MAC地址数量的限制。反之，如果端口启动了MAC地址认证和端口安全功能，则不能配置该端口的最大MAC地址学习个数。</span><br><span class="line">123</span><br><span class="line">[Quidway-Ethernet0&#x2F;2]port-mac start-mac-address       &#x2F;&#x2F;配置以太网端口MAC地址的起始值  </span><br><span class="line"></span><br><span class="line">在缺省情况下，E126&#x2F;E126A交换机的以太网端口是没有配置MAC地址的，因此当交换机在发送二层协议报文（例如STP）时，由于无法取用发送端口的MAC地址，</span><br><span class="line">将使用该协议预置的MAC地址作为源地址填充到报文中进行发送。在实际组网中，由于多台设备都使用相同的源MAC地址发送二层协议报文，会造成在某台设备的不</span><br><span class="line">同端口学习到相同MAC地址的情况，可能会对MAC地址表的维护产生影响。</span><br><span class="line">12345</span><br><span class="line">[Quidway]display mac-address         &#x2F;&#x2F;显示地址表信息</span><br><span class="line">[Quidway]display mac-address aging-time     &#x2F;&#x2F;显示地址表动态表项的老化时间</span><br><span class="line">[Quidway]display port-mac            &#x2F;&#x2F;显示用户配置的以太网端口MAC地址的起始值</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<h4 id="10-GVRP配置-Generic-Attribute-Registration-Protocol"><a href="#10-GVRP配置-Generic-Attribute-Registration-Protocol" class="headerlink" title="10.GVRP配置(Generic Attribute Registration Protocol)"></a>10.GVRP配置(Generic Attribute Registration Protocol)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] gvrp      &#x2F;&#x2F;开启全局GVRP</span><br><span class="line">[SwitchA-Ethernet1&#x2F;0&#x2F;1] gvrp     &#x2F;&#x2F;在以太网端口Ethernet1&#x2F;0&#x2F;1上开启GVRP</span><br><span class="line">[SwitchE-Ethernet1&#x2F;0&#x2F;1] gvrp registration &#123; fixed | forbidden | normal &#125;   &#x2F;&#x2F; 配置GVRP端口注册模式，缺省为normal </span><br><span class="line">[SwitchA] display garp statistics [ interface interface-list ]    &#x2F;&#x2F;显示GARP统计信息</span><br><span class="line">[SwitchA] display garp timer [ interface interface-list ]       &#x2F;&#x2F;显示GARP定时器的值</span><br><span class="line">[SwitchA] display gvrp statistics [ interface interface-list ]    &#x2F;&#x2F;显示GVRP统计信息</span><br><span class="line">[SwitchA] display gvrp status                                             &#x2F;&#x2F;显示GVRP的全局状态信息</span><br><span class="line">[SwitchA] display gvrp statusreset garp statistics [ interface interface-list ]    &#x2F;&#x2F;清除GARP统计信息</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure>

<h4 id="11-DLDP配置-Device-Link-Detection-Protocol"><a href="#11-DLDP配置-Device-Link-Detection-Protocol" class="headerlink" title="11.DLDP配置(Device Link Detection Protocol)"></a>11.DLDP配置(Device Link Detection Protocol)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] interface gigabitethernet 1&#x2F;1&#x2F;1        &#x2F;&#x2F; 配置端口工作在强制全双工模式，速率为1000Mbit&#x2F;s</span><br><span class="line">[SwitchA-GigabitEthernet1&#x2F;1&#x2F;1] duplex full</span><br><span class="line">[SwitchA-GigabitEthernet1&#x2F;1&#x2F;1] speed 1000</span><br><span class="line">[SwitchA] dldp enable         &#x2F;&#x2F;全局开启DLDP</span><br><span class="line">[SwitchA] dldp interval 15    &#x2F;&#x2F;设置发送DLDP报文的时间间隔为15秒。</span><br><span class="line">[SwitchA]  dldp work-mode &#123; enhance | normal &#125;   &#x2F;&#x2F; 配置DLDP协议的工作模式为加强模式，缺省为normal</span><br><span class="line">[SwitchA] dldp unidirectional-shutdown  &#123; auto | manual &#125;    &#x2F;&#x2F; 配置DLDP单向链路操作模式为自动模式，缺省为auto</span><br><span class="line">[SwitchA] display dldp 1      &#x2F;&#x2F;查看DLDP状态</span><br><span class="line"></span><br><span class="line">当光纤交叉连接时，可能有两个或三个端口处于Disable状态，剩余端口处于Inactive状态。</span><br><span class="line">当光纤一端连接正确，一端未连接时：</span><br><span class="line">如果DLDP的工作模式为normal，则有收光的一端处于Advertisement状态，没有收光的一端处于Inactive状态。</span><br><span class="line">如果DLDP的工作模式为enhance，则有收光的一端处于Disable状态，没有收光的一端处于Inactive状态。</span><br><span class="line">dldp reset命令在全局下可以重置所有端口的DLDP状态，在接口下可以充值该端口的DLDP状态。</span><br><span class="line">1234567891011121314</span><br></pre></td></tr></table></figure>

<h4 id="12-端口隔离配置"><a href="#12-端口隔离配置" class="headerlink" title="12.端口隔离配置"></a>12.端口隔离配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过端口隔离特性，用户可以将需要进行控制的端口加入到一个隔离组中，实现隔离组中的端口之间二层、三层数据的隔离，既增强了网络的安全性，也为用户</span><br><span class="line">提供了灵活的组网方案。</span><br><span class="line"></span><br><span class="line">[Sysname] interface ethernet1&#x2F;0&#x2F;2   &#x2F;&#x2F;将以太网端口Ethernet1&#x2F;0&#x2F;2加入隔离组</span><br><span class="line">[Sysname-Ethernet1&#x2F;0&#x2F;2] port isolate</span><br><span class="line">[Sysname]display isolate port      &#x2F;&#x2F;显示隔离组中的端口信息  </span><br><span class="line"></span><br><span class="line">配置隔离组后，只有隔离组内各个端口之间的报文不能互通，隔离组内端口与隔离组外端口以及隔离组外端口之间的通信不会受到影响。</span><br><span class="line">端口隔离特性与以太网端口所属的VLAN无关。</span><br><span class="line">当汇聚组中的某个端口加入或离开隔离组后，本设备中同一汇聚组内的其它端口，均会自动加入或离开该隔离组。</span><br><span class="line">对于既处于某个聚合组又处于某个隔离组的一组端口，其中的一个端口离开聚合组时不会影响其他端口，即其他端口仍将处于原聚合组和原隔离组中。</span><br><span class="line">如果某个聚合组中的端口同时属于某个隔离组，当在系统视图下直接删除该聚合组后，该聚合组中的端口仍将处于该隔离组中。</span><br><span class="line">当隔离组中的某个端口加入聚合组时，该聚合组中的所有端口，将会自动加入隔离组中。</span><br><span class="line">12345678910111213</span><br></pre></td></tr></table></figure>

<h4 id="13-端口安全配置"><a href="#13-端口安全配置" class="headerlink" title="13.端口安全配置"></a>13.端口安全配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Switch] port-security enable       &#x2F;&#x2F;启动端口安全功能</span><br><span class="line">[Switch] interface Ethernet 1&#x2F;0&#x2F;1   &#x2F;&#x2F;进入以太网Ethernet1&#x2F;0&#x2F;1端口视图</span><br><span class="line">[Switch-Ethernet1&#x2F;0&#x2F;1] port-security max-mac-count 80     &#x2F;&#x2F; 设置端口允许接入的最大MAC地址数为80</span><br><span class="line">[Switch-Ethernet1&#x2F;0&#x2F;1] port-security port-mode autolearn  &#x2F;&#x2F; 配置端口的安全模式为autolearn</span><br><span class="line">[Switch-Ethernet1&#x2F;0&#x2F;1] mac-address security 0001-0002-0003 vlan 1      &#x2F;&#x2F;将Host 的MAC地址0001-0002-0003作为Security MAC添加到VLAN 1中</span><br><span class="line">[Switch-Ethernet1&#x2F;0&#x2F;1] port-security intrusion-mode disableport-temporarily   &#x2F;&#x2F; 设置Intrusion Protection特性被触发后，暂时关闭该端口</span><br><span class="line">[Switch]port-security timer disableport 30       &#x2F;&#x2F;关闭时间为30秒</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure>

<h4 id="14-端口绑定配置"><a href="#14-端口绑定配置" class="headerlink" title="14.端口绑定配置"></a>14.端口绑定配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过端口绑定特性，网络管理员可以将用户的MAC地址和IP地址绑定到指定的端口上。进行绑定操作后，交换机只对从该端口收到的指定MAC地址和IP地</span><br><span class="line">址的用户发出的报文进行转发，提高了系统的安全性，增强了对网络安全的监控。</span><br><span class="line"></span><br><span class="line">[SwitchA-Ethernet1&#x2F;0&#x2F;1] am user-bind mac-addr 0001-0002-0003 ip-addr 10.12.1.1   &#x2F;&#x2F; 将Host 1的MAC地址和IP地址绑定到Ethernet1&#x2F;0&#x2F;1端口</span><br><span class="line"></span><br><span class="line">有的交换机上绑定的配置不一样</span><br><span class="line"></span><br><span class="line">[SwitchA] interface ethernet 1&#x2F;0&#x2F;2</span><br><span class="line">[SwitchA-Ethernet1&#x2F;0&#x2F;2] user-bind ip-address 192.168.0.3 mac-address 0001-0203-0405</span><br><span class="line">123456789</span><br></pre></td></tr></table></figure>

<p>端口过滤配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] interface ethernet1&#x2F;0&#x2F;1      &#x2F;&#x2F;配置端口Ethernet1&#x2F;0&#x2F;1的端口过滤功能</span><br><span class="line">[SwitchA-Ethernet1&#x2F;0&#x2F;1] ip check source ip-address mac-address</span><br><span class="line">[SwitchA] dhcp-snooping        &#x2F;&#x2F;开启DHCP Snooping功能</span><br><span class="line">[SwitchA] interface ethernet1&#x2F;0&#x2F;2       &#x2F;&#x2F; 设置与DHCP服务器相连的端口Ethernet1&#x2F;0&#x2F;2为信任端口</span><br><span class="line">[SwitchA-Ethernet1&#x2F;0&#x2F;2] dhcp-snooping trust</span><br><span class="line"></span><br><span class="line">在端口Ethernet1&#x2F;0&#x2F;1上启用IP过滤功能，防止客户端使用伪造的不同源IP地址对服务器进行攻击。</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure>

<h4 id="15-BFD配置"><a href="#15-BFD配置" class="headerlink" title="15.BFD配置"></a>15.BFD配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch A、Switch B、Switch C相互可达，在Switch A上配置静态路由可以到达Switch C，并使能BFD检测功能。</span><br><span class="line">在Switch A上配置静态路由，并使能BFD检测功能，通过BFD echo报文方式实现BFD功能。</span><br><span class="line"></span><br><span class="line">&lt;SwitchA&gt; system-view</span><br><span class="line">[SwitchA] bfd echo-source-ip 123.1.1.1</span><br><span class="line">[SwitchA] interface vlan-interface 10</span><br><span class="line">[SwitchA-vlan-interface10] bfd min-echo-receive-interval 300</span><br><span class="line">[SwitchA-vlan-interface10] bfd detect-multiplier 7  </span><br><span class="line">[SwitchA-vlan-interface10] quit</span><br><span class="line">[SwitchA] ip route-static 120.1.1.1 24 10.1.1.100 bfd echo-packet   &#x2F;&#x2F;在Switch A上打开BFD功能调试信息开关</span><br><span class="line">&lt;SwitchA&gt; debugging bfd event</span><br><span class="line">&lt;SwitchA&gt; debugging bfd scm</span><br><span class="line">&lt;SwitchA&gt; terminal debugging</span><br><span class="line"></span><br><span class="line">在Switch A上可以打开BFD功能调试信息开关，断开Hub和Switch B之间的链路，验证配置结果。验证结果显示，</span><br><span class="line">Switch A能够快速感知Switch A与Switch B之间链路的变化。</span><br><span class="line">12345678910111213141516</span><br></pre></td></tr></table></figure>

<h4 id="16-QinQ配置"><a href="#16-QinQ配置" class="headerlink" title="16.QinQ配置"></a>16.QinQ配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Provider A、Provider B之间通过Trunk端口连接，Provider A属于运营商网络的VLAN1000，Provider B属于运营商网络的VLAN2000。</span><br><span class="line">Provider A和Provider B之间，运营商采用其他厂商的设备，TPID值为0x8200。</span><br><span class="line">希望配置完成后达到下列要求：</span><br><span class="line">Customer A的VLAN10的报文可以和Customer B的VLAN10的报文经过运营商网络的VLAN1000转发后互通；Customer A的VLAN20的报文可以</span><br><span class="line">和Customer C的VLAN20的报文经过运营商网络的VLAN2000转发后互通。</span><br><span class="line"></span><br><span class="line">[ProviderA] interface ethernet 1&#x2F;0&#x2F;1        &#x2F;&#x2F; 配置端口为Hybrid端口，且允许VLAN10，VLAN20，VLAN1000和VLAN2000的报文通过，并且在发送时去掉外层Tag</span><br><span class="line">[ProviderA-Ethernet1&#x2F;0&#x2F;1] port link-type hybrid</span><br><span class="line">[ProviderA-Ethernet1&#x2F;0&#x2F;1] port hybrid vlan 10 20 1000 2000 untagged</span><br><span class="line">[ProviderA-Ethernet1&#x2F;0&#x2F;1] qinq vid 1000     &#x2F;&#x2F;将来自VLAN10的报文封装VLAN ID为1000的外层Tag</span><br><span class="line">[ProviderA-Ethernet1&#x2F;0&#x2F;1-vid-1000] raw-vlan-id inbound 10</span><br><span class="line">[ProviderA-Ethernet1&#x2F;0&#x2F;1-vid-1000] quit</span><br><span class="line">[ProviderA-Ethernet1&#x2F;0&#x2F;1] qinq vid 2000     &#x2F;&#x2F;将来自VLAN20的报文封装VLAN ID为2000的外层Tag</span><br><span class="line">[ProviderA-Ethernet1&#x2F;0&#x2F;1-vid-2000] raw-vlan-id inbound 20</span><br><span class="line">[ProviderA] interface ethernet 1&#x2F;0&#x2F;2        &#x2F;&#x2F;配置端口的缺省VLAN为VLAN1000</span><br><span class="line">[ProviderA-Ethernet1&#x2F;0&#x2F;2] port access vlan 1000</span><br><span class="line">[ProviderA-Ethernet1&#x2F;0&#x2F;2] qinq enable      &#x2F;&#x2F; 配置端口的基本QinQ功能，将来自VLAN10的报文封装VLAN ID为1000的外层Tag</span><br><span class="line">[ProviderA] interface ethernet 1&#x2F;0&#x2F;3       &#x2F;&#x2F; 配置端口为Trunk端口，且允许VLAN1000和VLAN2000的报文通过</span><br><span class="line">[ProviderA-Ethernet1&#x2F;0&#x2F;3] port link-type trunk</span><br><span class="line">[ProviderA-Ethernet1&#x2F;0&#x2F;3] port trunk permit vlan 1000 2000</span><br><span class="line">[ProviderA-Ethernet1&#x2F;0&#x2F;3] qinq ethernet-type 8200   &#x2F;&#x2F; 为与公共网络中的设备进行互通，配置端口添加外层Tag时采用的TPID值为0x8200</span><br><span class="line">[ProviderB] interface ethernet 1&#x2F;0&#x2F;1       &#x2F;&#x2F; 配置端口为Trunk端口，且允许VLAN1000和VLAN2000的报文通过</span><br><span class="line">[ProviderB-Ethernet1&#x2F;0&#x2F;1] port link-type trunk</span><br><span class="line">[ProviderB-Ethernet1&#x2F;0&#x2F;1] port trunk permit vlan 1000 2000</span><br><span class="line">[ProviderB-Ethernet1&#x2F;0&#x2F;1] qinq ethernet-type 8200   &#x2F;&#x2F; 为与公共网络中的设备进行互通，配置端口添加外层Tag时采用的TPID值为0x8200</span><br><span class="line">[ProviderB-Ethernet1&#x2F;0&#x2F;1] quit</span><br><span class="line">[ProviderB] interface ethernet 1&#x2F;0&#x2F;2      &#x2F;&#x2F;配置端口的缺省VLAN为VLAN2000</span><br><span class="line">[ProviderB-Ethernet1&#x2F;0&#x2F;2] port access vlan 2000</span><br><span class="line">[ProviderB-Ethernet1&#x2F;0&#x2F;2] qinq enable     &#x2F;&#x2F; 配置端口的基本QinQ功能，将来自VLAN20的报文封装VLAN ID为2000的外层Tag</span><br><span class="line">1234567891011121314151617181920212223242526272829</span><br></pre></td></tr></table></figure>

<p>转载自：<a href="https://blog.csdn.net/EbowTang/article/details/79964980">https://blog.csdn.net/EbowTang/article/details/79964980</a></p>
]]></content>
      <categories>
        <category>H3C</category>
      </categories>
      <tags>
        <tag>H3C</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网骨干网全面解析</title>
    <url>/2019/05/14/41/</url>
    <content><![CDATA[<p><img src="https://image01.zhang-zhe.cn/20190514140236.png" loading="lazy"></p>
<p>互联网骨干网（Internet Backbone Provider，IBP），主要指国家级互联网业务提供商（Internet Service Provider， ISP），即在全国范围内拥有骨干网的互联网服务提供商，包括第一级骨干网（Tier1 ISP）和第二级骨干网（Tier2 ISP）。</p>
<p>这些骨干网是国家批准的可以直接和国外连接的互联网。其他有接入功能的ISP想连到国外都得通过骨干网。“骨干网”通常是用于描述大型网络结构时经常使用的词语。骨干网一般都是广域网：作用范围几十到几千公里。</p>
<p>因特网实际上是相互连接在一起形成网状的许多骨干网。“骨干网”一词源自NSFNET，这是一种用于早期研究的网络，该网络由美国国家科学基金会出资兴建。它创建了至今仍在使用的分层结构模型。这种模型中，本地服务提供商连接到区域服务，而后者又依次连接到全国或全球的服务提供商。目前，已有许多骨干网相互连接在一起，这就使得任何两台主机之间都可通信。此外，许多区域性的网络避开了骨干网而直接彼此相连。</p>
<p>因特网的网络由大量独立的服务提供商（比如MCI Worldcom、Sprint、Earthlink、Cable and Wireless等）管理。其中包括NSP（网络服务提供商）、ISP（因特网服务提供商）和交换点。NSP构建全国或全球性的网络并向区域性的NSP出售带宽。区域性的NSP接着向本地ISP转售带宽。而本地ISP则向终端用户提供服务方面的销售与管理。</p>
<p>国际通用互联方式相互联接和交换信息的方式，称为互联网网间互联方式。按照互联双方交换信息的方式不同，互联网网间互联方式可分为两种：一是对等互联（Peering），二是不对称互联（Transit）。</p>
<p>互联双方支付费用的规则或方法，称为网间互联结算模式。互联网网间互联结算模式大致有两种：一是免费结算模式，即“呼叫者保留全部收入”（SenderKeepsAll，SKA）或“开票但不收费”（Bill and Keep） ；二是付费结算模式（Settlement）。</p>
<p>互联网上大部分流量都在用户和网站之间传输。大体来说，从用户到网站的流量相对很小（即要求网站传输内容的请求），而从网站到用户的流量却很大（网站提供的内容）。这就意味着，在很多情况下流量交换的发起者只用了总流量的很小部分，而网站只是提供服务却是大部分流量的来源。互联网运营商并不能提供一个统一的信息服务，网络传递信息的基本单位是所谓的分组（packet），运营商从其所传送的分组中并不能准确分辨谁是受益方，因此无法确定所传送数据的价值，也就不能满足采用传统电信网结算体系的先决条件。另外，互联网上的大部分应用都是不对称的。例如，一个简单的文件传输请求可能在反方向上产生大量的通信量。这种不对称的通信方式也为网间结算带来了困难。再有，与电话服务不同，互联网的路由是动态的，传输路径可能经由不同的网络，网络本身在分组到达之前，并不知道有这个通信需求，因此计费也就无从着手，因此互联网并不适合采用传统的电信网结算模式。</p>
<p>1.对等互联（Peering）</p>
<p>根据SKA协议，对等互联双方无需结算。对等互联存在的前提就是互联对双方的利益相当，能省去繁琐的流量纪录，节省成本。对等互联双方须满足一定的对等互联条件，衡量网络规模需要考察诸如地理覆盖范围、容量、业务流量及用户数量等。双方在利益均衡的基础上达成对等互联协议，是完全互惠互利的商业行为。</p>
<p>对等互联还可根据物理连接方式的不同进一步分为两种形式，一是公共对等互联（PublicPeering）；二是专用对等互联（PrivatePeering）。前者指多个网络间的对等互联关系，各骨干网经营者签署并遵守多边协议。这种互联方式一般发生在公共交换点。后者则是指两个网络间的对等互联关系，两个骨干网经营者间签署并遵守双边协议。这种互联方式既可以在公共交换点上进行，也可以是两个经营者通过自己的电路直接相联来实现。</p>
<p>2.不对称互联（Transit）</p>
<p>在此模式下，一个骨干网为了进行互联向另一个骨干网付费，双方实力相差悬殊，一方面小ISP不能也不需要建立全网状网连接，另一方面大ISP有足够多的路由来满足小ISP的需求，常见于上级ISP与下级ISP之间和国外互联网与国内互联网之间的互联。提供服务的一方有义务向另一方开放全部路由，即业务是完全穿透的，可以透过转接方进入其它骨干网。这是一种典型的“提供者—用户”的商务关系，用户（通常是较小的网络运营商）通过向提供者（通常是较大网络运营商）支付转接互联费以购买业务，实现对其它互联网的访问。</p>
<p>3.部分对等互联（PartialPeering）</p>
<p>部分对等互联是指一方ISP只用自己的部分网络与另一方ISP建立对等互联，双方只需在开放路由的地理位置区域具有相当的网络规模和实力即可。适用于一方ISP已经在其它地区建立了连接的情况下又需要在特定区域再建立连接的情况，常存在于第二级骨干网之间或第二级与第一级骨干网之间，应用比较灵活。这种方式在南美和欧洲比较盛行。</p>
<p>4.付费对等互联（PaidPeering）</p>
<p>由于欧洲有很多不同类型的ISP，所以常采用有结算的对等互联方式，即双边付费结算模式（BilateralSettlement）。这种模式在结算上对于物理连接成本采用共同承担的方式，但对于两网之间的流量差需要通过协议进行测算，同时给予定价，由一方按流量差支付给另一方相应费用。互联双方是准“提供商—用户”关系，网络之间互为客户关系。付费对等互联的结算模式多参照不对称互联的结算模式，两个ISP之间的费率取决于双方的规模（衡量的标准包括用户数、流量、骨干网容量、地理覆盖范围和内容网站的数量等等），费率比不对称互联方式的费率低，互联费主要用于对大网进行成本补偿（而非形成大网的高额利润）。</p>
<p>5.部分不对称互联（PartialTransit）</p>
<p>部分不对称互联指的是提供不对称互联的ISP只对去往特定方向的流量进行转接，这种连接方式主要应用于南美。其费率的制定也遵从于普通不对称互联的模式。适用于建立互联的双方在网络规模、流量等方面有很大的差距，提供服务的ISP并不开放所有的路由或者接受服务的ISP已经建立了一些连接而只需要部分特殊转接的情况，ISP可以自由选择适合自己的路由结构。</p>
<p>互联网骨干网互联互通模式总结</p>
<p>在因特网中，互联网骨干网之间的互联互通有多种模式，我们可以按四种不同的维度来加以区别：</p>
<p>（1）按照物理连接方式的不同可分为直接互联和通过交换中心互联；</p>
<p>（2）按照互联双方交换信息的方式不同可分为不穿透互联和穿透互联；</p>
<p>（3）按照结算模式的不同可分为付费互联和免结算互联；</p>
<p>（4）根据路由开放程度的不同可分为一方对另一方开放部分路由的互联和一方对另一方开放所有路由的互联。</p>
<p>中国互联网骨干网：</p>
<p>目前，中国拥有九大骨干网：</p>
<p>中国公用计算机互联网（CHINANET）</p>
<p>中国科技网（CSTNET）</p>
<p>中国教育和科研计算机网（CERNET）</p>
<p>中国金桥信息网（CHINAGBN）</p>
<p>中国联通互联网（UNINET）</p>
<p>中国网通公用互联网（CNCNET）</p>
<p>中国移动互联网（CMNET）</p>
<p>中国国际经济贸易互联网（CIETNET）</p>
<p>中国长城互联网（CGWNET）</p>
<p>CHINANET八大节点：</p>
<p>中国电信CHINANET骨干网核心层由北京、上海、广州、沈阳、南京、武汉、成都、西安等8个城市的核心节点组成。</p>
<p>核心节点之间为不完全网状结构。以北京、上海、广州为中心的三中心结构，其他核心节点分别以至少两条高速ATM链路与这三个中心相连。另外各省还建立了二级节点。</p>
<p>北京　是中国电信三大核心节点城市之一，同时也是 ChinaNet骨干网三个国际出口之一，中国电信北方网络的主节点在北京电信上地机房，现在的北京上地<a href="http://dc.idcquan.com/">数据中心</a>原来是263机房，后来被电信收购重组为中国电信北京数据中心之一，也是中国电信北方网络主节点ChinaNet骨干网的交换中枢。</p>
<p>上海　是中国电信CHINANET骨干网节点，同时也是 ChinaNet骨干网三个国际出口之一，总国际出口带宽12G；ChinaNet骨干网上海节点和上海本地网络的互联带宽为80G；ChinaNet骨干网上海节点和ChinaNet北京（北方电信）的互联带宽为10G；上海电信是中国电信国内长途电信网的重要枢纽节点，也是中国国际通信的三大出口局之一，拥有京沪、北沿海、北沿江、南沿海、沪杭、沪宁等国内长途光缆系统，以及国内卫星通信地球站；是中美、亚欧、亚太、环球、中日、中韩等国际大容量海光缆、陆地光缆系统的重要节点，并建有太平洋、印度洋卫星地球站；上海长信的机房是级别最高的，上海机房中线路不管怎么绕，任何机房最终的出口都在武胜机房和横浜机房。设有两台国际出口路由器，负责与国际i nternet互联，以及两台核心路由器与其他核心节点互联。个人认为上海在国际出口方面启到的作用比北就，广州要大很多。</p>
<p>广州　广州市Internet服务中心于1995年10月1日投入试运行，系统于1996年1月1日正式开通。广州市Internet服务中心节点作为中国公用互联网络服务系统ChinaNET的一个骨干节点，与北京和上海的Internet节点连接，与它们以及其它地区的节点共同构成ChinaNET骨干网。广州节点是继北京、上海之后的第三个国际出口，也是广东乃至全国最大的国际出口之一。</p>
<p>沈阳　是CHINANET八大节点之一，主要是作为CHINANET在东北地区的网络中心，在96年开通，由于东北大部分地区都被网通网络覆盖，因此CHINANET沈阳节点是八大节点中规模最小的。</p>
<p>南京　南京电信作为CHINANET的八大节点之一，南京电信拥有富足的网络资源，与同是八大节点之一的上海电信相比，南京与其他省市之间的骨干网络拥塞程度较轻，有较大的发展空间。省节点带宽资源丰厚 （20G），资源利用率适度 ，有较大的发展空间， 两个标准的 IDC 机房（龙江，苜蓿园）一个在建的超大机房（游府西街），交通极为便利。齐备的机房设施（电力，恒温，安全）。</p>
<p>武汉　武汉电信是全国重要的通信枢纽和原中国电信第三大业务领导单位，其综合通信名列全国省会城市前5位。处于国家骨干通信网8纵8横一级通信干线中心位置。是中国电信建设的三大高速光缆环网（南环，西环和北环）的交汇中心。武汉热线数据中心属华中最大ISP“湖北电信武汉市分公司”，与中国电信（CHINANET）骨干网通过千兆光纤以千兆以太网方式接入主干网。具有高速、直连、高可用性、可扩展性、高安全性。</p>
<p>成都　成都数据中心是中国电信全国8大节点之一，可支配带宽资源丰富，与Chinanet骨干网节点带宽60G，CN2节点带宽10G.机房内部网络全部采用千兆连接核心层与汇聚层，双百兆冗余到接入层的无瓶颈交换式结构，局域网采用千兆与百兆混合交换式可监控网络，中心网络设备确保高可靠性架构，做到无单点故障，分支网络提供冗余设备及线路，可针对客户数据传输，维护的需求提供XDSL，DDN，ISDN等多种接入手段，并能提供与国内Chinanet主要节点城市连接的长途专线。</p>
<p>西安　是中国公用计算机网络和中国多媒体信息网络在西北五省的网络核心中枢，同时，西安又是西北五省和中国公用计算机网络（CHINANET）连接的必由之路，拥有最大的网络传输线路。因此，在西安建立的互联网数据中心（IDC）必将拥有得天独厚的网络资源。</p>
<p>美国和亚洲部分国家互联网骨干网互联互通现状：</p>
<p>1.美国</p>
<p>美国六家一级骨干网运营商包括AT&amp;T、Sprint、UUNet、Qwest、C&amp;W和Level3.美国的六家一级ISP公司都是在美国科学基金网时期就发展起来的大型ISP公司，它们在美国反托拉斯法和竞争法的监督下发展起来，在美国构成了竞争充分的互联网市场，也是世界互联网的核心地带和枢纽。</p>
<p>美国的互联网发展到今天，网络结构非常复杂。对等互联是骨干网之间互联互通的主要形式，例如最大的UUNET就号称与全球75家骨干运营商对等互联。对等互联所采取的形式多种多样，有的是在公共的NAP处连接，有的则是通过直联的方式。但是对于绝大部分互联网骨干运营商来说，单纯依靠对等互联往往不能满足要求，而必须采用对等互联与非对称互联相结合的方式。</p>
<p><img src="http://upload.idcquan.com/2015/0518/1431939197278.png" alt="22" loading="lazy"></p>
<p>图1：互联网层级结构</p>
<p>如图中所示，所有第一层骨干网间形成全网状网对等互联结构，互相提供免费信息传输。第一级骨干网向第二级骨干网出售非对称互联，提供穿透服务。第二级骨干网必须购买这样的服务才能连向整个互联网。第二级骨干网之间形成部分网状网对等互联结构。最下面一层的内容提供商之间则通常不建立对等互联，只向上级购买不对称互联。</p>
<p>2.日本</p>
<p>日本的一级Internet骨干网运营商包括NTT、JapanTelecom、KDDI和PowerEdcom四家。日本互联网络的特点：（1）宽带普及率非常高，Internet普及率达到了39%，其中大部分是宽带用户；（2）80%的网络流量都集中在日本国内，国际流量比较小；（3）日本的二级骨干网供应商的网络规模比较大，特别是软银的Yahoo！Broadband达到了48Gbit/s的容量；（4）宽带应用比较普及，视频点播、网络电视等服务非常流行；（5）本地环路价格相对比较便宜，在东京等大都会地区，光纤的价格由于竞争激烈而比较低廉。日本国土面积小、人口集中和宽带普及率高这三点使得日本网络流量大部分都集中在一个狭小的区域内。目前，日本有两个互联节点，一个在东京，另一个在大阪，日本的一级Internet骨干网运营商在这两个节点交换所有的网络流量。日本的运营商基本上是采用双边谈判的方式来达成互联协议。在Transit方面，随着网络流量的增加，价格急剧下降。</p>
<p>3.新加坡</p>
<p>新加坡的一级Internet骨干网运营商主要有三家：SingTel、PacificInternet和StarHub.新加坡政府在发展Internet上的态度与日本相比，比较积极主动，新加坡政府要求SingTel降低本地环路的价格，并鼓励新运营商发展无线接入技术，然而收效甚微，并没有能够培育出繁荣的二级骨干运营商市场。新加坡的互联网有如下的几个特点：（1）与日本相反，新加坡只有20%的网络流量是国内的；（2）新加坡政府在电信网络上控制较为严格，外界很难了解到新加坡Internet骨干网之间具体的互联互通结构；（3）新加坡的DSL市场基本被SingTel控制，而CableModem市场主要被StarHub控制，两者之间从目前的资料来看并没有采取对等互联的方式；（4）二级骨干网运营商实力比较弱，不足以达到与一级运营商抗衡的水平；（5）相对其它亚洲发达国家来讲，新加坡的宽带普及率较低，加上新加坡政府对网上内容的控制比较严格，新加坡缺乏具有一定规模的内容供应商；（6）新加坡的Transit价格较为昂贵；（7）新加坡的本地环路价格昂贵。新加坡没有真正意义上的对等互联。新加坡政府与新加坡国立大学共同建立和维护的SingaporeOpen Exchange （SOE）建成之后应者寥寥。有专家认为，本地传输线路的价格过高是妨碍新加坡运营商之间达成对等互联协议的主要原因。</p>
<p>4.韩国</p>
<p>韩国的互联网是一个两层的架构。一级运营商是KoreanTelecom和Dacom，他们之间通过27.5G的电路对等互联。二级运营商基本上都是通过向一级运营商购买transit来接入Internet.韩国政府同时还建设有两个公共交换点。韩国政府对Internet骨干网的互联互通也没有具体的规制措施。在2004年12月，韩国政府开始实行“Internet互联系统（theInternetNetworks Interconnection system）”，该措施规定一级运营商必须向小运营商提供路由信息。该规定在一定程度上保护了小运营商的利益，防止一级运营商的恶意竞争。在此基础上，韩国政府还规定，一级运营商不得捆绑销售。在此前，一级运营商往往在销售transit服务的同时捆绑销售传输线路，这个规定颁布以后，二级运营商可以分别购买transit的服务和传输线路。</p>
<p>5.澳大利亚</p>
<p>澳大利亚的一级Internet骨干网运营商有4家，分别是Telstra、MCI（原来是OzeMail）、Optus（现为Singtel拥有）和Connect.com（新西兰电信拥有），其中只有Telstra为澳大利亚政府拥有（国有股份达51%）。Telstra在固定通信领域有超过80%的市场占有率，处于垄断地位。澳大利亚的主要特点是：（1）澳大利亚是少数几个政府对于Internet骨干网的互联互通做出具体规制的国家；（2）澳大利亚政府一颁布这一法令，另外三家ISP（即上述除Telstra之外的三大ISP）即被国外顶级ISP收购，使澳大利亚的互联网管制中出现了极为特殊的情况，原因是澳大利亚的互联网市场是对外开放的，而原三家ISP并非澳大利亚国有；（3）二级运营商与一级运营商之间的对等互联仍然困难重重；（4）澳大利亚一般对用户采取按照流量计费的方式；（5）缺乏有一定规模的内容供应商；（6）Transit的价格相对较高。尽管澳大利亚对一级骨干网运营商的互联互通有规制，然而在二级骨干网运营商与一级骨干网运营商之间的互联互通仍然存在很大的问题。二级互联网运营商很难满足一级骨干网运营商的对等互联条件，从而使互联互通成为一句空话。其次，由于澳大利亚对于用户实行按流量计费的方法，因此跨网的流量相对就比较少，也限制了内容供应商的发展。</p>
<p>国外互联网骨干网互联互通现状分析总结</p>
<p>尽管各国的具体市场情况不同，经济制度也不尽一样，但是我们从中仍然可以总结出一些共性的东西。</p>
<p>首先，不管是亚洲还是欧美国家，在Internet骨干网的互联互通问题上，各国基本上仍然采取不规制的管制政策。相较于传统电话业务，Internet仍然处于技术腾飞的阶段，新的业务不断被开发出来，各国的规制者都普遍担心过去严格的事无巨细的规制手段可能会扭曲市场结构，妨碍技术进步，最终阻碍Internet的发展。美国联邦通信管理局并没有制定传统意义上的复杂的规制措施，然而，市场的运行仍然是有章可循的，反垄断法的存在迫使骨干网运营商不敢滥用其垄断优势。</p>
<p>其次，竞争是因特网发展的关键。各国的案例都说明，只有在因特网骨干网中存在竞争的前提下，这个市场才能健康有序地发展。各国一级运营商的数目均大于等于3，形成了基本的竞争态势。不论是一级骨干网还是下一级骨干网，参与竞争的运营商越多，网间结算和用户接入的费用就越低。如果在市场中存在一定数量的、有一定实力的二级运营商，往往会对一级运营商造成强大的压力，迫使一级运营商降低价格，提高质量，日本的案例就说明了这一点。</p>
<p>再次，无规制并不代表着自由放任。应该注意到的是，这些经济发达国家有比较完善的竞争法和反垄断法，因特网运营商大到兼并重组，小到市场运作无一不受到相关法律的制约。在看到竞争性局面的同时，也要警惕反竞争的行为。虽然这些国家仍然把市场作为解决互联网之间互联互通的主要手段，但是对于小运营商，主要还是持保护的态度，防止大运营商滥用其市场优势。</p>
<p>原文链接：<a href="http://news.idcquan.com/tx/71364.shtml">http://news.idcquan.com/tx/71364.shtml</a></p>
]]></content>
      <categories>
        <category>骨干网</category>
      </categories>
      <tags>
        <tag>小知识</tag>
      </tags>
  </entry>
  <entry>
    <title>H3C 无线V5通用优化规范</title>
    <url>/2019/05/16/43/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>优化类型</th>
<th>序号</th>
<th>级别</th>
<th>优化操作方式</th>
</tr>
</thead>
<tbody><tr>
<td>基础条件</td>
<td>1</td>
<td>必选</td>
<td>信号强度达标</td>
</tr>
<tr>
<td>软件参数优化</td>
<td>2</td>
<td>必选</td>
<td>信道规划和设置固定信道</td>
</tr>
<tr>
<td></td>
<td>3</td>
<td>必选</td>
<td>功率规划和设置固定功率</td>
</tr>
<tr>
<td></td>
<td>4</td>
<td>必选</td>
<td>WLAN-ESS接口VLAN配置规范</td>
</tr>
<tr>
<td></td>
<td>5</td>
<td>必选</td>
<td>为无线业务构建独立的VLAN</td>
</tr>
<tr>
<td></td>
<td>6</td>
<td>必选</td>
<td>无线用户VLAN内二层隔离</td>
</tr>
<tr>
<td></td>
<td>7</td>
<td>强烈推荐</td>
<td>关闭RRM低速率</td>
</tr>
<tr>
<td></td>
<td>8</td>
<td>强烈推荐</td>
<td>开启无线用户限速</td>
</tr>
<tr>
<td></td>
<td>9</td>
<td>强烈推荐</td>
<td>关闭广播Probe探测回应</td>
</tr>
<tr>
<td></td>
<td>10</td>
<td>强烈推荐</td>
<td>开启频谱导航</td>
</tr>
<tr>
<td></td>
<td>11</td>
<td>推荐</td>
<td>Beacon帧发送间隔调整到160TU</td>
</tr>
<tr>
<td></td>
<td>12</td>
<td>推荐</td>
<td>禁止弱信号终端接入</td>
</tr>
<tr>
<td></td>
<td>13</td>
<td>推荐</td>
<td>若加密，加密方式设置RSN+CCMP</td>
</tr>
<tr>
<td></td>
<td>14</td>
<td>推荐</td>
<td>客户端保活禁止配置client   keep-alive</td>
</tr>
<tr>
<td>组网配置类检查</td>
<td>15</td>
<td>必选</td>
<td>主、备AC的RRM、Radio-policy、AP模板配置保持同步</td>
</tr>
<tr>
<td></td>
<td>16</td>
<td>必选</td>
<td>1+1   AC热备心跳周期参数大于1000ms</td>
</tr>
<tr>
<td></td>
<td>17</td>
<td>必选</td>
<td>多套AC热备组网，热备心跳VLAN独用</td>
</tr>
<tr>
<td></td>
<td>18</td>
<td>强烈推荐</td>
<td>AP-AC有线Ping大包丢包率小于1%，平均延迟小于50ms</td>
</tr>
<tr>
<td>硬件规范性检查</td>
<td>19</td>
<td>必选</td>
<td>AP、馈线、天线连接可靠，无松动</td>
</tr>
<tr>
<td></td>
<td>20</td>
<td>必选</td>
<td>AP及天线与3G/4G天线距离大于3米</td>
</tr>
<tr>
<td></td>
<td>21</td>
<td>必选</td>
<td>AP闲置射频口接匹配负载</td>
</tr>
<tr>
<td></td>
<td>22</td>
<td>强烈推荐</td>
<td>AP或天线与覆盖目标区可见，无金属板、厚墙等阻隔</td>
</tr>
</tbody></table>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="1-（-（必选）信号强度达标"><a href="#1-（-（必选）信号强度达标" class="headerlink" title="1.**（**（必选）信号强度达标"></a><strong>1.**</strong>（**<strong>（必选）信号强度达标</strong></h2><p>首先，<strong>信号覆盖的强度是第一位的</strong>，所有优化操作方式都以满足信号强度为基础。<strong>目标覆盖区域的信号覆盖强度要求笔记本不低于**</strong>-75dBm，**<strong>PAD**</strong>手机等终端不低于**<strong>-65dBm</strong>。</p>
<p>在部署场景的选择上，AP或者天线要尽量离目标区域近，并保证无金属板、厚墙阻隔。对于宿舍或教室类场景，不建议AP楼道部署通过信号穿墙的方式完成覆盖，这种覆盖方式下会导致两个方面问题：（1）AP信号穿墙后，在房间内信号会较弱，可能无法满足终端的接入信号要求；（2）AP全楼道部署会导致AP之间可见度大，干扰较难控制。建议：</p>
<p>Ø  对于“教室”、“会议室”等涉及高密接入的场景，建议AP直接入室放装。</p>
<p>Ø  对于“宿舍”、“酒店”、“公寓楼”等场景，可以考虑X分、面板等低成本部署方案。</p>
<h2 id="2-（必选）信道规划和设置固定信道"><a href="#2-（必选）信道规划和设置固定信道" class="headerlink" title="2.**（必选）信道规划和设置固定信道**"></a><strong>2.**（必选）</strong>信道规划和设置固定信道**</h2><p><strong>应用说明：</strong></p>
<p>信道规划和功率调整将是WLAN网络的首要的、最先实施的优化方法。在实际的安装部署中，为了保证信号覆盖的质量，必须部署相应数量的AP，造成AP的覆盖范围出现重叠，AP之间互相可见。如果所有的AP都工作在相同信道，这些AP只能共享一个信道的频率资源，造成整个WLAN网络性能较低。WLAN协议本身提供了一些不重叠的物理信道，可以构建多个虚拟的独立的WLAN网络，各个网络独立使用一个信道的带宽，例如使用2.4G频段时可以使用1、6、11三个非重叠信道构建WLAN网络。</p>
<p>同时信道规划调整需要考虑三维空间的信号覆盖情况，无论是水平方向还是垂直方向都要做到无线的蜂窝式覆盖，最大可能的避免同楼层和上下楼层间的同频干扰。 </p>
<p>强烈推荐：802.11n网络在实际部署时，无论是2.4G频段或5G频段，建议都采用20MHz模式进行覆盖，以加强信道隔离与复用，提升WLAN网络整体性能。（注意：我司AP在802.11n 5G频段默认为40MHz频宽方式） </p>
<p><strong>配置说明：</strong></p>
<p>【命令一】 </p>
<p><strong>channel</strong> <em>channel-number</em> </p>
<p>【参数】 </p>
<p><em>channel-number</em>：射频的工作信道。射频的工作信道由国家码和射频模式决定。 </p>
<p>【举例】 </p>
<p># 设置射频的工作信道为6。 </p>
<p>system-view</p>
<p>[sysname] wlan ap ap3 model WA2100</p>
<p>[sysname-wlan-ap-ap3] radio 1 type dot11b</p>
<p>[sysname-wlan-ap-ap3-radio-1] channel 6</p>
<p>【命令二】 </p>
<p><strong>channel band-width</strong> { <strong>20</strong> | <strong>40</strong> }</p>
<p>【参数】 </p>
<p><em>20</em>：表示802.11n的工作带宽是20MHz。</p>
<p><em>40</em>：表示802.11n的工作带宽是40MHz。</p>
<p>【举例】 </p>
<p># 配置当前接口的带宽模式为20MHz。 </p>
<p>system-view</p>
<p>[sysname] wlan ap ap3 model WA2620-AGN</p>
<p>[sysname-wlan-ap-ap3] radio 1 type dot11an</p>
<p>[sysname-wlan-ap-ap3-radio-1] channel band-width 20</p>
<h2 id="3-（必选）功率规划和设置固定功率"><a href="#3-（必选）功率规划和设置固定功率" class="headerlink" title="3.（必选）功率规划和设置固定功率"></a><strong>3.（必选）功率规划和设置固定功率</strong></h2><p><strong>应用说明：</strong></p>
<p>信道规划和功率调整将是WLAN网络的首要的、最先实施的优化方法。完成信道规划就相当于完成了多个虚拟WLAN网络的构建。AP发射功率的调整需要逐个关注每个虚拟WLAN网络，通过调整同一信道的AP的发射功率，降低这些AP之间的可见度，加强相同信道频谱资源的复用，提高WLAN网络的整体性能。 </p>
<p><strong>配置说明：</strong></p>
<p>【命令】 </p>
<p><strong>max-power</strong> <em>radio-power</em> </p>
<p>【参数】 </p>
<p><em>radio-power</em>：射频的最大传输功率，其取值范围由国家码和射频模式决定。不同型号的设备支持的取值范围不同，请以设备的实际情况为准。 </p>
<p>【举例】 </p>
<p># 配置射频的最大传输功率为5dBm。 </p>
<p>system-view</p>
<p>[sysname] wlan ap ap3 model WA2100</p>
<p>[sysname-wlan-ap-ap3] radio 1 type dot11b</p>
<p>[sysname-wlan-ap-ap3-radio-1] max-power 5</p>
<p>注意：不建议开启动态功率调整功能。由于终端本身会实时关注周围AP信号强度，如果开启动态功率调整，可能会导致终端无端漫游，使用效果变差。 </p>
<h2 id="4-（必选）WLAN-ESS接口VLAN配置规范"><a href="#4-（必选）WLAN-ESS接口VLAN配置规范" class="headerlink" title="4.（必选）WLAN-ESS接口VLAN配置规范"></a><strong>4.（必选）WLAN-ESS接口VLAN配置规范</strong></h2><p><strong>典型应用场景一：</strong></p>
<p>当无线服务模板使用多VLAN功能时，以下典型配置为例：service-template 1在AP2上业务VLAN为VLAN 2，在AP3上业务VLAN为VLAN3。此时对应的WLAN-ESS接口（此例中为WLAN-ESS 1接口）必须采用以下典型配置方式： </p>
<p>#</p>
<p>wlan service-template 1 clear</p>
<p> ssid H3C</p>
<p> bind WLAN-ESS 1</p>
<p> service-template enable</p>
<p>#</p>
<p>wlan ap ap2 model WA2620i-AGN id 2</p>
<p>serial-id 219801A0CNC124004002</p>
<p> radio 1</p>
<p> radio 2</p>
<p>  service-template 1 vlan-id 2</p>
<p>  radio enable</p>
<p>#</p>
<p>wlan ap ap3 model WA2620i-AGN id 3</p>
<p>serial-id 219801A0CNC124004003</p>
<p> radio 1</p>
<p> radio 2</p>
<p>  service-template 1 vlan-id 3</p>
<p>  radio enable</p>
<p>#</p>
<p>interface WLAN-ESS1</p>
<p> link-type hybrid</p>
<p> undo port hybrid vlan 1</p>
<p> port hybrid vlan 100 untagged</p>
<p> port hybrid pvid vlan 100</p>
<p> mac-vlan enable</p>
<p>#</p>
<p>说明： </p>
<p>1、   当service-template加入多个VLAN时，对应的WLAN-ESS接口要求配置成Hybrid类型，并且使能mac-vlan功能。 </p>
<p><strong>port link-type hybrid</strong></p>
<p><strong>mac-vlan enable</strong></p>
<p>2、   配置WLAN-ESS接口pvid值，要求配置的pvid值为非业务VLAN（本例中业务VLAN为2、3，pvid配置为VLAN 100），同时将pvid配置为untaged的类型，并undo VLAN 1。 </p>
<p><strong>port hybrid pvid vlan</strong> <em>vlan-id</em> </p>
<p><strong>port hybrid vlan</strong> <em>vlan-id</em> <strong>untagged</strong></p>
<p><strong>undo port hybrid vlan 1</strong></p>
<p>3、   严禁采用如下配置： </p>
<p><strong>#</strong></p>
<p><strong>interface WLAN-ESS1</strong></p>
<p><strong>port link-type hybrid</strong></p>
<p><strong>port hybrid pvid vlan 2</strong></p>
<p><strong>port hybrid vlan 2 to 99 untagged</strong></p>
<p><strong>mac-vlan enable</strong></p>
<p><strong>#</strong></p>
<p>以上配置AC在创建DBSS端口时所有配置的VLAN 2-99都会与DBSS关联。而实际上DBSS的pvid由service-template 1 vlan-id vlan-id决定的，Station的VLAN跟随DBSS的pvid。所以DBSS加入其他的VLAN没有实际意义，反而会增加设备负担，同时AC会将VLAN2-99的数据在DBSS口进行转发，增加无线空口无用的报文流量，大量消耗空口资源。 </p>
<p><strong>典型应用场景二：</strong></p>
<p>无线服务模板绑定WLAN-ESS接口，用户业务VLAN由WLAN-ESS接口指定。以下典型配置为例：service-template 1绑定WLAN-ESS 1，应用在AP2、AP3上，用户业务VLAN（VLAN 99）由WLAN-ESS 1指定。此时对应的WLAN-ESS接口（此例中为WLAN-ESS 1接口）必须采用以下典型配置方式： </p>
<p>#</p>
<p>wlan service-template 1 clear</p>
<p> ssid H3C</p>
<p> bind WLAN-ESS 1</p>
<p> service-template enable</p>
<p>#</p>
<p>wlan ap ap2 model WA2620i-AGN id 2</p>
<p>serial-id 219801A0CNC124004002</p>
<p> radio 1</p>
<p> radio 2</p>
<p>  service-template 1</p>
<p>  radio enable</p>
<p>#</p>
<p>wlan ap ap3 model WA2620i-AGN id 3</p>
<p>serial-id 219801A0CNC124004003</p>
<p> radio 1</p>
<p> radio 2</p>
<p>  service-template 1</p>
<p>  radio enable</p>
<p>#</p>
<p>interface WLAN-ESS1</p>
<p> link-type hybrid</p>
<p> undo port hybrid vlan 1</p>
<p> port hybrid vlan 99 untagged</p>
<p> port hybrid pvid vlan 99</p>
<p> mac-vlan enable</p>
<p>#</p>
<p>说明： </p>
<p>1、   对应的WLAN-ESS接口要求配置成Hybrid类型，并且使能mac-vlan功能。 </p>
<p><strong>port link-type hybrid</strong></p>
<p><strong>mac-vlan enable</strong></p>
<p>2、   配置WLAN-ESS接口pvid值，要求配置的pvid值为业务VLAN（本例中业务VLAN为99，pvid配置为VLAN 99），同时将pvid配置为untaged的类型，并undo VLAN 1。 </p>
<p><strong>port hybrid pvid vlan</strong> <em>vlan-id</em> </p>
<p><strong>port hybrid vlan</strong> <em>vlan-id</em> <strong>untagged</strong></p>
<p><strong>undo port hybrid vlan 1</strong></p>
<h2 id="5-（必选）为无线业务构建独立的VLAN"><a href="#5-（必选）为无线业务构建独立的VLAN" class="headerlink" title="5.（必选）为无线业务构建独立的VLAN"></a><strong>5.（必选）为无线业务构建独立的VLAN</strong></h2><p><strong>应用说明：</strong></p>
<p>WLAN无线网络理论上就是实现一个二层的接入网络，而这个二层网络通常直接连接到现有的有线网络中。 </p>
<p>而在无线网络中，广播/组播报文会使用最低速率发送广播报文，所以当广播报文比较多时，会相对较多地消耗信道空口资源，从而影响到整个无线网络性能和应用。特别是一个广播报文通常会向VLAN内的所有的AP发送，同时消耗所有AP的资源。所以在构建WLAN网络的时候，在条件允许的条件下，一定为无线业务创建独立的VLAN，而不要和有线网络使用相同的VLAN，这样即可以避免大量的广播/组播报文对无线网络的影响，又可以避免不必要的攻击。 </p>
<p><strong>实施说明：</strong></p>
<p>在规划WLAN网络时，建议分配一些有线网络未使用的VLAN给WLAN接入使用。可以通过service-template对应的接口配置对应的VLAN、也可以在为AP绑定service-template时指定VLAN、甚至可以在无线客户端接入的时候授权VLAN，具体配置请直接参考“WLAN服务配置手册”。 </p>
<p>为了清晰网络规划，WLAN网络仅作为一个新增的接入网络，所有的流量和接入都可以通过现有的有线网络设备进行监管和控制。可以充分考虑无线控制器主要完成WLAN网络的构建、无线客户端接入管理等功能，而将业务VLAN的网关统一放在无线控制器的外部已经存在有线设备，相当于在一个现有的设备上增加了一个独立的二层网络。 </p>
<p><strong>注意事项：</strong></p>
<p>WLAN设备主要关注无线接入服务，对于大型的综合网络一般建议业务VLAN的网关设置在无线控制器以外的设备。 </p>
<h2 id="6-（强烈推荐）无线用户VLAN内二层隔离"><a href="#6-（强烈推荐）无线用户VLAN内二层隔离" class="headerlink" title="6.（强烈推荐）无线用户VLAN内二层隔离"></a><strong>6.（强烈推荐）无线用户VLAN内二层隔离</strong></h2><p><strong>应用说明：</strong></p>
<p>同一VLAN内，来自无线客户端的广播、组播报文会向所有放通该VLAN的AP上广播，而且在空间介质中广播报文通常使用最低速率进行发送。当广播报文比较多时，会占用较多的空口资源，在一定程度上影响到整个网络应用。 </p>
<p>无线用户VLAN内二层隔离可以在AC上控制无线用户只能访问网关设备，而不能互相之间访问。同时，通过配置undo user-isolation permit broadcast禁止有线用户（permit-mac允许的mac地址除外）发送广播、组播报文给无线用户，无线用户到有线用户的广播、组播报文不受限制。这样可以大量减少整个WLAN网络的广播流量，提高WLAN网络的整体性能。 </p>
<p><strong>配置说明：</strong></p>
<p>【命令一】 </p>
<p><strong>user-isolation vlan</strong> <em>vlan-list</em> <strong>enable</strong></p>
<p>【参数】 </p>
<p><em>vlan-list</em>：vlan-list为VLAN列表，其表示方式为vlan-list = { vlan-id [ to vlan-id ] }&amp;&lt;1-10&gt;。其中，vlan-id为指定VLAN的编号，取值范围为1～4094。&amp;&lt;1-10&gt;表示前面的参数最多可以输入10次。 </p>
<p>【命令二】 </p>
<p><strong>user-isolation vlan</strong> <em>vlan-list</em> <strong>permit-mac</strong> <em>mac-list</em></p>
<p>【参数】 </p>
<p><em>vlan-list</em>：在指定VLAN内配置用户隔离功能。vlan-list为VLAN列表，表示多个VLAN。其表示方式为vlan-list＝{ vlan-id [ to vlan-id ] }&amp;&lt;1-10&gt;，其中，vlan-id为指定VLAN的编号，取值范围为1～4094。&amp;&lt;1-10&gt;表示前面的参数最多可以输入10次。 </p>
<p><em>mac-list</em>：允许的MAC地址列表，格式为H-H-H，在一个VLAN内最多可以配置16个允许的MAC地址，该MAC地址不允许为广播或组播地址。 </p>
<p>【命令三】 </p>
<p><strong>user-isolation permit broadcast</strong> </p>
<p>【举例】 </p>
<p># 在VLAN 1上开启用户隔离功能，允许访问MAC地址为00bb-ccdd-eeff和0022-3344-5566的设备（允许的MAC地址通常为网关MAC地址），同时禁止有线用户（permit-mac允许的mac地址除外）发送广播、组播报文给无线用户。 </p>
<p>system-view</p>
<p>[sysname] user-isolation vlan 1 enable</p>
<p>[sysname] user-isolation vlan 1 permit-mac 00bb-ccdd-eeff 0022-3344-5566</p>
<p>[sysname] undo user-isolation permit broadcast</p>
<h2 id="7-（强烈推荐）关闭RRM低速率"><a href="#7-（强烈推荐）关闭RRM低速率" class="headerlink" title="7.（强烈推荐）关闭RRM低速率"></a><strong>7.（强烈推荐）关闭RRM低速率</strong></h2><p><strong>应用说明：</strong></p>
<p>无线WLAN网络中不是使用固定的速率发送所有的报文，而是使用一个速率集进行报文发送（例如11g支持1、2、5.5、11、6、9、12、18、24、36、48、54Mbps），实际无线终端或者AP在发送报文的时候会动态的在这些速率中选择一个速率进行发送。通常提到的11g可以达到速率主要指所有报文都采用54M速率进行发送的情况，而且是指的一个空口信道的能力。而实际上大量的广播报文和无线的管理报文都使用最低速率1Mbps进行发送，所以会消耗一定得空口资源。在无线网络中信号传输的距离不是问题的情况下，可以将1、2、6和9Mbps速率禁用，这样整体上减少广播报文和管理报文对空口资源的占用。 </p>
<p>对于信号强度比较弱的终端，或者距离比较远的终端，关闭低速率应用后可能会出现丢包现象。但是正常的室内覆盖，信号强度可以保证，所以要求在室内覆盖情况下此功能为必选项。 </p>
<p><strong>配置说明：</strong></p>
<p>【命令】 </p>
<p><strong>dot11g disabled-rate</strong> <em>rate-value</em> </p>
<p>【参数】 </p>
<p>disabled-rate：禁用速率。 </p>
<p><em>rate-value</em>：可设置的射频速率如下：1、2、5.5、6、9、11、12、18、24、36、48、54Mbps。 </p>
<p>【举例】 </p>
<p># 配置802.11g模式的射频速率（禁用速率：1、2、5.5、6、9Mbps）。 </p>
<p>system-view</p>
<p>[sysname] wlan rrm</p>
<p>[sysname-wlan-rrm] dot11g disabled-rate 1 2 5.5 6 9</p>
<h2 id="8-（强烈推荐）开启无线用户限速"><a href="#8-（强烈推荐）开启无线用户限速" class="headerlink" title="8.（强烈推荐）开启无线用户限速"></a><strong>8.（强烈推荐）开启无线用户限速</strong></h2><p><strong>应用说明：</strong></p>
<p>WLAN网络中每一个AP提供的可用带宽有限，且由接入的无线客户端共享，如果个别的无线用户通过WLAN使用网络工具下载文件，可能达到非常大的流量，进而直接耗尽当前共享带宽，造成其他无线用户访问网络慢、ping抖动丢包等问题。通过配置用户限速功能，可以限制部分无线客户端对带宽的过多消耗，保证所有接入无线客户端均能正常使用网络业务。基于无线客户端的速率限制功能有两种模式：动态模式和静态模式，其中静态模式为静态的配置每个客户端的速率，即配置的速率是同一个AP内，每个客户端的最大速率。 </p>
<p><strong>配置说明：</strong></p>
<p>【命令】 </p>
<p><strong>client-rate-limit direction { inbound | outbound } mode static cir</strong> <em>cir</em> </p>
<p>【参数】 </p>
<p>inbound：入方向，即从客户端到AP方向。 </p>
<p>outbound：出方向，即从AP到客户端方向。 </p>
<p>static：静态模式，所有客户端的限速速率为固定值。 </p>
<p><em>cir</em>：静态模式下为单个Client限速速率，单位为kbps。取值范围为16～300000。 </p>
<p>【举例】 </p>
<p># 配置基于无线服务的无线用户限速功能，使客户端发送数据的最大速率为512kbps，接收数据的最大速率为2048kbps。 </p>
<p>system-view</p>
<p>[sysname] wlan service-template 1 clear</p>
<p>[sysname-wlan-st-1] client-rate-limit direction inbound mode static cir 512</p>
<p>[sysname-wlan-st-1] client-rate-limit direction outbound mode static cir 2048</p>
<p>【举例】 </p>
<p># 配置基于射频radio的无线用户限速功能，使客户端发送数据的最大速率为512kbps，接收数据的最大速率为2048kbps。 </p>
<p>system-view</p>
<p>[sysname] wlan ap ap1 model WA2100</p>
<p>[sysname-wlan-ap-ap1] radio 1</p>
<p>[sysname-wlan-ap-ap1-1] client-rate-limit direction inbound mode static cir 512</p>
<p>[sysname-wlan-ap-ap1-1] client-rate-limit direction outbound mode static cir 2048</p>
<p>备注： </p>
<p>1、动态限速方式相关配置请参考《命令手册》《配置手册》。 </p>
<p>2、用户限速功能与智能带宽保障功能不要同时启用。 </p>
<p>3、基于无线服务和基于射频的两种方式同时配置时，无线终端接入相应SSID和AP 射频后，最大速率取两种限速方式中的较小值。 </p>
<h2 id="9-（强烈推荐）关闭广播Probe探测回应"><a href="#9-（强烈推荐）关闭广播Probe探测回应" class="headerlink" title="9.（强烈推荐）关闭广播Probe探测回应"></a><strong>9.（强烈推荐）关闭广播Probe探测回应</strong></h2><p><strong>应用说明：</strong></p>
<p>WLAN有两种探测机制：一种为无线终端被动的侦听Beacon帧之后，根据获取的无线网络情况，选择AP建立连接；另外一种为无线终端主动发送Probe request探测周围的无线网络，然后根据获取的Probe Response报文获取周围的无线网络，之后选择AP建立连接。 </p>
<p>本功能主要针对Probe探测方式。根据Probe Request帧（探测请求帧）是否携带SSID，可以将主动扫描分为两种：1、广播方式的Probe探测，客户端发送Probe Request帧（Probe Request中SSID为空，也就是SSID IE的长度为0）；2、单播方式的Probe探测，客户端发送的Probe Request帧（携带指定的SSID）。 </p>
<p>而大部分的无线终端都不会指定要链接的“无线接入服务”，这样就造成了无线终端会大量发送广播Probe Request探测，造成所有的接收到该报文的AP设备都会回应Probe Response报文。因此，在无线用户比较多的网络中，可能会出现一定量的Probe Response报文，而且这些报文都是使用低速率进行发送，会消耗一定的空间资源。如果网络条件允许可以考虑关闭广播Probe探测功能，AP针对SSID为空的探测请求不进行回复，有效降低空口的消耗，使整个WLAN网络应用得到一定的提升。 </p>
<p><strong>配置说明：</strong></p>
<p>【命令】 </p>
<p><strong>undo broadcast-probe reply</strong></p>
<p>【参数】 </p>
<p>无 </p>
<p>【举例】 </p>
<p>system-view</p>
<p>[sysname] wlan ap ap3 model WA2100</p>
<p>[sysname-wlan-ap-ap3] undo broadcast-probe reply</p>
<h2 id="10-（强烈推荐）开启频谱导航"><a href="#10-（强烈推荐）开启频谱导航" class="headerlink" title="10.（强烈推荐）开启频谱导航"></a><strong>10.（强烈推荐）开启频谱导航</strong></h2><p><strong>应用说明：</strong></p>
<p>在实际无线网络环境中，某些客户端只能工作在2.4GHz频段上，也有一部分客户端可以同时支持2.4GHz和5GHz频段，如果支持双频的客户端都工作在2.4GHz频段上，会导致2.4GHz频段过载，5GHz射频相对空余。在这种情况下，可以在设备上开启频谱导航功能。频谱导航功能可以将支持双频工作的客户端优先接入5GHz射频，使得两个频段上的客户端数量相对均衡，从而提高整网性能。 </p>
<p>开启频谱导航功能后，AP会对发起连接请求的客户端进行导航，将其均衡地连接至该AP的不同射频上。首先当客户端与某个AP连接时，若该客户端只支持单频2.4GHz，则频谱导航功能不生效，客户端直接关联至AP的2.4GHz射频上。若客户端支持双频，AP则会将客户端优先引导至5GHz射频上。若客户端只支持单频5GHz，则会直接关联至AP的5GHz射频上。在双频客户端关联到5GHz射频前，AP会检查5GHz射频接收到的客户端的RSSI值，若该RSSI值低于设定值，则不会将此客户端导航至5GHz射频。 </p>
<p>如果5GHz射频上已连接的客户端数量达到门限，且5GHz射频与2.4GHz射频上连接的客户端差值达到或超过差值门限，AP会拒绝客户端接入5GHz射频，且允许新客户端接入2.4GHz射频（即不会引导双频客户端优先接入5GHz射频）。如果客户端反复向该AP的5GHz射频上发起关联请求，且AP拒绝客户端关联请求次数达到/超过设定的最大拒绝关联请求次数，那么该AP会认为此时该客户端不能连接到其它任何的AP，在这种情况下，AP上的5GHz射频也会接受该客户端的关联请求。 </p>
<p><strong>配置说明：</strong></p>
<p>【命令一】 </p>
<p><strong>band-navigation enable</strong></p>
<p>【参数】 </p>
<p>无 </p>
<p>【命令二】 </p>
<p><strong>band-navigation rssi-threshold</strong> <em>rssi-threshold</em> </p>
<p>【参数】 </p>
<p><em>rssi-threshold</em>：频谱导航RSSI门限值，取值范围为5～100。 </p>
<p>【命令三】 </p>
<p><strong>band-navigation aging-time</strong> <em>aging-time</em> </p>
<p>【参数】 </p>
<p><em>aging-time</em>：客户端信息的老化时间，取值范围为10～600，单位为秒。 </p>
<p>【命令四】 </p>
<p><strong>band-navigation balance session</strong> <em>session</em> [ <strong>gap</strong> <em>gap</em> ]</p>
<p>【参数】 </p>
<p><em>session</em>：5GHz射频上客户端连接数门限，取值范围为2～40。 </p>
<p><em>gap</em>：客户端连接数差值门限，即gap ＝ 5GHz射频上客户端的数量－2.4GHz射频上客户端的数量，取值范围为1～8，缺省的差值门限为4。 </p>
<p>【命令五】 </p>
<p><strong>band-navigation balance access-denial</strong> <em>access-denial</em> </p>
<p>【参数】 </p>
<p><em>access-denial</em>：设备拒绝5GHz客户端关联请求的最大次数，取值范围为1～10。 </p>
<p>【举例】 </p>
<p># 开启全局频谱导航功能。 </p>
<p>system-view</p>
<p>[sysname] wlan rrm</p>
<p>[sysname-wlan-rrm] band-navigation enable</p>
<p># 配置频谱导航RSSI门限值为20。 </p>
<p>[sysname-wlan-rrm] band-navigation rssi-threshold 20</p>
<p># 配置客户端信息的老化时间为200秒。 </p>
<p>[sysname-wlan-rrm] band-navigation aging-time 200</p>
<p># 配置客户端连接数门限为10，差值门限为5。 </p>
<p>[sysname-wlan-rrm] band-navigation balance session 10 gap 5</p>
<p># 配置设备拒绝5GHz客户端关联请求的最大次数为5。 </p>
<p>[sysname-wlan-rrm] band-navigation balance access-denial 5</p>
<p>备注： </p>
<p>1、  频谱导航主要通过拒绝终端当前的链接请求，给终端提供5GHz更多的关联机会，有可能会出现终端接入网络时间相对比较长的问题。 </p>
<p>2、  在使用双射频AP的WLAN网络强烈建议开启频谱导航。 </p>
<h2 id="11-（推荐）Beacon帧间隔调整到160TU"><a href="#11-（推荐）Beacon帧间隔调整到160TU" class="headerlink" title="11.（推荐）Beacon帧间隔调整到160TU"></a><strong>11.（推荐）Beacon帧间隔调整到160TU</strong></h2><p><strong>应用说明：</strong></p>
<p>默认情况下，射频卡radio上的每个SSID每100TU就会发送一个Beacon信标报文，这个报文通告WLAN网络服务，同时和无线网卡进行信息同步。Beacon报文通常使用最小速率进行发送，而且优先级比较高，所以考虑将Beacon发送的时间间隔从100TU调整到160-200TU之间，这样可以有效降低空口的消耗，使整个WLAN网络应用得到一定的提升。 </p>
<p>通常情况下，一个radio下配置SSID的数量建议不超过5个。 </p>
<p><strong>配置说明：</strong></p>
<p>【命令】 </p>
<p><strong>beacon-interval</strong> <em>interval</em> </p>
<p>【参数】 </p>
<p><em>interval</em>：发送信标帧的时间间隔。取值范围为32～8191，单位TU（Time Unit，1TU=1024微秒）。 </p>
<p>【举例】 </p>
<p># 设置发送信标帧的时间间隔为160TU。 </p>
<p>system-view</p>
<p>[sysname] wlan radio-policy radio1</p>
<p>[sysname-wlan-rp-radio1] beacon-interval 160</p>
<p>然后将radio-policy在各个AP的Radio接口上应用。 </p>
<h2 id="12-（推荐）禁止弱信号终端接入"><a href="#12-（推荐）禁止弱信号终端接入" class="headerlink" title="12.（推荐）禁止弱信号终端接入"></a><strong>12.（推荐）禁止弱信号终端接入</strong></h2><p><strong>应用说明：</strong></p>
<p>在WLAN网络中，信号强度较弱的无线客户端，虽然也可以接入到网络中，但是所能够获取的网络性能和服务质量要比信号强度较强的无线客户端差很多。如果弱信号的无线客户端在接入到WLAN网络的同时还在大量地下载数据，就会占用较多的信道资源，最终必然对其他的无线客户端造成很大的影响。 </p>
<p>禁止弱信号客户端接入功能，通过配置允许接入的无线客户端的最小信号强度门限值，可以直接拒绝信号强度低于指定门限的无线客户端接入到WLAN网络中，减少弱信号客户端对其他无线客户端的影响，从而提升整个WLAN网络的应用效果。 </p>
<p><strong>配置说明：</strong></p>
<p>【命令】 </p>
<p><strong>wlan option client-reject</strong> <em>rssi</em> </p>
<p>【参数】 </p>
<p><em>rssi</em>：允许接入的无线客户端的最小信号强度门限值，取值范围为1～30，建议取值为10，单位dBm。 </p>
<p>【举例】 </p>
<p># 配置禁止RSSI信号强度低于15的无线客户端接入网络。 </p>
<p>system-view</p>
<p>[sysname] wlan option client-reject 15</p>
<p>备注： </p>
<p>1、如果终端接入后信号强度发生变化低于门限，AP也不会主动踢掉终端，但是如果断开后重新关联则无法成功。 </p>
<p>2、禁止弱信号终端接入需要考虑场景覆盖信号强度情况，如场景覆盖信号强度偏弱，可能导致终端无法正常接入。 </p>
<h2 id="13-（推荐）加密方式设置"><a href="#13-（推荐）加密方式设置" class="headerlink" title="13.（推荐）加密方式设置"></a><strong>13.（推荐）加密方式设置</strong></h2><p><strong>应用说明：</strong></p>
<p>在WLAN网络中，空口设置明文不加密，可以减少因加密带来的密钥协商时间开销，获取最大的无线空口性能。在11n网络中，如果因安全因素考虑必须设置加密，建议加密方式设置为RSN+CCMP，不推荐使用TKIP或者WEP加密方式，这两种加密方式无法发挥11n网络的高带宽性能。 </p>
<p><strong>配置说明：</strong></p>
<p>【命令】 </p>
<p><strong>security-ie { rsn | wpa }</strong></p>
<p><strong>cipher-suite { ccmp | tkip | wep40 | wep104 | wep128 }</strong></p>
<p>【参数】 </p>
<p>无。 </p>
<p>【举例】 </p>
<p># 配置安全加密方式为RSM+CCMP。 </p>
<p>system-view</p>
<p>[sysname] wlan service-template 1 crypto</p>
<p>[sysname-wlan-st-1] security-ie rsn</p>
<p>[sysname-wlan-st-1] cipher-suite ccmp </p>
<h2 id="14-（推荐）客户端保活方式"><a href="#14-（推荐）客户端保活方式" class="headerlink" title="14.（推荐）客户端保活方式"></a><strong>14.（推荐）客户端保活方式</strong></h2><p><strong>应用说明：</strong></p>
<p>有些客户端离开WLAN网络时，不会主动向AP发送解除关联报文，导致AP上长时间保持大量“僵尸用户”关联的状态，在极端情况下会导致AP关联用户数达到上限，影响正常用户的网络使用。 </p>
<p>AP支持客户端保活功能应对这个问题，有两种实现方式：（1）通过配置client idle-timeout，当AP在一段时间内没有收到终端的任何802.11报文，则直接清除用户的关联状态，缺省开启，保活时间是1个小时。（2）通过配置client keep-alive，AP定期给终端发送探测报文，若终端连续3次不响应，则AP主动解除终端的关联状态，缺省关闭。在实际应用中，不推荐采用第二种方式。这种方式下，有可能因客户端休眠等原因误踢用户下线，导致终端丢包、掉线类的问题。 </p>
<p><strong>配置说明：</strong></p>
<p>【命令】 </p>
<p><strong>Undo client keep-alive</strong></p>
<p>【参数】 </p>
<p>无。 </p>
<p>【举例】 </p>
<p># 关闭client keep-alive功能。 </p>
<p>system-view</p>
<p>[sysname] wlan ap ap3 model WA2100</p>
<p>[Sysname-wlan-ap-ap3] undo client keep-alive</p>
<h2 id="15-（必选）主、备AC的配置保持同步"><a href="#15-（必选）主、备AC的配置保持同步" class="headerlink" title="15.**（必选）主、备AC的配置保持同步**"></a><strong>15.**</strong>（必选）主、备AC的配置保持同步**</h2><p><strong>应用说明：</strong></p>
<p>AC在进行热备切换过程中，为了实现快速的切换和业务恢复，AP上很多信息不会进行更新，比如RRM配置的速率集不匹配等，会导致切换后无线网卡的速率协商不通过，造成热备切换后无法关联的问题。 </p>
<p>因此要求，在N+1或者1+1备份方案的无线网络中，必须保证主、备AC的RRM、radio-policy、AP模板等配置保持同步。 </p>
<p>具体见技术公告【2010】008号。 </p>
<h2 id="16-（必选）AC热备心跳周期"><a href="#16-（必选）AC热备心跳周期" class="headerlink" title="16.**（必选）AC热备心跳周期**"></a><strong>16.**</strong>（必选）AC热备心跳周期**</h2><p><strong>应用说明：</strong></p>
<p>AC热备份需要依靠AC之间的热备心跳报文探测对方AC的工作状态，如果连续三个心跳报文未收到回应就触发热备切换。但在实际的网络应用中，如果网络中存在流量攻击，无线控制器的转发模块偶尔会出现心跳报文得不到及时处理的情况。特别是如果心跳间隔时间配置比较短，很可能出现连续几个心跳报文得不到及时处理，最终导致错误检测到对端无线控制器故障，而造成AP发生主备切换。因此要求热备心跳周期不能设置过小，推荐保持缺省值2000ms。 </p>
<p>具体见技术公告【2011】015号。 </p>
<p><strong>配置说明：</strong></p>
<p>【命令】 </p>
<p><strong>Hot-backup hellointerval</strong> <em>hellointerval</em></p>
<p>【参数】 </p>
<p><em>interval</em>：配置AC间连接的心跳报文周期，单位为毫秒，缺省为2000ms。。 </p>
<p>【举例】 </p>
<p># AC间连接的心跳周期设置为1500毫秒。 </p>
<p>system-view</p>
<p>[sysname] hot-backup hellointerval 1500</p>
<h2 id="17-（必选）多套AC热备组网，热备心跳VLAN独用"><a href="#17-（必选）多套AC热备组网，热备心跳VLAN独用" class="headerlink" title="17.**（必选）多套AC热备组网，热备心跳VLAN独用**"></a><strong>17.**</strong>（必选）多套AC热备组网，热备心跳VLAN独用**</h2><p><strong>应用说明：</strong></p>
<p>在校园网局点，通常涉及二层网络中多组AC板卡之间的1+1快速热备份。此时在规划心跳VLAN时，请注意将各组主备AC的心跳VLAN隔开。 </p>
<p>例如，在一台WX6108E中有4个AC板卡，其中AC1和AC2互为主备，AC3和AC4互为主备。正确的心跳VLAN规划方式如下图所示，AC1和AC2之间的心跳VLAN为VLAN20，AC3和AC4之间的心跳VLAN为VLAN30。</p>
]]></content>
      <categories>
        <category>无线</category>
      </categories>
      <tags>
        <tag>H3C</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP协议详解(慢启动,流量控制,阻塞控制之类)</title>
    <url>/2019/05/17/45/</url>
    <content><![CDATA[<p>UDP协议提供了端到端之间的通讯，应用程序只需要在系统中监听一个端口，便可以进行网络通讯。随着计算机网络的发展，计算机网络所承载的业务越来越多，有些业务数据的传输需要具备可靠性，譬如我们在进行在线聊天的时候，我们发送的一条消息，我们必须明确地知道对方是否收到。如果对方对我们发送地消息不给予确认，我们就不知道对方是否已经收到。</p>
<p>显然，UDP协议并没有提供可靠交付的能力，因此我们可能需要在应用层之上，基于UDP构建一套可靠的数据传输协议，有些公司就是这样做的。幸运的是，传输层已经为我们实现了一套可靠的数据传输协议，即TCP协议。</p>
<h3 id="TCP概要"><a href="#TCP概要" class="headerlink" title="TCP概要"></a>TCP概要</h3><p>TCP的全称是Transmission Control Protocol,传输控制协议。TCP并不是基于UDP协议构建的，和UDP协议一样是基于IP协议构建的。</p>
<p>TCP主要解决下面的三个问题:</p>
<ul>
<li>数据的可靠传输。发送方如何知道发出的数据，接收方已经收到。</li>
<li>接收方的流量控制。因为各种原因，接收方可能来不及处理发送方发送的数据，而造成没有及时回应发送方，造成发送方不断的重发数据，最后造成接收方的主机宕机。</li>
<li>计算机网络的拥塞控制。数据在计算机网络之上传输，当出现数据拥塞时如何进行处理(有疑问的你，意思是现实生活中不堵车哦?)</li>
</ul>
<h3 id="数据的可靠传输-可靠交付"><a href="#数据的可靠传输-可靠交付" class="headerlink" title="数据的可靠传输(可靠交付)"></a>数据的可靠传输(可靠交付)</h3><p>现实生活中，我们在打电话的时候，当我们自己根对方说了一句话或者一段话之后，我们都会等待对方的回应，譬如她们会回答”哦”、”嗯”、”知道了”，这时我们就会知道对方已经听到我们自己刚才说的话，如果她们不给予回应则会以为她们没有在听我讲话，也就是没有收到我发送的消息。</p>
<p>TCP可靠传输的实现正是基于这样的例子，对于发送方发送的数据，接收方在接受到数据之后必须要给予确认，确认它收到了数据。如果在规定时间内，没有给予确认则意味着接收方没有接受到数据，然后发送方对数据进行重发。</p>
<h3 id="重发"><a href="#重发" class="headerlink" title="重发"></a>重发</h3><p>当用户交给TCP传输的数据量很大时，如果使用简单的重发机制，即重发所有的数据，势必会严重占用和浪费带宽资源，甚至造成网络拥塞。因此TCP会将用户需要传输的数据进行分组，即将数据进行切割，分成多个数据段(data segment)，并给每个数据段编号。</p>
<p>TCP报文段首部中通过长度为32bit的字段来表示这个TCP报文段的序号，另外通过长度为32bit的字段来表示确认报文段要确认的报文段的序号。</p>
<h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>现实生活中，我们去一些热门的景点或者游乐园的某个娱乐项目时，都会需要进行排队，如果是小长假，则会出现人山人海的场景，这是这些机构就会控制每一次参观该景点的人数。<br>网络应用程序也是如此，当数据到达主机之后，TCP会将该数据放入相应的队列(又称为缓冲区)(如果让你自己基于UDP实现一个TCP模块供自己的应用程序使用，你也会采用这种方式)，等待监听该端口的应用程序从队列中获取数据，应用程序一次所能处理的数据有限，因此不可能一次性取出队列中的所有数据，当队列已经满了，则无法再存放新的数据，只能将接受到的数据丢弃，因此TCP协议需要提供流量控制的能力，控制发送方每次发送数据的大小。</p>
<h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p>现实生活中，高速公路也会堵车，在一段高速公路上，每辆车都在以很快的速度在运行，彼此并没有慢下来，但是为什么还是会出现堵车呢？通常都是因为每段道路的承载能力不一样，譬如当一段8车道公路上的汽车行驶到4车道公路上时，在这两段道路交汇的地方就会出现堵车。</p>
<p>计算机网络是由无数的数据链路组成的，每一段链路的承载能力不一样，也会出现数据拥堵的情况，这通常是由路由器和交换机的处理能力不同造成的。我们还需要知道，这种情况下的拥塞是不能避免的，因为我们无法要求所有链路的承载能力一样，因此我们只能对拥塞进行控制。TCP协议对拥塞控制也提出了响应的解决方案，这也是为什么TCP叫做传输控制协议而不叫做可靠传输协议的原因吧，同时也解释了为什么在计算机网络可靠性能大大提供的今天，TCP还继续发挥着其作用的原因。</p>
<h3 id="TCP连接管理"><a href="#TCP连接管理" class="headerlink" title="TCP连接管理"></a>TCP连接管理</h3><p>我们都说TCP是面向连接的，UDP不是面向连接的。那么什么是连接呢?为什么TCP需要面向连接呢？</p>
<p>连接是一个动作。现实生活中，我们想和一个通话，我们需要先拨打她的电话，等待她接听我们的打电话之后就可以进行通话了，当我们通话结束之后还需要挂断电话。</p>
<p>电话的连接会接通通信双方之间的电路，是一条真实存在的电路，在拆除这条电路之前，第三方是不能和两者之中的任何一方建立通信电路。和电话不同，TCP连接产生的通道是虚拟的，任何第三方端口都可以和两者之中的任何一个端口建立通道。我们称建立虚拟通道的过程为连接的建立。</p>
<p>连接是可靠传输的前提，而不是可靠传输的保证。在QQ这些聊天软件支持离线消息之前，人们在发送消息之前总要确保对方在线，因为如果对方不在线，消息根本就不会被对方收到，也就不存在对你发送的消息进行回应。TCP通过在连接这个动作让接收方知道发送方想要发送数据给它，如果接收方允许，则连接建立，这时双方之间便可以进行数据传输，接收到数据之后须确认数据收到。如果不建立连接，则无法实现可靠传输，因为对于发送方发送的数据，可能接收方的主机根本就没有在监听该端口。例如，在采用UDP的P2P实现中中仍然需要信令服务器，为什么需要信令服务器呢?因为对方可能根本就没有启动该P2P程序或者其它原因无法跟你进行通讯。简而言之，连接的作用就是让通讯双方知道并准备好通讯。</p>
<h3 id="连接的建立－三次握手"><a href="#连接的建立－三次握手" class="headerlink" title="连接的建立－三次握手"></a>连接的建立－三次握手</h3><h4 id="TCP报文段的类型"><a href="#TCP报文段的类型" class="headerlink" title="TCP报文段的类型"></a>TCP报文段的类型</h4><p>TCP属于全双工通信，连接建立之后，任何一方都可以随时发送数据，而不需要理会另外一方是否也在发送数据。加上TCP的确认机制，因此TCP的报文段存在传输有效数据(即用户数据)的报文段，和存在确认数据收到的报文段(ACK,Acknowledgment)。此外还有其他类型的报文段，用来控制连接的建立和拆除TCP连接以及表示紧急数据段。TCP协议通过TCP数据段首部中控制位字段来表示这些报文段的类型，并且采用按位表示，使得一个数据段可以有多种类型。</p>
<table>
<thead>
<tr>
<th align="left">控制字段取值</th>
<th align="left">控制字段的含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">100000</td>
<td align="left">URG,</td>
</tr>
<tr>
<td align="left">010000</td>
<td align="left">ACK,Acknowledgment，确认报文段</td>
</tr>
<tr>
<td align="left">001000</td>
<td align="left">PSH</td>
</tr>
<tr>
<td align="left">000100</td>
<td align="left">RST,Rest 表示TCP连接中出现差错必须断开连接，然后再重新建立连接</td>
</tr>
<tr>
<td align="left">000010</td>
<td align="left">SYN,</td>
</tr>
<tr>
<td align="left">000001</td>
<td align="left">FIN,Finally 表示发送此报文段的发送方已经发送完了所有数据，以后不会也不能再发送数据，当另外一方也发送FIN时，则连接断开</td>
</tr>
</tbody></table>
<p>实际上，TCP是通过一个或多个控制位来表示TCP报文段的类型。</p>
<h4 id="TCP报文段的序号"><a href="#TCP报文段的序号" class="headerlink" title="TCP报文段的序号"></a>TCP报文段的序号</h4><p>TCP的可靠传输是通过确认和重传来实现的，因此</p>
<h4 id="连接的建立过程"><a href="#连接的建立过程" class="headerlink" title="连接的建立过程"></a>连接的建立过程</h4><p>TCP连接的建立采用的是C/S(Client/Server,客户端/服务器)模型。由客户端发出建立连接的请求。</p>
<p>下面我们使用’ACK=1’这种方式来表示控制位中的相应位是否置1，’ACK=0’或者不说明则都为0。并使用’ack=1’这种方式表示TCP数据段首部中的确认序号，使用’seq=1’来表示TCP数据段首部中的发送序号。</p>
<ul>
<li>Client首先向Server发出建立连接的TCP报文段(SYN=1,seq=x(表示随机产生一个值,我们假设为100))，并等待Server的确认(确认收到该建立连接的请求)</li>
<li>Server收到该建立连接的请求之后，如果同意建立连接，则发送TCP报文段(SYN=1,seq=y(也是随机产生一个值，我们假设为21),ACK=1,ack=x+1(这里表示发送方的x号数据段已经收到,这里为101))给Client表示确认接收到该TCP报文，并等待Client确认该TCP报文已经收到</li>
<li>Client收到Server的确认报文段之后，再次向Server发送TCP报文段(seq=x+1(这里为101),ACK=1,ack=y(这里为22))，确认Server的确认报文已经收到。</li>
</ul>
<p><img src="http://images2015.cnblogs.com/blog/833931/201611/833931-20161122133940284-204962813.jpg" alt="img" loading="lazy"></p>
<p>我们可以看到，控制字段中的SYN是用来建立一个TCP连接的，只在前两次”握手”中置为1，第三次”握手”置为0.”我想和你谈话(SYN),我愿意和你谈话(SYN,ACK),那我们开始吧(ACK)”.</p>
<h4 id="为什么要使用三次握手"><a href="#为什么要使用三次握手" class="headerlink" title="为什么要使用三次握手"></a>为什么要使用三次握手</h4><h3 id="连接的断开"><a href="#连接的断开" class="headerlink" title="连接的断开"></a>连接的断开</h3><p>通过TCP三次握手建立的通信属于全双工通信，因此每个方向都必须单独地进行关闭。关闭的原则就是当其中一方A完成数据的传输并且不再传输数据时，发送一个控制位FIN=1的TCP数据段来告知另一方B”我的数据已经传输完毕，并且不再传输数据”，另一方B收到数据之后依旧发送确认TCP数据段，来表示A=&gt;B方向的一条连接已经断开，此时TCP连接处于半关闭状态。需要注意的是，这里的不再传输数据是指A不再传输用户数据，对于B传输的数据,A仍然要接收并给予确认。</p>
<p>当B发送完数据之后并准备断开连接时，发送一个控制位FIN=1,ACK=1(ack=A的FIN报文段的序号)的TCP报文段，并等待A的确认，A收到B的FIN报文段后给予确认，至此整个TCP连接关闭。</p>
<p><img src="http://images2015.cnblogs.com/blog/833931/201611/833931-20161122134032190-1748847585.jpg" alt="img" loading="lazy"></p>
<p>为了防止因为数据传输延时造成B的FIN报文段比B的有效数据传输报文段(用户数据)提前到达，因A会等待2MSL之后才真正关闭TCP连接。</p>
<p>TCP的有限状态机</p>
<table>
<thead>
<tr>
<th align="left">状态</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CLOSED</td>
<td align="left">呈阻塞，关闭状态，表示当前主机没有活动的传输连接或没有正在进行传输连接</td>
</tr>
<tr>
<td align="left">LISTEN</td>
<td align="left">呈监听状态，表示服务器正在等待新的传输连接进入</td>
</tr>
<tr>
<td align="left">SYNRCVD</td>
<td align="left">表示服务器已经收到一个传输连接请求，但尚未确认</td>
</tr>
<tr>
<td align="left">SYNSENT</td>
<td align="left">表示客户端已经发出一个传输连接请求，等待服务器的确认</td>
</tr>
<tr>
<td align="left">ESTABLISHED</td>
<td align="left">传输连接建立</td>
</tr>
<tr>
<td align="left">FIN_WAIT_1</td>
<td align="left">主动关闭方的主机已经发送关闭连接请求，等待对方确认</td>
</tr>
<tr>
<td align="left">CLOSE_WAIT</td>
<td align="left">被动关闭方的主机收到主动关闭方的关闭连接请求，并已确认</td>
</tr>
<tr>
<td align="left">FIN_WAIT_2</td>
<td align="left">主动关闭方的主机已经收到对方对主动关闭连接请求的确认，等待对方发送关闭传输连接请求</td>
</tr>
<tr>
<td align="left">LAST_ACT</td>
<td align="left">被动关闭方的主机已经发送关闭连接请求，等到主动方确认</td>
</tr>
<tr>
<td align="left">TIME_WAIT</td>
<td align="left">主动关闭方的主机收到对方发送的关闭连接请求</td>
</tr>
</tbody></table>
<p><img src="http://images2015.cnblogs.com/blog/833931/201611/833931-20161122134103706-154997897.gif" alt="img" loading="lazy"></p>
<p>TCP连接建立:</p>
<ul>
<li>首先，服务器监听一个TCP端口，此时该端口处于Listen状态。</li>
<li>一段时间后，客户端发送一个TCP连接请求，客户端的端口就出处于SYN_SENT状态，当服务器接收到一个客户端的TCP连接请求时，即收到客户端的SYN报文段，服务器监听的端口就会切换到SYN_RCVD状态,服务器向客户端发送SYN+ACK报文段==&gt;问题0</li>
<li>当客户端收到服务器发送的SYN+ACK报文段时，客户端的端口切换到ESTAB-LISTEN状态,客户端同时向服务器发送SYN报文段确认 ==&gt;问题1</li>
<li>当服务器收到客户端的SYN报文段时，服务器的端口切换到ESTAB-LISTEN状态。</li>
</ul>
<p>问题0:当客户端发送的SYN报文段，没有得到服务器的任何响应怎么办获者收到服务器的REST响应<br>当客户端发送一个SYN报文段之后就会启动定时器，如果在规定的时间内没有收到服务器的任何响应或者收到服务器的RESR响应，则会重新发送SYN报文段。如果在几次重发后仍然没有得到服务器的SYN+ACK响应就会放弃，端口切换CLOSE状态,并报告上层。</p>
<p>问题1:如果当客户端发送给服务器的SYN报文段丢失了会怎样?</p>
<p>连接仍然能正常工作。因为客户端已经处于ESTABLISHED状态，所以客户端能够像服务器发送数据。由于每个TCP报文段中都有ACK标识位,而在确认序号字段中包含正确的数值。所以当客户端发送的第一个数据到达服务器时，服务器的端口就会切换到ESTABLISHED状态。这实际上是TCP的重点，即每个TCP报文段报告发送方希望看到的下一个序号，即时这个序号与以前的一个或多个报文段包含的序号重复。</p>
<h3 id="TCP连接关闭"><a href="#TCP连接关闭" class="headerlink" title="TCP连接关闭"></a>TCP连接关闭</h3><h3 id="TCP的可靠传输"><a href="#TCP的可靠传输" class="headerlink" title="TCP的可靠传输"></a>TCP的可靠传输</h3><p>TCP的可靠传输是通过确认和超时重传的机制来实现的，而确认和超时重传的具体的实现是通过以字节为单位的滑动窗口机制来完成。</p>
<h3 id="滑动窗口机制"><a href="#滑动窗口机制" class="headerlink" title="滑动窗口机制"></a>滑动窗口机制</h3><p>虽然上层应用和TCP的交互是一次一个数据快(大小不等)，但是TCP把上层应用程序交付下来的数据看成仅仅是一串连续的无结构字节流。</p>
<ul>
<li>发送窗口:在为收到对方的ACK确认的情况下，只有发送窗口内的数据才能连续地发送出去。凡事已经发送过的数据，在未收到ACK确认之间都必须暂时保留在发送窗口内，以便超时重传使用。</li>
<li>接收窗口:缓冲区，用来接收发送方的TCP数据段。</li>
</ul>
<p><img src="http://images2015.cnblogs.com/blog/833931/201611/833931-20161122134152221-1000507329.jpg" alt="img" loading="lazy"></p>
<h3 id="停止-等待协议"><a href="#停止-等待协议" class="headerlink" title="停止-等待协议"></a>停止-等待协议</h3><p>发送方和接收方都采用窗口大小为1的滑动窗口,即发送窗口和接受窗口都为1个最大TCP数据段的大小。<br>停止等待协议的规则是:</p>
<ul>
<li>发送方发完1个分组并收到接收方ACK确认之后才能发送下一个分组;</li>
<li>如果接收方收到一个错误的分组，则给发送方发送一个否认分组NAK,发送方收到NAK分组后重发，并继续等待发送方的ACK确认</li>
<li>如果发送方在规定的时限内(发送完一个分组，就开启一个定时器)没有收到接收方的ACK确认分组，则重新发送该分组。</li>
</ul>
<p><img src="http://images2015.cnblogs.com/blog/833931/201611/833931-20161122134214362-731995803.jpg" alt="img" loading="lazy"></p>
<h3 id="后退N协议"><a href="#后退N协议" class="headerlink" title="后退N协议"></a>后退N协议</h3><p>后退N协议思想的是流水线传输，即可以连续发送多个分组,而不必每发完一个分组就等待接收方的ACK确认。</p>
<p><img src="http://images2015.cnblogs.com/blog/833931/201611/833931-20161122134240456-2115623294.jpg" alt="img" loading="lazy"></p>
<p>规则如下:</p>
<ul>
<li>发送窗口的大小为n,接收窗口的大小为1</li>
<li>发送方在发送完一个数据分组之后，不是停下来等待接收方的ACK确认，而是可以连续再发送若干个分组。</li>
<li>接收方在收到发送方发送的分组之后发送ACK确认分组,并移动接收窗口。</li>
<li>如果发送方发送一共连续发送了5个分组，中间的第3个分组丢失，则接收方要求发送方重传后面的3个分组(第3个、第4个、第5个分组)。(因为第4个和第5个分组不接序)这也说明了该协议为什么叫做后退N协议。</li>
</ul>
<p>描述:</p>
<p><img src="http://images2015.cnblogs.com/blog/833931/201611/833931-20161122134308237-629932547.jpg" alt="img" loading="lazy"></p>
<p>虽然在收到了有差错的2号分组之后，收到了正确的3号分组和4号分组，但是由于接收端只按顺序接收数据分组，造成3号和4号分组不能和1号分组接序而被丢弃，等到A的定时器超时重发。</p>
<h3 id="选择重传"><a href="#选择重传" class="headerlink" title="选择重传"></a>选择重传</h3><p>选择重传协议是对后退N协议的一种优化，其只是选择性重发那些确实丢失的分组。</p>
<p>规则:</p>
<ul>
<li>发送窗口的大小为m,接收窗口的大小为n</li>
<li>接收方先接收序号不连续的分组，并发送ACK确认，然后等待发送方重发丢失的分组(发送方每收到一个ACK确认就会关闭相应的定时器，最终没有收到ACK确认的分组的定时器超时，发送方会再次重发)</li>
<li>收到重发的分组后给予ACK确认，再对全部分组进行排序，最后交给上层应用。</li>
</ul>
<p><img src="http://images2015.cnblogs.com/blog/833931/201611/833931-20161122134351518-1967039548.jpg" alt="img" loading="lazy"></p>
<h3 id="通知窗口"><a href="#通知窗口" class="headerlink" title="通知窗口"></a>通知窗口</h3><p>TCP采用通知窗口实现对发送端的流量控制，通知窗口大小的单位是字节。TCP通过在TCP数据段首部的窗口字段中填入当前设定的接收窗口(即通知窗口)的大小，用来告知对方’我方当前的接收窗口大小’，以实现流量控制。</p>
<p>通信双方的发送窗口大小由双方在连接建立是商定，在通信过程，双方可以动态地根据自己的情况调整对方的发送窗口大小。</p>
<h3 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h3><p>在某段时间，如果对计算机网络中某些资源的需求超过了所能提供该资源的总和，网络的性能就要变坏——产生拥塞(congestion)。即当需要&gt;供给时会造成网络拥塞。<br>如果计算机网络中有许多资源同时产生拥塞，网络的性能就要明显变坏，整个网络的吞吐量将随输入负荷的增大而下降。</p>
<p><img src="http://images2015.cnblogs.com/blog/833931/201611/833931-20161122134422487-265445083.jpg" alt="img" loading="lazy"></p>
<p>TCP协议通过慢启动机制、拥塞避免机制、加速递减机制、快重传和快恢复机制来共同实现拥塞控制。</p>
<p><img src="http://images2015.cnblogs.com/blog/833931/201611/833931-20161122134444096-127773858.jpg" alt="img" loading="lazy"></p>
<p>在拥塞控制中还有一个”拥塞窗口”的概念，该窗口由发送方根据当前计算机网络的拥塞情况来计算，和通知窗口共通作用于发送窗口，”拥塞窗口”的单位也是字节，通常拥塞窗口的初始值为一个最大TCP报文段的大小是,但下面我们以每个传输轮次所能发送TCP数据段(用户数据)的次数作为其单位来描述。</p>
<p>TCP的慢启动机制、拥塞避免机制和加速递减机制都是通过改变拥塞窗口的大小来时对发送方的发送窗口进行控制。</p>
<h3 id="拥塞控制与流量控制的关系"><a href="#拥塞控制与流量控制的关系" class="headerlink" title="拥塞控制与流量控制的关系"></a>拥塞控制与流量控制的关系</h3><p>拥塞控制是一个全局性的控制，涉及到计算机网络中所有的主机、路由器以及降低网络传输性能的相关因素。而流量控制只涉及到通信双方之间的收发平衡。</p>
<p>TCP在控制数据传输时，既要考虑接收端的接收能力，又要避免网络拥塞，因而发送方的发送窗口大小为通知窗口和拥塞窗口的最小值。</p>
<h3 id="传输轮次"><a href="#传输轮次" class="headerlink" title="传输轮次"></a>传输轮次</h3><p>在TCP的拥塞避免中，我们规定:每发送拥塞窗口值个数的TCP数据段(有效数据承载)，并且全部收到发送方对这些数据的ACK确认,我们就称完成了1个传输轮次。</p>
<p>例如，拥塞窗口＝4，当发送方发送了4个TCP报文段，并收到这4个TCP报文段的ACK确认，我们就称完成了一个传输轮次。</p>
<h3 id="慢启动机制"><a href="#慢启动机制" class="headerlink" title="慢启动机制"></a>慢启动机制</h3><p>慢启动通过逐步增大拥塞窗口的值来控制网络拥塞。</p>
<p>慢启动机制规定:</p>
<ul>
<li>拥塞窗口的初始值为1</li>
<li>每收到一个对发出的数据段的ACK确认，便将拥塞窗口的值增加1</li>
</ul>
<p><img src="http://images2015.cnblogs.com/blog/833931/201611/833931-20161122134517206-1938850580.jpg" alt="img" loading="lazy"></p>
<p>我们可以发现，每完成一次传输轮次，拥塞窗口的值就翻倍，即拥塞窗口随着传输轮次的增加成指数增长。</p>
<p>随着传输轮次的增加，拥塞窗口的值会变得很大，因此TCP拥塞控制給慢启动增加一个阈值(又称慢启动门限)，当拥塞窗口&gt;阈值时，就要进行尝试拥塞避免。</p>
<p>当 拥塞窗口 &lt; 阈值 时，使用慢启动算法<br>当 拥塞窗口 &gt; 阈值 时，使用拥塞避免算法<br>当 拥塞窗口 ＝ 阈值时，既可以使用慢启动算法，也可时使用拥塞避免算法。</p>
<p>随着网络拥塞的出现和变化，阈值也会不断变化。TCP拥塞控制中，阈值的初始值为16</p>
<h3 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h3><p>拥塞避免算法的思路是让拥塞窗口缓慢地增大，呈线性增长，即每完成一个传输轮次，拥塞窗口增加1。</p>
<p>拥塞避免是指在拥塞避免阶段把拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞，而不是完全能够避免拥塞。</p>
<h3 id="加速递减机制"><a href="#加速递减机制" class="headerlink" title="加速递减机制"></a>加速递减机制</h3><p>如果在使用慢启动机制或者拥塞避免机制中，发送数据时，出现了定时器超时，便执行加速递减机制:</p>
<ul>
<li>立刻将慢启动门限置为当前拥塞窗口大小的一般，然后拥塞窗口的值重置为1</li>
<li>执行使用慢启动机制</li>
</ul>
<h3 id="快重传和快恢复"><a href="#快重传和快恢复" class="headerlink" title="快重传和快恢复"></a>快重传和快恢复</h3><p>如果发送方设置定时器超时，那么很可能是网络出现了拥塞，致使TCP报文段在网络中的某处被丢弃。在这种情况下，TCP马上把拥塞窗口减少到1，并执行慢开始算法，同时慢开始门限值减半。这是不采用快重传机制的情况:</p>
<p><img src="http://images2015.cnblogs.com/blog/833931/201611/833931-20161122134545925-1064466217.jpg" alt="img" loading="lazy"></p>
<p>快重传机制要求接收方每收到一个失序的TCP报文段后就立即发出重复确认(为了使发送方及早知道没有到达对方)而不要等待自己发送数据时才进行确认。</p>
<p>快重传算法规定:发送方只要连续收到3个重复确认就应当立即重传未被确认的报文段。</p>
<p><img src="http://images2015.cnblogs.com/blog/833931/201611/833931-20161122134612065-1730078873.jpg" alt="img" loading="lazy"></p>
<h3 id="快恢复"><a href="#快恢复" class="headerlink" title="快恢复"></a>快恢复</h3><p>当发送端收到连续三个重复的确认时，就执行“乘法减小”算法，把慢开始门限 ssthresh 减半。但接下去不执行慢开始算法。</p>
<p>由于发送方现在认为网络很可能没有发生拥塞，因此现在不执行慢开始算法，即拥塞窗口 cwnd 现在不设置为 1，而是设置为慢开始门限 ssthresh 减半后的数值，然后开始执行拥塞避免算法（“加法增大”），使拥塞窗口缓慢地线性增大。</p>
<p><img src="http://images2015.cnblogs.com/blog/833931/201611/833931-20161122134637362-1765246929.jpg" alt="img" loading="lazy"></p>
<h3 id="TCP差错控制"><a href="#TCP差错控制" class="headerlink" title="TCP差错控制"></a>TCP差错控制</h3><h3 id="TCP习题"><a href="#TCP习题" class="headerlink" title="TCP习题"></a>TCP习题</h3><h5 id="A-B两台机器都正常工作-B机器未监听任何端口-如果A机器向B机器80端口发送SYN包-会收到何种类型的回包"><a href="#A-B两台机器都正常工作-B机器未监听任何端口-如果A机器向B机器80端口发送SYN包-会收到何种类型的回包" class="headerlink" title="A,B两台机器都正常工作,B机器未监听任何端口.如果A机器向B机器80端口发送SYN包,会收到何种类型的回包?"></a>A,B两台机器都正常工作,B机器未监听任何端口.如果A机器向B机器80端口发送SYN包,会收到何种类型的回包?</h5><p>RST包</p>
<h5 id="TCP建立连接的过程采用三次握手，已知第三次握手报文的发送序列号为1000，确认序列号为2000，请问第二次握手报文的发送序列号和确认序列号分别为"><a href="#TCP建立连接的过程采用三次握手，已知第三次握手报文的发送序列号为1000，确认序列号为2000，请问第二次握手报文的发送序列号和确认序列号分别为" class="headerlink" title="TCP建立连接的过程采用三次握手，已知第三次握手报文的发送序列号为1000，确认序列号为2000，请问第二次握手报文的发送序列号和确认序列号分别为?"></a>TCP建立连接的过程采用三次握手，已知第三次握手报文的发送序列号为1000，确认序列号为2000，请问第二次握手报文的发送序列号和确认序列号分别为?</h5><p>1999,1000</p>
<h5 id="某一速率为100M的交换机有20个端口，其一个端口上连着一台笔记本电脑，此电脑从迅雷上下载一部1G的电影需要的时间可能是多久"><a href="#某一速率为100M的交换机有20个端口，其一个端口上连着一台笔记本电脑，此电脑从迅雷上下载一部1G的电影需要的时间可能是多久" class="headerlink" title="某一速率为100M的交换机有20个端口，其一个端口上连着一台笔记本电脑，此电脑从迅雷上下载一部1G的电影需要的时间可能是多久?"></a>某一速率为100M的交换机有20个端口，其一个端口上连着一台笔记本电脑，此电脑从迅雷上下载一部1G的电影需要的时间可能是多久?</h5><p>交换机为独占带宽，即每个端口数据通过率为为最大100Mb/s。注意单位是Mb。因此最短时间为：<br>1GB/(100Mb/s)=1024MB/(12.5MB/s)=81.92s。</p>
<p>这里涉及到单位换算问题</p>
<h5 id="消息传递部分为三个功能级"><a href="#消息传递部分为三个功能级" class="headerlink" title="消息传递部分为三个功能级?"></a>消息传递部分为三个功能级?</h5><p>第一级为数据链路功能级，第二级是信令链路功能级，第三级是信令网功能级</p>
]]></content>
      <categories>
        <category>TCP/IP</category>
      </categories>
      <tags>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title>SDN&amp;NFV 相关</title>
    <url>/2019/05/24/49/</url>
    <content><![CDATA[<h3 id="SDN-概述和发展趋势"><a href="#SDN-概述和发展趋势" class="headerlink" title="SDN 概述和发展趋势"></a>SDN 概述和发展趋势</h3><h4 id="ICT启示"><a href="#ICT启示" class="headerlink" title="ICT启示"></a>ICT启示</h4><p>支撑PC生态系统快速革新的三个因素是：Hardware Substrate，硬件底层化(x86指令集)；Software Definition；Open Source。</p>
<p>SDN =&gt; 把中间承载网络分层、虚拟化，更加简单</p>
<p>支撑SDN的关键是找到一个合适的Hardware Substrate =&gt; OpenFlow，描述对网络底层硬件的抽象，基本编程载体是Flow，即网络世界的Flow指令集，从而作为硬件架构和软件定义的一个桥梁 =&gt; 下层硬件不断演进，上层的网络软件可以保持兼容，SDN生态圈良好发展。</p>
<p>核心思想：控制和转发分离，软件应用灵活，可编程。</p>
<h4 id="未来思考-电信网络架构如何变革？"><a href="#未来思考-电信网络架构如何变革？" class="headerlink" title="未来思考 电信网络架构如何变革？"></a>未来思考 电信网络架构如何变革？</h4><p>唯一路径：网络利用率低<br>协议复杂：维护故障定位困难<br>缺少全局视图：不能全局最优</p>
<p>IP城域网采用分布式架构，导致管理运维复杂，缺乏管理运维方面的设计，网络在部署一个全局业务策略的时候，需要逐一配置每台设备。随着网络规模和业务的扩大，难以实现对业务的高效管理和故障的快速排除；网络创新困难，IP网络采用了垂直集成，控制平面和数据平面深度耦合，在分布式网络控制机制下，新技术的引入严重依赖于现网设备，并且需要多个设备同步更新，使得新技术的部署周期较长，严重制约着网络的演进发展；设备日益臃肿，由于IP分组技术采用打补丁的演进策略，随着设备支持的功能和业务越来越多，其实现的复杂度也显著增加。</p>
<p>如何解决上述问题？</p>
<p>需要对现有网络进行变革，通过转发和控制分离，建立一个统一的控制器，类似于大脑负责计算全网的拓扑和路由信息，实现全局流量的整体优化与调整，区别以往逐一配置每台设备，只要在一台设备上完成更新后即可完成新业务的部署，对故障快速定位与排除。</p>
<p>技术驱动：网络架构的变革<br>网络：构建一个集中的大脑，实现全局流量和整体最优<br>关键价值：简化运维，自动化调度，提高网络利用率、网络开放。</p>
<h4 id="SDN：电信网络软件化"><a href="#SDN：电信网络软件化" class="headerlink" title="SDN：电信网络软件化"></a>SDN：电信网络软件化</h4><p>SDN(Software Defined Network)，软件定义网络，是美国斯坦福大学Clean Slate研究组提出的一种新型网络创新架构。</p>
<p>其核心技术是通过将网络设备控制面和数据面分离开，从而实现了网络流量的灵活控制，为核心网络及应用的创新提供了良好的平台。</p>
<p>SDN作为网络新型技术，从网络架构和设备架构方面进行创新。</p>
<p>转发设备不再是专用设备，抽象出功能至控制层面，易于全局调度及管理，降低运维难度。</p>
<h4 id="思考题：SDN网络和传统IP网络的区别？"><a href="#思考题：SDN网络和传统IP网络的区别？" class="headerlink" title="思考题：SDN网络和传统IP网络的区别？"></a>思考题：SDN网络和传统IP网络的区别？</h4><p>SDN利用控制转发相互分离从架构上解决根本问题：让网络敏捷起来，更快的部署新业务与快速定位故障点。采用资源集中和统一调度、能力开放的策略；让软件来干硬件的活</p>
<h3 id="SDN解决方案介绍："><a href="#SDN解决方案介绍：" class="headerlink" title="SDN解决方案介绍："></a>SDN解决方案介绍：</h3><p>1.描述RR+方案的应用场景和价值<br>2.掌握PCE+方案的部署实现<br>3.理解基于SDN技术的DCI网络</p>
<h4 id="a-DCI：数据中心互联网络"><a href="#a-DCI：数据中心互联网络" class="headerlink" title="a.DCI：数据中心互联网络"></a>a.DCI：数据中心互联网络</h4><p>背景：云数据中心需要基于用户体验进行层次化布局，网络需要以数据中心为中心组网进行重构。</p>
<p>DCI：数据中心互联网络</p>
<h4 id="为什么需要新建DCI网络？"><a href="#为什么需要新建DCI网络？" class="headerlink" title="为什么需要新建DCI网络？"></a>为什么需要新建DCI网络？</h4><p>1.云数据中心建设位置要求：高拓展性、低成本；资源丰富；温度适宜。</p>
<p>2.新建大型云数据中心与传统骨干网核心位置不重合。</p>
<p>3.云业务对网络要求：云计算对时延有非常严格的要求，如跨DC同步计算、虚拟机热迁移等业务需要在10ms以下；DC间流量具有突发性和不均衡性，需要采用SDN技术进行实时智能调优，而现有网络复杂，新技术部署难。 =&gt; 很难重用现有骨干网，需要新建DCI网络</p>
<h4 id="基于SDN的DCI方案总览"><a href="#基于SDN的DCI方案总览" class="headerlink" title="基于SDN的DCI方案总览"></a>基于SDN的DCI方案总览</h4><p>多地域 多运营商部署多个数据中心的方式 =&gt; 解决用户覆盖、提高用户业务体验的方案。</p>
<p>DCI方案问题：网络不灵活难以跟住业务快速迭代的步伐，链路利用率较低，居高不下的OPEX压力等。</p>
<p>华为SDN DCI整体经济方案：顶层端到端协同，实现包含DC云与DC承载网的云网资源的一站式提供和端到端业务自动化协同发放。</p>
<p>可以支撑云数据中心业务的端到端运营，整体架构包括承载层和控制层，需要在网络基础承载层上引入部署SDN的控制层。</p>
<p>控制层是网络的业务发放管理平台和网络智能控制中心，该层主要功能部件为: a.业务发放平台，提供业务自动化入口实现租户业务自助发放，以及网络资源状态的可视化和运维管理入口; b.业务协同平台，DCI业务需求分解和DC和IDC的协同，实现端到端的跨控制器资源的协同和分解；c.云平台，接收业务发放平台的业务分解，进行DC云业务分解和协同，实现DC的内存储，计算和网络的协同；d.DC控制器，接受OpenStack业务分解，统一控制DC的NVE和VxLAN GW，实现DC内网络自动部署和控制；e.DCI控制器，接受业务协同平台资源的分解，实现Underlay网络部署的自动化和网络流量的智能优化；f.流量采集工具，调优策略的输入；g.流量采集组件，可以基于端口，TE隧道进行流量采集和分析，并提供网络流量可视化的界面。</p>
<p>DCI骨干网解决方案承载层是租户业务的承载实体，负责跨DC网络的连接，以及业务宽带和SLA保证，骨干网支持VxLAN技术，提供了大二层组网的能力，能够跨越广域网和多个物理DC构建vDC网络，实现了跨区域的资源节点的互备和虚拟机动态迁移，有效提升了DC云资源的利用效率。</p>
<p>骨干网部署业界广泛使用的MPLS TE流量工程技术，为租户业务提供端到端的宽带保证，提升了网络资源的利用效率，特别是提供了基于租户和业务的差异化的服务能力。</p>
<p>网络承载支持采用Overlay技术，Overlay业务网络基于云业务驱动，支持快速的业务开通。Underlay物理网络按需提供网络资源，实现端到端的SLA保障和智能流量的优化。</p>
<h4 id="b-智能流量调优方案：RR-方案"><a href="#b-智能流量调优方案：RR-方案" class="headerlink" title="b.智能流量调优方案：RR+方案"></a>b.智能流量调优方案：RR+方案</h4><p>目前的IP Core网络存在以下流量调整需求：实现IGW出口/DC出口的流量均衡，均衡链路向流量的分布；降低不同ISP网间费用的结算，将流量更多的分布于费用较低的链路上；提升VIP用户的体验，将VIP用户的流量调整到SLA服务更好的链路上。</p>
<p>当前解决方案依赖于手工调整BGP路由策略：监控链路带宽利用率；识别出需要调整的流；基于流制作BGP策略，下发给设备；循环操作，直到流量符合期望目标要求。手工调整方法不能实时调整，也存在耗时长，配置和维护复杂问题。</p>
<p>RR+方案在IP Core现网中加入SDN Controller，通过Controller实现集中控制，智能化流量调优。</p>
<p>RR+：a.最大化带宽利用率均衡链路间流量的分布，降低网间结算费用，不同客户提供不同SLA服务；b.自动调整流量，取代复杂的手工操作；c.基于标准BGP通讯，可以和现网设备平滑兼容。</p>
<h4 id="c-SDN-PCE-方案"><a href="#c-SDN-PCE-方案" class="headerlink" title="c.SDN PCE+方案"></a>c.SDN PCE+方案</h4><p>什么是PCE+方案：</p>
<p>IP网络对流量的转发依赖于路由转发，路由协议主要使用最短路径优先算法，选择Cost值最小的路径进行转发，不会考虑链路带宽的因素，存在宽带利用率低的问题。</p>
<p>PCE+通过在网络中部署PCE server(SDN Controller)，使用StatefulPCE技术，为MPLS TE LSP集中算路。使网络带宽资源使用尽量达到最优。</p>
<p>需要新部署的设备：PCE Server，收集全网拓扑信息和托管业务，全局管理网络宽带资源，统一分配全网带宽资源，集中计算LSP业务路径；转发设备均称为PCE Client。</p>
<p>当网络中的PCE Client需要计算LSP时，会向PCE Server发起路径计算请求，由Server进行计算后再把结果反馈给Client，Client收到结果之后再进行LSP隧道建立。</p>
<h4 id="思考题：什么是DCI？"><a href="#思考题：什么是DCI？" class="headerlink" title="思考题：什么是DCI？"></a>思考题：什么是DCI？</h4><p>DCI，即Data Center Interconnect，指的是用于数据中心之间互联的网络，DCI网络正是实现“以数据中心为中心组网”的基础承载网络。</p>
<h3 id="NFV技术概述与发展趋势"><a href="#NFV技术概述与发展趋势" class="headerlink" title="NFV技术概述与发展趋势"></a>NFV技术概述与发展趋势</h3><h4 id="ICT当前面临的结构性挑战"><a href="#ICT当前面临的结构性挑战" class="headerlink" title="ICT当前面临的结构性挑战"></a>ICT当前面临的结构性挑战</h4><p>A.增收面临结构性挑战：电信业用户数饱和，传统业务下滑。</p>
<p>B.节流面临结构性挑战：在CT行业投入成本下降的情况下，IT部分的投入持续增长。</p>
<p>C.创新面临结构性挑战：CT业一年有5个业务创新，IT业的业务创新一年能达到16w个。商用速度上，CT业每月6个上市，IT业每小时12个上市。</p>
<p>万物互联，IT与CT融合，诞生了NFV。</p>
<h4 id="什么是NFV"><a href="#什么是NFV" class="headerlink" title="什么是NFV"></a>什么是NFV</h4><p>NFV，Network Functions Virtualization 网络功能虚拟化，是在ETSI组织下组建的产业标准组织，希望通过采用通用服务器、交换机和存储设备到达实现传统电信网络的功能。通过借助IT的虚拟化技术，许多类型的网络设备可以合并到工业标准中，如servers、switches和storage，可以部署在数据中心、网络节点或者是用户家里，这需要网络功能以软件方式实现，并能在一系列的工业标准服务器硬件上运行，可以根据需要进行迁移、实例化，部署在网络的不同位置，无需安装新设备。</p>
<p>关键诉求包括基于标准的大容量Server，存储和大容量以太网，不同Vendor提供的应用以软件的形式远程自动部署在统一的基础设施上。</p>
<p>NFV的三个关键点是：软硬件解耦、开放、自动化。</p>
<h4 id="NFV将IT基因融入电信网络"><a href="#NFV将IT基因融入电信网络" class="headerlink" title="NFV将IT基因融入电信网络"></a>NFV将IT基因融入电信网络</h4><p>传统电信网络由于软件硬件绑定，更新困难，多厂家异构的专有硬件以及烟囱式的网络造成了管理维护的困难，采用虚拟化技术和云计算的目标网络，硬件采用标准的服务器、存储和交换机，通过虚拟化之后，上层的业务通过软件形式，运行在统一的标准的硬件基础上，从而带来很多好处。</p>
<p>由于软硬件解耦，网络功能虚拟化易于更新，硬件通用化，支持异构，资源归一，简化管理和运维。</p>
<h4 id="NFV正在走向成熟"><a href="#NFV正在走向成熟" class="headerlink" title="NFV正在走向成熟"></a>NFV正在走向成熟</h4><p>NFV发展曲线说明NFV正在趋于成熟，伴随着一系列的架构标准的建立及稳定。</p>
<h3 id="NFV-网络架构"><a href="#NFV-网络架构" class="headerlink" title="NFV 网络架构"></a>NFV 网络架构</h3><h4 id="NFV生态系统"><a href="#NFV生态系统" class="headerlink" title="NFV生态系统"></a>NFV生态系统</h4><p>相关标准组织：</p>
<p>1.ETSI在2012年成立了NFV ISG来研究网络功能虚拟化。</p>
<p>2.OpenSource组织：OPNFV、OpenStack等。</p>
<p>NFV产业联盟秉承开发、创新、协同、落地的宗旨，集多厂商和合作伙伴进行联合创新，成为开放联盟的引领者。</p>
<p>业界和领先运营商对NFV的认可，积极拥抱NFV，如：Current Analysis；华为的Telifonica；Vodafone；德国电信；Orange等。</p>
<p>Vodafone业界首个NFV商用节点，基础设施、操作系统和应用软件分别使用惠普、VMware和华为多厂商环境，通过华为进行系统集成，构造电信级别的SLA保障和NFV网络。</p>
<h3 id="NFV框架"><a href="#NFV框架" class="headerlink" title="NFV框架"></a>NFV框架</h3><p>NFV框架包括三大组件：NFVI、VNF和MANO。</p>
<h4 id="1-NFVI："><a href="#1-NFVI：" class="headerlink" title="1.NFVI："></a>1.NFVI：</h4><p>硬件和云操作系统。</p>
<p>框架中最底层的是硬件，包括计算、存储和网络资源；往上是云操作系统，完成虚拟化和云化的相关功能。</p>
<p>I意指设施，这些设施均有VIM进行管理。</p>
<h4 id="2-虚拟网络功能"><a href="#2-虚拟网络功能" class="headerlink" title="2.虚拟网络功能"></a>2.虚拟网络功能</h4><p>如vIMS提供IMS的语言服务，vEPC提供4G的数据网络功能。</p>
<p>虚拟网络功能由VNFM来管理，提供VNF的生命周期管理。</p>
<h4 id="3-网络管理层和网管"><a href="#3-网络管理层和网管" class="headerlink" title="3.网络管理层和网管"></a>3.网络管理层和网管</h4><p>网管可以配套NFVO进行网络业务生命周期的管理。</p>
<h3 id="NFV三大组件关键要求"><a href="#NFV三大组件关键要求" class="headerlink" title="NFV三大组件关键要求"></a>NFV三大组件关键要求</h3><h4 id="1-组件MANO-NFVO-VNFM-VIM"><a href="#1-组件MANO-NFVO-VNFM-VIM" class="headerlink" title="1.组件MANO(NFVO+VNFM+VIM)"></a>1.组件MANO(NFVO+VNFM+VIM)</h4><p>a.VNFM适配不同厂商NFVO和VIM</p>
<p>b.MANO系统应该尽量减小对现有OSS/BSS冲击</p>
<p>如要求MANO支持和现有传统平台的对接。</p>
<h4 id="2-组件VNF-虚拟化网络功能"><a href="#2-组件VNF-虚拟化网络功能" class="headerlink" title="2.组件VNF 虚拟化网络功能"></a>2.组件VNF 虚拟化网络功能</h4><p>a.可以运行在不同厂商的NFVI</p>
<p>b.对应传统电信业务网络，每个物理网元映射为一个虚拟网元VNF</p>
<h4 id="3-组件NFVI-云操作系统"><a href="#3-组件NFVI-云操作系统" class="headerlink" title="3.组件NFVI 云操作系统"></a>3.组件NFVI 云操作系统</h4><p>a.优选基于OpenStack的云操作系统</p>
<p>b.将物理计算/存储/交换资源通过虚拟化转换为虚拟的计算/存储/交换资源池</p>
<p>4.组件NFVI硬件</p>
<p>a.优选使用具有虚拟化辅助功能的芯片的COTS</p>
<p>b.同时具备高IOPS与高可靠性的磁阵</p>
<p>c.低RAID等级的磁阵建议冗余组网</p>
<h4 id="NFV关键能力"><a href="#NFV关键能力" class="headerlink" title="NFV关键能力"></a>NFV关键能力</h4><p>解决业务网络的自动部署问题，是一个巨型的ICT系统集成工程。</p>
<h3 id="开放"><a href="#开放" class="headerlink" title="开放"></a>开放</h3><p>开放的能力是指虚拟化网络功能运行在多厂商云平台，表现在广泛兼容、性能稳定和支持异构三方面。</p>
<p>NFV网络在商用之前通过测试多种硬件而稳定运行。</p>
<p>另外NFV支持异构，比如在硬件基础上，我们可以支持厂商B的VNFM和厂商A的NFVO，并且可以和现网的传统平台进行异构系统集成。</p>
<p>NFV平台必须是一个开放共享的环境，能够运行来自不同厂商的应用，广泛兼容不同厂商的硬件以及云化的操作系统。</p>
<h3 id="云化架构-虚拟化-云化"><a href="#云化架构-虚拟化-云化" class="headerlink" title="云化架构(虚拟化!=云化)"></a>云化架构(虚拟化!=云化)</h3><p><strong>云化架构是弹性和可靠性的基础。</strong>传统平台软件硬件绑定；在虚拟化阶段，软件硬件进行解耦，软件可以运行在标准的硬件基础上，但是业务逻辑和业务数据仍然还是绑定的。</p>
<p>NFV应用平台必须为开发者提供网络功能和子功能部署的精细化控制能力，基于运营商策略和资源的可用性，自动发现工作负载所应在的最佳位置，还需要将分布式数据中心和网络作为一个单一的虚拟云来管理，这使得运维人员可以管理来自各种输入源的事件，以便实时的对整个云平台进行分析和监控，进而提升决策效率。</p>
<p>在云化架构阶段，软件硬件继续解耦，同时<strong>业务逻辑和业务数据进行了解耦，会话转发层和业务逻辑进行了解耦。</strong></p>
<p>eg.CSCF</p>
<p>会话转发层有CSDPU虚拟机负责收发报文，业务逻辑层有CSSCU虚拟机负责处理业务逻辑，业务数据层有CSRDB虚拟机负责保存用户业务的数据，如稳态呼叫会话数据。</p>
<p>用户的业务数据保存在不同的主RDB上，主RDB同步给备RDB，做到分布式的数据库弹性部署，同时支持主备冗余备份可靠性。</p>
<h3 id="弹性"><a href="#弹性" class="headerlink" title="弹性"></a>弹性</h3><p>分钟级的弹性扩容和秒级弹性缩容。</p>
<p>当业务量需要增加的时候，由主RDB生成新的虚拟机来支持更多的业务处理，RDB中就保留了动态数据，如用户签约数据等。用动态数据可以生成新的VM来支持业务需要。</p>
<p>当业务量下降的时候，如夜晚，用户呼叫量下降，可以将业务迁移到其他虚拟机，并对相应虚拟机设备下电，减少虚拟机设备的运行，而稳态话务可以立即在其他模块中重建。</p>
<h3 id="高可靠性"><a href="#高可靠性" class="headerlink" title="高可靠性"></a>高可靠性</h3><p>不论应用层、云操作系统层还是硬件层，都有相应的冗余机制。</p>
<p>应用层高可靠性可以通过<strong>主备和LB方式</strong>实现主备VM之间的冗余，<strong>主备方式冗余机制</strong>就是当主虚拟机故障了，备用虚拟机自动接管业务；另一种就是<strong>无状态的N+M冗余机制</strong>，当负荷分担的N个虚拟机中有谁故障了，其他M各虚拟机自动接管。</p>
<p>云操作系统可靠性可以通过<strong>虚拟机快速重建冗余机制</strong>来实现，虚拟机故障之后通过新生成的虚拟机接管故障虚拟机的业务。</p>
<p>硬件层高可靠性主要通过<strong>簇化以及物料冗余机制</strong>实现计算、存储、网络等硬件设备的冗余。当某一网元，如服务器故障之后，其他冗余资源将自动接管。</p>
<p>硬件层、VM层、业务层各层的可靠性各自独立，确保应用层会话零中断及资源永远可用，实现电信级五个9的可用性和可靠性。</p>
<h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><p>NFV业界权威评估公司SPECvirt评估，华为的FusionSphere性能得分为4.6分，排名第一。在呼叫处理能力方面，华为FusionSphere比第二名VMware高出17%。</p>
<p>高性能优化会用到很多关键技术，比如NUMA亲和性、CPU绑定、DPDK、透明巨页、虚拟中断优化等等。</p>
<h3 id="NFV存在的问题"><a href="#NFV存在的问题" class="headerlink" title="NFV存在的问题"></a>NFV存在的问题</h3><p>1.NFV标准不成熟</p>
<p>2.多供应商，集成复杂</p>
<p>3.部件兼容性风险大</p>
<p>NFV只定义架构层次，各个层次接口的标准是由其他开源或者技术组织来实现，多厂家设备不兼容性的风险大。</p>
<p>4.NFV工程难度大</p>
<p>5.网络虚拟化技术滞后</p>
<p>6.虚拟化可靠性不够</p>
<p>目前达不到5个9的电信级可靠性。</p>
]]></content>
  </entry>
  <entry>
    <title>华为S5700三层交换机基本配置</title>
    <url>/2019/04/18/9/</url>
    <content><![CDATA[<p><strong>通过Console口登录交换机</strong></p>
<p> 通过Console口登录主要用于交换机第一次上电或者本地配置。或者无法通过远程访问时，可通过Console口登录。</p>
<p>​    如何才能通过Console口登录交换机呢？在配置通过Console口配置交换机之前，需要完成以下任务：</p>
<ul>
<li>准备好PC/终端（COM串口 和 RS-232电缆）</li>
<li>PC已安装终端仿真程序（超级终端、SecureCRT、Xshell等）</li>
</ul>
<p>​    使用配置电缆将PC的9芯串口（串口标志是COM）插座，（如果没有COM口，可以使用USB转RS-232连接）和交换机的Console口连接，然后把交换机上电。然后通过终端软件连接，设置连接的接口以及通信参数。</p>
<p>​    现在很多笔记本都没有com口了，所以最好需要一根 USB 转 RS232 线（在下给各位大神推荐 <strong>力特</strong> 品牌，相当给力）就更完美了。</p>
<p><a href="https://s3.51cto.com/wyfs02/M00/6E/D7/wKioL1WKB0TRiWZKAABmEknY-fY018.jpg"><img src="https://s3.51cto.com/wyfs02/M00/6E/D7/wKioL1WKB0TRiWZKAABmEknY-fY018.jpg" alt="wKioL1WKB0TRiWZKAABmEknY-fY018.jpg" loading="lazy"></a></p>
<p><a href="https://s3.51cto.com/wyfs02/M01/6C/C8/wKiom1VRwa_Sz7bcAAA57sRVrjE010.jpg"><img src="https://s3.51cto.com/wyfs02/M01/6C/C8/wKiom1VRwa_Sz7bcAAA57sRVrjE010.jpg" alt="wKiom1VRwa_Sz7bcAAA57sRVrjE010.jpg" loading="lazy"></a></p>
<p><a href="https://s3.51cto.com/wyfs02/M01/54/6A/wKiom1SBZ2HArUAuAAG5uczoX0g009.jpg"><img src="https://s3.51cto.com/wyfs02/M01/54/6A/wKiom1SBZ2HArUAuAAG5uczoX0g009.jpg" alt="wKiom1SBZ2HArUAuAAG5uczoX0g009.jpg" loading="lazy"></a></p>
<p>​    <strong>这里我当时遇到的问题是：Port 应该选择COM* 呢？ 因PC端可能会存在多个连接接口， 这里需要选择的是连接Console线缆的那个接口。 一般情况下， 选择的接口是COM1。</strong></p>
<p>​    这个端口号，我们可以在【设备管理器】中查看，并且可以更改端口的编号。方法如下：</p>
<p>设备管理器 — 端口（COM和LPT）【只有连接到串口线才会出现】— 双击要修改的COM口（或者右键-属性）– 端口设置 – 高级 –端口号</p>
<p><a href="https://s3.51cto.com/wyfs02/M01/54/68/wKioL1SBaOGhKPOiAAJAEyFVkhU669.jpg"><img src="https://s3.51cto.com/wyfs02/M01/54/68/wKioL1SBaOGhKPOiAAJAEyFVkhU669.jpg" alt="wKioL1SBaOGhKPOiAAJAEyFVkhU669.jpg" loading="lazy"></a></p>
<p><a href="https://s4.51cto.com/wyfs02/M00/78/82/wKioL1Z-i-WyqnxoAAA_XbMRZuE691.png"><img src="https://s4.51cto.com/wyfs02/M00/78/82/wKioL1Z-i-WyqnxoAAA_XbMRZuE691.png" alt="wKioL1Z-i-WyqnxoAAA_XbMRZuE691.png" loading="lazy"></a></p>
<p>OK， 登录到交换机之后，就开始配置吧。以下配置中，<strong>绿色字体是需要自定义的</strong>。</p>
<p>## 命令是不区分大小写的 ##</p>
<p># 设置设备的名称为GSH-FZ-Front<br><Quidway> system-view<br>[Quidway] sysname GSH-FZ-Front</p>
<p># 设置查看设备的时区,时间</p>
<p># 设置当前时间：clock datetime HH:MM:SS YYYY-MM-DD</p>
<p># 设置时区： clock timezone time-zone-name { add | minus } offset<br># 注意这里是 &lt;用户&gt; 视图</p>
<p><Quidway> clock timezone BJ add 8<br><Quidway> clock datetime 18:20:30 2011-06-08<br><Quidway> display clock</p>
<p>#作为ntp客户端：设定NTP服务器，自动获取更新时间，假设NTP服务器为 202.120.2.101，202.112.10.36</p>
<p><Quidway> system-view<br>[Quidway] ntp-service unicast-peer 202.120.2.101</p>
<p>[Quidway] ntp-service unicast-peer 202.112.10.36</p>
<p># 作为ntp服务器：配置S5700为内网的NTP服务器，内网的二层交换机指定这个S57为 NTP server 就行</p>
<p><Quidway> system-view</p>
<p>[Quidway] ntp-service authentication enable<br>[Quidway] ntp-service sync-interval 180<br>[Quidway] ntp-service authentication-keyid 42 authentication-mode md5 cipher 123456<br>[Quidway] ntp-service reliable authentication-keyid 42</p>
<p># 查看NTP状态</p>
<p><Quidway> display clock</p>
<p><Quidway> display ntp-service status</p>
<p><Quidway> display ntp-service sessions</p>
<p># 设置标题文本</p>
<p><Quidway> system-view</p>
<p># 设置登录时的提示信息: header login { information text | file file-name }</p>
<p>[Quidway]  header login information #Welcome S5700#</p>
<p># 设置登录成功后的提示信息: header shell { information text | file file-name }</p>
<p> [Quidway] header shell information #Welcome S5700#</p>
<p>注意：输完命令header shell information后，需要敲一个特殊字符，什么符号都可以，比如“%”，然后回车进入“shell’ information”的输入界面，此时可以随意输入任何字符，最后一定要以我们刚才设定的符号结束（这里是 “%”），然后回车退出此界面，方可生效。</p>
<p>注意：这条命令Header后面有两个参数，一个是shell，一个是login，shell是进入命令行时（<Quidway>）的提示信息，login是成功登录设备之后看到的提示信息。</p>
<p><strong>#telnet远程登录</strong></p>
<p>前提：</p>
<p>1、交换机以太网接口的IP地址</p>
<p>2、Telnet 访问的用户信息（用户名、口令和验证方式）</p>
<p>3、保证PC与交换机路由可达</p>
<p>有些盒式设备没有管理口，可使用VLANIF接口配置管理IP地址。</p>
<p><strong>步骤一：</strong>创建VLAN，并配置交换机VLAN的管理IP</p>
<p>#  创建vlan</p>
<p><Quidway> system-view</p>
<p>[Quidway] vlan 10</p>
<p>[Quidway-vlan10] quit  </p>
<p># 配置管理 IP</p>
<p>[Quidway] interface vlan 10</p>
<p>[Quidway-Vlanif10] ip address 192.168.1.2  24      【或  ip   addr  192.168.1.2  255.255.255.0】</p>
<p>[Quidway-Vlanif10] quit</p>
<p># 把端口加入vlan</p>
<p>[Quidway] int gigabitethernet 0/0/1<br>[Quidway-GigabitEthernet0/0/1] port hybrid untagged vlan 10     （0/0/1端口以untag方式加入vlan 10）</p>
<p>[Quidway-GigabitEthernet0/0/1] quit</p>
<p><strong>步骤二：</strong>配置telnet用户，登录级别和认证方式. 在交换机上配置Telnet服务功能并使用AAA验证方式登录。</p>
<p># password { simple | cipher }</p>
<p># 如果使用simple选项，密码将以明文形式保存在配置文件中。一般情况下，应使用cipher 选项将密码加密保存，同时使用</p>
<p># cipher选项后，无法从系统中取回，请妥善保管密码。<br><Quidway> system-view<br>[Quidway] aaa<br>[Quidway-aaa] local-user testadmin password cipher p@ssw0rd privilege level 15</p>
<p>[Quidway-aaa] local-user testadmin service-type telnet        (设置用户登录方式为 telnet， 只能通过telnet方式登录，还有这几种 ssh   http   web)  一般不配置它。</p>
<p>[Quidway-aaa] quit</p>
<p>[Quidway] <strong>telnet server enable</strong></p>
<p>[Quidway] <strong>user-interface vty 0 4</strong></p>
<p>[Server-ui-vty0-4] <strong>user privilege level 15</strong></p>
<p>[Quidway-vty0-4] authentication-mode aaa        （设置认证方式为: aaa ）</p>
<p>[Quidway-vty0-4] quit</p>
<p>小贴士： 如果采用eNSP做实验，验证telnet 配置。 使用PC是不行的。 可以用 AR 模拟代替PC， 需在用户模式下使用 telnet 命令。</p>
<p><strong>#SSH远程登录</strong></p>
<p>需求：PC能通过SSH协议远程登录交换机进行管理。</p>
<p>1、生成本地密钥对：</p>
<p><Quidway> system-view<br>[Quidway] rsa local-key-pair create</p>
<p>The key name will be: Auotnavi-callcenter-01_Host</p>
<p>The range of public key size is (512 ~ 2048).</p>
<p>NOTES: If the key modulus is greater than 512,</p>
<p>​       It will take a few minutes.</p>
<p>Input the bits in the modulus[default = 512]:1024</p>
<p>Generating keys…</p>
<p>.++++++</p>
<p>…………++++++</p>
<p>……………++++++++</p>
<p>.++++++++</p>
<p>2、配置VTY用户界面</p>
<p><Quidway> system-view<br>[Quidway] user-interface vty 0 4</p>
<p>[Quidway-ui-vty0-4]  authentication-mode aaa</p>
<p># 必须设置VTY用户验证方式为AAA，否则 protocol inbound ssh 命令无法成功</p>
<p>[Quidway-ui-vty0-4]  protocol inbound ssh</p>
<p>3、创建SSH用户及密码</p>
<p>[Quidway] aaa</p>
<p>[Quidway-aaa] local-user admin password cipher 123</p>
<p>[Quidway-aaa] local-user admin privilege level 15</p>
<p>[Quidway-aaa] local-user admin service-type ssh</p>
<p>4、使用Stelnet，并配置SSH用户的认证方式</p>
<p>[Quidway] stelnet server enable</p>
<p>[Quidway] ssh authentication-type default password</p>
<p><strong>## 划分VLAN</strong></p>
<p><strong>默认情况下，所有交换机端口都属于vlan1</strong></p>
<p><strong>#创建VLAN</strong><br><Quidway> system-view                    （一般缩写为：sys）</p>
<p>[Quidway] vlan 10                               (批量添加vlan:  vlan batch 10 20 30;    vlan batch  2  3  to  10)<br>[Quidway-vlan10] quit                         （一般缩写为：q）</p>
<p>[Quidway]display vlan                         （查看创建的VLAN）</p>
<p>#设定端口模式，默认为trunk，需要将端口划入VLAN之前，先把端口类型转为 access</p>
<p><Quidway> system-view<br>[Quidway] int gigabitethernet 0/0/1                    （进入端口配置模式： interface）<br>[Quidway-GigabitEthernet0/0/1] port   link-type  access</p>
<p>[Quidway-GigabitEthernet0/0/1] port   default  vlan 10    # 将端口加入vlan</p>
<p>[Quidway-GigabitEthernet0/0/1] <strong>dis this</strong></p>
<p>#</p>
<p>interface GigabitEthernet0/0/1</p>
<p> port link-type access</p>
<p> port default vlan 10</p>
<p>#</p>
<p>return</p>
<p>[Quidway-GigabitEthernet0/0/1] quit</p>
<p><strong>#将端口加入Vlan（第二种方式）</strong><br><Quidway> system-view<br>[Quidway] vlan 10<br>[Quidway-vlan131] port gigabitethernet 0/0/1      （连续多个端口，用 xx to xx， 如：port giga 0/0/5  to  0/0/10）<br>[Quidway-Vlan131] quit</p>
<p><strong>#设置Trunk， 两台相连的交换机都要设置</strong><br><Quidway> system-view<br>[Quidway] interface GigabitEthernet 0/0/23<br>[Quidway-GigabitEthernet0/0/23] port link-type trunk<br># 如果不设置下面这条配置，VLAN10 ， VLAN131都会处于DOWN的状态</p>
<p>[Quidway-GigabitEthernet0/0/23] port trunk allow-pass vlan 10 131    (多个VLAN列出，允许哪些VLAN通过)</p>
<p>#设置VLAN IP(管理IP)</p>
<p><strong>VLANIF 接口</strong></p>
<p>当需要与网络层的其他设备通信时，可以创建基于VLAN的逻辑接口，即VLANIF接口。VLANIF接口是网络层接口，可以配置IP地址，借助VLANIF接口，就能与其他网络层的设备相互通信。</p>
<p><Quidway> system-view</p>
<p>[Quidway] interface vlanif 131<br>[Quidway-Vlanif131] ip address 192.168.0.253 255.255.255.0  (缩写： ip add  IP  MASK)<br>[Quidway-Vlanif131] shutdown<br>[Quidway-Vlanif131] undo shutdown</p>
<p><strong># 删除VLAN</strong></p>
<p>1、如果配置VLAN的管理IP，在系统视图下，使用 undo int  vlan 10 命令删除VLAN 10的3层虚拟接口，这样三层的VLAN 10就被删除了，但是划入VLAN 10 的那些端口依然在VLAN 10中。这时还需要把那些端口恢复，让他们不属于任何VLAN</p>
<p><Quidway> system-view<br>[Quidway] undo int vlanif 10</p>
<p>2、在系统视图下，使用 undo vlan 10 命令可以删除2层接口，这个命令可以释放那些原来划分为VLAN 10的端口，现在这些端口就属于默认的VLAN 1了。</p>
<p><Quidway> system-view<br>[Quidway] undo vlan 10</p>
<p>[Quidway] display vlan</p>
<p>当然，要向VLAN添加端口，是可以直接在VLAN视图中添加的。</p>
<p>需要注意的是：交换机上的某个端口被设置成access模式，且加入了一个VLAN， 要想将这个端口模式改为trunk，直接在接口视图中“port link-type trunk” 是不行的，会出现 Error: Please renew the default configurations. 这时需要先从VLAN中删除这个端口，也就是让这个接口恢复到默认的VLAN 1， 才能将这个端口设置为trunk。</p>
<p><Quidway> system-view<br>[Quidway] vlan 10</p>
<p>[Quidway] undo port giga 0/0/1</p>
<p><strong>1**</strong>、批量创建**<strong>VLAN</strong></p>
<p>&lt; Huawei &gt; <strong>system-view</strong></p>
<p>[Huawei]<strong>vlan batch 2 to 100</strong></p>
<p><strong>2**</strong>、批量端口加入**<strong>VLAN</strong></p>
<p>[Huawei] <strong>port-group group-member GigabitEthernet 0/0/10 to</strong> <strong>GigabitEthernet 0/0/20</strong></p>
<p>[Huawei-port-group]<strong>port link-type access</strong></p>
<p>[Huawei-port-group]<strong>port default vlan 100</strong></p>
<p>3、<strong>快速恢复端口**</strong>VLAN**<strong>缺省配置</strong></p>
<p>想要快速恢复端口VLAN的缺省配置，必须要知道什么是缺省配置？华为交换机，缺省情况下所有端口都是只加入VLAN1的。</p>
<p>那么下面和小编一起看看3种链路类型下，怎么快速恢复缺省配置呢？</p>
<p> access口： 一步搞定，命令是<strong>undo port default vlan</strong></p>
<p> trunk和hybrid口： 三步搞定，先恢复PVID的配置，再删除端口下所有vlan，然后再把缺省的VLAN1 加入。具体命令如下：</p>
<p><a href="https://s3.51cto.com/wyfs02/M01/78/87/wKiom1Z_RUCABcMhAAA6M0AYgl0364.png"><img src="https://s3.51cto.com/wyfs02/M01/78/87/wKiom1Z_RUCABcMhAAA6M0AYgl0364.png" alt="wKiom1Z_RUCABcMhAAA6M0AYgl0364.png" loading="lazy"></a></p>
<p><strong># 配置端口组, 进行批量配置</strong></p>
<p># S5700有48个端口，如果要配置VLAN，需要为每个端口先配置port link-type access，才能加入到VLAN，这岂不是很郁闷？</p>
<p><strong>如此多的接口，要是我一个个逐一配置多麻烦啊。不仅容易出错，而且造成大量重复工作。  【配置端口组功能就可以解决该问题】</strong></p>
<p># 于是乎，端口组的出现了，把一些端口添加到一个组里，然后对这个组进行配置，该组内的所有端口都会应用此配置，这样就能批量配置了，大大减少重复工作。</p>
<p>你只需要将这些以太网接口加入同一个端口组，在端口组视图下，只需输入一次业务命令，该端口组内的所有以太网接口都会配置该命令，快速完成接口批量配置，减少重复工作。</p>
<p>其实端口组也是有<strong>临时端口组和永久端口组</strong>两种。</p>
<p><strong>临时端口组：一旦退出端口组视图，该临时端口组将被系统自动删除。</strong></p>
<p><strong>永久端口组：将写入配置文件，如果希望删除永久端口组，需要手动删除。</strong></p>
<p><strong>配置临时端口组：</strong></p>
<p>需求：需要将GE0/0/1～GE0/0/10共二十个接口均关闭，但是后续这些接口由于配置不一致，还需要单独进行配置，那就可以选择临时端口组进行如下配置：</p>
<p><HUAWEI> system-view                                             </p>
<p>[HUAWEI] port-group group-member gigabitethernet 0/0/1 to gigabitethernet 0/0/10  // 将接口GE0/0/1～GE0/0/10加入到临时端口组，此步骤等同于执行命令interface range gigabitethernet 0/0/1 to gigabitethernet 0/0/10</p>
<p>[HUAWEI-port-group]shutdown        // 临时端口组视图中配置需要批量下发的命令         </p>
<p>[HUAWEI-port-group] quit       // 退出临时端口组后，系统就会自动删除这个临时端口组</p>
<p><strong>配置永久端口组</strong></p>
<p>需求：需要将GE2/0/1～GE2/0/10共十个接口均配置为access接口，而且这些接口配置信息相对固定，均保持一致，那就可以选择永久端口组进行如下配置：</p>
<p><HUAWEI> system-view                                              </p>
<p>[HUAWEI] port-group portgroup1                         // 创建名称为portgroup1的永久端口组 </p>
<p>[HUAWEI-port-group-portgroup1] group-member gigabitethernet2/0/1  to  gigabitethernet  2/0/10<br>                         //  将接口GE2/0/1～GE2/0/10加入到永久端口组中</p>
<p>[HUAWEI-port-group-portgroup1] port link-type  access </p>
<p>​                         // 永久端口组视图中配置需要批量下发的命令                                      </p>
<p>[HUAWEI-port-group-portgroup1] quit                            // 退出端口组视图后，名称portgroup1的永久端口组仍然存在</p>
<p>江湖小贴士：<strong>如何知道永久端口组中的成员接口呢?</strong></p>
<p>执行命令<strong>display port-group</strong> [ <strong>all</strong> | <em>port-group-name</em> ]，就可以查看永久端口组的成员接口信息啦。</p>
<p><strong>如何批量清除一个接口的所有配置？</strong></p>
<p>只需要在接口视图下执行命令<strong>clear configuration this</strong>就可以一键清除接口下的配置啦。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[HUAWEI] interface gigabitethernet 0&#x2F;0&#x2F;1</span><br><span class="line">[HUAWEI-GigabitEthernet0&#x2F;0&#x2F;1]</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line">description switch-A</span><br><span class="line">port link-type access</span><br><span class="line">#</span><br><span class="line">return</span><br><span class="line">[HUAWEI-GigabitEthernet0&#x2F;0&#x2F;1] clear configuration this       &#x2F;&#x2F; 清除接口下所有配置，恢复到缺省值</span><br><span class="line">Warning: All configurations of the interface will be cleared，and its state will be shutdown. Continue? [Y&#x2F;N] :y</span><br><span class="line">Info: Total 2 command(s) executed, 2 successful, 0 failed.</span><br><span class="line">[HUAWEI-GigabitEthernet0&#x2F;0&#x2F;1] display this</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line">shutdown &#x2F;&#x2F; 清除接口下所有配置后，接口将处于关闭状态</span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<p>为何我在华为的模拟器5700交换机上无法使用 clear configuration this 命令，交换机版本是 Version 5.110 (S5700 V200R001C00) ？？</p>
<p>交换机V2R1版本不支持<strong>clear configuration this</strong> 命令，对于V2R1版本，您可以在系统视图下执行如下命令</p>
<p>一键式清除接口下的配置—   [Quidway]   clear  configuration  interface  <em>interface-type  interface-number</em></p>
<p>1、命令注释建议使用 # 空格+注释，不要使用 // ，因为 # 加空格的注释直接拷贝到设备上也不会提示错误~<br>2、注释建议另起一行（如命令行前面），不要直接跟在命令后，导致一行过长，换行看着比较乱</p>
<p><Quidway> system-view<br>[Quidway] port-group 1      # 创建名为1的永久端口组</p>
<p>[Quidway-port-group-1] group-member GigabitEthernet 0/0/10 to GigabitEthernet 0/0/20   # 添加端口到组</p>
<p># 然后就可以批量设置端口了</p>
<p>[Quidway-port-group-1] port link-type access            # 设置端口类型</p>
<p>[Quidway-port-group-1] port default vlan 10             # 把端口加入vlan</p>
<p># 查看组配置</p>
<p>[Quidway] display cur | include group</p>
<p><strong>对端口进行限速</strong></p>
<p>​    假设对交换机的第2个端口进行限速，让通过这个端口的下载速度不超过 128KB/S</p>
<p>Inbound:     入端口的流量限速</p>
<p>Outbound:   出端口的流量限速</p>
<p><Quidway> system-view</p>
<p>[Quidway] int giga 0/0/2</p>
<p>[Quidway-GigabitEthernet0/0/2] qos lr outbound cir 1024 cbs 204800 </p>
<p># 默认单位：KB， 1024表示1M的带宽，理论下载速度就是 128KB/S， cbs代表突发信息速率，cir表示承诺信息速率</p>
<p># 取消限速</p>
<p>[Quidway-GigabitEthernet0/0/2] undo qos lr outbound </p>
<p><strong>配置基于地址池的DHCP服务器</strong></p>
<p>1、全局启用DHCP服务</p>
<p><Quidway> system-view</p>
<p>[Quidway] dhcp enable</p>
<p>2、创建地址池并配置相关属性。配置IP地址池 10 的属性（地址池范围、DNS地址、出口网关、租期）</p>
<p>[Quidway] ip pool 10</p>
<p>[Quidway-ip-pool-10] network 192.168.10.0 mask 255.255.255.0</p>
<p>[Quidway-ip-pool-10] excluded-ip-address 192.168.10.250 192.168.10.254  （start_ip - end_ip）</p>
<p>[Quidway-ip-pool-10] dns-list 202.103.24.68</p>
<p>[Quidway-ip-pool-10] gateway-list 192.168.10.1</p>
<p>[Quidway-ip-pool-10] lease day 10</p>
<p>[Quidway-ip-pool-10] quit</p>
<p>同样， 也可以配置地址池 20 的属性。（地址池范围、DNS地址、出口网关、租期）</p>
<p>2、配置VLANIF 10 接口下的客户端从全局地址池中获取IP地址</p>
<p>[Quidway] interface vlanif 10</p>
<p>[Quidway-Vlanif10] ip add 192.168.10.1 255.255.255.0    (或者 ip add 192.168.10.1  24)</p>
<p>[Quidway-Vlanif10] dhcp select global</p>
<p>[Quidway-Vlanif10] quit</p>
<p>更多内容：<a href="http://www.elvhome.com/html/2013-5-15/201351511175895517.html">http://www.elvhome.com/html/2013-5-15/201351511175895517.html</a></p>
<p>#设置默认路由<br><Quidway> system-view<br>[Quidway] ip route-static 0.0.0.0 0.0.0.0 192.168.0.254</p>
<p># 关闭WEB Server,dhcp<br><Quidway> system-view<br>[Quidway] undo http server enable<br>[Quidway] undo dhcp enable</p>
<p><strong>## 用户管理</strong></p>
<p><strong>用户登录界面</strong></p>
<ul>
<li>CON     适用于从Console接口进行本地登录</li>
<li>VTY      适用于Telnet或SSH方式进行本地或远程登录，是虚拟接口。当用户以telnet, ssh, ftp 方式登录到交换机，就建立了一条VTY连接。</li>
</ul>
<p><strong>用户验证</strong></p>
<p>​    对于登录到S5700的用户，系统需要根据配置对其进行验证以保证系统的安全性。</p>
<p><strong>用户级别</strong></p>
<p>​    用户分为多个级别，标识越高则优先级越高。如果不对用户进行优先级规划，默认用户登录级别为 0 - 3 级。</p>
<p>用户所能访问命令的级别由用户的级别决定：</p>
<ul>
<li>如果对用户采用不验证或者password验证，登录到S5700的用户所能访问的命令级别由登录时的用户级别决定。</li>
<li>如果对用户采用AAA验证，登录到S5700的用户所能访问的命令级别由AAA配置信息中本地用户的级别决定。</li>
</ul>
<p>登录用户划分为16级，与命令级别对应。不同级别的用户登录后，只能使用等于或低于自己级别的命令。用户所能访问的命令包括用户所在用户级别的命令以及低于此用户级别的命令。</p>
<p><strong>验证用户的方式：</strong></p>
<p><strong><img src="https://s3.51cto.com/wyfs02/M01/57/0C/wKioL1SQDmmB2a2PAACHNza34OY058.jpg" alt="wKioL1SQDmmB2a2PAACHNza34OY058.jpg" loading="lazy"></strong></p>
<p><a href="https://s3.51cto.com/wyfs02/M01/6F/93/wKiom1Wgw13DMO0tAAWacQW-bEg063.jpg"><img src="https://s3.51cto.com/wyfs02/M01/6F/93/wKiom1Wgw13DMO0tAAWacQW-bEg063.jpg" alt="wKiom1Wgw13DMO0tAAWacQW-bEg063.jpg" loading="lazy"></a>    </p>
<p>系统提供AAA本地验证、密码验证和不验证三种方式。 如何配置启用哪种验证方式呢？</p>
<p><Quidway> system-view</p>
<p># user-interface 配置用户接口<br>[Quidway] user-interface [ui-type] first-ui-number [last-ui-number]</p>
<p># 配置启用用户验证方式</p>
<p>[Quidway] authentication-mode { aaa | password | none }</p>
<p><strong>super密码：</strong></p>
<p>​    华为super 命令设置的口令用于低级用户向高级别用户切换时进行验证，类似于Linux系统从普通用户切换到root用户时需要验证。用户共分为4级，分别是访问级（0）、监控级（1）、系统级（2）和管理级（3），当低级别的用户向高级别的用户身份切换时： super [level] , 此时只有验证通过后才能切换成功。可以通过super命令提升用户级别。</p>
<p>​    如果使用 simple 选项，密码将以明文形式保存在配置文件中，以低级别登录的用户可以通过查看配置方式获取切换密码，造成安全问题。因此，应使用cipher 选项，将密码加密保存。</p>
<p><strong>配置实例：</strong></p>
<p>​    1、配置console口为密码验证方式</p>
<p><Quidway> system-view<br>[Quidway] user-interface console 0</p>
<p>[Quidway-ui-console0] idle-timeout 0  0   ( idle-timeout minutes [seconds] )</p>
<p>[Quidway-ui-console0] history-command max-size 100</p>
<p># 配置用户级别</p>
<p>[Quidway-ui-console0] user privilege level 3        # 设置此接口登录的用户级别</p>
<p># 配置验证方式  password</p>
<p>[Quidway-ui-console0] authentication-mode  password </p>
<p>[Quidway-ui-console0] set authentication password { cipher | simple } password</p>
<p>​    2、配置VTY虚拟接口使用3a认证</p>
<p>​    配置VTY 0-4， 优先级为2， 对从VTY 0-4登录的用户进行AAA验证，用户登录时需要输入用户名： huawei, 密码：huawei</p>
<p>登录后，如果用户超过30分钟未对交换机进行操作，将断开与交换机的连接。</p>
<p># 第一步：配置接口的验证方式</p>
<p><Quidway> system-view</p>
<p>[Quidway] user-interface maximum-vty 5        配置可以同时登录交换机的VTY最大个数</p>
<p>[Quidway] user-interface vty 0 4</p>
<p>[Quidway-ui-vty0-4] authentication-mode aaa</p>
<p>[Quidway-ui-vty0-4] user privilege level 2</p>
<p># 这里的用户级别设置为2 ， 但是采用AAA验证，那么级别由AAA中的本地用户级别决定。 如果采用password或者不验证，那么从此接口登录的用户就是 level 2 级别的。</p>
<p>[Quidway-ui-vty0-4] idle-timeout 30    （idle-timeout minutes [seconds]）</p>
<p>[Quidway-ui-vty0-4] quit</p>
<p># 第二步：配置AAA用户，密码以及权限</p>
<p>[Quidway] aaa</p>
<p>[Quidway-aaa] local-user huawei password cipher huawei </p>
<p># 下面service-type一般不用配置, 将允许所有类型</p>
<p>[Quidway-aaa] local-user huawei service-type telnet</p>
<p>[Quidway-aaa] local-user huawei privilege level 15</p>
<p>[Quidway-aaa] quit</p>
<p># 第三步：配置supper密码</p>
<p>[Quidway] super password level 3 cipher huawei</p>
<p>#保存配置<br><Quidway> save</p>
<p><strong># 配置FTP</strong></p>
<p>1、创建vlan</p>
<p><Quidway> system-view</p>
<p>[Quidway] vlan 10</p>
<p>2、将端口划入vlan</p>
<p>[Quidway-vlan10] port GigabitEthernet 0/0/1 to 0/0/4            (注意：划入的端口模式必须为access)</p>
<p>[Quidway-vlan10] quit</p>
<p>3、配置vlan的管理IP</p>
<p>[Quidway] int vlanif 10</p>
<p>[Quidway-Vlanif10] ip add 192.168.1.254 255.255.255.0</p>
<p>[Quidway-Vlanif10] quit</p>
<p>4、添加FTP用户</p>
<p>[Quidway] aaa</p>
<p>[Quidway-aaa] local-user huawei password cipher huawei privilege level 15</p>
<p>[Quidway-aaa] local-user huawei service-type ftp                # 配置用户为ftp登录</p>
<p>[Quidway-aaa] local-user huawei ftp-directory flash:/          # 配置登录的FTP目录</p>
<p>[Quidway-aaa] quit</p>
<p>5、开启ftp服务</p>
<p># 配置ftp服务器超时断开的时间</p>
<p>[Quidway] ftp timeout 30        # 单位 minutes</p>
<p># 默认情况下，交换机是没有开启ftp服务的，需要手动打开</p>
<p>[Quidway] ftp server enable</p>
<p># 使用display ftp-server 命令查看ftp服务器的配置和状态信息</p>
<p>[Quidway] display ftp-server</p>
<p>6、可选：配置ACL基本访问控制列表</p>
<p># 配置ACL规则</p>
<p>[Quidway] acl number 2001</p>
<p>[Quidway-acl-basic-2001] rule permit source 192.168.1.10 0.0.0.0 </p>
<p>[Quidway-acl-basic-2001] quit</p>
<p># 把acl规则应用到ftp</p>
<p>[Quidway] ftp acl 2001</p>
<p>7、连接测试</p>
<p># 打开命令提示符，或者其他ftp工具</p>
<p>C:\Users\admin&gt; ftp 192.168.1.254</p>
<p>Connected to 192.168.1.254</p>
<p>220 FTP servece ready.</p>
<p>User(192.168.1.254(none)):huawei</p>
<p>331 Password required for huawei.</p>
<p>Password:</p>
<p>230 User logged in.</p>
<p>ftp&gt; </p>
<p><strong># 配置WEB</strong></p>
<p>1、上传web文件</p>
<p># 注意：要开启web服务，需要先上传web管理文件(xxx.web.zip) 到交换机的根目录下</p>
<p># 可以通过ftp上传</p>
<p>C:\Users\admin&gt; ftp 192.168.1.254</p>
<p>ftp&gt; put xxx.web.zip </p>
<p>2、开启web服务</p>
<p><Quidway> system-view</p>
<p>[Quidway] http server load flash:/xxx.web.zip</p>
<p>[Quidway] http server enable</p>
<p>3、配置web用户</p>
<p>[Quidway] aaa</p>
<p>[Quidway-aaa] local-user webadmin password cipher webadmin</p>
<p>[Quidway-aaa] local-user webadmin service-type http</p>
<p>[Quidway-aaa] quit</p>
<p>4、通过浏览器测试</p>
<p>URL 地址： <a href="http://192.168.1.254/">http://192.168.1.254</a></p>
<p><strong>#相关查看命令</strong><br>[Quidway] display version         显示VRP版本号，以及运行时间</p>
<p>[Quidway] display cpu-usage         显示CPU信息</p>
<p>[Quidway] display memory-usage              显示内存占用情况</p>
<p>[Quidway] display device                          显示设备信息</p>
<p>[Quidway] display current-configuration     显示系统运行配置信息<br>[Quidway] display saved-configuration       显示保存的配置信息<br>[Quidway] display interfaces brief             显示接口配置信息</p>
<p>[Quidway] display history-command          显示历史命令记录</p>
<p>[Quidway-GigabitEthernet0/0/1] display this     显示该接口的所有配置     </p>
<p>接口视图： interface</p>
<p> display interface [ interface-type [ interface-number ] ]    # 查看二层信息</p>
<p> display interface brief</p>
<p> display ip interface [ interface-type interface-number ]    # 查看三层信息</p>
<p> display ip interface brief [ interface-type interface-number ] </p>
<p># 管道过滤</p>
<p>[Quidway] display xxx | { include | exclude | begin }  strings   </p>
<p># 当出现 – More – 时，同样支持</p>
<ul>
<li>/expr        == begin</li>
<li>-expr        == exclude</li>
<li>+expr       == include </li>
</ul>
<p>[Quidway] display current-configuration | include ntp</p>
<p>[Quidway] display current-configuration | include ip|user</p>
<p># 注意第一个 | 是管道, 那么之后的 | 都不认为是管道，而是正则表达式的运算符</p>
<p># 命令是不区分大小写的，但是 strings 是区分的。</p>
<p>总结一下：</p>
<p>对于一台全新的交换机，我们首先要确定用来做什么？（业务规划），然后结合已有的网络拓扑情况。</p>
<p>能够对其进行如下几个方面的设定：</p>
<ul>
<li>系统管理</li>
<li>接口管理（逻辑接口，物理接口，user-interface …）</li>
<li>业务管理（DHCP, STP, VRRP …）</li>
<li>ACL</li>
<li>路由管理（优先级，动态，静态）</li>
<li>安全管理</li>
</ul>
<p>配置实例：</p>
<p>实验拓扑如下图所示</p>
<p><img src="https://s3.51cto.com/wyfs02/M02/53/BE/wKiom1Rup82jEOVrAAFhQNaDtl4883.jpg" alt="wKiom1Rup82jEOVrAAFhQNaDtl4883.jpg" loading="lazy"></p>
<p>规划：</p>
<p>路由器LAN： 192.168.100.2 / 30</p>
<p>VLAN100：192.168.100.1 / 30</p>
<p>VLAN10: 192.168.10.1 / 24</p>
<p>VLAN20：192.168.20.1 / 24</p>
<p>路由器上需要配置回程路由：</p>
<p>192.168.0.0 255.255.0.0  192.168.100.1</p>
<p>汇聚交换机：将GE0/0/3作为连接路由器的端口，GE0/0/1到GE0/0/2分别和2个接入层交换机相连，剩余端口全部shutdown，以后扩展时在启用。</p>
<p>接入层交换机无需配置，即插即用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">三层交换机 SW1 配置：</span><br><span class="line">&lt;Huawei&gt;sys</span><br><span class="line">[Huawei]vlan bat 10 20 100    <span class="comment"># 批量添加vlan 10 和 20</span></span><br><span class="line">[Huawei]int g0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]port link-type trunk</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]port trunk allow-pass vlan 1 10 20</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]dis this</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">interface GigabitEthernet0/0/1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10 20</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">return</span></span><br></pre></td></tr></table></figure>





<p>eNSP小贴士：</p>
<p>使用SecureCRT 登录eNSP模拟器</p>
<ul>
<li>eNSP(Enterprise Network SimulationPlatform)是一款由华为提供的免费的、可扩展的、图形化操作的网络仿真工具平台，主要对企业网路由器、交换机进行软件仿真，完美呈现真实设备实景，支持大型网络模拟，让广大用户有机会在没有真实设备的情况下能够模拟演练，学习网络技术。</li>
<li>SecureCRT是一款支持SSH的终端仿真程序，简单的说是Windows下登录UNIX或Linux服务器主机的软件。不同就是SecureCRT支持SSH，同时支持Telnet和rlogin协议。SecureCRT是一款用于连接运行包括Windows、UNIX和VMS的理想工具。</li>
</ul>
<p>下面介绍用SecureCRT登陆eNSP设备的方法</p>
<p>1、  准备工作（查看IP 以及 相应设备的COM号）</p>
<p>注：此处Hostname为eNSP软件的本地服务器IP，Port为设备的eNSP软件设备列表中相应设备的COM号， 如何查看？ </p>
<p>（1）、查找eNSP的本地服务器IP：设置 —&gt;选项框里选择服务器设置。</p>
<p>（2）、查看设备端口号：</p>
<p>首先点击eNSP主界面的【菜单】 - 【视图】 - 【工具栏】 - 勾选【右工具栏】；  或者直接 Ctrl  +  R 调出右工具栏。</p>
<p><img src="https://s2.51cto.com/wyfs02/M02/78/82/wKioL1Z-j_ri7cmSAAC15DbHrIQ576.png" alt="wKioL1Z-j_ri7cmSAAC15DbHrIQ576.png" loading="lazy"></p>
<p>此时右侧弹出一个列表，在接口列表中查看设备端口号。在eNSP软件的接口视图中，会在设备名称后面显示一个端口号，这个端口号就是我们使用第三方工具时需要设置的端口号！</p>
<p><a href="https://s5.51cto.com/wyfs02/M00/78/82/wKioL1Z-kRWQRT76AACENIyDOAE785.png"><img src="https://s5.51cto.com/wyfs02/M00/78/82/wKioL1Z-kRWQRT76AACENIyDOAE785.png" alt="wKioL1Z-kRWQRT76AACENIyDOAE785.png" loading="lazy"></a></p>
<p>1、  打开SecureCRT，新建会话 -&gt; 协议选择telnet ，单击下一步。   </p>
<p>2、  填写主机名和端口号，单击下一步。</p>
<p><a href="https://s3.51cto.com/wyfs02/M02/78/84/wKiom1Z-lMuDuHjbAABBNmH3vL8246.png"><img src="https://s3.51cto.com/wyfs02/M02/78/84/wKiom1Z-lMuDuHjbAABBNmH3vL8246.png" alt="wKiom1Z-lMuDuHjbAABBNmH3vL8246.png" loading="lazy"></a></p>
<p>注：端口号即为eNSP软件中接口列表中显示的数字。</p>
<p>3、输入设备名，单击完成。  设置成功后， 进行连接。 按 Enter 即可登录成功。</p>
<p><strong>额外设置</strong></p>
<p>4、  接下来，在使用时会有乱码情况出现，我们还需要对SecureCRT进行一下简单的设置：</p>
<p>打开SecureCRT软件，选项（options）-&gt;会话选项（Sessionl Options）-&gt;连接（connection）-&gt;Telnet-&gt;强制每次一个字符模式</p>
<p>5、  如果您在使用过程中还是会出现乱码，可以尝试设置仿真终端为”VT100”</p>
<p><a href="http://support.huawei.com/ecommunity/bbs/10142395.html">http://support.huawei.com/ecommunity/bbs/10142395.html</a></p>
<p>Xshell: </p>
<p><a href="https://s3.51cto.com/wyfs02/M02/78/84/wKiom1Z-lTbQmo4uAAAjkLh2x10779.png"><img src="https://s3.51cto.com/wyfs02/M02/78/84/wKiom1Z-lTbQmo4uAAAjkLh2x10779.png" alt="wKiom1Z-lTbQmo4uAAAjkLh2x10779.png" loading="lazy"></a></p>
<p>eNSP 使用问题汇总： <a href="http://support.huawei.com/ecommunity/bbs/10171461.html">http://support.huawei.com/ecommunity/bbs/10171461.html</a></p>
<p><a href="http://zcry21cn.blog.51cto.com/606036/1677887">http://zcry21cn.blog.51cto.com/606036/1677887</a></p>
<p><a href="http://yuan2.blog.51cto.com/446689/1580671">http://yuan2.blog.51cto.com/446689/1580671</a></p>
<p><a href="http://blog.sina.com.cn/s/blog_4a2a1a090101816y.html">http://blog.sina.com.cn/s/blog_4a2a1a090101816y.html</a></p>
]]></content>
      <tags>
        <tag>华为</tag>
      </tags>
  </entry>
  <entry>
    <title>IPv6原理、应用与实践</title>
    <url>/2019/04/18/10/</url>
    <content><![CDATA[<blockquote>
<p><strong>作者：腾讯 微信技术架构部 团队</strong></p>
</blockquote>
<p>2017年11月26日，中共中央办公厅和国务院办公厅印发了《<a href="http://www.xinhuanet.com/politics/2017-11/26/c_1122012631.htm">推荐互联网协议第六版（IPv6）规模部署行动计划</a>》，并发出通知，要求各地区各部门结合实际认真贯彻落实。这条新闻传达了一个很重要的信息：这个是推进中国IPv6发展的战略总动员令。</p>
<p><strong>本文将会从以下几个方面进一步介绍IPv6，包括有：</strong></p>
<p>​         <strong>1、IPv6的基本概念</strong></p>
<p>​         <strong>2、IPv6在Linux操作系统下的实现</strong></p>
<p>​         <strong>3、IPv6的实验</strong></p>
<p>​         <strong>4、IPv6的过渡技术介绍</strong></p>
<p>​         <strong>5、IPv6在Linux平台下socket编程应该注意的问题</strong></p>
<p>​         <strong>6、实现简易版TGW支持IPv6雏形demo</strong></p>
<p>​         值得说的是，目前我们接触得比较多的主流操作系统内核，已经很好地支持IPv6协议栈，例如：</p>
<p>​         Windows： windows 7、windows 8.x、windows 10，默认开启IPv6</p>
<p>​         Linux： 内核2.6.x、内核3.x、内核4.x 已经支持IPv6（需要手动开启）</p>
<p>​         IOS：IOS9开始已经支持IPv6 Only，2016年苹果已经强制要求app必须支持IPv6</p>
<p>​        本文提到的IPv6节点，没有特殊说明，一般指的是纯IPv6节点（IPv6 Only），也就是只支持IPv6协议栈；IPv4节点，是指纯IPv4的节点，也就是只支持IPv4协议栈；如果节点支持IPv6和IPv4双栈，会指明是双栈节点。</p>
<h2 id="IPv6的基本概念"><a href="#IPv6的基本概念" class="headerlink" title="IPv6的基本概念"></a>IPv6的基本概念</h2><p>​        众所周知，32位的IPv4地址已经耗竭，IPv6采用128位的地址长度拥有更大的地址空间。首先我们先来认识一下IPv6到底长成什么样子。</p>
<h3 id="初识IPv6"><a href="#初识IPv6" class="headerlink" title="初识IPv6"></a>初识IPv6</h3><p><img src="https://ask.qcloudimg.com/draft/1122790/49xr0u8vzh.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图1 IPv6数据报文</p>
<p>上图是我们最熟悉的ping的IPv6版本ICMPv6。可以看到，IPv6数据报文和IPv4有很大的差别：</p>
<p>1、数据链路层（L2）的type字段标识为 0x86dd，表示承载的上层协议是IPv6</p>
<p>​      IPv4对比：type字段为0x0800</p>
<p>2、IPv6的头部字段，和IPv4差别巨大<strong>（可以猜测到，IPv6和IPv4无法兼容）</strong></p>
<p>​      IPv6的报文头部格式如下：</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/cklu3dne3i.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图2 IPv6报文头部（该图片来自互联网）</p>
<p>​        IPv6报文头部更精简了，字段更少了，对比起IPv4，有以下几个地方值得注意：</p>
<p>​        一、IPv6报文头部是定长（固定为40字节），IPv4报文头部是变长的。这个意味着，写代码处理IPv6数据报文的效率会提高很多：）</p>
<p>​        二、IPv6中Hop Limit字段含义类似IPv4的TTL。</p>
<p>​        三、IPv6中的Traffic Class字段含义类似IPv4中的TOS（Type Of Service）。</p>
<p>​        四、IPv6的报文头部取消了校验和字段。取消这个字段也是对IPv4协议的一个改进。当IPv4报文在网路间传输，每经过一个路由器转发就是修改TTL字段，就需要重新计算校验和，而由于数据链路层L2和传输层L4的校验已经足够强壮，因此IPv6取消这个字段会提高路由器的转发效率。值得一提的是，在IPv6协议下，传输层L4协议UDP、TCP是强制需要进行校验和的（IPv4是可选的）。</p>
<p>​        五、IPv6报文头部中的Next Header字段表示“承载上一层的协议类型”或者“扩展头部类型”。<strong>这里的含义与IPv4有很大的差别，需要加以解释</strong>：</p>
<p>当IPv6数据报文承载的是上层协议ICMPv6、TCP、UDP等的时候，Next Header的值分别为58、6、17，这个时候和IPv4报文头部中的Protocol字段很类似。</p>
<p>​        当不是以上3种协议类型的时候，IPv6报文头部紧接的是扩展头部。扩展头部是IPv6引入的一个新的概念，每个IPv6的数据报文可以承载0个或多个扩展头部，扩展头部通过链表的形式组织起来。当IPv6数据报文承载着扩展头部的时候，Next Header的数值为扩展头部的类型值。</p>
<p>​        为什么要引入扩展头部这个概念，这里也是IPv6对IPv4改进的一个方面，用扩展头部取代了IPv4的可选项信息，精简了IPv6的头部，增强了IPv6的扩展性。有同学会不会有疑问，IPv6的分片数据报文怎么处理？其实就是使用了IPv6扩展头部。我们来抓一个UDP分片报文来看看。</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/b9uwedx4em.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图3 IPv6分片报文     </p>
<p>​        当发送一个分片IPv6数据报文的时候，IPv6使用的是扩展头部的形式组织各个分片的信息，如图IPv6报文头部Next Header字段值为44表示存在扩展头部，扩展头部是IPv6分片数据信息。</p>
<p>​        对比IPv4，分片信息是记录在IPv4报文头部的分片字段中。</p>
<p>​        IPv6的扩展头部类型有很多种，除了上述的分片头部，还有路由头部、逐跳可选头部等，具体的可以参考RFC2460。</p>
<p>​        本章主要介绍了IPv6的一些很直观的认识，下面逐渐介绍IPv6上的基本知识和概念。</p>
<h3 id="IPv6的地址语法"><a href="#IPv6的地址语法" class="headerlink" title="IPv6的地址语法"></a>IPv6的地址语法</h3><p>​        一个IPv6的地址使用冒号十六进制表示方法：128位的地址每16位分成一段，每个16位的段用十六进制表示并用冒号分隔开，例如：</p>
<p>​        一个普通公网IPv6地址：2001:0D12:0000:0000:02AA:0987:FE29:9871</p>
<p>​        IPv6地址支持压缩前导零的表示方法，例如上面的地址可以压缩表示为：</p>
<p>​        2001:D12:0:0:2AA:987:FE29:9871</p>
<p>​        为了进一步精简IPv6地址，当冒号十六进制格式中出现连续几段数值0的位段时，这些段可以压缩为双冒号的表示，例如上面的地址还可以进一步精简表示为：</p>
<p>​        2001:D12::2AA:987:FE29:9871</p>
<p>​        又例如IPv6的地址FF80:0:0:0:FF:3BA:891:67C2可以进一步精简表示为： </p>
<p> FE80::FF:3BA:891:67C2</p>
<p>  <strong>这里值得注意的是，双冒号只能出现一次。</strong></p>
<h3 id="IPv6地址的号段划分和前缀表示法"><a href="#IPv6地址的号段划分和前缀表示法" class="headerlink" title="IPv6地址的号段划分和前缀表示法"></a>IPv6地址的号段划分和前缀表示法</h3><p>​        IPv6拥有128位巨大的地址空间，对于那么大的空间，也不是随意的划分，而是使用按照bit位进行号段划分（与鹅厂内部一些的64位uin改造放号的zone划分算法）。</p>
<p>​        IPv6的地址结构如下图：</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/y8z1z31l4d.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图4 IPv6地址结构</p>
<p>​        例如RFC4291中定义了n=48, m=16，也就是子网和接口ID与各占64位</p>
<p>​        IPv6支持子网前缀标识方法，类似于IPv4的无分类域间路由CIDR机制（注意：IPv6没有子网掩码mask的概念）。使用“IPv6地址/前缀长度”表示方法，例如：</p>
<p>​        2001:C3:0:2C6A::/64表示一个子网</p>
<p>​        而2001:C3:0:2C6A:C9B4:FF12:48BC:1A22/64表示该子网下的一个节点地址。</p>
<p>​        可以看到，一个IPv6的地址有子网前缀+接口ID构成，子网前缀由地址分配和管理机构定义和分配，而接口ID可以由各操作系统实现生成，生成算法后面的章节会介绍。</p>
<h3 id="IPv6的地址类型"><a href="#IPv6的地址类型" class="headerlink" title="IPv6的地址类型"></a>IPv6的地址类型</h3><p>​        IPv6地址分三种类型</p>
<p>​        1、单播，对应于IPv4的普通公网和私网地址</p>
<p>​        2、组播，对应于IPv4的组播（多播）地址</p>
<p>​        3、任播，IPv6新增的地址概念类型</p>
<p>​        IPv6没有广播地址，用组播地址实现广播的功能。实际上我们工作和生活最可能最多接触的就是单播地址，接下来本文重点会讲解单播地址的种类。组播和任播地址有兴趣的同学自行查阅相关RFC和文献。</p>
<h3 id="IPv6单播地址"><a href="#IPv6单播地址" class="headerlink" title="IPv6单播地址"></a>IPv6单播地址</h3><p>​        注意，大家如果在网上搜索IPv6的地址，可能都是千篇一律的把所有“出现过”的单播地址介绍出来，其实有一些单播地址类型已经在相关的RFC中被废除或者不建议使用，而本节会指出这类地址。同时，在介绍单播地址的时候，尽量与IPv4中对应的或者相类似的概念做对比，加深理解。</p>
<p>​       IPv6单播地址有以下几种：</p>
<p><strong>1、全球单播地址</strong></p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/l5i1q5s2d0.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图5 IPv6全球单播地址结构</p>
<p>​        前缀2000::/3，相当于IPv4的公网地址（IPv6的诞生根本上就是为了解决IPv4公网地址耗尽的问题）。这种地址在全球的路由器间可以路由。</p>
<p><strong>2、链路本地地址</strong></p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/3snokyyabz.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图6 链路本地地址结构</p>
<p>​        前缀FE80::/10，顾名思义，此类地址用于同一链路上的节点间的通信，主要用于自动配置地址和邻居节点发现过程。Windows和Linux支持或开启IPv6后，默认会给网卡接口自动配置一个链路本地地址。也就是说，一个接口一定有一个链路本地地址。如下图：</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/h8maqit6mp.png?imageView2/2/w/1620" alt="img" loading="lazy">图7 Linux下查看链路本地地址</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/q83txrl3a7.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图8 Windows下查看链路本地地址</p>
<p>​        值得说的是，每个接口必须至少有一个链路本地地址；每个接口可以配置1个以上的单播地址，例如一个接口可以配置一个链路本地地址，同时也可以配置一个全球单播地址。</p>
<p>​        注意，很容易会把链路本地地址和IPv4的私网/内网地址对应起来，其实链路本地地址对应于IPv4的APIPA地址，也就是169.254开头的地址（典型场景就是windows开启自动获取地址而获取失败后自动分配一个169.254的地址）。而IPv4私网对应于IPv6的什么地址，后面会介绍。</p>
<p>​        特别地，在IPv6 socket编程中，可以使用链路本地地址编程通信，但是需要增加一些额外的参数（这是一个小坑），在后面介绍编程的章节会介绍。</p>
<p><strong>3、唯一本地地址</strong></p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/iusi29twr5.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图9 唯一本地地址结构</p>
<p>​        前缀FC00::/7，相当于IPv4的私网地址（10.0.0.0、172.16.0.0、192.168.0.0），在RFC4193中新定义的一种解决私网需求的单播地址类型，用来代替废弃使用的站点本地地址。</p>
<p>​        可能看到这里，有同学会跳出来说：IPv6不是为了解决IPv4地址耗尽的问题吗，既然IPv6的地址空间那么大，可以为每一个网络节点分配公网IPv6的节点，那为什么IPv6还需要支持私网？这里需要谈谈对IPv6下私网支持的认识。</p>
<p>​        在IPv4中，利用NAT技术私网内的网络节点可以使用统一的公网出口访问互联网资源，大大节省了IPv4公网地址的消耗（IPv6推进缓慢的原因之一）。另一方面，由于默认情况下私网内节点与外界通信的发起是单向的，网络访问仅仅能从私网内发起，外部发起的请求会被统一网关或者防火墙阻隔掉，这样的网络架构很好的保护了私网内的节点安全性和私密性。可以设想一下，如果鹅厂内部每台办公电脑都配置了IPv6的公网地址上网，是多么可怕的事情，每台办公电脑都会面临被黑客入侵的威胁（肉鸡真多）。</p>
<p>​        因此，在安全性和私密性要求下，IPv6中同样需要支持私网，并且也需要支持NAT。在Linux内核3.7版本开始加入对IPv6 NAT的支持，实现的方式和IPv4下的差别不大（Linux内核代码中变量和函数的命名几乎就是ctrl+c和ctrl+v过来的-_-||）。</p>
<p><strong>4、站点本地地址</strong></p>
<p>​        前缀FEC9::/48，以前是用来部署私网的，<strong>但RFC3879中已经不建议使用这类地址</strong>，建议使用唯一本地地址。大家知道有这么一回事就可以了。网上还有很多文章还提到这种地址，但是没有说明这种地址已经不再使用。</p>
<p><strong>5、特殊地址：回环地址</strong></p>
<p>​        0:0:0:0:0:0:0:1或::1，等同于IPv4的127.0.0.1</p>
<p><strong>6、过渡地址：内嵌IPv4地址的IPv6地址</strong></p>
<p>​        就是在IPv6的某一些十六进制段内嵌这IPv4的地址，例如IPv6地址中64:ff9b::10.10.10.10，此IPv6地址最后4个字节内嵌一个IPv4的地址，这类地址主要用于IPv6/IPv4的过渡技术中。</p>
<p><strong>一、IPv4兼容地址</strong></p>
<p>​        0:0:0:0:0:0:w.x.y.z或::w.x.y.z（其中w.x.y.z是点分十进制的IPv4地址）。<strong>但在RFC4291中已经不推荐使用这类地址</strong>，大家知道有这么一回事就可以了。</p>
<p><strong>二、过渡地址：IPv4映射地址</strong></p>
<p>​        0:0:0:0:0:FFFF:w.x.y.z或::FFFF:w.x.y.z（其中w.x.y.z是点分十进制的IPv4地址），用于IPv6地址表示IPv4地址。主要用于某些场景下IPv6节点与IPv4节点通信，Linux内核对这类地址很好地支持，在后面编程和内核分析的章节会分析使用过程。</p>
<p><strong>三、过渡地址：特定过渡技术地址</strong></p>
<p>​        6to4地址、ISATAP地址、Teredo地址主要用于对应的过渡技术的地址，在后面介绍过渡技术的时候会介绍。</p>
<h3 id="IPv6接口ID生成算法"><a href="#IPv6接口ID生成算法" class="headerlink" title="IPv6接口ID生成算法"></a>IPv6接口ID生成算法</h3><p>​        从前面的介绍中可以看出，IPv6单播地址是由前缀（64位）+接口ID（64位）组成。接口ID的生成算法主要有以下几种：</p>
<p>​        1、根据RFC4291定义，接口ID可以从EUI-64地址生成。</p>
<p>​                  详细算法可以查看regli同学的PPT第14页。</p>
<p>​        2、为了可以具备某种程度的匿名信，接口ID可以使用一个随机分配的，windows操作系统默认就是使用这种生成算法，Linux下也是默认开启这个算法。</p>
<p>​        3、使用状态化的自动配置技术分配，例如DHCPv6分配。</p>
<p>​        4、手工配置。</p>
<h3 id="IPv6地址配置"><a href="#IPv6地址配置" class="headerlink" title="IPv6地址配置"></a>IPv6地址配置</h3><p>​        前面对IPv6的地址、前缀、接口等等做了介绍，接下来就是要介绍一个接口如何配置IPv6地址。IPv6一个比IPv4更厉害的方面，就是可以自动配置地址，甚至这个配置过程不需要DHCPv6（在IPv4中是DHCPv4）这样的地址配置协议。最典型的例子就是，只要开启了IPv6协议栈的操作系统，每个接口就能自动配置了链路本地地址，这个是和IPv4最重要的区别之一。</p>
<p>​        IPv6的地址配置有以下几种：</p>
<p>​        1、只要开启了IPv6协议栈，接口自动分配链路本地地址。</p>
<p>​        2、无状态自动配置地址（RFC2462），后面会有实验演示。</p>
<p>​        3、有状态自动配置地址，例如DHCPv6。</p>
<p>​        4、手动配置。</p>
<h3 id="IPv6的域名解析"><a href="#IPv6的域名解析" class="headerlink" title="IPv6的域名解析"></a>IPv6的<a href="https://cloud.tencent.com/product/cns">域名解析</a></h3><p>​        由于IPv6的地址扩展为128位，比IPv4的更难书写和记忆，因此IPv6下的DNS变得尤为重要。IPv6的的DNS资源记录类型为AAAA（又称作4A），用于解析指向IPv6地址的完全有效域名。下面是一个示例：</p>
<p>​        Hostipv6.example.wechat.com IN AAAA 2001:db8:1::1</p>
<p>​        IPv6下的域名解析可以认为是IPv4的扩展，详细可以查看RFC3596.</p>
<h2 id="Linux内核IPv6架构简析"><a href="#Linux内核IPv6架构简析" class="headerlink" title="Linux内核IPv6架构简析"></a>Linux内核IPv6架构简析</h2><p>​        本文后面主要的分析都是基于Linux，会有涉及关于Linux内核对IPv6的实现。主要是因为，现在IPv6的参考资料不多，除了与IPv6相关的RFC之外，还有少数可以参阅的IPv6国外文献，而Linux内核一直都与跟随着IPv6的协议更新和变化，Linux内核IPv6的实现是十分重要的参考材料之一。而且从事后台开发工作主要也是在Linux平台下，熟悉Linux下IPv6的实现也是为以后的工作做知识储备。</p>
<p>​        PS：客户端开发的同学可以参考各自平台的文档………….</p>
<p>​        Linux在很早之前就已经开始支持IPv6，目前我们接触最多的Linux内核版本都很好地支持IPv6，同时也是支持IPv4/IPv6双栈体系。在Linux操作系统中，IPv4是默认必须开启，IPv6是可选编译和配置开启。</p>
<p>​        例如在编译内核的时候，需要选择IPv6编译选项才支持IPv6</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/nvs6y7sy1f.jpg?imageView2/2/w/1620" alt="img" loading="lazy"> 图10 Linux内核编译支持IPv6</p>
<p>​        当开启支持IPv6的Linux的内核网络双栈的结构，如下图：</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/reiwq1blm2.jpg?imageView2/2/w/1620" alt="img" loading="lazy"> 图11 Linux内核双栈架构</p>
<p>  Linux内核中，IPv6协议栈与IPv4协议栈并行关系。IPv6和IPv4完全是两套不一样的代码实现。IPv6完整的协议栈逻辑模块包括：</p>
<p>​        1、网络层IPv6，核心逻辑：IPv6路由子系统</p>
<p>​        2、传输层TCP/UDP实现：TCPv6、UDPv6</p>
<p>​        3、控制报文协议ICMPv6，这里值得一提的是ICMPv6在IPv6协议中的地位十分重要。</p>
<p>​        ICMPv6不仅提供了与ICMPv4相同的服务诊断功能，例如报告数据包的错误和提供简单的echo服务，ICMPv6是IPv6中邻居发现协议的重要组成部分，用于管理链路上的点到点的通信。</p>
<p>​        4、邻居子系统的实现：邻居发现协议NDP（对应于IPv4里面的ARP协议）</p>
<p>​        5、其他高级实现（IPv6 NAT、IPv6隧道、iPv6 IPSec等）</p>
<p>​        由于我们平时的开发工作在应用层，以上1-4是将会接触得最多。</p>
<h2 id="IPv6实验"><a href="#IPv6实验" class="headerlink" title="IPv6实验"></a>IPv6实验</h2><p>​        本章我们通过实验，加深对IPv6的认识。这里的实验没有使用真实现网的IPv6接入点（目前国内绝大部分接入点都是教育网），而实验的目的主要是观察IPv6的数据包结构、IPv6的路由配置等，所以决定自己通过搭建中间路由器、应用服务器的方式做实验，便于抓包和代码分析。</p>
<p>​       客户端：windows 7</p>
<p>​       路由器：中间路由器使用自己编译和搭建的Linux系统（内核2.6.32.27）</p>
<p>​       应用服务器：Ubuntu16.04LTS版本。</p>
<p>​       为什么要使用自己编译的Linux作为路由器？因为IPv6的实践类能参考的文献比较少，而Linux内核的IPv6模块是最重要的参考资源之一，在实践中遇到问题可以使用打LOG和分析代码的方法解决。</p>
<p><strong>1、无状态自动配置地址实验</strong></p>
<p>​        IPv6地址的获取是最重要的环节之一。本实验使用开源的无状态自动配置服务radvd进行实验。</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/1omvyaywje.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图12 IPv6无状态自动配置</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/z0yo2igtom.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图13 IPv6无状态自动配置报文分析</p>
<p>​        无状态自动配置过程：</p>
<p>​        1、由链路上的主机向链路发起“路由请求”报文，这个报文是以组播协议发送，寻找链路上最合适的路由器。</p>
<p>​        2、路由器收到请求会返回“路由通告”报文，报文里面带着本链路的地址前缀信息主机将接收到的前缀和自身的接口ID，组成完整的新地址。</p>
<p>​        3、主机尝试使用新地址发起地址重复检测，检测链路上是否有其他主机也是这个地址，如果有，就停止使用该地址；如果没有，就启用这个新地址。</p>
<p>​        可以看到无状态自动配置过程十分简易（对比DHCPv4和DHCPv6来说），实际上，无状态自动配置可以单独组网使用，也可以配合有状态自动配置一般会配合使用，加强网络节点管理。涉及自动配置和地址检测等更多细节，可以查阅RFC1971、RFC4861。</p>
<p><strong>2、IPv6静态路由配置实验</strong></p>
<p>​        本次实验主要是了解windows和linux的静态路由配置。</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/7zbj7u95dv.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图14 IPv6典型的网络拓扑</p>
<p>​        由于各自的网络前缀（网段）不一致，在不使用默认路由的情况下，我们尝试配置路由让客户端可以访问到服务器。</p>
<p>一、Windows 7配置静态路由：</p>
<p>​        去往服务器的2001:db8:5::/64网段的路由</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/vnpg6hcfw7.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图15 Windows配置IPv6路由</p>
<p>二、路由器1配置</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/y8f86so83n.png?imageView2/2/w/1620" alt="img" loading="lazy">图16 Linux下配置IPv6路由</p>
<p>三、路由器2配置</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/qt3ck39q51.png?imageView2/2/w/1620" alt="img" loading="lazy">图17 Linux下配置IPv6路由</p>
<p>四、服务器静态路由配置</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/8s5ttlxwet.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图18 服务器配置IPv6路由</p>
<p>五、结果</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/rq74frnliz.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图19 客户端访问服务器</p>
<p>​        客户端可以顺利ping通服务器。可以看到，IPv6下的路由配置，无论是windows还是linux，与IPv4的配置差别不大，熟悉IPv4各个平台路由配置的同学可以很快上手IPv6的路由配置。</p>
<p><strong>3、IPv6的web服务</strong></p>
<p>​        复用2的架构，在服务器端部署一个web服务，在客户端访问该web服务。web服务没有选择像apache或者nginx这样的庞然大物，而选择了很轻量的boa。原因是boa虽然原始支持IPv6，但是我想粗暴的把所有IPv4的socket套接字都替换成IPv6版本，尝试做一个自定义的升级。结果需要改动的代码非常少，不超过20行，boa就能完全支持IPv6。</p>
<p>​        配合实验，写了一个简单的CGI，只是在版面echo字符串。如下图：</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/nhtg6osqfb.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图20 浏览器使用IPv6地址访问网络资源</p>
<p>  <strong>这里值得注意的是，在浏览器中使用IPv6的地址访问web资源，IPv6的地址必须要使用中括号“[]”包起来。</strong></p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/eapsh6gyu9.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图21 IPv6下的http报文</p>
<p>​        从Server端抓包看，IPv6下的Web服务http报文，除了网络层L3的报文头部不一样之外，其余的都和IPv4版本的没有太大差别差别。</p>
<p><strong>4、IPv6的过渡技术实验</strong></p>
<p>​        <strong>这部分将在过渡技术介绍中一起实验。</strong></p>
<h2 id="IPv6的过渡技术"><a href="#IPv6的过渡技术" class="headerlink" title="IPv6的过渡技术"></a>IPv6的过渡技术</h2><p>​        IPv6的提出，最重要的目的就是解决公网IPv4耗尽的问题，而且IPv6协议的设计就考虑到了更加好的效率、安全、扩展等方面，可以那么说，IPv6是未来网络发展的大趋势。但为什么IPv6已经发展了十几年了，目前在我们的工作和生活中还是比较少接触和使用。这里的原因是非常的复杂，有技术上障碍，因为IPv6和IPv4是两个完全不兼容的协议（在极少数的特定场景可以实现兼容），如果要从支持IPv4升级到IPv6，无论是应用程序用客户端、服务器程序端、路由器等等，都要同时支持IPv6才能解决问题，这个的升级改造需要花费的成本是巨大的。而且，正是由于技术上的升级花费大量的人力物力，无论是运营商还是互联网服务商，一方面要重视用户的体验问题，这个肯定不能强制客户更新换代硬件设备和软件，另一方面也要维护自身的投资和利益，更愿意去选择利用现有技术降低IPv4地址耗尽带来的压力，例如NAT的广泛应用，就是IPv6推广使用的一个重要的“障碍”。</p>
<p>​        由上所述，IPv4升级到IPv6肯定不会是一蹴而就的，是需要经历一个十分漫长的过渡阶段（用我厂通用的术语说，就是IPv4升级IPv6这个灰度的时间非常长），要数十年的时间都不为过。现阶段，就出现了IPv4慢慢过渡到IPv6的技术（或者叫过渡时期的技术）。过渡技术要解决最重要的问题就是，如何利用现在大规模的IPv4网络进行IPv6的通信。</p>
<p>​        要解决上面的问题，这里主要介绍3种过渡技术：</p>
<p>​        1、双栈技术</p>
<p>​        2、隧道技术</p>
<p>​        3、转换技术（有一些文献叫做翻译技术）</p>
<p>​        本章节会对以上的过渡技术，选取几个典型的、我们未来最有机会接触到的具体的过渡技术结合实验观察过渡技术的具体实现和数据包的表现形式。</p>
<h3 id="双栈技术"><a href="#双栈技术" class="headerlink" title="双栈技术"></a>双栈技术</h3><p>​        这种技术其实很好理解，就是通信节点同时支持IPv4和IPv6双栈。例如在同一个交换机下面有2个Linux的节点，2个节点都是IPv4/IPv6双栈，节点间原来使用IPv4上的UDP协议通信传输，现在需要升级为IPv6上的UDP传输。由于2个节点都支持IPv6，那只要修改应用程序为IPv6的socket通信基本达到目的了。</p>
<p>​        上面的例子在局域网通信的改造是很容易的。但是在广域网，问题就变得十分复杂了。因为主要问题是在广域网上的2个节点间往往经过多个路由器，按照双栈技术的部署要求，之间的所有节点都要支持IPv4/IPv6双栈，并且都要配置了IPv4的公网IP才能正常工作，这里就无法解决IPv4公网地址匮乏的问题。因此，双栈技术一般不会直接部署到网络中，而是配合其他过渡技术一起使用，例如在隧道技术中，在隧道的边界路由器就是双栈的，其他参与通信的节点不要求是双栈的。</p>
<h3 id="隧道技术"><a href="#隧道技术" class="headerlink" title="隧道技术"></a>隧道技术</h3><p>​        当前的网络是以IPv4为主，因此尽可能地充分利用IPv4网络进行IPv6通信是十分好的手段之一。隧道技术就是这样子的一种过渡技术。</p>
<p>​        隧道将IPv6的数据报文封装在IPv4的报文头部后面（IPv6的数据报文是IPv4的载荷部分），IPv6通信节点之间传输的IPv6数据包就可以穿越IPv4网络进行传输。隧道技术的一个很重要的优点是透明性，通过隧道进行通信的两个IPv6节点（或者节点上的应用程序）几乎感觉不到隧道的存在。</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/hhpw74hm16.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图22 IPv6典型的隧道</p>
<p>​        上图是一种典型的隧道技术：路由器-路由器隧道，两个IPv6网络中的主机通过隧道方式穿越了IPv4进行通信。其中C节点和D节点被称为边界路由器，边界路由器必须要支持IPv4-IPv6双栈。当IPv6网络1的主机A将IPv6数据包发给边界路由器C，C对IPv6数据包进行IPv4封装，然后在IPv4网络上进行传输，发送到边界路由器D，D收到IPv4的数据包后剥掉IPv4的包头，还原IPv6的数据包，发送到IPv6网络2的主机B。</p>
<p>​        根据隧道的出口入口的构成，隧道可以分为路由器-路由器，主机-路由器隧道、路由器-主机、主机-主机隧道等类型。</p>
<p>​        隧道的类型也分为手动配置类型和自动配置类型两种，手动配置是指点对点的隧道是手动加以配置，例如手动配置点对点隧道外层的IPv4地址才能建立起隧道；自动配置是指隧道的建立和卸载是动态的，一般会把隧道外层的IPv4地址内嵌到数据包的目的IPv6地址里面，在隧道路由器获取该IPv6地址时候取出内嵌IPv4地址从而使用该IPv4地址作为隧道的对端来建立隧道。</p>
<p>​        下面就介绍几种我们很可能会接触到的具体的隧道技术。</p>
<p>​         在介绍具体的隧道技术前，特别要说明一下，Linux内核原生支持一种叫做sit（Simple Internet Transition）隧道。这个隧道专门用于IPv6-in-IPv4的数据封装解封和传输，应用十分之广泛，现在很多主流的IPv6隧道技术都能基于sit隧道实现。关于sit隧道的技术实现，可以查阅Linux内核源码 net/ipv6/sit.c 。</p>
<p><strong>1、6to4隧道</strong></p>
<p>​        6to4是当前使用得比较广泛的一种自动配置隧道技术，这种技术采用特殊的IPv6地址，称为6to4地址，这种地址是以2002开头，接着后面的32位就是内嵌的隧道对端的IPv4地址。当边界路由器收到这类目的地址，取出IPv4地址建立隧道。</p>
<p>​        6to4隧道一般用在路由器-路由器、主机-路由器、路由器-主机场景，典型的应用场景是两个IPv6的站点内主机通过6to4隧道进行相互访问。</p>
<p>​        6to4隧道的一个限制是内嵌的IPv4地址必须是公网地址。</p>
<p><strong>6to4隧道实验</strong> </p>
<p>​        如下图，就是本次6to4实验中使用的隧道架构，该架构是典型的路由器-路由器隧道，隧道两侧的IPv6网络对隧道的存在无感知。</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/bdhm6xstz5.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图23 6to4路由器-路由器隧道</p>
<p>​        在Linux下的sit隧道可以自适应为6to4隧道。</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/lkiuotq7pb.png?imageView2/2/w/1620" alt="img" loading="lazy">图24 Linux下配置sit隧道（6to4）</p>
<p>​        上图就是在路由器上配置sit隧道的命令，因为是使用6to4隧道，隧道的目的端点地址是从目的地址中获取，因此只需要配置本地端点即可。</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/tcrsbkp56g.png?imageView2/2/w/1620" alt="img" loading="lazy">图25 浏览器通过隧道访问web服务</p>
<p>​        配置完隧道后，使用客户端访问web服务，可以正常访问。</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/bpd5rebp7j.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图26 web服务器端抓取http报文</p>
<p>​        在web服务端抓取http报文，可以看到，web服务获取到就是一个普通的http请问报文。</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/8vliq7yrzf.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图27 隧道内抓取http报文</p>
<p>​        在隧道内抓取http报文，可以看到里面的乾坤。这个不是一般的http报文，它比服务端抓取到的多了一层IPv4报文头部，是隧道的外出通信协议，隧道内层IPv6才是真正的数据。IPv4报文头部中的协议字段，不是我们熟悉的TCP(6)/UDP(17)协议，而是IPv6-in-IPv4专属的隧道协议类型。</p>
<p>​        可以看到，经过隧道的数据报文，在隧道两端的边界路由器分别完成了隧道协议的封包和解包，在真正获取到数据的节点看来，几乎不感知隧道的存在。</p>
<p><strong>2、ISATAP隧道</strong></p>
<p>​        ISATAP全称是站点内自动隧道寻址协议（Intra-Site Automatic Tunnel Addressing Protocol），用来为IPv4网络中的IPv6双栈节点可以跨越IPv4网络访问外部的IPv6节点。</p>
<p>​        ISATAP隧道一般用于主机-主机、主机-路由器的场景。</p>
<p><strong>ISATAP隧道实验</strong></p>
<p>​        如下图就是本次实验使用的架构，是一种典型的主机-路由器场景。实验中需要在路由器2上部署radvd服务，用于客户端进行无状态自动配置地址。Linux下的ISATAP隧道也是可以使用sit隧道实现。</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/8foww9i5bl.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图28 ISATAP主机-路由器隧道</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/z6gz67xg2o.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图29 Windows下配置ISATAP隧道</p>
<p>​        实验用的客户端使用windows 7，原生支持ISATAP隧道，如上图，需要进入netsh开启并且设置ISATAP的路由器地址（支持域名）。</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/le72v31lqt.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图30 ISATAP隧道中的无状态自动配置</p>
<p>​        当客户端设置完router后，隧道已经建立，客户端便发起了无状态自动配置流程，可以看到上面的截图路由器通过隧道将前缀信息下发给客户端，客户端完成无状态自动配置，获取到公网IP地址。</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/ytkfnp8hb4.png?imageView2/2/w/1620" alt="img" loading="lazy">图31 ISATAP隧道接口地址</p>
<p>​        在windows 7上查看ISATAP接口，获取到公网地址。这个地址类型是ISATAP专用的地址结构，由64位全球单播路由前缀:200(0):5e5f:w.x.y.z组成(w.x.y.z是客户端的IPv4地址)。</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/zgy6laatmd.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图32 使用ISATAP隧道访问web服务</p>
<p>​        如上图，使用ISATAP隧道访问web服务，在隧道内的数据抓包，可以看到和6to4的类似，这里就不再深入阐述。</p>
<p><strong>3、Teredo隧道</strong></p>
<p>​        前面的隧道技术，主要是在IPv4的数据报文承载着IPv6的数据报文，这是一种特殊的数据包格式（IPV6-in-IPv4），不同于我们熟悉的TCP、UDP等传输层协议。而我们平常接触到的网络都存在于NAT架构中（例如我们的办公网络和家庭网络），在这种网络架构中，路由器仅对于TCP、UDP等传输层协议做NAT处理，而无法正确处理IPv6-in-IPv4这种报文，例如使用ISATAP隧道，IPv6双栈节点与ISATAP路由器之前如果存在NAT，ISATAP建立隧道失败；6to4隧道也会遇到同样的问题。</p>
<p>​        Teredo隧道是有微软公司主导的一项隧道技术，主要用于在NAT网络架构下建立穿越NAT的隧道。</p>
<p>​        Teredo隧道的核心思路，是将IPv6的数据封装成IPv4的UDP数据包，利用NAT对IPv4的UDP支持进行穿越NAT的传输，当UDP包到达隧道的另外一端后，再把IPv4的包头、UDP包头剥离，还原IPv6的数据包，再进行下一步的IPv6数据通信转发。Teredo节点会分配一个以2001::/32的前缀，而且地址中还包含Teredo的服务器、标志位和客户端外部映射模糊地址和端口号等信息。</p>
<p>​        Teredo的实现还会遇到NAT的类型不同而被限制的问题。NAT的类型有锥形NAT、受限制的NAT、对称NAT几种，Teredo只能在锥形NAT和受限制的NAT的环境下正常工作，而且在这两种NAT需要处理的逻辑又是不一样的。因此Teredo整体的实现会比较复杂。</p>
<p><strong>实验环境搭建：</strong></p>
<p>​        在Linux平台下有开源的Teredo实现版本：miredo。由于时间和文章篇幅的原因，而且部署miredo比较复杂，因此这里的实验等以后有机会再补充。:(</p>
<h3 id="转换技术（有一些文献叫做：翻译技术）"><a href="#转换技术（有一些文献叫做：翻译技术）" class="headerlink" title="转换技术（有一些文献叫做：翻译技术）"></a>转换技术（有一些文献叫做：翻译技术）</h3><p>​        隧道技术是比较好地解决了在很长期一段时间内还是IPv4网络是主流的情况下IPv6节点（或者双栈节点）间的通信问题。但是由于IPv4到IPv6的过渡是十分漫长的，因此也需要解决IPv6节点与IPv4节点通信的问题。协议转换技术可以用来解决这个问题。</p>
<p>​        协议转换技术根据协议在网络中位置的不同，分为网络层协议转换、传输层协议转换和应用层协议转换等。协议转换技术的核心思路就是在IPv4和IPv6通信节点之间部署中间层，将IPv4和IPv6相互映射转换。</p>
<p>​        我们非常熟悉的NAT也是一种典型的协议转换技术，是将私网IPv4地址映射转换为公网IPv4地址，这种转换技术又称为NAT44。而我们接着要重点介绍的名为NAT64/DNS64的协议转换技术。</p>
<h3 id="NAT64-DNS64"><a href="#NAT64-DNS64" class="headerlink" title="NAT64/DNS64"></a>NAT64/DNS64</h3><p>​        提到NAT64/DNS64，相信做iOS客户端开发的同学一定非常熟悉。在2016年中开始，苹果要求app必须支持IPv6网络。而苹果官方提供的过渡解决方案正是NAT64/DNS64。</p>
<p>以下是苹果提供的技术图：</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/0rs2uoyj79.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图33 苹果提供的过渡技术解决方案</p>
<p>​        NAT64/DNS64分为NAT64、DNS64两大方面，两者需要结合使用。</p>
<p>​        DNS64在RFC6147中明确定义，将IPv6的地址记录AAAA DNS查询消息转换为IPv4的地址记录查询。当IPv6节点发起DNS请求，NAT64/DNS64中间层同时发起A域名查询和AAAA域名查询。如果仅有A域名查询的IPv4地址响应，表明IPv6节点需要访问一个IPv4的节点，NAT64/DNS64中间层将回应的IPv4地址转换为IPv6地址，返回给IPv6节点。</p>
<p>​        IPv6节点使用获取到的IPv6服务端地址进行访问，数据包会经过NAT64/DNS64中间层，中间层将IPv6地址映射转换为IPv4的地址进行访问。</p>
<p><strong>实验环境搭建：</strong></p>
<p>  Linux平台下有多个NAT64的开源软件，实现方式各有不同，有纯内核态实现的ecdysis，也有用户态实现的tayga。</p>
<p>​        DNS64的实现可以使用著名的开源DNS服务BIND就可以很好地支持，详细可以查看上面2个开源软件的搭建说明。</p>
<p>​        时间的原因，还没有把NAT64/DNS64的开源软件研究透彻，因此这里的实践等以后有机会再补上。</p>
<p>​        PS：在研究tayga和miredo源码的时候，发现了在Linux平台上面有一些有趣的东西，如下图，是tayga的软件实现框架。</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/lpi3r7m4t.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图34 Linux下的一个有趣的虚拟设备</p>
<p>​        Linux内核自带了一个软件虚拟设备，也是一种隧道的实现(/dev/net/tun)，该设备可以实现将内核态的网络数据发送到用户态，用户态修改后再返回给内核态，用户态的进程负责完成NAT64这一次“偷龙转凤”操作。</p>
<p>​        关于/dev/net/tun设备的实现，可以查阅Linux内核源码drivers/net/tun.c，一些著名的VPN软件例如openvpn等，都是以它作为实现基础。</p>
<p>​        本章只介绍了一些典型的过渡技术，其实过渡技术种类还有很多，有一些在实验室阶段，有一些已经商用，有一些已经被废弃，但是总的来说，每一种过渡技术都是在解决特定时期特定场景下的过渡问题。</p>
<h2 id="IPv6-Socket编程应该注意的问题"><a href="#IPv6-Socket编程应该注意的问题" class="headerlink" title="IPv6 Socket编程应该注意的问题"></a>IPv6 Socket编程应该注意的问题</h2><p>​        在《IPv6 Socket编程》一文中，ray已经很详细介绍了IPv6下的socket编程细节和应该注意的问题。本章作为一个补充，介绍一下IPv6 socket编程可能还会遇到的问题。</p>
<p><strong>1、IPv6地址编码</strong></p>
<p>​        IPv4地址本质是一个32位整数，因此一般无论是存储层还是逻辑层，都经常将点分制的IPv4字符串地址转为32位整数使用。而在IPv6，情况就复杂多了（可能也有同学就想到，光是原子性就很难保证了）。</p>
<p>​        举一个典型的例子，现在有个需求，分别统计每个IP的访问频次。</p>
<p>​        在IPv4的情况下，最简单就是STL用std::map搞定（单线程），土豪一点的可以开个16G的数组用空间换时间。</p>
<p>​        但是在IPv6的场景下，那就尴尬了，IPv6可是个128位整数，可以用map吗？可能会有人直接将原始的字符串类型的IPv6地址作为key来累计。一旦那么用，就要十分注意了。由于IPv6是支持前导0和连续0的压缩表示方式，而且支持英文字母大小写，例如：</p>
<p>​        2001:db8:4::41</p>
<p>​        2001:db8:4:0:0:0:0:0:41</p>
<p>​        2001:0db8:4::41</p>
<p>​        2001:DB8:4::41</p>
<p>​        这4个都是合法的IPv6地址，如果将输入毫无修改地作为key来累计，那必须会将累计逻辑分散了，最终得不到正确的频率结果。类似的问题也在MAC地址（BSSID）上面，由于MAC地址分号间的数字前导0可以省略，并且也是支持大小写英文字母，所以也是会同样的问题。在微信安全中心，MAC地址的逻辑统一转为64位整数处理，情况相对还好。</p>
<p>​        但是到了IPv6有木有更好的解决办法呢？答案是肯定的，但是需要具体问题具体分析。</p>
<p>​        在上面的频率例子比较优雅的做法，依然用map的话，可以利用自定义key类型解决，这个方法需要重载自定义类型的比较符号’&lt;’：</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/44f3myuex5.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图35 自定义IPv6地址结构</p>
<p>​        其中struct in6_addr就是一个128位的IPv6地址结构体。</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/7zq6yeh5pg.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图36 使用std::map实现IPv6频率</p>
<p>​        其实还有更优雅的方式，直接将IPv6的地址强制转为2个64位整数来比较，if else会写得更少一些，效率更高一些。</p>
<p>​        上面说到2个64位整数，微信安全中心有一些静态的key-value数据查询（批量写，多次读），其中key是MD5，我们将MD5也是作为2个64位整数来对待，将2个64位整数联合排序，写入内存，然后使用两次二分查找的方式搜索，效率非常高。在这种场景下面，IPv6也是可以用类似的方法处理。</p>
<p>​         IPv6地址结构，以后很可能会给我们的编程或多或少带来一些“未知”的坑-_-||。</p>
<p><strong>2、IPv6 socket“兼容”IPv4的情况</strong></p>
<p>​        在IPv4和IPv6共存的一个很长的时间里，在socket编程上不得不面对的就是IPv6和IPv4一定程度的“兼容问题”。而在文章前面有提到，IPv6和IPv4和完全不兼容的两种协议，但是IPv6协议的地址空间更大，是可以使用IPv6的地址表示IPv4地址，例如IPv4映射地址，因此，在很特殊的情况下，IPv4和IPv6可以实现“兼容”，但是这种兼容是很有限的。在Linux平台下，这种“兼容性”是如何表现的，我们这里来分析一下。</p>
<p>​        在Linux下面，以IPv6下的UDP Socket举例：</p>
<p>​        有个UDP协议的Server改造IPv6，该Server机器上有一个网卡并且同时配置IPv6和IPv4地址，支持双栈。Server进程创建IPv6 UDP socket套接字，绑定Server本地任意地址（IPv4和IPv6都是以全0地址为绑定任意地址）。客户端是IPv4，向这个Server发送UDP请求数据包。</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/wqlf8opc17.png?imageView2/2/w/1620" alt="img" loading="lazy">图37 IPv6服务收到IPv4报文</p>
<p>​        可以看到的是，IPv6的socket会正常收到客户端的数据报文，并且会将IPv4地址转化为映射地址，为了明确这个逻辑，我们分析Linux内核的实现。 </p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/n4zvyci6n5.png?imageView2/2/w/1620" alt="img" loading="lazy">图38 IPv6下UDP socket收到IPv4数据包内核实现</p>
<p>​        IPv6的socket收到数据包，如果是IPv4协议，则将来源IPv4的IP地址转为IPv6的IPv4映射地址。与实验的结果很一致。</p>
<p>​        如果Server的IPv6 socket按照这个来源地址返回数据包，那么内核又是如何处理的呢？</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/le72v31lqt.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图39 IPv6下UDP socket发送IPv4数据包内核实现</p>
<p>​        首先内核会判断目的地址是否为IPv6的IPv4映射地址，如果是映射地址，那么要发送的数据是IPv4数据，直接以IPv4协议栈的形式发送该数据（udp_sendmsg是IPv4 udp发送接口）。</p>
<p>​        可以看到，Linux内核本身对这类双栈上的改造做了一定的适配，我们可以根据内核的这种特性去进行改造工作。</p>
<p><strong>3、使用链路本地地址</strong></p>
<p>​        从前面的章节可以知道，IPv6具有自动配置地址的能力。链路本地地址是IPv6要求在每个接口默认自动配置生成的地址，用于链路上的通信，路由器不能转发链路本地地址。除了以上提到的特征外，链路本地地址就是一个普通的IPv6地址，我们可以使用这类地址做socket编程通信。</p>
<p>​        但是我们在IPv6 Socket编程的时候使用链路本地地址，有一个细节需要注意。</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/txvjix4rnf.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图40 IPv6地址结构</p>
<p>​        在IPv6地址结构中（对应于IPv4的struct sockaddr_in），有一个我们非常陌生的字段scope_id，这个字段在我们使用链路本地地址来编程的时候是必须要使用的，这个字段表示我们需要选择接口ID。为什么需要需要有这么一个字段，那是因为链路本地地址的特殊性，一个网络节点可以有多个网络接口，多个网络接口可以有相同的链路本地地址，例如我们需要bind一个本地链路地址，这个时候就会有冲突，操作系统无法决策需要绑定的是哪个接口的本地链路地址。</p>
<p>​        又例如，如果我们在直连的2个主机之间直接用链路本地地址ping的话，会ping失败。</p>
<p>​        因此IPv6引入了scope_id来解决这个问题，scope_id指定了使用哪个网络接口。</p>
<p>​        如何查看这个网络接口（网卡）的scope_id是多少？</p>
<p>一、在Linux下查看网络接口的scope_id：</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/wl7a03dzfq.png?imageView2/2/w/1620" alt="img" loading="lazy">图41 Linux下查看网络接口scope id</p>
<p>​        使用ip addr命令可以查看每个接口的scope_id，如图第一列的数字就是scope_id。</p>
<p>二、在windows下查看scope_id：</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/9xcfbr470g.jpg?imageView2/2/w/1620" alt="img" loading="lazy">图42 Windows下查看网路接口scope id</p>
<p>​        最后的百分号%后面的数字就是该网络接口的scope_id。</p>
<p>​        Windows下也可以使用route print -6查看接口列表，列表第一列数字就是scope_id。</p>
<p>​        因此，在使用链路本地地址编程的时候，需要把这个scope_id赋值到sin6_scope_id字段。</p>
<p>​        而在使用ping命令的时候，需要在地址后面加上%和scope_id才能ping成功，如图：</p>
<p><img src="https://ask.qcloudimg.com/draft/1122790/490433uclk.png?imageView2/2/w/1620" alt="img" loading="lazy">图43 使用链路本地地址ping</p>
<p>​        关于这个scope id，详细可以查看RFC2553</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>​        本文主要科普介绍了IPv6的基本内容，配合各种实验分析比较清晰认识了IPv6的各种基本概念；也介绍一些“超纲”的内容（我们的工作中很可能不会接触到），但是我觉得这类内容在技术实现上十分有趣，可以在一些技术的方法和思路上面可能会给我们一些通用的启示，例如NAT64/DNS64就是使用中间层来处理IPv4和IPv6互通的问题，我们的工作中也确实经常遇到类似的技术问题。</p>
<p>​        IPv6本身是一个很庞大的体系，还有很多高级内容没有介绍（IPv6-IPSec、移动IPv6等等）。而且查看和IPv6相关的RFC，不断在做修正，Linux内核的IPv6模块代码也不断有配合新的RFC修改来做调整，引入新的逻辑，以适应各种场景的实际需求。有兴趣的同学可以一直留意RFC的变化和紧跟Linux内核的版本发布。</p>
<p>​        本文是我在结合各种文献和实验对IPv6理解的一个总结归纳，难免会有理解偏差和手抖的地方，希望各位同学熟悉的话能帮忙指出其中的错误，并且提供修改建议和意见，谢谢：）。</p>
<h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a><strong>参考文献：</strong></h2><p>1、《深入解析IPv6（第3版）》</p>
<p>2、《TCP/IP详解-卷1协议（第2版）》</p>
<p>3、《TCP/IP协议原理与应用（第4版）》</p>
<p>4、《精通Linux内核网络》</p>
<p>5、RFC4380 “Teredo: Tunneling IPv6 over UDP through Network Address Translations”</p>
<p>6、RFC3596 “DNS Extensions to support IP version 6”</p>
<p>7、RFC4193 “Unique Local IPv6 Unicast Address”</p>
<p>8、RFC3879 “Deprecating Site Local Address”</p>
<p>9、RFC2553 “Basic Socket Interface Extensions for IPv6”</p>
<p>10、RFC4214 “Intra-Site Automatic Tunnel Address Protocol(ISATAP)”</p>
<p>11、RFC6147 “DNS Extensions for Network Address Translation from IPv6 Clients to IPv4 Servers”</p>
<p>12、RFC6052 “IPv6 Addressing of IPv4/IPv6 Translators”</p>
<p>13、RFC6146 “Stateful NAT64: Network Address and Protocol Translation from IPv6 Clients to IPv4 Servers”</p>
<p>14、RFC3068 “An Anycast Prefix for 6to4 Deployment”</p>
<p>15、RFC2460 “Internet Protocol, Version 6 Specification”</p>
<p>16、RFC4291 “IP Version 6 Addressing Architecture”</p>
<p>17、RFC1971 “IPv6 Stateless Address Autoconfiguration”</p>
<p>18、RFC4861 “Neighbor Discovery for IP version6”</p>
<p>19、<a href="https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/UnderstandingandPreparingfortheIPv6Transition/UnderstandingandPreparingfortheIPv6Transition.html#//apple_ref/doc/uid/TP40010220-CH213-SW1">https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/UnderstandingandPreparingfortheIPv6Transition/UnderstandingandPreparingfortheIPv6Transition.html#//apple_ref/doc/uid/TP40010220-CH213-SW1</a></p>
<h2 id="文中使用到的开源软件列表："><a href="#文中使用到的开源软件列表：" class="headerlink" title="文中使用到的开源软件列表："></a><strong>文中使用到的开源软件列表：</strong></h2><p>1、Linux-2.6.32.27源码 (<a href="http://www.kernel.org/">www.kernel.org</a>)</p>
<p>2、Linux-3.10.108源码 (<a href="http://www.kernel.org/">www.kernel.org</a>)</p>
<p>3、Linux-4.9.75源码   (<a href="http://www.kernel.org/">www.kernel.org</a>)</p>
<p>4、无状态自动配置服务radvd (<a href="http://www.litech.org/radvd/">http://www.litech.org/radvd/</a>)</p>
<p>5、NAT64服务tayga（<a href="http://www.litech.org/tayga/%EF%BC%89">http://www.litech.org/tayga/）</a></p>
<p>6、NAT64/DNS64服务ecdysis （<a href="http://ecdysis.viagenie.ca/%EF%BC%89">http://ecdysis.viagenie.ca/）</a></p>
<p>7、teredo服务mirodo（<a href="https://www.remlab.net/miredo/%EF%BC%89">https://www.remlab.net/miredo/）</a></p>
<p>8、轻量级web服务器boa （<a href="http://www.boa.org/%EF%BC%89">http://www.boa.org/）</a></p>
<p>原文链接：<a href="https://cloud.tencent.com/developer/article/1088685">https://cloud.tencent.com/developer/article/1088685</a></p>
]]></content>
  </entry>
  <entry>
    <title>Nginx的配置、虚拟主机、负载均衡和反向代理</title>
    <url>/2019/04/29/30/</url>
    <content><![CDATA[<p>原文链接：<a href="https://www.zybuluo.com/phper/note/89391">https://www.zybuluo.com/phper/note/89391</a> </p>
<p>nginx在前面，我写过好几篇，相似的介绍它在各个平台上的安装配置以及和php-fpm的连接等。今天，这一篇，着重讲解它的配置，其中包括它比较擅长的负载均衡和反向代理，还有虚拟主机功能。</p>
<h2 id="nginx启动和关闭"><a href="#nginx启动和关闭" class="headerlink" title="nginx启动和关闭"></a>nginx启动和关闭</h2><p>按照惯例，先说下各个平台的配置情况：</p>
<p>centos平台,源码安装的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx # 启动</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx -s reload #平滑重启</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.conf #配置文件</span><br></pre></td></tr></table></figure>

<p>mac平台，我用brew安装的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;nginx # 启动</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;nginx -s reload #平滑重启</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;etc&#x2F;nginx&#x2F;nginx.cnf #配置文件。</span><br></pre></td></tr></table></figure>



<h2 id="nginx-conf配置文件详解"><a href="#nginx-conf配置文件详解" class="headerlink" title="nginx.conf配置文件详解"></a>nginx.conf配置文件详解</h2><p>其实，对比，apache的配置文件，它的相对比较清晰和简单，之前觉得很难，现在沉下心来想想，其实很简单。大致的分块下，基本就分为以下几块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main</span><br><span class="line">events   &#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br><span class="line">http        &#123;</span><br><span class="line">  ....</span><br><span class="line">  upstream myproject &#123;</span><br><span class="line">    .....</span><br><span class="line">  &#125;</span><br><span class="line">  server  &#123;</span><br><span class="line">    ....</span><br><span class="line">    location &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  server  &#123;</span><br><span class="line">    ....</span><br><span class="line">    location &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>nginx配置文件主要分为六个区域：<br><code>main(全局设置)</code>、<code>events(nginx工作模式)</code>、<code>http(http设置)</code>、<br><code>sever(主机设置)</code>、<code>location(URL匹配)</code>、<code>upstream(负载均衡服务器设置)</code>。</p>
<h2 id="main模块"><a href="#main模块" class="headerlink" title="main模块"></a>main模块</h2><p>下面时一个main区域，他是一个全局的设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user nobody nobody;</span><br><span class="line">worker_processes 2;</span><br><span class="line">error_log  &#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log  notice;</span><br><span class="line">pid        &#x2F;usr&#x2F;local&#x2F;var&#x2F;run&#x2F;nginx&#x2F;nginx.pid;</span><br><span class="line">worker_rlimit_nofile 1024;</span><br></pre></td></tr></table></figure>

<p><code>user</code> 来指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行。</p>
<p><code>worker_processes</code>来指定了Nginx要开启的子进程数。每个Nginx进程平均耗费10M~12M内存。根据经验，一般指定1个进程就足够了，如果是多核CPU，建议指定和CPU的数量一样的进程数即可。我这里写2，那么就会开启2个子进程，总共3个进程。</p>
<p><code>error_log</code>用来定义全局错误日志文件。日志输出级别有debug、info、notice、warn、error、crit可供选择，其中，debug输出日志最为最详细，而crit输出日志最少。</p>
<p><code>pid</code>用来指定进程id的存储文件位置。</p>
<p><code>worker_rlimit_nofile</code>用于指定一个nginx进程可以打开的最多文件描述符数目，这里是65535，需要使用命令“ulimit -n 65535”来设置。</p>
<h2 id="events-模块"><a href="#events-模块" class="headerlink" title="events 模块"></a>events 模块</h2><p>events模块来用指定nginx的工作模式和工作模式及连接数上限，一般是这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    use kqueue; #mac平台</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>use</code>用来指定Nginx的工作模式。Nginx支持的工作模式有select、poll、kqueue、epoll、rtsig和/dev/poll。其中select和poll都是标准的工作模式，kqueue和epoll是高效的工作模式，不同的是epoll用在Linux平台上，而kqueue用在BSD系统中，因为Mac基于BSD,所以Mac也得用这个模式，对于Linux系统，epoll工作模式是首选。</p>
<p><code>worker_connections</code>用于定义Nginx每个进程的最大连接数，即接收前端的最大请求数，默认是1024。最大客户端连接数由<code>worker_processes</code>和<code>worker_connections</code>决定，即<code>Max_clients=worker_processes*worker_connections</code>，在作为反向代理时，Max_clients变为：<code>Max_clients = worker_processes * worker_connections/4</code>。<br>进程的最大连接数受Linux系统进程的最大打开文件数限制，在执行操作系统命令“ulimit -n 65536”后worker_connections的设置才能生效。</p>
<h2 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a>http 模块</h2><p>http模块可以说是最核心的模块了，它负责HTTP服务器相关属性的配置，它里面的server和upstream子模块，至关重要，等到反向代理和负载均衡以及虚拟目录等会仔细说。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line">    access_log  &#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    tcp_nopush      on;</span><br><span class="line">    tcp_nodelay     on;</span><br><span class="line">    keepalive_timeout  10;</span><br><span class="line">    #gzip  on;</span><br><span class="line">    upstream myproject &#123;</span><br><span class="line">        .....</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面详细介绍下这段代码中每个配置选项的含义。<br><code>include</code> 用来设定文件的mime类型,类型在配置文件目录下的mime.type文件定义，来告诉nginx来识别文件类型。</p>
<p><code>default_type</code>设定了默认的类型为二进制流，也就是当文件类型未定义时使用这种方式，例如在没有配置asp 的locate 环境时，Nginx是不予解析的，此时，用浏览器访问asp文件就会出现下载了。</p>
<p><code>log_format</code>用于设置日志的格式，和记录哪些参数，这里设置为<code>main</code>，刚好用于<code>access_log</code>来记录这种类型。</p>
<p>main的类型日志如下：也可以增删部分参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 - - [21&#x2F;Apr&#x2F;2015:18:09:54 +0800] &quot;GET &#x2F;index.php HTTP&#x2F;1.1&quot; 200 87151 &quot;-&quot; &quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;41.0.2272.76 Safari&#x2F;537.36&quot;</span><br></pre></td></tr></table></figure>

<p><code>access_log</code> 用来纪录每次的访问日志的文件地址，后面的<code>main</code>是日志的格式样式，对应于<code>log_format</code>的<code>main</code>。</p>
<p><code>sendfile</code>参数用于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞。</p>
<p><code>keepalive_timeout</code>设置客户端连接保持活动的超时时间。在超过这个时间之后，服务器会关闭该连接。</p>
<p>还有很多各种配置，以后等用到来再说。</p>
<h2 id="server-模块"><a href="#server-模块" class="headerlink" title="server 模块"></a>server 模块</h2><p>sever 模块是http的子模块，它用来定一个虚拟主机，我们先讲最基本的配置，这些在后面再讲。</p>
<p>我们看一下一个简单的server 是如何做的？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost 192.168.12.10 www.yangyi.com;</span><br><span class="line">        # 全局定义，如果都是这一个目录，这样定义最简单。</span><br><span class="line">        root   &#x2F;Users&#x2F;yangyi&#x2F;www;</span><br><span class="line">        index  index.php index.html index.htm; </span><br><span class="line">        charset utf-8;</span><br><span class="line">        access_log  usr&#x2F;local&#x2F;var&#x2F;log&#x2F;host.access.log  main;</span><br><span class="line">        aerror_log  usr&#x2F;local&#x2F;var&#x2F;log&#x2F;host.error.log  error;</span><br><span class="line">        ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>server</code>标志定义虚拟主机开始。<br><code>listen</code>用于指定虚拟主机的服务端口。<br><code>server_name</code>用来指定IP地址或者域名，多个域名之间用空格分开。<br><code>root</code> 表示在这整个<code>server</code>虚拟主机内，全部的root web根目录。注意要和<code>locate &#123;&#125;</code>下面定义的区分开来。<br><code>index</code> 全局定义访问的默认首页地址。注意要和<code>locate &#123;&#125;</code>下面定义的区分开来。<br><code>charset</code>用于设置网页的默认编码格式。<br><code>access_log</code>用来指定此虚拟主机的访问日志存放路径，最后的main用于指定访问日志的输出格式。</p>
<h2 id="location-模块"><a href="#location-模块" class="headerlink" title="location 模块"></a>location 模块</h2><p>location模块是nginx中用的最多的，也是最重要的模块了，什么负载均衡啊、反向代理啊、虚拟域名啊都与它相关。慢慢来讲：</p>
<p>location 根据它字面意思就知道是来定位的，定位URL，解析URL，所以，它也提供了强大的正则匹配功能，也支持条件判断匹配，用户可以通过location指令实现Nginx对动、静态网页进行过滤处理。像我们的php环境搭建就是用到了它。</p>
<p>我们先来看这个，设定默认首页和虚拟机目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">            root   &#x2F;Users&#x2F;yangyi&#x2F;www;</span><br><span class="line">            index  index.php index.html index.htm;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><code>location /</code>表示匹配访问根目录。</p>
<p><code>root</code>指令用于指定访问根目录时，虚拟主机的web目录，这个目录可以是相对路径（相对路径是相对于nginx的安装目录）。也可以是绝对路径。</p>
<p><code>index</code>用于设定我们<code>只输入域名后</code>访问的默认首页地址，有个先后顺序：<code>index.php index.html index.htm</code>，如果没有开启目录浏览权限，又找不到这些默认首页，就会报403错误。</p>
<p>location 还有一种方式就是正则匹配，开启正则匹配这样：<code>location ~</code>。后面加个<code>~</code>。</p>
<p>下面这个例子是运用<code>正则匹配</code>来链接php。我们之前搭建环境也是这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">            root           &#x2F;Users&#x2F;yangyi&#x2F;www;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">            include        fastcgi.conf;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><code>\.php$</code> 熟悉正则的我们直到，这是匹配<code>.php</code>结尾的URL，用来解析php文件。里面的<code>root</code>也是一样，用来表示虚拟主机的根目录。<br><code>fast_pass</code>链接的是<code>php-fpm</code> 的地址，之前我们也搭建过。其他几个参数我们以后再说。</p>
<p>location 还有其他用法，等讲到实例的时候，再看吧。</p>
<h2 id="upstream-模块"><a href="#upstream-模块" class="headerlink" title="upstream 模块"></a>upstream 模块</h2><p>upstream 模块负债负载均衡模块，通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡。我先学习怎么用，具体的使用实例以后再说。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream iyangyi.com&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.12.1:80;</span><br><span class="line">    server 192.168.12.2:80 down;</span><br><span class="line">    server 192.168.12.3:8080  max_fails&#x3D;3  fail_timeout&#x3D;20s;</span><br><span class="line">    server 192.168.12.4:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，通过<code>upstream</code>指令指定了一个负载均衡器的名称<code>iyangyi.com</code>。这个名称可以任意指定，在后面需要的地方直接调用即可。</p>
<p>里面是<code>ip_hash</code>这是其中的一种负载均衡调度算法，下面会着重介绍。紧接着就是各种服务器了。用<code>server</code>关键字表识，后面接ip。</p>
<p>Nginx的<code>负载均衡</code>模块目前支持<code>4种调度算法</code>:</p>
<ol>
<li>weight 轮询（默认）。每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响。weight。指定轮询权值，weight值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下。</li>
<li>ip_hash。每个请求按访问IP的hash结果分配，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的session共享问题。</li>
<li>fair。比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须下载Nginx的upstream_fair模块。</li>
<li>url_hash。按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx本身是不支持url_hash的，如果需要使用这种调度算法，必须安装Nginx 的hash软件包。</li>
</ol>
<p>在HTTP Upstream模块中，可以通过server指令指定后端服务器的IP地址和端口，同时还可以设定每个后端服务器在负载均衡调度中的状态。常用的状态有：</p>
<ul>
<li>down，表示当前的server暂时不参与负载均衡。</li>
<li>backup，预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻。</li>
<li>max_fails，允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。</li>
<li>fail_timeout，在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。</li>
</ul>
<p><strong>注意</strong> 当负载调度算法为ip_hash时，后端服务器在负载均衡调度中的状态不能是weight和backup。</p>
<p>参考文件：<br><a href="http://blog.csdn.net/xifeijian/article/details/20956605">http://blog.csdn.net/xifeijian/article/details/20956605</a><br><a href="http://www.360doc.com/content/13/1114/12/7694408_329125489.shtml">http://www.360doc.com/content/13/1114/12/7694408_329125489.shtml</a><br><a href="http://www.cnblogs.com/xiaogangqq123/archive/2011/03/02/1969006.html">http://www.cnblogs.com/xiaogangqq123/archive/2011/03/02/1969006.html</a><br><a href="http://ixdba.blog.51cto.com/2895551/790611">http://ixdba.blog.51cto.com/2895551/790611</a><br><a href="http://freeloda.blog.51cto.com/2033581/1288553">http://freeloda.blog.51cto.com/2033581/1288553</a></p>
<p>下面看下虚拟主机、负债均衡和反向代理，是如何做到的。</p>
<h2 id="1-基于域名的虚拟主机"><a href="#1-基于域名的虚拟主机" class="headerlink" title="1. 基于域名的虚拟主机"></a>1. 基于域名的虚拟主机</h2><p>在apache上搭建基于域名的虚拟主机很简单，我之前也写过一篇，来讲述如何搭建。在nginx上搭建也不难。</p>
<p>假设我们在本地开发有3个项目，分别在hosts里映射到本地的127.0.0.1上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 www.iyangyi.com iyangyi.com</span><br><span class="line">127.0.0.1 api.iyangyi.com</span><br><span class="line">127.0.0.1 admin.iyangyi.com</span><br></pre></td></tr></table></figure>

<p>有这样3个项目，分别对应于web根目录下的3个文件夹，我们用域名对应文件夹名字，这样子好记：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;Users&#x2F;yangyi&#x2F;www&#x2F;www.iyangyi.com&#x2F;</span><br><span class="line">&#x2F;Users&#x2F;yangyi&#x2F;www&#x2F;api.iyangyi.com&#x2F;</span><br><span class="line">&#x2F;Users&#x2F;yangyi&#x2F;www&#x2F;admin.iyangyi.com&#x2F;</span><br></pre></td></tr></table></figure>

<p>每个目录下都有一个index.php文件，都素简单的输入自己的域名。</p>
<p>下面我们就来搭建这3个域名的虚拟主机，很显然，我们要新建3个<code>server</code>来完成。为了看起来简洁好看，我们使用<code>require</code>来包含外面的3个<code>server</code>在<code>nginx.conf</code>中，这样就清晰了很多。不会使得这个<code>nginx.conf</code>内容太多：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main</span><br><span class="line">events   &#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br><span class="line">http        &#123;</span><br><span class="line">  ....</span><br><span class="line">  include vhost&#x2F;www.iyangyi.conf;</span><br><span class="line">  include vhost&#x2F;api.iyangyi.conf;</span><br><span class="line">  include vhost&#x2F;admin.iyangyi.conf;</span><br><span class="line">  #或者用 *.conf  包含</span><br><span class="line">  # include vhost&#x2F;*.conf</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>既然每一个<code>conf</code>都是一个<code>server</code>，前面已经学习了一个完整的<code>server</code>写的了。下面就开始：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># www.iyangyi.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.iyangyi.com iyangyi.com;</span><br><span class="line">    root &#x2F;Users&#x2F;yangyi&#x2F;www&#x2F;www.iyangyi.com&#x2F;;</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line">    access_log &#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;nginx&#x2F;www.iyangyi.access.log main;</span><br><span class="line">    error_log &#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;nginx&#x2F;www.iyangyi.error.log error;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000; </span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        include        fastcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># api.iyangyi.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name api.iyangyi.com;</span><br><span class="line">    root &#x2F;Users&#x2F;yangyi&#x2F;www&#x2F;api.iyangyi.com&#x2F;;</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line">    access_log &#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;nginx&#x2F;api.iyangyi.access.log main;</span><br><span class="line">    error_log &#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;nginx&#x2F;api.iyangyi.error.log error;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000; </span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        include        fastcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># admin.iyangyi.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name admin.iyangyi.com;</span><br><span class="line">    root &#x2F;Users&#x2F;yangyi&#x2F;www&#x2F;admin.iyangyi.com&#x2F;;</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line">    access_log &#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;nginx&#x2F;admin.iyangyi.access.log main;</span><br><span class="line">    error_log &#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;nginx&#x2F;admin.iyangyi.error.log error;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000; </span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        include        fastcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样3个很精简的虚拟域名就搭建好了。重启下nginx，然后打开浏览器访问一下这3个域名，就能看到对应的域名内容了。</p>
<h2 id="2-反向代理"><a href="#2-反向代理" class="headerlink" title="2.反向代理"></a>2.反向代理</h2><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>在说啥啥反向代理之前，先说下什么是<code>代理</code>或者<code>正向代理</code>。</p>
<p><code>正向代理</code>也就是代理，他的工作原理就像一个跳板，简单的说，我访问不了google.com，但是我能访问一个代理服务器A，A能访问google.com，于是我先连上代理服务器A，告诉他我需要google.com的内容，A就去取回来，然后返回给我。从网站的角度，只在代理服务器来取内容的时候有一次记录，有时候并不知道是用户的请求，也隐藏了用户的资料，这取决于代理告不告诉网站。</p>
<p>结论就是，<code>正向代理</code>是一个位于<code>客户端</code>和<code>原始服务器(origin server)</code>之间的服务器。为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。</p>
<p>目前代理软件很多，浏览器上的代理就更多了。什么自由门啊，红杏等。</p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>ok，说完正向代理，再来说啥是<code>反向代理</code>！</p>
<p>举个例子，比如我想访问 <code>http://www.test.com/readme</code>，但<code>www.test.com</code>上并不存在<code>readme</code>页面，于是他是偷偷从另外一台服务器上取回来，然后作为自己的内容返回用户，但用户并不知情。这里所提到的 <a href="http://www.test.com/">www.test.com</a> 这个域名对应的服务器就设置了<code>反向代理功能</code>。</p>
<p>结论就是，<code>反向代理</code>正好相反，对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。</p>
<p>嗯。正向代理和反向代理就基本清楚了，那我们就来用nginx来配置一个反向代理。</p>
<p>nginx 使用反向代理，主要是使用<code>location</code>模块下的<code>proxy_pass</code>选项。</p>
<p>我们直接实战吧！</p>
<p>来个最简单的。当我访问 mac 上的nginx 的 centos.iyangyi.com 的内容时候, 就反向代理到虚拟机centos上的 apache 192.168.33.10 的index.html页面。</p>
<p>192.168.33.10 中的html 是很简单的一句输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">centos apache2 index.html</span><br></pre></td></tr></table></figure>

<p>在hosts里新加上这个域名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#vi &#x2F;etc&#x2F;hosts </span><br><span class="line">127.0.0.1 centos.iyangyi.com</span><br></pre></td></tr></table></figure>

<p>在vhost目录中新建一个conf server</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#centos.iyangyi.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name centos.iyangyi.com;</span><br><span class="line">    access_log &#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;nginx&#x2F;centos.iyangyi.access.log main;</span><br><span class="line">    error_log &#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;nginx&#x2F;centos.iyangyi.error.log error;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;192.168.33.10;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启下nginx:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure>

<p>打开浏览器，就可以看到页面输出了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">centos apache2 index.html</span><br></pre></td></tr></table></figure>

<p>当然。proxy 还有其他的参数，比如：<code>proxy_set_header</code> 用来设置header头部信息参数转发等，等用了可以仔细看看。</p>
<h2 id="3-负载均衡"><a href="#3-负载均衡" class="headerlink" title="3.负载均衡"></a>3.负载均衡</h2><p>别被这个名字给吓住了，以为是什么很牛逼的东西的。其实不然。也很简单。</p>
<p>先简单说下负载均衡是干嘛的？举个例子：我们的小网站，刚开始就一台nginx服务器，后来，随着业务量增大，用户增多，一台服务器已经不够用了，我们就又多加了几台服务器。那么这几台服务器如何调度？如何均匀的提供访问？这就是负载均衡。</p>
<p>负载均衡的好处是可以集群多台机器一起工作，并且对外的IP 和 域名是一样的，外界看起来就好像一台机器一样。</p>
<p>nginx 也刚好提供了强大而又简单的负载均衡功能。</p>
<p>在第一节中，我详细讲了nginx的负载均衡模块<code>upstream</code>，负载均衡呢，主要是用这个模块。</p>
<p>我们先用vagrant搭建一个centos虚拟机集群（附vagrantfile文件）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vagrant.configure(2) do |config|</span><br><span class="line">  config.vm.define :web1 do |web1|</span><br><span class="line">    web1.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">          v.customize [&quot;modifyvm&quot;, :id, &quot;--name&quot;, &quot;web1&quot;, &quot;--memory&quot;, &quot;128&quot;]</span><br><span class="line">    end</span><br><span class="line">    web1.vm.box &#x3D; &quot;centos65&quot;</span><br><span class="line">    web1.vm.hostname &#x3D; &quot;web1&quot;</span><br><span class="line">    web1.vm.network :private_network, ip: &quot;192.168.33.11&quot;</span><br><span class="line">  end</span><br><span class="line">  config.vm.define :web2 do |web2|</span><br><span class="line">    web2.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">          v.customize [&quot;modifyvm&quot;, :id, &quot;--name&quot;, &quot;web2&quot;, &quot;--memory&quot;, &quot;128&quot;]</span><br><span class="line">    end</span><br><span class="line">    web2.vm.box &#x3D; &quot;centos65&quot;</span><br><span class="line">    web2.vm.hostname &#x3D; &quot;web2&quot;</span><br><span class="line">    web2.vm.network :private_network, ip: &quot;192.168.33.12&quot;</span><br><span class="line">  end</span><br><span class="line">  config.vm.define :web3 do |web3|</span><br><span class="line">    web3.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">          v.customize [&quot;modifyvm&quot;, :id, &quot;--name&quot;, &quot;web3&quot;, &quot;--memory&quot;, &quot;128&quot;]</span><br><span class="line">    end</span><br><span class="line">    web3.vm.box &#x3D; &quot;centos65&quot;</span><br><span class="line">    web3.vm.hostname &#x3D; &quot;web3&quot;</span><br><span class="line">    web3.vm.network :private_network, ip: &quot;192.168.33.13&quot;</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>分别配置静态ip并且取名字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">web1 192.168.33.11</span><br><span class="line">web2 192.168.33.12</span><br><span class="line">web3 192.168.33.13</span><br></pre></td></tr></table></figure>

<p>然后，我们分别启动<code>vagrant ssh web1,web2,web3</code>,并且分别用<code>yum</code>简单安装好<code>apache</code>。并在<code>www</code>目录里面新建<code>index.html</code>，分别输出一句简单的<code>web1</code>、<code>web2</code>、<code>web3</code>。</p>
<p>好，这个时候，我们在浏览器里输入对应的IP就会显示对应的<code>web*</code>名字了。</p>
<p>ok，我们再来配置mac下的nginx，前面说过，主要是用nginx的<code>upstream</code>，我接下来要完成的需求就是当我访问<code>upstram.iyangyi.com</code>时，会自动的负载均衡到这3个服务器上去。</p>
<p>先在hosts里加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 upstream.iyangyi.com</span><br></pre></td></tr></table></figure>

<p>好，按照惯例，新建一个<code>upstream.iyangyi.conf</code>的server配置文件。</p>
<h3 id="基于-weight-权重的负载"><a href="#基于-weight-权重的负载" class="headerlink" title="基于 weight 权重的负载"></a>基于 weight 权重的负载</h3><p>先来一个最简单的，weight权重的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">    server 192.168.33.11 weight&#x3D;10;</span><br><span class="line">    server 192.168.33.12 weight&#x3D;10;</span><br><span class="line">    server 192.168.33.13 weight&#x3D;10;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name upstream.iyangyi.com;</span><br><span class="line">    access_log &#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;nginx&#x2F;upstream.iyangyi.access.log main;</span><br><span class="line">    error_log &#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;nginx&#x2F;upstream.iyangyi.error.log error;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;webservers;</span><br><span class="line">        proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启nginx <code>nginx -s reload</code>，打开浏览器输入<code>upstream.iyangyi.com</code>，不断刷新下，就能看到变化显示<code>web1,web2,web3</code>。说明我们的负载均衡起作用了。</p>
<p>我们再打开web[1-3]的apache的访问日志：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vi &#x2F;var&#x2F;log&#x2F;httpd&#x2F;access_log</span><br><span class="line"></span><br><span class="line">192.168.33.1 - - [12&#x2F;May&#x2F;2015:10:47:02 +0000] &quot;GET &#x2F; HTTP&#x2F;1.0&quot; 200 5 &quot;-&quot; &quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;42.0.2311.90 Safari&#x2F;537.36&quot;</span><br></pre></td></tr></table></figure>

<p>上面也显示出了ip为这台mac的地址。说明负载均衡已经生效。</p>
<p>我们再来继续看几个参数 : <code>max_fails</code>和<code>fail_timeout</code></p>
<p><strong>max_fails :</strong> 允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。</p>
<p><strong>fail_timeout :</strong> 在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用，进行健康状态检查。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server 192.168.33.11 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;30s;</span><br></pre></td></tr></table></figure>

<p>所以这2个一起搭配使用，表示：<code>当失败2次的时候，就停止使30秒</code></p>
<p>好，我们来继续做实验，将<code>web1</code>的httpd服务停掉，然后我们加上max_fails可以和fail_timeout。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;usr&#x2F;sbin&#x2F;apachectl stop</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream webservers&#123;    server 192.168.33.11 weight&#x3D;10 max_fails&#x3D;2 fail_timeout&#x3D;30s;    server 192.168.33.12 weight&#x3D;10 max_fails&#x3D;2 fail_timeout&#x3D;30s;    server 192.168.33.13 weight&#x3D;10 max_fails&#x3D;2 fail_timeout&#x3D;30s;&#125;</span><br></pre></td></tr></table></figure>

<p>重启nginx，然后刷新<code>upstream.iyangyi.com</code>，就能看到变化显示，只有<code>web2,web3</code>，<code>web1</code>没有了。</p>
<p>看下日志，显示web1 挂了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2015&#x2F;05&#x2F;14 15:15:56 [error] 2381#0: *93 kevent() reported that connect() failed (61: Connection refused) while connecting to upstream, client: 127.0.0.1, server: upstream.iyangyi.com, request: &quot;GET &#x2F; HTTP&#x2F;1.1&quot;, upstream: &quot;http:&#x2F;&#x2F;192.168.33.11:80&#x2F;&quot;, host: &quot;upstream.iyangyi.com&quot;</span><br></pre></td></tr></table></figure>

<p>我们再来继续看剩下几个参数 : <code>down</code>和<code>backup</code></p>
<p><strong>down</strong> 表示这台机器暂时不参与负载均衡。相当于注释掉了。</p>
<p><strong>backup</strong> 表示这台机器是备用机器，是其他的机器不能用的时候，这台机器才会被使用，俗称<code>备胎</code> O__O “…</p>
<p>我们继续来做实验，改一下，先把<code>web1</code>改成<code>down</code>，然后将web3改成<code>backup</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">    server 192.168.33.11 down;</span><br><span class="line">    server 192.168.33.12 weight&#x3D;10 max_fails&#x3D;2 fail_timeout&#x3D;30s;</span><br><span class="line">    server 192.168.33.13 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启下nginx，然后刷新下，不管怎么刷新，都显示是<code>web2</code>。</p>
<p>接下来，我们将web2 的服务停掉：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;usr&#x2F;sbin&#x2F;apachectl stop</span><br></pre></td></tr></table></figure>

<p>然后，我们再刷新下网页，看下备胎web3是不是被启用了：果然，页面上输出了<code>web3</code>。</p>
<h3 id="基于-ip-hash-的负载"><a href="#基于-ip-hash-的负载" class="headerlink" title="基于 ip_hash 的负载"></a>基于 ip_hash 的负载</h3><p>这种分配方式，每个请求按访问IP的hash结果分配，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的session共享问题。</p>
<p>动手看怎么操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream webservers&#123;    ip_hash;    server 192.168.33.11 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;30s;    server 192.168.33.12 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;30s;    server 192.168.33.13 down;&#125;</span><br></pre></td></tr></table></figure>

<p>重启nginx，我们刷新，发现，再怎么刷，都是<code>web1</code>, 是固定的了。</p>
<p>我们讲web2的权重该大一点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream webservers&#123;    ip_hash;    server 192.168.33.11 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;30s;    server 192.168.33.12 weight&#x3D;2 max_fails&#x3D;2 fail_timeout&#x3D;30s;    server 192.168.33.13 down;&#125;</span><br></pre></td></tr></table></figure>

<p>这样就会永远是web2了。</p>
<p>我们试着把web2服务关掉，再刷新，就会输出<code>web1</code>了，已经切换过来了。</p>
<p><strong>注意</strong><br>ip_hash 模式下，最好不要设置<code>weight</code>参数，因为你设置了，就相当于手动设置了，将会导致很多的流量分配不均匀。</p>
<p>ip_hash模式下, <code>backup</code>参数不可用，加了会报错，为啥呢？因为，本身我们的访问就是固定的了，其实，备用已经不管什么作用了。</p>
<h2 id="4-页面缓存"><a href="#4-页面缓存" class="headerlink" title="4.页面缓存"></a>4.页面缓存</h2><p>页面缓存也是日常web 开发中很重要的一个环节，对于一些页面，我们可以将其静态化，保存起来，下次请求时候，直接走缓存，而不用去请求反相代理服务器甚至数据库服务了。从而减轻服务器压力。</p>
<p>nginx 也提供了简单而强大的下<code>重定向</code>，<code>反向代理</code>的缓存功能，只需要简单配置下，就能将指定的一个页面缓存起来。它的原理也很简单，就是匹配当前访问的url, hash加密后，去指定的缓存目录找，看有没有，有的话就说明匹配到缓存了。</p>
<p>好。现在开始学习！</p>
<p>我们先来看一下一个简单的页面缓存的配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  proxy_cache_path &#x2F;data&#x2F;nginx&#x2F;cache levels&#x3D;1:2 keys_zone&#x3D;cache_zone:10m inactive&#x3D;1d max_size&#x3D;100m;</span><br><span class="line">  upstream myproject &#123;</span><br><span class="line">    .....</span><br><span class="line">  &#125;</span><br><span class="line">  server  &#123;</span><br><span class="line">    ....</span><br><span class="line">    location ~* \.php$ &#123;</span><br><span class="line">        proxy_cache cache_zone; #keys_zone的名字</span><br><span class="line">        proxy_cache_key $host$uri$is_args$args; #缓存规则</span><br><span class="line">        proxy_cache_valid any 1d;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面我们来一步一步说。用到的配置参数，主要是<code>proxy_*</code>前缀的很多配置。</p>
<p>首先需要在<code>http</code>中加入<code>proxy_cache_path</code> 它用来制定缓存的目录以及缓存目录深度制定等。它的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_cache_path path [levels&#x3D;number] keys_zone&#x3D;zone_name:zone_size [inactive&#x3D;time] [max_size&#x3D;size]; </span><br></pre></td></tr></table></figure>

<p><code>1. path</code>是用来指定 缓存在磁盘的路径地址。比如：<code>/data/nginx/cache</code>。那以后生存的缓存文件就会存在这个目录下。</p>
<p><code>2. levels</code>用来指定缓存文件夹的级数，可以是：<code>levels=1</code>, <code>levels=1:1</code>, <code>levels=1:2</code>, <code>levels=1:2:3</code> 可以使用任意的1位或2位数字作为目录结构分割符，如 <code>X</code>, <code>X:X</code>,或 <code>X:X:X</code> 例如: <code>2</code>, <code>2:2</code>, <code>1:1:2</code>，但是最多只能是三级目录。</p>
<p>那这个里面的数字是什么意思呢。表示取hash值的个数。比如：现在根据请求地址localhost/index.php?a=4 用md5进行哈希，得到e0bd86606797639426a92306b1b98ad9</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">levels&#x3D;1:2&#96; 表示建立2级目录，把hash最后1位(9)拿出建一个目录，然后再把9前面的2位(ad)拿来建一个目录, 那么缓存文件的路径就是&#96;&#x2F;data&#x2F;nginx&#x2F;cache&#x2F;9&#x2F;d&#x2F;e0bd86606797639426a92306b1b98ad9</span><br></pre></td></tr></table></figure>

<p>以此类推：<code>levels=1:1:2</code>表示建立3级目录，把hash最后1位(9)拿出建一个目录，然后再把9前面的1位(d)建一个目录, 最后把d前面的2位(8a)拿出来建一个目录 那么缓存文件的路径就是<code>/data/nginx/cache/9/d/8a/e0bd86606797639426a92306b1b98ad9</code></p>
<p><code>3. keys_zone</code> 所有活动的key和元数据存储在共享的内存池中，这个区域用keys_zone参数指定。one指的是共享池的名称，10m指的是共享池的大小。</p>
<p>注意每一个定义的内存池必须是不重复的路径，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_cache_path  &#x2F;data&#x2F;nginx&#x2F;cache&#x2F;one  levels&#x3D;1      keys_zone&#x3D;one:10m;proxy_cache_path  &#x2F;data&#x2F;nginx&#x2F;cache&#x2F;two  levels&#x3D;2:2    keys_zone&#x3D;two:100m;proxy_cache_path  &#x2F;data&#x2F;nginx&#x2F;cache&#x2F;three  levels&#x3D;1:1:2  keys_zone&#x3D;three:1000m;</span><br></pre></td></tr></table></figure>

<p><code>4. inactive</code> 表示指定的时间内缓存的数据没有被请求则被删除，默认inactive为10分钟。<code>inactive=1d</code> 1小时。<code>inactive=30m</code>30分钟。</p>
<p><code>5. max_size</code> 表示单个文件最大不超过的大小。它被用来删除不活动的缓存和控制缓存大小，当目前缓存的值超出max_size指定的值之后，超过其大小后最少使用数据（LRU替换算法）将被删除。<code>max_size=10g</code>表示当缓存池超过10g就会清除不常用的缓存文件。</p>
<p><code>6. clean_time</code> 表示每间隔自动清除的时间。<code>clean_time=1m</code> 1分钟清除一次缓存</p>
<p>好。说完了这个很重要的参数。我们再来说在<code>server</code>模块里的几个配置参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_cache&#96; 用来指定用哪个&#96;keys_zone&#96;的名字，也就是用哪个目录下的缓存。上面我们指定了三个&#96;one, two,three&#96; 。比如，我现在想用&#96;one&#96; 这个缓存目录 : &#96;proxy_cache one</span><br></pre></td></tr></table></figure>

<p><code>proxy_cache_key</code> 这个其实蛮重要的，它用来指定生成hash的url地址的格式。他会根据这个key映射成一个hash值，然后存入到本地文件。<br><code>proxy_cache_key $host$uri</code>表示无论后面跟的什么参数，都会访问一个文件，不会再生成新的文件。<br>而如果<code>proxy_cache_key $is_args$args</code>，那么传入的参数 localhost/index.php?a=4 与localhost/index.php?a=44将映射成两个不同hash值的文件。</p>
<p><code>proxy_cache_key</code> 默认是 <code>&quot;$scheme$host$request_uri&quot;</code>。但是一般我们会把它设置成：<code>$host$uri$is_args$args</code> 一个完整的url路径。</p>
<p><code>proxy_cache_valid</code> 它是用来为不同的http响应状态码设置不同的缓存时间,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_cache_valid  200 302  10m;proxy_cache_valid  404      1m;</span><br></pre></td></tr></table></figure>

<p>表示为http status code 为200和302的设置缓存时间为10分钟，404代码缓存1分钟。<br>如果只定义时间：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_cache_valid 5m;</span><br></pre></td></tr></table></figure>

<p>那么只对代码为200, 301和302的code进行缓存。<br>同样可以使用any参数任何相响应：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_cache_valid  200 302 10m;proxy_cache_valid  301 1h;proxy_cache_valid  any 1m; #所有的状态都缓存1小时</span><br></pre></td></tr></table></figure>

<p>好。缓存的基本一些配置讲完了。也大致知道了怎么使用这些参数。</p>
<p>现在开始实战！我们启动一台vagrant linux 机器 web1 (192.168.33.11) 用作远程代理机器，就不搞复杂的负载均衡了。</p>
<p>先在Mac本地加一个域名<code>cache.iyangyi.com</code>, 然后按照上面的配置在vhost 下新建一个<code>proxy_cache.iyangyi.conf</code> 文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_cache_path &#x2F;usr&#x2F;local&#x2F;var&#x2F;cache levels&#x3D;1:2 keys_zone&#x3D;cache_zone:10m inactive&#x3D;1d max_size&#x3D;100m;</span><br><span class="line">server  &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name cache.iyangyi.com;</span><br><span class="line">    access_log &#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;nginx&#x2F;cache.iyangyi.access.log main;</span><br><span class="line">    error_log &#x2F;usr&#x2F;local&#x2F;var&#x2F;log&#x2F;nginx&#x2F;cache.iyangyi.error.log error;</span><br><span class="line">    add_header X-Via $server_addr;</span><br><span class="line">    add_header X-Cache $upstream_cache_status;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">        proxy_cache cache_zone;</span><br><span class="line">        proxy_cache_key $host$uri$is_args$args;</span><br><span class="line">        proxy_cache_valid 200 304 1m;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;192.168.33.11;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然缓存文件夹 <code>/usr/local/var/cache</code>得提前新建好。然后重启nginx。</p>
<p>192.168.33.11 是apache服务器，在index.html页面就写了一个<code>web1</code>。</p>
<p>我们打开浏览器访问 <code>cache.iyangyi.com</code> 。就能看到<code>web1</code>了。</p>
<p>打开<code>审核元素</code>或者<code>firebug</code>。看<code>network网络请求</code>选项，我们可以看到，Response Headers，在这里我们可以看到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X-Cache:MISS</span><br><span class="line">X-Via:127.0.0.1</span><br></pre></td></tr></table></figure>

<p>X-cache 为 <code>MISS</code> 表示未命中，请求被传送到后端。y因为是第一次访问，没有缓存，所以肯定是未命中。我们再刷新下，就发现其变成了<code>HIT</code>, 表示命中。它还有其他几种状态：</p>
<blockquote>
<p>MISS 未命中，请求被传送到后端<br>HIT 缓存命中<br>EXPIRED 缓存已经过期请求被传送到后端<br>UPDATING 正在更新缓存，将使用旧的应答<br>STALE 后端将得到过期的应答<br>BYPASS 缓存被绕过了</p>
</blockquote>
<p>我们再去看看缓存文件夹 <code>/usr/local/var/cache</code>里面是否有了文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cache git:(master) cd a&#x2F;13</span><br><span class="line">➜  13 git:(master) ls</span><br><span class="line">5bd1af99bcb0db45c8bd601d9ee9e13a</span><br><span class="line">➜  13 git:(master) pwd</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;var&#x2F;cache&#x2F;a&#x2F;13</span><br></pre></td></tr></table></figure>

<p>已经生成了缓存文件。</p>
<p>我们在url 后面随便加一个什么参数，看会不会新生成一个缓存文件夹及文件： <code>http://cache.iyangyi.com/?w=ww55</code>。因为我们使用的生成规则是全部url转换(<code>proxy_cache_key $host$uri$is_args$args</code>;)</p>
<p>查看 X-cache 为 <code>MISS</code>，再刷新 ，变成<code>HIT</code>。再去看一下缓存文件夹 <code>/usr/local/var/cache</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~cache git:(master) ls</span><br><span class="line">4 a</span><br></pre></td></tr></table></figure>

<p>果然又生成了一个4文件夹。</p>
<p>参考资料：<a href="http://freeloda.blog.51cto.com/2033581/1288553">http://freeloda.blog.51cto.com/2033581/1288553</a></p>
<p>前面几节，陆陆续续的说了nginx平时做的大部分工作。第3篇主要讲还是蛮重要的<code>URL路由重写</code>和<code>读写分离</code>。</p>
<h2 id="nginx中的-location-正则模块"><a href="#nginx中的-location-正则模块" class="headerlink" title="nginx中的 location 正则模块"></a>nginx中的 location 正则模块</h2><p>用过apache的知道，apache也是可以配置URL重写的，我之前一篇中也详细的写过：<a href="https://zybuluo.com/phper/note/73726">apache的虚拟域名rewrite配置以及.htaccess的使用</a>。</p>
<p>这一小节，主要来学习nginx中的URL重写怎么做。url重写模块，主要是在<code>location</code>模块面来实现，我们一点一点的看。</p>
<p>首先看下<code>location 正则匹配</code>的使用。</p>
<p>还记得之前是如何用<code>location</code>来定位<code>.php</code>文件的吗?</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000; </span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        include        fastcgi.conf;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>我们用<code>~</code>来表示location开启正则匹配, 这样：<code>location ~</code>。</p>
<p>还可以用这个来匹配静态资源，缓存它们，设置过期时间：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ .*\.(gif|jpg|jpeg|bmp|png|ico|txt|mp3|mp4|swf)&#123;</span><br><span class="line">    expires 15d;</span><br><span class="line">&#125;</span><br><span class="line">location ~ .*\.(css|js)&#123;</span><br><span class="line">    expires 12h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>expires</code> 用来设置HTTP应答中的<code>Expires</code>和<code>Cache-Control</code>的头标时间，来告诉浏览器访问这个静态文件时，不用再去请求服务器，直接从本地缓存读取就可以了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法： expires [time|epoch|max|off]</span><br><span class="line">默认值： expires off</span><br><span class="line">作用域： http, server, location</span><br></pre></td></tr></table></figure>

<p>可以在time值中使用正数或负数。“Expires”头标的值将通过当前系统时间加上您设定的 time 值来获得。</p>
<p>可以设置的参数如下：</p>
<p><code>epoch</code> 指定“Expires”的值为 1 January, 1970, 00:00:01 GMT。<br><code>max</code> 指定“Expires”的值为 31 December 2037 23:59:59 GMT，“Cache-Control”的值为10年。<br><code>-1</code> 指定“Expires”的值为 服务器当前时间 -1s,即永远过期<br><code>负数</code>：Cache-Control: no-cache<br><code>正数或零</code>：Cache-Control: max-age = #, # 会转换为指定时间的秒数。比如：<code>1d</code>、<code>2h</code>、<code>3m</code>。<br><code>off</code> 表示不修改“Expires”和“Cache-Control”的值</p>
<p>比如再看个例子:</p>
<p>控制图片等过期时间为30天</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location~ \.(gif|jpg|jpeg|png|bmp|ico)$ &#123;</span><br><span class="line">        expires 30d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们还可以控制哪一个文件目录的时间，比如控制匹配/resource/或者/mediatorModule/里所有的文件缓存设置到最长时间。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ &#x2F;(resource|mediatorModule)&#x2F; &#123;</span><br><span class="line">        root    &#x2F;opt&#x2F;demo;</span><br><span class="line">        expires max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实战一下。我们设置下过期时间，然后用chrome看下http头部情况。</p>
<p><img src="https://image01.zhang-zhe.cn/20190429135953.png" loading="lazy"></p>
<p>我把这张图片的<code>expires</code>设置为30天，我们看图中的<code>cache-control</code>和<code>Expires</code>看到了，有30天的缓存了。说明生效了。我们再看下nginx的访问日志：</p>
<p><img src="https://image01.zhang-zhe.cn/20190429140016.png" loading="lazy"></p>
<p>看下code码，都是304，表示未修改，告诉浏览器直接读本地的。也就是说缓存生效了。</p>
<h2 id="URL重写模块（Rewrite）"><a href="#URL重写模块（Rewrite）" class="headerlink" title="URL重写模块（Rewrite）"></a>URL重写模块（Rewrite）</h2><p>重写模块与很多模块一起使用。先看一下是怎么用的，看2个例子，然后我们再一点一点讲每个的使用方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F;download&#x2F; &#123;</span><br><span class="line">  if ($forbidden) &#123;</span><br><span class="line">    return   403;</span><br><span class="line">  &#125;</span><br><span class="line">  if ($slow) &#123;</span><br><span class="line">    limit_rate  10k;</span><br><span class="line">  &#125;</span><br><span class="line">  rewrite  ^&#x2F;(download&#x2F;.*)&#x2F;media&#x2F;(.*)\..*$  &#x2F;$1&#x2F;mp3&#x2F;$2.mp3    break;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    root   html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">    rewrite ^&#x2F;bbs&#x2F;(.*)$ http:&#x2F;&#x2F;192.168.18.201&#x2F;forum&#x2F;$1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面2个例子就是利用<code>rewrite</code>来完成URL重写的。我们慢慢来看它的用法。</p>
<h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>break 和变成语言中的用法一样，就是跳出某个逻辑。</p>
<p>语法：break<br>默认值：none<br>使用字段：server, location, if</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (!-f $request_filename) &#123;  break;&#125;</span><br></pre></td></tr></table></figure>

<p>上面这个例子就是在<code>if</code>里面使用<code>break</code>,意思是如果访问的文件名不存在，就跳出。后续会有更多的例子。</p>
<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>语法：if (condition) { … }<br>默认值：none<br>使用字段：server, location</p>
<p>if 判断一个条件，如果条件成立，则后面的大括号内的语句将执行，相关配置从上级继承。</p>
<p>可以在判断语句中指定下列值：</p>
<blockquote>
<ul>
<li>一个变量的名称；不成立的值为：空字符传”“或者一些用“0”开始的字符串。</li>
<li>一个使用=或者!=运算符的比较语句。</li>
<li>使用符号<del>*和</del>模式匹配的正则表达式：</li>
<li>~为区分大小写的匹配。</li>
<li>~*不区分大小写的匹配（firefox匹配FireFox）。</li>
<li>!<del>和!</del>*意为“不匹配的”。</li>
<li>使用-f和!-f检查一个文件是否存在。</li>
<li>使用-d和!-d检查一个目录是否存在。</li>
<li>使用-e和!-e检查一个文件，目录或者软链接是否存在。</li>
<li>使用-x和!-x检查一个文件是否为可执行文件。</li>
</ul>
</blockquote>
<p>我们一一来举例看看。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if ($http_user_agent ~ MSIE) &#123;  rewrite  ^(.*)$  &#x2F;msie&#x2F;$1  break;&#125;</span><br></pre></td></tr></table></figure>

<p><code>$http_user_agent</code>变量获取浏览器的agent，使用<code>~</code> 来匹配大小写<br>用户如果使用的IE 浏览器，就执行if 里面的操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if ($request_method &#x3D; POST ) &#123;  return 405;&#125;</span><br></pre></td></tr></table></figure>

<p><code>$request_method</code>变量获取请求的方法，使用<code>=</code>来判断是否等于POST 。如果复合，就执行if 里面的操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (!-f $request_filename) &#123;  break;  proxy_pass  http:&#x2F;&#x2F;127.0.0.1;&#125;</span><br></pre></td></tr></table></figure>

<p><code>$request_filename</code>变量获取请求的文件名，使用<code>!-f</code>来匹配文件，如果不是一个文件名，就执行if 里面的逻辑。</p>
<h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><p>语法：return code<br>默认值：none<br>使用字段：server, location, if</p>
<p>这个指令结束执行配置语句并为客户端返回状态代码，可以使用下列的值：204，400，402-406，408，410, 411, 413, 416与500-504。此外，非标准代码444将关闭连接并且不发送任何的头部。</p>
<h3 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h3><p>语法：rewrite regex replacement flag<br>默认值：none<br>使用字段：server, location, if</p>
<p>rewrite用来重写url,有3个位置：</p>
<blockquote>
<p>regex 表示用来匹配的正则<br>replacement 表示用来替换的<br>flag 是尾部的标记：</p>
</blockquote>
<p>flag可以是以下的值：</p>
<blockquote>
<ul>
<li>last - url重写后，马上发起一个新的请求，再次进入server块，重试location匹配，超过10次匹配不到报500错误，地址栏url不变</li>
<li>break - url重写后，直接使用当前资源，不再执行location里余下的语句，完成本次请求，地址栏url不变</li>
<li>redirect - 返回302临时重定向，url会跳转，爬虫不会更新url。</li>
<li>permanent - 返回301永久重定向。url会跳转。爬虫会更新url。</li>
<li>为空 - URL 不会变，但是内容已经变化，也是永久性的重定向</li>
</ul>
</blockquote>
<p>上面的正则表达式的一部分可以用圆括号，方便之后按照顺序用$1-$9来引用。</p>
<p>我们来看几个例子：</p>
<p>我们需要将/photos/123456重写成/path/to/photos/12/1234/123456.png</p>
<p>可以这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rewrite  &quot;&#x2F;photos&#x2F;([0-9] &#123;2&#125;)([0-9] &#123;2&#125;)([0-9] &#123;2&#125;)&quot; &#x2F;path&#x2F;to&#x2F;photos&#x2F;$1&#x2F;$1$2&#x2F;$1$2$3.png;</span><br></pre></td></tr></table></figure>

<p>下面是一些简单的常见的重写。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rewrite ^&#x2F;js&#x2F;base.core.v3.js &#x2F;js&#x2F;base.core.v3.dev.js redirect;</span><br><span class="line">rewrite ^&#x2F;js&#x2F;comment.frame.js &#x2F;js&#x2F;comment.frame.dev.js redirect;</span><br><span class="line">rewrite ^&#x2F;live-static&#x2F;(.*)$ http:&#x2F;&#x2F;live.bilibili.com&#x2F;public&#x2F;$1 last;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>NAT详解：基本原理、穿越技术(P2P打洞)、端口老化等</title>
    <url>/2019/05/20/46/</url>
    <content><![CDATA[<h1 id="1-IPv4协议和NAT的由来"><a href="#1-IPv4协议和NAT的由来" class="headerlink" title="1. IPv4协议和NAT的由来"></a>1. IPv4协议和NAT的由来</h1><p>今天，无数快乐的互联网用户在尽情享受Internet带来的乐趣。他们浏览新闻，搜索资料，下载软件，广交新朋，分享信息，甚至于足不出户获取一切日用所需。企业利用互联网发布信息，传递资料和订单，提供技术支持，完成日常办公。然而，Internet在给亿万用户带来便利的同时，自身却面临一个致命的问题：构建这个无所不能的Internet的基础IPv4协议已经不能再提供新的网络地址了。</p>
<p>2011年2月3日中国农历新年， IANA对外宣布：IPv4地址空间最后5个地址块已经被分配给下属的5个地区委员会。2011年4月15日，亚太区委员会APNIC对外宣布，除了个别保留地址外，本区域所有的IPv4地址基本耗尽。一时之间，IPv4地址作为一种濒危资源身价陡增，各大网络公司出巨资收购剩余的空闲地址。其实，IPv4地址不足问题已不是新问题，早在20年以前，IPv4地址即将耗尽的问题就已经摆在Internet先驱们面前。这不禁让我们想去了解，是什么技术使这一危机延缓了尽20年。</p>
<p>要找到问题的答案，让我们先来简略回顾一下IPv4协议。</p>
<p>IPv4即网际网协议第4版——Internet Protocol Version 4的缩写。IPv4定义一个跨越异种网络互连的超级网，它为每个网际网的节点分配全球唯一IP地址。如果我们把Internet比作一个邮政系统，那么IP地址的作用就等同于包含城市、街区、门牌编号在内的完整地址。IPv4使用32bits整数表达一个地址，地址最大范围就是232 约为43亿。以IP创始时期可被联网的设备来看，这样的一个空间已经很大，很难被短时间用完。然而，事实远远超出人们的设想，计算机网络在此后的几十年里迅速壮大，网络终端数量呈爆炸性增长。</p>
<p>更为糟糕的是，为了路由和管理方便，43亿的地址空间被按照不同前缀长度划分为A,B,C,D类地址网络和保留地址。其中，A类网络地址127段，每段包括主机地址约1678万个。B类网络地址16384段，每段包括65536个主机地址。</p>
<p>图1 IPv4网络地址划分</p>
<p>IANA向超大型企业/组织分配A类网络地址，一次一段。向中型企业或教育机构分配B类网络地址，一次一段。这样一种分配策略使得IP地址浪费很严重，很多被分配出去的地址没有真实被利用，地址消耗很快。以至于二十世纪90年代初，网络专家们意识到，这样大手大脚下去，IPv4地址很快就要耗光了。于是，人们开始考虑IPv4的替代方案，同时采取一系列的措施来减缓IPv4地址的消耗。正是在这样一个背景之下，本期的主角闪亮登场，它就是网络地址转换——NAT。</p>
<p>NAT是一项神奇的技术，说它神奇在于它的出现几乎使IPv4起死回生。在IPv4已经被认为行将结束历史使命之后近20年时间里，人们几乎忘了IPv4的地址空间即将耗尽这样一个事实——在新技术日新月异的时代，20年可算一段漫长的历史。更不用说，在NAT产生以后，网络终端的数量呈加速上升趋势，对IP地址的需求剧烈增加。此足见NAT技术之成功，影响之深远。</p>
<p>说它神奇，更因为NAT给IP网络模型带来了深远影响，其身影遍布网络每个角落。根据一份最近的研究报告，70%的P2P用户位于NAT网关以内。因为P2P主要运行在终端用户的个人电脑之上，这个数字意味着大多数PC通过NAT网关连接到Internet。如果加上2G和3G方式联网的智能手机等移动终端，在NAT网关之后的用户远远超过这个比例。</p>
<p>然而当我们求本溯源时却发现一个很奇怪的事实：NAT这一意义重大的技术，竟然没有公认的发明者。NAT第一个版本的RFC作者，只是整理归纳了已被广泛采用的技术。</p>
<h1 id="2-NAT的工作模型和特点"><a href="#2-NAT的工作模型和特点" class="headerlink" title="2. NAT的工作模型和特点"></a>2. NAT的工作模型和特点</h1><h2 id="2-1-NAT的概念模型"><a href="#2-1-NAT的概念模型" class="headerlink" title="2.1 NAT的概念模型"></a>2.1 NAT的概念模型</h2><p>NAT名字很准确，网络地址转换，就是替换IP报文头部的地址信息。NAT通常部署在一个组织的网络出口位置，通过将内部网络IP地址替换为出口的IP地址提供公网可达性和上层协议的连接能力。那么，什么是内部网络IP地址？</p>
<p>RFC1918规定了三个保留地址段落：10.0.0.0-10.255.255.255；172.16.0.0-172.31.255.255；192.168.0.0-192.168.255.255。这三个范围分别处于A,B,C类的地址段，不向特定的用户分配，被IANA作为私有地址保留。这些地址可以在任何组织或企业内部使用，和其他Internet地址的区别就是，仅能在内部使用，不能作为全球路由地址。这就是说，出了组织的管理范围这些地址就不再有意义，无论是作为源地址，还是目的地址。对于一个封闭的组织，如果其网络不连接到Internet，就可以使用这些地址而不用向IANA提出申请，而在内部的路由管理和报文传递方式与其他网络没有差异。</p>
<p>对于有Internet访问需求而内部又使用私有地址的网络，就要在组织的出口位置部署NAT网关，在报文离开私网进入Internet时，将源IP替换为公网地址，通常是出口设备的接口地址。一个对外的访问请求在到达目标以后，表现为由本组织出口设备发起，因此被请求的服务端可将响应由Internet发回出口网关。出口网关再将目的地址替换为私网的源主机地址，发回内部。这样一次由私网主机向公网服务端的请求和响应就在通信两端均无感知的情况下完成了。依据这种模型，数量庞大的内网主机就不再需要公有IP地址了。</p>
<p>图2 NAT转换过程示意图</p>
<p>虽然实际过程远比这个复杂，但上面的描述概括了NAT处理报文的几个关键特点：</p>
<p>\1. 网络被分为私网和公网两个部分，NAT网关设置在私网到公网的路由出口位置，双向流量必须都要经过NAT网关； 2. 网络访问只能先由私网侧发起，公网无法主动访问私网主机； 3. NAT网关在两个访问方向上完成两次地址的转换或翻译，出方向做源信息替换，入方向做目的信息替换； 4. NAT网关的存在对通信双方是保持透明的； 5. NAT网关为了实现双向翻译的功能，需要维护一张关联表，把会话的信息保存下来。</p>
<p>随着后面对NAT的深入描述，读者会发现，这些特点是鲜明的，但又不是绝对的。其中第二个特点打破了IP协议架构中所有节点在通讯中的对等地位，这是NAT最大的弊端，为对等通讯带来了诸多问题，当然相应的克服手段也应运而生。事实上，第四点是NAT致力于达到的目标，但在很多情况下，NAT并没有做到，因为除了IP首部，上层通信协议经常在内部携带IP地址信息。这些我们稍后解释。</p>
<h2 id="2-2-一对一的NAT"><a href="#2-2-一对一的NAT" class="headerlink" title="2.2 一对一的NAT"></a>2.2 一对一的NAT</h2><p>如果一个内部主机唯一占用一个公网IP，这种方式被称为一对一模型。此种方式下，转换上层协议就是不必要的，因为一个公网IP就能唯一对应一个内部主机。显然，这种方式对节约公网IP没有太大意义，主要是为了实现一些特殊的组网需求。比如用户希望隐藏内部主机的真实IP，或者实现两个IP地址重叠网络的通信。</p>
<h2 id="2-3-一对多的NAT"><a href="#2-3-一对多的NAT" class="headerlink" title="2.3 一对多的NAT"></a>2.3 一对多的NAT</h2><p>NAT最典型的应用场景就如同图2描述的，一个组织网络，在出口位置部署NAT网关，所有对公网的访问表现为一台主机。这就是所谓的一对多模型。这种方式下，出口设备只占用一个由Internet服务提供商分配的公网IP地址。面对私网内部数量庞大的主机，如果NAT只进行IP地址的简单替换，就会产生一个问题：当有多个内部主机去访问同一个服务器时，从返回的信息不足以区分响应应该转发到哪个内部主机。此时，需要NAT设备根据传输层信息或其他上层协议去区分不同的会话，并且可能要对上层协议的标识进行转换，比如TCP或UDP端口号。这样NAT网关就可以将不同的内部连接访问映射到同一公网IP的不同传输层端口，通过这种方式实现公网IP的复用和解复用。这种方式也被称为端口转换PAT、NAPT或IP伪装，但更多时候直接被称为NAT，因为它是最典型的一种应用模式。</p>
<h2 id="2-4-按照NAT端口映射方式分类"><a href="#2-4-按照NAT端口映射方式分类" class="headerlink" title="2.4 按照NAT端口映射方式分类"></a>2.4 按照NAT端口映射方式分类</h2><p>在一对多模型中，按照端口转换的工作方式不同，又可以进行更进一步的划分。为描述方便，以下将IP和端口标记为(nAddr:nPort)，其中n代表主机或NAT网关的不同角色。</p>
<p>图3 按照端口转换映射方式分类</p>
<p>​    全锥形NAT</p>
<p>其特点为：一旦内部主机端口对(iAddr:iPort)被NAT网关映射到(eAddr:ePort)，所有后续的(iAddr:iPort)报文都会被转换为(eAddr:ePort)；任何一个外部主机发送到(eAddr:ePort)的报文将会被转换后发到(iAddr:iPort)。</p>
<p>​    限制锥形NAT</p>
<p>其特点为：一旦内部主机端口对(iAddr:iPort)被映射到(eAddr:ePort)，所有后续的(iAddr:iPort)报文都会被转换为(eAddr:ePort)；只有 (iAddr:iPort)向特定的外部主机hAddr发送过数据，主机hAddr从任意端口发送到(eAddr:ePort)的报文将会被转发到(iAddr:iPort)。</p>
<p>​    端口限制锥形NAT</p>
<p>其特点为：一旦内部主机端口对(iAddr:iPort)被映射到(eAddr:ePort)，所有后续的(iAddr:iPort)报文都会被转换为(eAddr:ePort)；只有(iAddr:iPort)向特定的外部主机端口对(hAddr:hPort)发送过数据，由 (hAddr:hPort)发送到(eAddr:ePort)的报文将会被转发到(iAddr:iPort)。</p>
<p>​    对称型NAT</p>
<p>其特点为：NAT网关会把内部主机“地址端口对”和外部主机“地址端口对”完全相同的报文看作一个连接，在网关上创建一个公网“地址端口对”映射进行转换，只有收到报文的外部主机从对应的端口对发送回应的报文，才能被转换。即使内部主机使用之前用过的地址端口对去连接不同外部主机(或端口)时，NAT网关也会建立新的映射关系。</p>
<p>事实上，这些术语的引入是很多混淆的起源。现实中的很多NAT设备是将这些转换方式混合在一起工作的，而不单单使用一种，所以这些术语只适合描述一种工作方式，而不是一个设备。比如，很多NAT设备对内部发出的连接使用对称型NAT方式，而同时支持静态的端口映射，后者可以被看作是全锥型NAT方式。而有些情况下，NAT设备的一个公网地址和端口可以同时映射到内部几个服务器上以实现负载分担，比如一个对外提供WEB服务器的站点可能是有成百上千个服务器在提供HTTP服务，但是对外却表现为一个或少数几个IP地址。</p>
<h1 id="3-NAT的限制与解决方案"><a href="#3-NAT的限制与解决方案" class="headerlink" title="3. NAT的限制与解决方案"></a>3. NAT的限制与解决方案</h1><h2 id="3-1-IP端到端服务模型"><a href="#3-1-IP端到端服务模型" class="headerlink" title="3.1 IP端到端服务模型"></a>3.1 IP端到端服务模型</h2><p>IP协议的一个重要贡献是把世界变得平等。在理论上，具有IP地址的每个站点在协议层面有相当的获取服务和提供服务的能力，不同的IP地址之间没有差异。人们熟知的服务器和客户机实际是在应用协议层上的角色区分，而在网络层和传输层没有差异。一个具有IP地址的主机既可以是客户机，也可以是服务器，大部分情况下，既是客户机，也是服务器。端到端对等看起来是很平常的事情，而意义并不寻常。但在以往的技术中，很多协议体系下的网络限定了终端的能力。正是IP的这个开放性，使得TCP/IP协议族可以提供丰富的功能，为应用实现提供了广阔平台。因为所有的IP主机都可以服务器的形式出现，所以通讯设计可以更加灵活。使用UNIX/LINUX的系统充分利用了这个特性，使得任何一个主机都可以建立自己的HTTP、SMTP、POP3、DNS、DHCP等服务。与此同时，很多应用也是把客户端和服务器的角色组合起来完成功能。例如在VoIP应用中，用户端向注册服务器登录自己的IP地址和端口信息过程中，主机是客户端；而在呼叫到达时，呼叫处理服务器向用户端发送呼叫请求时，用户端实际工作在服务器模式下。在语音媒体流信道建立过程后，通讯双向发送语音数据，发送端是客户模式，接收端是服务器模式。而在P2P的应用中，一个用户的主机既为下载的客户，同时也向其他客户提供数据，是一种C/S混合的模型。上层应用之所以能这样设计，是因为IP协议栈定义了这样的能力。试想一下，如果IP提供的能力不对等，那么每个通信会话都只能是单方向发起的，这会极大限制通信的能力。细心的读者会发现，前面介绍NAT的一个特性正是这样一种限制。没错，NAT最大的弊端正在于此——破坏了IP端到端通信的能力。</p>
<h2 id="3-2-NAT的弊端"><a href="#3-2-NAT的弊端" class="headerlink" title="3.2 NAT的弊端"></a>3.2 NAT的弊端</h2><p>NAT在解决IPv4地址短缺问题上，并非没有副作用，其实存在很多问题。</p>
<p>首先，NAT使IP会话的保持时效变短。因为一个会话建立后会在NAT设备上建立一个关联表，在会话静默的这段时间，NAT网关会进行老化操作。这是任何一个NAT网关必须做的事情，因为IP和端口资源有限，通信的需求无限，所以必须在会话结束后回收资源。通常TCP会话通过协商的方式主动关闭连接，NAT网关可以跟踪这些报文，但总是存在例外的情况，要依赖自己的定时器去回收资源。而基于UDP的通信协议很难确定何时通信结束，所以NAT网关主要依赖超时机制回收外部端口。通过定时器老化回收会带来一个问题，如果应用需要维持连接的时间大于NAT网关的设置，通信就会意外中断。因为网关回收相关转换表资源以后，新的数据到达时就找不到相关的转换信息，必须建立新的连接。当这个新数据是由公网侧向私网侧发送时，就会发生无法触发新连接建立，也不能通知到私网侧的主机去重建连接的情况。这时候通信就会中断，不能自动恢复。即使新数据是从私网侧发向公网侧，因为重建的会话表往往使用不同于之前的公网IP和端口地址，公网侧主机也无法对应到之前的通信上，导致用户可感知的连接中断。NAT网关要把回收空闲连接的时间设置到不发生持续的资源流失，又维持大部分连接不被意外中断，是一件比较有难度的事情。在NAT已经普及化的时代，很多应用协议的设计者已经考虑到了这种情况，所以一般会设置一个连接保活的机制，即在一段时间没有数据需要发送时，主动发送一个NAT能感知到而又没有实际数据的保活消息，这么做的主要目的就是重置NAT的会话定时器。</p>
<p>其次，NAT在实现上将多个内部主机发出的连接复用到一个IP上，这就使依赖IP进行主机跟踪的机制都失效了。如网络管理中需要的基于网络流量分析的应用无法跟踪到终端用户与流量的具体行为的关系。基于用户行为的日志分析也变得困难，因为一个IP被很多用户共享，如果存在恶意的用户行为，很难定位到发起连接的那个主机。即便有一些机制提供了在NAT网关上进行连接跟踪的方法，但是把这种变换关系接续起来也困难重重。基于IP的用户授权不再可靠，因为拥有一个IP的不等于一个用户或主机。一个服务器也不能简单把同一IP的访问视作同一主机发起的，不能进行关联。有些服务器设置有连接限制，同一时刻只接纳来自一个IP的有限访问(有时是仅一个访问)，这会造成不同用户之间的服务抢占和排队。有时服务器端这样做是出于DOS攻击防护的考虑，因为一个用户正常情况下不应该建立大量的连接请求，过度使用服务资源被理解为攻击行为。但是这在NAT存在时不能简单按照连接数判断。总之，因为NAT隐蔽了通信的一端，把简单的事情复杂化了。</p>
<p>我们来深入理解NAT一下对IP端到端模型的破坏力。NAT通过修改IP首部的信息变换通信的地址。但是在这个转换过程中只能基于一个会话单位。当一个应用需要保持多个双向连接时，麻烦就很大。NAT不能理解多个会话之间的关联性，无法保证转换符合应用需要的规则。当NAT网关拥有多个公有IP地址时，一组关联会话可能被分配到不同的公网地址，这通常是服务器端无法接受的。更为严重的是，当公网侧的主机要主动向私网侧发送数据时，NAT网关没有转换这个连接需要的关联表，这个数据包无法到达私网侧的主机。这些反方向发送数据的连接总有应用协议的约定或在初始建立的会话中进行过协商。但是因为NAT工作在网络层和传输层，无法理解应用层协议的行为，对这些信息是无知的。NAT希望自己对通信双方是透明的，但是在这些情况下这是一种奢望。</p>
<p>图4 NAT对端到端通信模型的破坏</p>
<p>此外，NAT工作机制依赖于修改IP包头的信息，这会妨碍一些安全协议的工作。因为NAT篡改了IP地址、传输层端口号和校验和，这会导致认证协议彻底不能工作，因为认证目的就是要保证这些信息在传输过程中没有变化。对于一些隧道协议，NAT的存在也导致了额外的问题，因为隧道协议通常用外层地址标识隧道实体，穿过NAT的隧道会有IP复用关系，在另一端需要小心处理。ICMP是一种网络控制协议，它的工作原理也是在两个主机之间传递差错和控制消息，因为IP的对应关系被重新映射，ICMP也要进行复用和解复用处理，很多情况下因为ICMP报文载荷无法提供足够的信息，解复用会失败。IP分片机制是在信息源端或网络路径上，需要发送的IP报文尺寸大于路径实际能承载最大尺寸时，IP协议层会将一个报文分成多个片断发送，然后在接收端重组这些片断恢复原始报文。IP这样的分片机制会导致传输层的信息只包括在第一个分片中，NAT难以识别后续分片与关联表的对应关系，因此需要特殊处理。</p>
<h2 id="3-3-NAT穿越技术"><a href="#3-3-NAT穿越技术" class="headerlink" title="3.3 NAT穿越技术"></a>3.3 NAT穿越技术</h2><p>前面解释了NAT的弊端，为了解决IP端到端应用在NAT环境下遇到的问题，网络协议的设计者们创造了各种武器来进行应对。但遗憾的是，这里每一种方法都不完美，还需要在内部主机、应用程序或者NAT网关上增加额外的处理。</p>
<p>​    应用层网关</p>
<p>应用层网关(ALG)是解决NAT对应用层协议无感知的一个最常用方法，已经被NAT设备厂商广泛采用，成为NAT设备的一个必需功能。因为NAT不感知应用协议，所以有必要额外为每个应用协议定制协议分析功能，这样NAT网关就能理解并支持特定的协议。ALG与NAT形成互动关系，在一个NAT网关检测到新的连接请求时，需要判断是否为已知的应用类型，这通常是基于连接的传输层端口信息来识别的。在识别为已知应用时，再调用相应功能对报文的深层内容进行检查，当发现任何形式表达的IP地址和端口时，将会把这些信息同步转换，并且为这个新连接创建一个附加的转换表项。这样，当报文到达公网侧的目的主机时，应用层协议中携带的信息就是NAT网关提供的地址和端口。一旦公网侧主机开始发送数据或建立连接到此端口，NAT网关就可以根据关联表信息进行转换，再把数据转发到私网侧的主机。很多应用层协议实现不限于一个初始连接(通常为信令或控制通道)加一个数据连接，可能是一个初始连接对应很多后续的新连接。比较特别的协议，在一次协商中会产生一组相关连接，比如RTP/RTCP协议规定，一个RTP通道建立后占用连续的两个端口，一个服务于数据，另一个服务于控制消息。此时，就需要ALG分配连续的端口为应用服务。ALG能成功解决大部分协议的NAT穿越需求，但是这个方法也有很大的限制。因为应用协议的数量非常多而且在不断发展变化之中，添加到设备中的ALG功能都是为特定协议的特定规范版本而开发的，协议的创新和演进要求NAT设备制造商必须跟踪这些协议的最近标准，同时兼容旧标准。尽管有如Linux这种开放平台允许动态加载新的ALG特性，但是管理成本仍然很高，网络维护人员也不能随时了解用户都需要什么应用。因此为每个应用协议开发ALG代码并跟踪最新标准是不可行的，ALG只能解决用户最常用的需求。此外，出于安全性需要，有些应用类型报文从源端发出就已经加密，这种报文在网络中间无法进行分析，所以ALG无能为力。</p>
<p>​    探针技术STUN和TURN</p>
<p>所谓探针技术，是通过在所有参与通信的实体上安装探测插件，以检测网络中是否存在NAT网关，并对不同NAT模型实施不同穿越方法的一种技术。STUN服务器被部署在公网上，用于接收来自通信实体的探测请求，服务器会记录收到请求的报文地址和端口，并填写到回送的响应报文中。客户端根据接收到的响应消息中记录的地址和端口与本地选择的地址和端口进行比较，就能识别出是否存在NAT网关。如果存在NAT网关，客户端会使用之前的地址和端口向服务器的另外一个IP发起请求，重复前面的探测。然后再比较两次响应返回的结果判断出NAT工作的模式。由前述的一对多转换模型得知，除对称型NAT以外的模型，NAT网关对内部主机地址端口的映射都是相对固定的，所以比较容易实现NAT穿越。而对称型NAT为每个连接提供一个映射，使得转换后的公网地址和端口对不可预测。此时TURN可以与STUN绑定提供穿越NAT的服务，即在公网服务器上提供一个“地址端口对”，所有此“地址端口对”接收到的数据会经由探测建立的连接转发到内网主机上。TURN分配的这个映射“地址端口对”会通过STUN响应发给内部主机，后者将此信息放入建立连接的信令中通知通信的对端。这种探针技术是一种通用方法，不用在NAT设备上为每种应用协议开发功能，相对于ALG方式有一定普遍性。但是TURN中继服务会成为通信瓶颈。而且在客户端中增加探针功能要求每个应用都要增加代码才能支持。</p>
<p>​    中间件技术</p>
<p>这也是一种通过开发通用方法解决NAT穿越问题的努力。与前者不同之处是，NAT网关是这一解决方案的参与者。与ALG的不同在于，客户端会参与网关公网映射信息的维护，此时NAT网关只要理解客户端的请求并按照要求去分配转换表，不需要自己去分析客户端的应用层数据。其中UPnP就是这样一种方法。UPnP中文全称为通用即插即用，是一个通用的网络终端与网关的通信协议，具备信息发布和管理控制的能力。其中，网关映射请求可以为客户动态添加映射表项。此时，NAT不再需要理解应用层携带的信息，只转换IP地址和端口信息。而客户端通过控制消息或信令发到公网侧的信息中，直接携带公网映射的IP地址和端口，接收端可以按照此信息建立数据连接。NAT网关在收到数据或连接请求时，按照UPnP建立的表项只转换地址和端口信息，不关心内容，再将数据转发到内网。这种方案需要网关、内部主机和应用程序都支持UPnP技术，且组网允许内部主机和NAT网关之间可以直接交换UPnP信令才能实施。</p>
<p>​    中继代理技术</p>
<p>准确说它不是NAT穿越技术，而是NAT旁路技术。简单说，就是在NAT网关所在的位置旁边放置一个应用服务器，这个服务器在内部网络和外部公网分别有自己的网络连接。客户端特定的应用产生网络请求时，将定向发送到应用代理服务器。应用代理服务器根据代理协议解析客户端的请求，再从服务器的公网侧发起一个新的请求，把客户端请求的内容中继到外部网络上，返回的相应反方向中继。这项技术和ALG有很大的相似性，它要求为每个应用类型部署中继代理业务，中间服务器要理解这些请求。</p>
<p>​    特定协议的自穿越技术</p>
<p>在所有方法中最复杂也最可靠的就是自己解决自己的问题。比如IKE和IPsec技术，在设计时就考虑了到如何穿越NAT的问题。因为这个协议是一个自加密的协议并且具有报文防修改的鉴别能力，其他通用方法爱莫能助。因为实际应用的NAT网关基本都是NAPT方式，所有通过传输层协议承载的报文可以顺利通过NAT。IKE和IPsec采用的方案就是用UDP在报文外面再加一层封装，而内部的报文就不再受到影响。IKE中还专门增加了NAT网关是否存在的检查能力以及绕开NAT网关检测IKE协议的方法。</p>
<h1 id="4-NAT的应用和实现"><a href="#4-NAT的应用和实现" class="headerlink" title="4. NAT的应用和实现"></a>4. NAT的应用和实现</h1><h2 id="4-1-NAT的应用"><a href="#4-1-NAT的应用" class="headerlink" title="4.1 NAT的应用"></a>4.1 NAT的应用</h2><p>NAT在当代Internet中被广泛采用，小至家庭网关，大到企业广域网出口甚至运营商业务网络出口。其实NAT在用户身边随处可见，一般家庭宽带接入的ADSL Modem和SOHO路由器都内置了NAT功能，WindowsXP支持网络连接共享，一个用户连接到公网可能会经过多层NAT而对此一无所知。很多企业也为节约IP费用采用NAT接入Internet，但是相比家庭用户有更复杂的需求。</p>
<p>​    NAT多实例应用</p>
<p>在VPN网络中，多实例路由意味着一个物理拓扑上承载多个逻辑拓扑，网络终端被分配到相互隔离的逻辑拓扑中，彼此之间没有路由的通路。但在访问Internet或者一些关键服务器资源时，被隔离的网络之间又存在共享资源的需求。NAT的多实例实现就是跨越这种逻辑拓扑的方法，把一个空间的网络地址映射到另一个空间。</p>
<p>​    NAT的高可靠性组网</p>
<p>提高网络可靠性是一个广泛的需求，NAT作为私网到公网的关键路径自然也需要高可靠性。当一个设备提供多个公网接口时，在多接口上部署NAT可以提供更高带宽和多ISP就近访问的能力。但是，当部署多个出口时，访问的流量可能会从不匹配的接口返回，这就要求NAT方案有良好的路由规划和部署合适的策略保证这种流量能够正确处理。在多个物理设备承担NAT功能时，不同设备之间的信息备份和流量分担也是一个组网难题。</p>
<p>​    同时转换源和目的地址的应用</p>
<p>前面我们介绍的所有NAT应用中，由内网向外网访问过程中，都是将源地址进行转换而目的地址保持不变，报文反方向进入时则处理目的地址。但有一些特殊应用需要在由内向外的IP通路上，替换目的IP地址。通常，这种应用会同时替换源地址和目的地址，在经过NAT网关以后完成两次地址转换。当两个均规划使用私属IP地址范围的网络进行合并时，终端用户都不想调整自己的IP地址方案，又希望开放一些网络资源给彼此访问。这时就可以通过NAT的两次地址转换来解决路由和地址规划无法解决的问题。</p>
<p>图5 同时转换源和目的地址的应用</p>
<h2 id="4-2-NAT的设备实现"><a href="#4-2-NAT的设备实现" class="headerlink" title="4.2 NAT的设备实现"></a>4.2 NAT的设备实现</h2><p>NAT作为一个IP层业务特性，在产品实现中与防火墙、会话管理等特性有紧密联系，这是因为NAT判断一个进入设备的报文是否需要NAT处理，判断报文是否为一个新的连接，都需要通过匹配访问控制列表规则和查询会话关联表进行判断。为了满足不同应用场景的NAT需求， NAT的管理界面可提供用户多种配置策略。按照NAT的具体工作方式，又可以做如下分类。</p>
<p>​    静态一对一地址映射</p>
<p>这种工作方式下，NAT把一个私网地址和一个公网地址做静态关联，在从内而外的方向，将源IP匹配的私网IP替换为公网IP，反方向则将目的IP匹配公网IP的报文替换为私网IP。网络层以上的部分不进行替换处理，只修正校验和。</p>
<p>​    静态多对多地址映射</p>
<p>这种方式与上一种类似，只是把一段私网地址映射到一段公网地址。工作机制与前述的方式没有差别，只是简化配置工作量。</p>
<p>​    动态端口映射</p>
<p>这是最基本的工作方式，即前面多次介绍的将一段内网地址动态翻译为一个或多个公网IP，同时对传输层端口或其他上层协议信息进行转换，以实现IP复用。对由内而外的报文，替换源地址和端口，反向报文替换目的地址和端口。仅以连接公网的接口IP作为NAT转换的公网地址时，这种配置最简化，又被称为EasyIP。当以一段公网IP地址作为NAT转换地址时，需要配置一个地址池，NAT会自动在地址池中选择使用公网IP。</p>
<p>​    动态地址映射(no-pat)</p>
<p>这是介于静态多对多地址映射和动态端口映射方式之间的一种工作机制。当有一个私网向公网侧访问到达NAT网关时，NAT网关会检查这个私网IP是否已经有关联的公网IP映射。如果已经存在，则按照转换表直接替换IP，不修改上层协议。如果不存在关联表项，则在空闲的公网IP池中占用一个IP，并写入关联表中，以后按照这个关联关系进行地址转换。当这个私网主机发起的所有对外访问均关闭或超时后，回收公网IP。这种方式可以理解为一组内网主机抢占式地共享一个公网IP地址池。当公网IP地址池用完以后，新连接将无法建立。</p>
<p>​    静态端口映射</p>
<p>通过静态配置，把一个固定的私网IP地址和端口关联到一个公网地址和端口上。这种方式等同于前面介绍过的全锥模式，但是不需要内网主机首先发出报文。这种方式适用于在NAT网关上把一个知名服务（如HTTP）映射到一个内部主机上，也称为port forwarding。</p>
<p>​    应用层网关(ALG)</p>
<p>在所有NAT产品实现中，ALG是一个必需的功能组件。但在不同实现中，有些产品可以动态加载不同的ALG模块，有些产品可以提供ALG开关控制，有些则不提供任何用户接口。ALG解析上层应用协议的内容，并且根据需要修改IP和端口相关信息，创建和维护附加的关联表项。</p>
<p>​    NAT转换关联表</p>
<p>无论哪一种NAT工作方式，都要用到地址转换关联表，在不同产品的实现中，这个关联表的存储结构和在IP转发中调用的方式有很大不同。关联表中会记录源IP、目的IP、连接协议类型、传输层源端口、目的端口，以及转换后的源IP、源端口，目的IP、目的端口信息，这里的源和目的都是对应于从内网到外网的访问方向。依据NAT具体工作方式，这些信息可能全部填充，也可能部分填充。例如只按照IP做静态映射的方式，就不需要填入任何端口相关信息；对于静态端口映射，则只填入源相关的内容，而目的端的信息为空。</p>
<h1 id="5-后IPv4时代的NAT"><a href="#5-后IPv4时代的NAT" class="headerlink" title="5. 后IPv4时代的NAT"></a>5. 后IPv4时代的NAT</h1><p>NAT是为延缓IPv4地址耗尽而推出的技术。毫无疑问，它已经出色完成了自己的历史使命，IPv4比预期走得更远。作为继任者的IPv6吸取了IPv4的教训，被赋予充足地址空间的同时在各个方面做了优化——安全、高效、简洁。但是IPv6无法平滑地取代IPv4，导致IP升级步伐缓慢。尽管网络协议的分层设计很清晰，大量应用层协议和互联网软件中仍内嵌了IPv4地址的处理，要Internet全网升级到IPv6，必须先完成应用的改造。因为NAT和它的穿越技术结合能够满足大部分用户的需求，所以IPv6时代被不断推迟。</p>
<p>随着IPv4地址的濒临耗尽，再经济的模式也无以为继，IPv4必须退出历史舞台。人们自然会认为，NAT作为IPv4的超级补丁技术使命已经完结。实际情况是，IPv4向IPv6过渡的阶段，NAT仍然是一项必不可少的技术手段。因为Internet无法在一日之内完成全网升级，必然是局部升级，逐渐替换。在两套协议并存的时期，用户和服务资源分布在不同网络之间，跨网访问的需求必须得到满足。这正是NAT所擅长的领域，地址替换，因此NAT-PT应运而生。由于IPv4和IPv6之间的差异，NAT要做的事比以往更复杂，有更多的限制和细节。</p>
<p>此外，IETF也在制定纯IPv6网络使用的NAT规范。虽然人们还看不到这种应用的强烈需求，但是NAT仍有其独特的作用，比如隐藏内部网络的地址，实现重叠地址网络的合并等。</p>
<p>毫不夸张地说，正是有了NAT，以IPv4为基础的Internet才能容纳数十亿的用户终端，成就今日之辉煌。IPv4已至日暮西山，IPv6的黎明尚未来临，Internet比任何时刻都更依赖NAT这项过渡技术。NAT的历史再次证明，翻天覆地的划时代进步不一定有市场，抱残守缺的修修补补未必不会成功。在世代更替之时让我们走近NAT，领略IP领域更多细微但不高深的知识，理解NAT就是理解变换万千的应用世界。</p>
]]></content>
      <categories>
        <category>NAT</category>
      </categories>
      <tags>
        <tag>NAT</tag>
      </tags>
  </entry>
  <entry>
    <title>强叔侃墙之NAT</title>
    <url>/2019/05/22/48/</url>
    <content><![CDATA[<p>开篇先说一下SNAT和DNAT：</p>
<h3 id="1-SNAT"><a href="#1-SNAT" class="headerlink" title="1. SNAT"></a>1. SNAT</h3><p>场景：云上的vm主机用户作为客户端访问外网服务器<br><code>vm(client)---&gt;SNAT(将数据包中的内网源IP转换为外网IP)---&gt;Internet(服务器）---&gt;SNAT(将数据包内的目的IP转换为内网IP)---&gt;vm(client)</code></p>
<h3 id="2-DNAT"><a href="#2-DNAT" class="headerlink" title="2. DNAT"></a>2. DNAT</h3><p>场景：云上的VM主机作为服务器端为外网提供服务<br><code>Internet(client用户)---&gt;DNAT(将数据包中的目的公网IP转换为目的内网IP)---&gt;VM(server)---&gt;DNAT(将数据包中的源内网IP转换为外网IP)---&gt;Internet(client用户)</code></p>
<p>正文继续</p>
<p>学校或公司的私网通常会有一些服务器需要提供给公网用户访问。但网络部署时，服务器地址一般都会被配置成私网地址，这样服务器就不能直接使用自身的地址来提供服务了。那么，防火墙作为学校或企业的出口网关时，是如何应对这个问题的呢？</p>
<p>如果小伙伴们有读过强叔的源NAT篇，聪明的你一定会想到，防火墙是不是也可以将服务器的私网地址通过NAT转换成公网地址来提供服务呢？</p>
<p>Bingo！你的大方向已经对了。不过，源NAT是对私网用户访问公网的报文的源地址进行转换，而服务器对公网提供服务时，是公网用户向私网发起访问，方向正好反过来了。于是，NAT转换的目标也由报文的源地址变成了目的地址。针对服务器的地址转换，我们赋予了它一个形象的名字――NAT Server（服务器映射）。</p>
<p>下面来看下防火墙上的NAT Server是如何配置和实现的。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0512/15/5370734de4b14.jpg" alt="img" loading="lazy"></p>
<p>在防火墙上配置如下命令，就能将上图中服务器的私网地址10.1.1.2映射成公网地址1.1.1.1。</p>
<p><strong>[FW] nat server global 1.1.1.1 inside 10.1.1.2</strong>                                         </p>
<p>但是，如果一台服务器同时存在多种协议和端口的服务项，按照上述配置会将服务器上所有服务项都发布到公网，这无疑会带来很大的安全风险。华为防火墙支持配置指定协议的NAT Server，只将服务器上特定的服务项对公网发布，从而避免服务项全发布带来的风险。例如，我们可以按如下方式配置，将服务器上80端口的服务项映射为9980端口供公网用户访问。</p>
<p><strong>[FW] nat server protocol tcp global 1.1.1.1 9980 inside 10.1.1.2 80</strong>                       </p>
<p>这里将80端口映射为9980端口而不是直接映射为80端口是因为，一些地区的运营商会阻断新增的80、8000、8080端口的业务，从而导致服务器无法访问。</p>
<p>小伙伴们是否还记得<em>《安全策略篇</em> <em>ASPF**：隐形通道》</em>中提到的Server-map表，NAT server配置完成之后，也会生成Server-map表来保存映射关系。不过与ASPF Server-map表项的动态老化不同的是，NAT Server的Server-map表项是静态的，只有当NAT Server配置被删除时，对应的Server-map表项才会被删除。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0512/15/537073d02d23b.png" alt="img" loading="lazy"></p>
<p>上图就是NAT Server的Server-map表项。图中红框标注的字段就记录着服务器私网地址端口和公网地址端口的映射关系。[]内为服务器私网地址和端口、[]外为服务器公网地址和端口。我们将表项翻译成文字就是：任意客户端（any）向（-&gt;）1.1.1.1:9980发起访问时，报文的目的地址和端口都会被转换成10.1.1.2:80。具体的流程如下：</p>
<p>当客户端通过1.1.1.1:9980访问服务器时，防火墙收到报文的首包后，首先是查找并匹配到Server-map表项，将报文的目的地址和端口转换为10.1.1.2:80。然后根据目的地址判断出报文在哪两个安全区域间流动，报文通过域间安全策略检查后，防火墙会建立如下的会话表，并将报文转发到私网。</p>
<p>之后，服务器对客户端的请求做出响应。响应报文到达防火墙后匹配到上面的会话表，防火墙将报文的源地址和端口转换为1.1.1.1:9980，而后发送至公网。后续客户端继续发送给服务器的报文，防火墙都会直接根据会话表对其进行地址和端口转换，而不会再去查找Server-map表项了。</p>
<p>在防火墙的前后抓包，能很清楚地看到NAT Server的效果：</p>
<p>A、转换客户端发往服务器的报文的目的地址和端口。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0512/15/5370740a6b0eb.jpg" alt="img" loading="lazy"></p>
<p>B、转换服务器响应客户端的报文的源地址和端口。</p>
<p>以上就是防火墙NAT Server的基本配置和工作原理，通过强叔的讲解，小伙伴们想必已掌握其中的奥妙了吧。</p>
<p>但这些仅仅是NAT Server的基础知识，知道这些只能算是初窥门径。要想成为能从容应对现网中各种NAT Server配置的顶级高手，小伙伴们还需要研习并掌握强叔自创的NAT Server三十二字真言：</p>
<p>​                      一正一反，出入自如  去反存正，自断出路</p>
<p>​                      一分为二，源进源回  虚实变换，合二为一</p>
<p>接下来的两期中强叔将会向小伙伴们阐释这三十二字真言的内涵所在，敬请期待。</p>
<p>强叔提问：</p>
<p>本篇开头的组网中，强叔只给出了NAT Server的配置，那安全策略如何配置呢？</p>
<p> NAT Server基础篇放出来后，论坛的小伙伴大呼不过瘾。为了感谢大家的支持，强叔挑灯夜战，总算是把三十二字真言的前半段内容给赶制出来了。还记得真言前十六个字的内容吗？―― 一正一反，出入自如；去反存正，自断出路。</p>
<p>一正一反，出入自如</p>
<p>所谓入，是指公网用户访问私网服务器；所谓出，是指私网服务器主动访问公网。下面强叔就要向大家展示下防火墙配置NAT Server后，如何做到公网用户和私网服务器之间的出入自如。以下内容继续围绕基础篇中的组网和配置来展开。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0513/09/5371775c3599f.jpg" alt="img" loading="lazy"></p>
<p><strong>[FW] nat server protocol tcp global 1.1.1.1 9980 inside 10.1.1.2 80</strong>                       </p>
<p>在基础篇中强叔展示给大家的Server-map表项其实还隐藏了一部分，完整的表项应该是这样的：</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0513/09/5371776fcf419.png" alt="img" loading="lazy"></p>
<p>Nat Server, any -&gt; 1.1.1.1:9980[10.1.1.2:80]为正向Server-map表项，其作用为入。在公网用户访问服务器时对报文的目的地址做转换。</p>
<p>Nat Server Reverse, 10.1.1.2[1.1.1.1] -&gt; any为反向Server-map表项，其作用为出。当私网服务器主动访问公网时，可以直接使用这个表项将报文的源地址由私网地址转换为公网地址，而不用再单独为服务器配置源NAT策略。这就是防火墙NAT Server做的非常贴心的地方了，一条命令同时打通了私网服务器和公网之间出入两个方向的<strong>地址转换</strong>通道。</p>
<p>请注意强叔此处的用词，通道前面加上了“地址转换”四个字。没错，不论是正向还是反向Server-map表项，都仅能实现地址转换而已，并不能像ASPF的Server-map表项一样打开一个可以绕过安全策略检查的临时通道。因此，公网用户要能访问私网服务器或者服务器要能访问公网，还需要配置正确的域间安全策略。</p>
<p>去反存正，自断出路</p>
<p>顾名思义，去反存正就是删除反向Server-map表项。配置NAT Server时带上no-reverse参数就能让生成的Server-map表项只有正向没有反向。</p>
<p><strong>[FW] nat server protocol tcp global 1.1.1.1 9980 inside 10.1.1.2 80 no-reverse</strong>               </p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0513/09/537178816a27a.png" alt="img" loading="lazy"></p>
<p>没有了反向Server-map表项，也就相当于断去了服务器到公网的出路。那何时需要自断出路呢？首先，让我们来看看下面这个案例。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0513/09/5371786f66929.jpg" alt="img" loading="lazy"></p>
<p>上图中总部有一台服务器需要提供给公网用户访问，于是在总部防火墙上配置了如下的NAT Server：</p>
<p><strong>[FW] nat server protocol tcp global 1.1.1.1 9980 inside 192.168.1.2 80</strong>                     </p>
<p>同时，总部和分支之间通过IPSec VPN实现互访。总部防火墙IPSec的部分配置如下：</p>
<p><strong>#</strong>                                                                             </p>
<p><strong>acl number 3000      //***</strong>定义需要进行IPSec封装的数据流*//**                              </p>
<p>  <strong>rule 5 permit ip source 192.168.1.0 0.0.0.255 destination 10.0.0.0 0.0.0.255</strong>               </p>
<p><strong>#</strong>                                                                             </p>
<p><strong>ipsec policy map1 10 manual</strong>                                                       </p>
<p> <strong>security acl 3000    //***</strong>引用*<strong><em>acl**<strong>，只有符合**</strong>acl3000**<strong>的数据流才会被送入**</strong>IPSec****隧道封装\</em>//</strong>         </p>
<p> <strong>proposal tran1</strong>                                                                 </p>
<p> <strong>…</strong>                                                                            </p>
<p>因为总部192.168.1.0/24网段员工需要访问公网，所以还配置了如下的源NAT策略：</p>
<p><strong>#</strong>                                                                             </p>
<p><strong>nat-policy interzone trust untrust outbound</strong>                                          </p>
<p>  <strong>policy 5</strong>                                                                      </p>
<p>  <strong>action source-nat</strong>                                                              </p>
<p>  <strong>policy source 192.168.1.0 mask 24</strong>                                                 </p>
<p>  <strong>easy-ip GigabitEthernet0/0/1</strong>                                                    </p>
<p>不过仅配置这条源NAT策略是不够的。因为这条源NAT策略会将trust区域中192.168.1.0/24网段发往untrust区域的所有报文的源地址都转换成GE0/0/1接口的地址1.1.1.1。熟悉IPSec的小伙伴们应该知道，报文源地址如果变成了1.1.1.1，就不会匹配到ACL 3000，也就不会进入IPSec隧道进行封装，这样总部就别想通过IPSec VPN和分部之间通信了。所以，除了上面这条源NAT策略，还需要配置一条对总部访问分部的流量不做源地址转换的NAT策略，具体如下：</p>
<p><strong>#</strong>                                                                               </p>
<p><strong>nat-policy interzone trust untrust outbound</strong>                                         </p>
<p>  <strong>policy 0</strong>                                                                      </p>
<p>  <strong>action no-nat</strong>                                                                  </p>
<p>  <strong>policy source 192.168.1.0 mask 24</strong>                                                 </p>
<p>  <strong>policy destination 10.0.0.0 mask 24</strong>                                               </p>
<p><em>注意：上面两条源<strong>NAT</strong>策略，<strong>policy0</strong>的匹配条件要比<strong>policy5</strong>更加严格，所以配置完成后需要确认策略列表中<strong>policy0</strong>在<strong>policy5</strong>之上。否则报文匹配到条件宽松的<strong>policy5</strong>后就直接做了源地址转换，而不会再匹配到<strong>policy0</strong>了。</em></p>
<p>配置完成后，我们发现了一个很奇怪的现象：分部的员工可以访问总部服务器的私网地址192.168.1.2，总部192.168.1.0/24网段的员工也能正常和分部的10.0.0.0/24网段通信。但总部的服务器却无法访问分部10.0.0.0/24网段的资源，删除NAT Server配置后就能正常访问。</p>
<p>很明显，问题就出在NAT Server上，但因为总部的服务器需要提供给公网用户访问，我们不能随意将NAT Server配置去掉，那该如何解决这个问题呢？下面就让强叔来给小伙伴们分析下根因所在并给出解决办法。</p>
<p>总部Server ping分部PC时，总部的防火墙上可以看到这样一条会话：</p>
<p><strong><FW> display firewall session table source inside 192.168.1.2</strong>                            </p>
<p>  <strong>icmp  VPN:public –&gt; public 192.168.1.2:512[1.1.1.1:512]–&gt;10.0.0.2:2048</strong>               </p>
<p>可以看出，防火墙将报文的源地址由192.168.1.2转变成了1.1.1.1。但我们明明已经配置了一条对192.168.1.0/24网段发往10.0.0.0/24网段的报文不做源地址转换的NAT策略啊，为什么源地址还是被转换了呢？</p>
<p>我们先使用<strong>display nat-policy all</strong>命令来查看和确认下源NAT策略的命中情况：</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0513/09/537178f428239.png" alt="img" loading="lazy"></p>
<p>结果显示，确实没有报文命中源NAT策略。</p>
<p>接下来，让我们取消NAT Server的配置，再次从总部Server ping分部的PC1，并查看源NAT策略的命中情况。这时你会发现，有报文命中源NAT策略了！</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0513/09/53717906ad13f.png" alt="img" loading="lazy"></p>
<p>所以，肯定是配置NAT Server时引入的什么东东先把地址给转换了，导致匹配不到源NAT策略。说到这里，再联想下真言的前八个字，相信小伙伴们已经知道问题所在了吧。没错，幕后的“黑手”正是NAT Server生成反向Server-map表项：</p>
<p><strong>Nat Server Reverse, 192.168.1.2[1.1.1.1] -&gt; any, Zone: —</strong>                              </p>
<p>防火墙的报文处理流程中，反向Server-map表项是比源NAT策略优先匹配的，报文匹配到反向Server-map表项后，源地址被转换为1.1.1.1。这样，报文就不再匹配源NAT策略了。</p>
<p>找到问题的根因所在，解决办法也就有了。配置NAT Server时加上no-reverse参数，不生成反向Server-map表项就可以了。</p>
<p><strong>[FW] nat server protocol tcp global 1.1.1.1 9980 inside 192.168.1.2 80 no-reverse</strong>           </p>
<p>当然，no-reverse参数不仅限于这个场景中使用，后面我们还会提到它。小伙伴们只需要记住配置了这个参数后，就不会生成反向Server-map表项这一结论，再根据遇到的具体问题灵活运用即可。</p>
<p>以上就是三十二字真言前半段的所有内容了，不知小伙伴们是否领悟到了其中的真谛？下一期强叔将会向大家解释后半段的含义，敬请期待。</p>
<p>强叔提问：</p>
<p>配置NAT Server后ASPF的Server-map表项会有什么变化呢？小伙伴们可以在自己的设备或者模拟器上实验对比下。</p>
<p>本期强叔将会给大家阐释三十二字真言的后半段：一分为二，源进源回；虚实变换，合二为一。</p>
<p>一分为二，源进源回</p>
<p>防火墙作为出口网关，双出口、双ISP接入公网时，配置NAT Server通常需要一分为二，让一个私网服务器向两个ISP发布两个不同的公网地址供访问。一分为二的方法有两种：</p>
<p>第一种是将接入不同ISP的公网接口规划在不同的安全区域中，配置NAT Server时，带上zone参数，使同一个服务器向不同安全区域发布不同的公网地址。</p>
<p><strong>[FW] nat server zone untrust1 protocol tcp global 1.1.1.1 9980 inside 10.1.1.2 80</strong>            </p>
<p><strong>[FW] nat server zone untrust2 protocol tcp global 2.2.2.2 9980 inside 10.1.1.2 80</strong>            </p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0514/13/537302da850bb.jpg" alt="img" loading="lazy"></p>
<p>第二种是将接入不同ISP的公网接口规划在同一个安全区域中，配置NAT Server时，带上no-reverse参数，使同一个服务器向同一个安全区域发布两个不同的公网地址。</p>
<p><strong>[FW] nat server protocol tcp global 1.1.1.1 9980 inside 10.1.1.2 80 no-reverse</strong>              </p>
<p><strong>[FW] nat server protocol tcp global 2.2.2.2 9980 inside 10.1.1.2 80 no-reverse</strong>              </p>
<p><strong><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0514/13/537302eabe5d4.jpg" alt="img" loading="lazy"></strong></p>
<p>看到这里小伙伴们就要问了，强叔强叔，上一期中你不是讲过no-reverse参数是用来除去反向Server map表项自断出路的吗，这里怎么又用到了呢？莫急莫急，且听强叔给你慢慢道来。</p>
<p>首先，我们来看下不带no-reverse参数直接配置上面两条命令会发生什么？</p>
<p>答案是不带no-reverse参数这两条命令压根就不能同时下发。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0514/13/537302fa0e9e2.png" alt="img" loading="lazy"></p>
<p>我们再尝试着逆向思考下，假如这两条命令能同时下发，会发生什么？</p>
<p>将上面的两条命令分别在两台防火墙上配置，然后查看各自生成的Server map表项。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0514/13/537303091d45d.png" alt="img" loading="lazy"></p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0514/13/53730317ee0a3.png" alt="img" loading="lazy"></p>
<p>很容易看出来，一台防火墙上的反向Server map表项是将报文的源地址由10.1.1.2转换为1.1.1.1，另一台防火墙上的反向Server map表项是将报文的源地址由10.1.1.2转换为2.2.2.2。试想下，如果这两个反向Server map表项同时出现在一台防火墙上会发生什么？――防火墙既可以将报文的源地址由10.1.1.2转换为1.1.1.1，又可以转换为2.2.2.2。于是乎，防火墙凌乱了~这就是两条命令不带no-reverse参数同时下发会带来的问题。如果配置时带上no-reverse参数，就不会生成反向Server map表项。没有了反向Server map表项，上述的问题也就不复存在了。</p>
<p>此外，一分为二时还会存在报文来回路径不一致的问题。例如，公网用户通过防火墙发布给ISP1的公网地址1.1.1.1访问服务器，服务器的响应报文到达防火墙后，防火墙根据目的地址查找路由表，可能会将响应报文由ISP2发送出去，这样就会导致访问速度过慢或无法访问。</p>
<p>为了避免这个问题，还需要在防火墙上增加一些的配置，保证报文的源进源回，即请求报文从某条路径进入，响应报文依然沿着同样的路径返回。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0514/13/53730325b7ec8.jpg" alt="img" loading="lazy"></p>
<p>USG9000系列防火墙源进源回功能是通过在公网接口下配置<strong>redirect-reverse</strong>命令来实现的。例如上图中接入ISP1的公网接口GE1/0/1的源进源回功能配置如下：</p>
<p><strong>[FW] interface GigabitEthernet 1/0/1</strong>                                                                        </p>
<p><strong>[FW-GigabitEthernet1/0/1]</strong> <strong>redirect-reverse next-hop 1.1.1.254</strong>                          </p>
<p>配置完成后，如果请求报文从GE1/0/1进入，则响应报文也强制从GE1/0/1发出，而不再是通过查找路由表来确定出接口。</p>
<p>USG2000/5000系列防火墙源进源回功能配置思路与USG9000系列相同，配置命令为<strong>reverse-route next-hop</strong> <em>next-hop-address</em>。</p>
<p>USG6000系列防火墙源进源回功能是通过<strong>reverse-route enable</strong>命令开启后，还需要在接口下使用<strong>gateway</strong>命令配置网关。</p>
<p><strong>[FW] interface GigabitEthernet 1/0/1</strong>                                                                        </p>
<p><strong>[FW-GigabitEthernet1/0/1]</strong> <strong>gateway</strong> <strong>1.1.1.254</strong>                                                         </p>
<p><strong>[FW-GigabitEthernet1/0/1] reverse-route enable</strong>                                                    </p>
<p>虚实变换，合二为一</p>
<p>为了让小伙伴们能明白“虚实”二字的含义，需要大家随着强叔穿越到未来的双机热备站，提前了解一点双机热备的知识。</p>
<p>如下图所示的双机热备组网中，两台防火墙并不是直接使用GE0/0/1接口的实IP地址与公网通信，而是将GE0/0/1接口加入一个VRRP备份组，使用VRRP备份组的虚拟IP地址与公网通信。配置虚拟IP地址的同时，防火墙会自动为其生成一个虚MAC地址。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0514/13/5373033213027.jpg" alt="img" loading="lazy"></p>
<p>让我们再回到NAT站，强叔这里所说的 “实”指的就是物理接口的实MAC地址，“虚”指的就是虚MAC地址。</p>
<p>明白“虚实”的含义后，接下来强叔就要讲讲“虚实”在对NAT Server配置的影响。</p>
<p>首先，小伙伴们需要知道这样一个结论：当NAT Server公网地址与公网接口的地址在同一个网段时，防火墙会发送NAT Server公网地址的免费ARP请求报文。我们使用如下组网进行演示：</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0514/13/5373033e281f7.jpg" alt="img" loading="lazy"></p>
<p>NAT Server的配置如下：</p>
<p><strong>[FW] nat server protocol tcp global 1.1.1.1 9980 inside 10.1.1.2 80</strong>                       </p>
<p>在图示处抓包，可以看到防火墙发送的NAT Server公网地址的免费ARP请求报文。报文中携带的1.1.1.1的MAC地址为0000-00e0-bb01，正是公网接口GE0/0/1的MAC地址。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0514/13/5373034d21c81.png" alt="img" loading="lazy"></p>
<p>我们在eNSP上模拟了前面的双机热备组网，并在FW1（主设备）上配置了NAT Server：</p>
<p><strong>[FW1] nat server protocol tcp global 1.1.1.1 9980 inside 10.1.1.2 80</strong>                     </p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0514/13/53730360d18e0.png" alt="img" loading="lazy"></p>
<p>命令一下发，设备就打印如下的IP地址冲突日志：</p>
<p>2014-05-11 10:02 FW1%%01ARP/4/DUP_IPADDR(l): Receive an ARP packet with        </p>
<p>duplicate ip address 1.1.1.1 from GigabitEthernet0/0/1, source MAC is <strong>0000-003a-f701</strong>!    </p>
<p>日志中显示冲突源的MAC地址为0000-003a-f701，这个正是FW2的GE0/0/1接口的MAC。稍作分析，就能明白为什么会发生IP地址冲突了。</p>
<p>FW1上配置了NAT Server后，由于公网地址为1.1.1.1，和GE0/0/1接口的地址（1.1.1.2/24）在同一个网段，FW1会发送1.1.1.1的免费ARP请求报文。报文中携带的1.1.1.1的MAC地址为GE0/0/1接口的MAC 0000-0006-1901。同时，因为FW1和FW2处于双机热备状态，FW1上NAT Server的配置会同步到FW2上，而FW2 GE0/0/1接口的地址（1.1.1.3/24）和NAT Server公网地址也在同一个网段，这样FW2也会发送1.1.1.1的免费ARP请求报文。报文中携带的1.1.1.1的MAC地址为GE0/0/1接口的MAC 0000-003a-f701。于是，同一广播域中有两个MAC地址对应着同一个IP地址1.1.1.1，产生了IP地址冲突。</p>
<p>同时，由于FW1和FW2同时发送免费ARP请求报文，上行设备学习到的1.1.1.1的MAC也会在0000-0006-1901和0000-003a-f701之间不停的切换。如下图就是Client上查看到的ARP表项。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0514/13/5373036dcccd0.png" alt="img" loading="lazy"></p>
<p>这样，从Client***问1.1.1.1时，Client的网卡会时而用0000-0006-1901来封装报文，时而用0000-003a-f701来封装报文。如果用0000-0006-1901来封装报文，则报文会被发往FW1（主设备），业务访问正常。如果用0000-003a-f701来封装报文，则报文会被发往FW2（备设备）。由于FW2作为备设备时是不处理业务的，报文到达FW2后就会被丢弃。于是就会出现业务时通时不通的情况。</p>
<p>在配置命令中加上vrrp关键字就能解决这个问题。我们按如下命令重新配置：</p>
<p><strong>[FW1] nat server protocol tcp global 1.1.1.1 9980 inside 10.1.1.2 80 vrrp 1</strong>                 </p>
<p>首先，设备上不再打印IP地址冲突日志了。在防火墙和上行交换机之间抓包我们会发现，只有主用防火墙会发送免费ARP报文，且报文中携带的1.1.1.1的MAC地址变成了0000-5e00-0101，VRRP备份组1的虚MAC地址。Client访问1.1.1.1时，网卡会使用0000-5e00-0101来封装报文。这样就能保证报文永远都是向主用设备转发了。是为虚实变换之间，合二为一也。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0514/13/5373037c34d01.png" alt="img" loading="lazy"></p>
<p>至此，NAT Server的三十二字真言阐释完毕。通过强叔的讲解，相信小伙伴们对NATServer的正反Server-map表项作用，配置命令中的两个重要的参数no-reverse、vrrp的使用方法，以及多出口NAT Server的配置等都有了更加全面和深入的了解了吧。</p>
<p>强叔提问：</p>
<p>为什么NAT Server的公网地址和公网接口地址在同一个网段时，防火墙会发免费ARP，而不在同一个网段时，防火墙不会发免费ARP？</p>
<p>经过前面几篇贴子的介绍，相信大家已经对源NAT和NAT Server有了相当了解。NAT功能就像一个武林高手，可内可外，游刃有余，那么这“一内一外”能否配合使用呢？答案当然是肯定的！<br>如果需要<strong>同时改变报文的源地址和目的地址</strong>，就可以配置“源NAT+NAT server”，华为防火墙称此类NAT配置为双向NAT。这里要注意：双向NAT不是一个单独的功能，他仅仅是源NAT和NAT Server的组合。这里“组合”的含义是针对同一条流（例如外网主机访问内网服务器的流量），在其经过防火墙时同时转换报文的源地址和目的地址。大家千万不能理解为“防火墙上同时配置了源NAT和NAT Server就是双向NAT”，这是不对的，因为源NAT和NAT Server可能是为不同流配置的。<br>之前介绍源NAT功能时，强叔为了更利于大家理解相关概念和原理，都是按照内网用户访问外网资源的思路进行组网设计和验证的。实际上，源NAT还可以根据报文的源地址和目的地址所在安全区域进行分类：</p>
<p><strong>1、域间NAT</strong></p>
<p>报文的源地址和目的地址属于不同的安全区域。按照转换报文的方向，又可以分为以下两类：</p>
<p><strong>（1）NAT Inbound（外网访问内网）</strong></p>
<p>报文由低安全级别的安全区域向高安全级别的安全区域方向传输时，基于源地址进行的转换。一般来说，NAT Inbound都会和NAT Server配合使用。</p>
<p><strong>（2）NAT Outbound（内网访问外网）</strong></p>
<p>报文由高安全级别的安全区域向低安全级别的安全区域方向传输时，基于源地址进行的转换。之前介绍的“内网用户访问外网资源”场景大多使用NAT Outbound。<br><strong>2、域内NAT（内网访问内网）</strong></p>
<p>报文的源地址和目的地址属于相同的安全区域。一般来说，域内NAT都会和NAT Server配合使用，单独配置域内NAT的情况较少见。<br><strong>当域间NAT或域内NAT和NAT Server一起配合使用时，就实现了双向NAT</strong>。当然，上述内容的一个大前提就是：合理设置安全区域的级别并规划网络――内网设备属于Trust域（高级别），内网服务器属于DMZ域（中级别），外网设备属于Untrust域（低级别）。<br>双向NAT从技术和实现原理上讲并无特别之处，但是他和应用场景有着强相关性。究竟什么时候需要配置双向NAT？配置后有什么好处？不配置双向NAT行不行？这都是实际规划和部署网络时需要思考的问题，且听强叔一一道来。</p>
<p><strong>1、NAT Inbound+NAT Server</strong>下图示意了一个最常见的场景：外网PC访问内网服务器，防火墙做服务器的网关。这个时候我们一般会用到的NAT技术是…（画外音：“强叔，我知道，是NAT Server！这个场景不就是NAT Server的典型场景吗？”）没错，大家果然认真看了强叔之前的贴子！但是强叔下面要讲的是如何在这个场景中应用双向NAT，以及这么做的好处，大家接着看吧。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0521/14/537c46b0db00a.png" alt="img" loading="lazy"></p>
<p>server以公网IP对外提供服务，防火墙上配置NAT Server，这个大家肯定没有疑问。同时，防火墙上配置NAT Inbound，令PC以私网IP访问server，这个大家可能有疑问，别着急，我们先来看看具体配置。<br><strong>例1 配置NAT Inbound+NAT Server# nat address-group 1 10.1.1.20 10.1.1.25  //地址池中的IP为私网IP ，且和server的私网IP同网段 nat server 0 global 210.1.1.15 inside 10.1.1.3#nat-policy interzone dmz untrust inbound policy 1  action source-nat  policy destination 10.1.1.3 0  //由于防火墙先做NAT Server转换，再做源NAT转换，所以此处的目的IP是NAT Server转换后的IP  address-group 1</strong>这里NAT Server的配置和以前见过的类似，但是源NAT的配置和以前见过的不一样：以前地址池中配置的都是公网地址，而这次配置的却是私网地址。<br>我们通过下图再来看一下报文的地址转换过程：PC访问server的流量经过防火墙时，目的地址（server的公网地址）通过NAT Server转换为私网地址，源地址（PC的公网地址）通过NAT Inbound也转换为私网地址，且和server的私网地址同网段，这样就同时转换了报文的源地址和目的地址，即完成了双向NAT转换。当server的回应报文经过防火墙时，再次做双向NAT转换，报文的源地址和目的地址均转换为公网地址。<img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0521/14/537c46c62c5e8.png" alt="img" loading="lazy"></p>
<p>从PC上ping server，通过防火墙上的会话表和Server-map表可以更清楚的看到双向NAT转换：PC的地址通过NAT Inbound转换为私网地址，而server的地址也按照NAT Server的Server-map表转换为私网地址。<img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0521/14/537c46d9419c8.png" alt="img" loading="lazy"></p>
<p>好了，我们回过头来看为什么要配置NAT Inbound吧。如果不配置NAT Inbound，行不行？行！不配置NAT Inbound并不影响PC访问server。那配置NAT Inbound有什么好处？好处就是<strong>server上可以不用设置网关</strong>，当然，前提条件是地址池中的地址需要和server的私网地址同网段。当server回应PC时，server发现自己的地址和目的地址在同一网段，这时server就不会去查路由，而是发送ARP广播报文询问目的地址对应的MAC地址。由于目的地址是地址池中的地址，所以他没有对应的MAC地址，但是防火墙此时挺身而出，防火墙将自己与server直连接口的MAC地址发给server，告诉server“把回应报文给我吧”，所以回应报文将转发到防火墙上。由于server回应报文是通过二层转发，而不是三层转发，所以server上不用配置网关。也许有人说“配置网关还是挺方便的，不用配置NAT Inbound这么麻烦吧”如果只有一台服务器时，的确感受不到有什么好处，但是如果有几十台甚至上百台服务器需要配置或修改网关时，我们就会发现配置NAT Inbound是多么方便了。<br>如果对之前的组网做一点改变，增加一个Trust区域，该域内的PC2要访问server时，我们该如何配置双向NAT呢？和之前相比，报文的源地址所在安全域发生了变化，原来是Untrust域到DMZ域的报文（Inbound方向），现在变成了Trust域到DMZ域的报文（Outbound方向），所以双向NAT也变化为NAT Outbound+NAT Server，它的转换原理和NAT Inbound+NAT Server完全一样，只不过源NAT的转换方向发生了改变而已。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0521/14/537c46ec6ba01.png" alt="img" loading="lazy"></p>
<p><strong>2、域内NAT+NAT Server</strong>域内NAT的场景多见于小型网络，如下图中的PC和server通过交换机与防火墙相连，管理员在规划网络时“偷懒”，将PC和server置于同一安全区域，并分配相同网段地址。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0521/14/537c4705059a3.png" alt="img" loading="lazy"></p>
<p>此时，如果希望PC像外网用户一样通过公网地址访问server，就要在防火墙上配置NAT Server。到此就配置完了吗？我们通过下图来看看吧：如果只配置了NAT Server，报文到达防火墙后转换目的地址，server回应报文时发现自己的地址和目的地址在同一网段，这就和之前分析的组网是同样情况了――server通过二层转发报文，回应报文经交换机直接转发到PC，不会经过防火墙转发！</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0521/14/537c47175867e.png" alt="img" loading="lazy"></p>
<p>所以，如果希望提高内网的安全性，让回应报文也经过防火墙，就需要配置域内NAT。下面列出了关键的配置步骤。地址池中的地址可以是公网地址，也可以是私网地址，关键是不能和server的私网地址在同一网段。域内NAT的配置和域间NAT几乎完全一样，只不过前者应用在域内做NAT转换，后者应用在域间做NAT转换。<br><strong>例2 配置域内NAT+NAT Server# nat address-group 1 210.1.1.20 210.1.1.20 nat server 0 global 210.1.1.15 inside 10.1.1.3#nat-policy zone trust  //注意是域内NAT policy 1  action source-nat  policy destination 10.1.1.3 0  //此处的目的IP是NAT Server转换后的IP  address-group 1</strong><br>从PC上ping server，通过防火墙上的会话表和Server-map表可以看到：PC的地址通过域内NAT转换为公网地址，server的地址按照NAT Server的Server-map表转换为私网地址。双向NAT转换后，server回复报文时发现自己的地址和目的地址不在同一网段，此时就需要查路由，通过三层转发报文，所以回应报文需经过防火墙转发。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0521/14/537c472c1b4d7.png" alt="img" loading="lazy"></p>
<p>如果在上面组网的基础上做一个变化，将PC和server分开，通过不同的接口和防火墙相连，此时应该如何配置双向NAT呢？在这个组网中所有报文都需要经过防火墙转发，只配置NAT Server是可以的。如果要配置双向NAT，那么就是域内NAT+NAT Server，具体配置方法和上面是类似的，此处就不再介绍了。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2014/0521/14/537c4740722f9.png" alt="img" loading="lazy"></p>
<p>其实双向NAT的原理和配置并不复杂，关键是要想明白NAT转换的方向和转换后地址的作用，而不要纠结于转换后是公网地址还是私网地址。双向NAT并不是必配的功能，有时只配置源NAT或NAT Server就可以达到同样的效果，但是灵活应用双向NAT可以起到简化网络配置、方便网络管理的作用，也就达到了一加一大于二的效果！</p>
<p>强叔提问：<br>对于域内NAT，是否需要配置安全策略？如果不配置，且关闭缺省包过滤，PC能否成功访问server？</p>
<p>转自华为技术论坛 强叔侃墙 <a href="https://forum.huawei.com/enterprise/zh/thread-331003.html">https://forum.huawei.com/enterprise/zh/thread-331003.html</a> </p>
]]></content>
      <categories>
        <category>防火墙</category>
      </categories>
      <tags>
        <tag>NAT</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是敏捷网络 敏捷网络就是SDN吗</title>
    <url>/2019/05/29/55/</url>
    <content><![CDATA[<p><strong>==============================================================================================</strong></p>
<p>每个小区保安都是一个有潜力的哲学家，他们每天都要问三个终极的人生问题：</p>
<p>l  你是谁？</p>
<p>l  你从哪里来？</p>
<p>l  你要到哪里去？</p>
<p>是的，作为敏捷网络系列这样一套duang duang duang的技术文章，我们也会问这三个问题：</p>
<p>l  什么是敏捷网络？</p>
<p>l  为什么需要敏捷网络？</p>
<p>l  怎么使用和发展敏捷网络？</p>
<p>什么是敏捷网络</p>
<p>何谓“敏捷”？快而灵活。快追求的是“功效”，灵活则是包裹在这套快拳之内一股“巧劲”。光有快没有灵活，就是横冲直撞，最后可能造出一个不可平滑演进的怪物，光有灵活没有快，就是隔靴搔痒，最后可能解决不了实际问题。</p>
<p>在敏捷网络里，两个要素缺一不可。</p>
<p>所以说，敏捷网络是指一套组网架构吗？不是。是一堆特性或产品组合吗？不是。是一个SDN控制器吗？不是。敏捷网络这个词应该更像一个愿景――我们希望打造的是一个“快而灵活的网络”。而紧密围绕在这个愿景之下的，是支撑实现这一愿景的一系列架构，方案，产品，特性，功能。以下是本人对敏捷（Agile）的趣解，有点凑单词的嫌疑。。。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2015/0428/15/553f31dc051ea.png" alt="img" loading="lazy"></p>
<p>为了实现这一愿景，我们这帮吭哧吭哧的技术人员可谓“无所不用其极”。我们秉承邓爷爷的“不管白猫黑猫，只要能抓住老鼠就是好猫”的谆谆教诲，寻找一切让网络快不起来，灵活不起来的绊脚石，利用各种技术和方法一个一个攻破。</p>
<p>基于这个出发点，下面我们就要回答一个重要的问题：敏捷网络就是SDN吗？</p>
<h2 id="1-敏捷网络就是SDN吗？――敏捷网络与SDN的关系"><a href="#1-敏捷网络就是SDN吗？――敏捷网络与SDN的关系" class="headerlink" title="1      敏捷网络就是SDN吗？――敏捷网络与SDN的关系"></a>1      敏捷网络就是SDN吗？――敏捷网络与SDN的关系</h2><p>答案可能很难理解：既是又不是。</p>
<p>为什么会有这个答案？是因为同一个事情我们从不同角度来看，就可以得到不同的答案。</p>
<p>SDN字面意义是“软件定义网络”。其实这是一个很技术的术语，阐述的是一种技术方向。而敏捷网络的字面意义则是一个技术无关的网络建设目标。</p>
<p>比方说QoS这个术语。字面意义是“服务质量”。从字面意义而言，有谁能看出来QoS要使用什么技术吗？看不出来，因为这个词是QoS想要实现的目的――在网络中保证服务的提供质量。为了达到这一目的，我们可以用各种各样的方法，比如现在有流量监管，队列调度等等。未来还可能有更多满足这一目标，而且各不相同的技术出现。</p>
<p>而SDN则不然，从字面意义里就能看到技术的影子――用软件方式来定义、改造、管理网络，至于这样做之后能达到什么目的，其实不得而知。因此，SDN并不是从诸如“网络管理员已经厌倦了网络设备的命令行配置”或者“网络设备上要进行配置纠错已经到了令人抓狂的地步”这类客户抱怨出发，它一上来就是一个无比高大上的立足点――要让网络像软件一样可以自由定义，其实背后隐藏的意思就是“让网络无所不能”。</p>
<p>事实上，正因为这个“无所不能”，才让大家对什么是SDN进行了长久的争论。也正因为SDN本身是从技术理念而不是实际问题出发的，所以当人们一谈到SDN时，自然而然地就会将目光注视到了“控制器”、“控制与转发分离”、“Openflow”这一类技术上面。至于用了这些技术之后，到底有什么显而易见到，连从来没听说过SDN的网络管理员也能理解的“收益”？这不是SDN主要致力于要解决的问题，因为研究SDN的人们普遍认为的是“既然用了SDN之后，想让网络干嘛就干嘛，那到时候还不是想要什么收益就有什么收益么？”。SDN是一种自底向上的发展思路，先把一种机制或平台搭建好，在这个平台之上任由后来人发展应用场景。</p>
<p>所以，归根结底，SDN的目标是让网络更加“灵活”，也就是敏捷网络中的“敏”字，有更多的扩展性和可能性；至于用了SDN之后的“功效”，也就敏捷网络中的“捷”字，是网络设备厂商自己打开脑洞，去自由挖掘的创造之地。</p>
<p>敏捷网络要实现“快而灵活”的愿景，SDN相关的一系列理念和技术自然会在我们利用的范畴之内。所以，要说敏捷网络用了SDN技术吗？肯定用了。比如控制器，比如接口开放，比如设备虚拟化。从这个角度来讲，敏捷网络算是一个SDN网络。</p>
<p>但是，敏捷网络就仅仅是一个SDN网络吗？肯定也不是。SDN只解决了部分问题，还有很多让网络敏捷不起来的问题没有解决。要解决这些问题，我们还需要利用其它跟SDN无关的技术。所以，SDN在达成“敏捷”这个目标中有用、能用的地方我们就用，无用武之地的地方我们就不用。从这个角度来讲，敏捷网络又不是大家最常讨论的“依靠控制器下发流表来指导交换机进行流量转发”的SDN网络。在后面对敏捷网络的详细解析部分，大家可以看到大部分方案都与Openflow无关。</p>
<p>敏捷网络和SDN是从两个出发点，两个角度延伸而来的两个概念，自然不能完全用“是”或者“不是”来简单地判定两者之间的关系。<strong>敏捷网络会借用和兼容SDN所提出的理念和技术，但是并不将创新范围仅仅局限在目前大家所认为的某些SDN标准上。</strong>还是那句话：“不管是白技术，还是黑技术，只要能让网络敏捷起来的就是好技术”。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2015/0428/15/553f31dc49a56.png" alt="img" loading="lazy"></p>
<h2 id=""><a href="#" class="headerlink" title="====================================================================================================="></a><strong>=====================================================================================================</strong></h2><h2 id="2-怎么才算SDN了呢？――SDN的本质特征"><a href="#2-怎么才算SDN了呢？――SDN的本质特征" class="headerlink" title="2      怎么才算SDN了呢？――SDN的本质特征"></a>2      怎么才算SDN了呢？――SDN的本质特征</h2><p>从我们的出发点而言，重点在于解决客户网络臃肿难行的现实问题，至于是否用了SDN技术是次要的东西，是需要在一堆技术中优胜劣汰的事情。但是还是有很多客户一上来就问：敏捷网络是不是SDN？不是的话我就不用了。</p>
<p>之所以会有这种考虑，也是有实际原因的：</p>
<p>当前SDN的内涵和发展其实还是处于一个众说纷纭，百家争鸣的时期。很多人只知道SDN“很有可能”是未来网络发展的一个趋势，但是却没有时间、精力去深入研究和理解这个东西，或者仅仅是因为网络厂商纷乱的竞争，让大家根本就无从深入。</p>
<p>这是很正常的，作为一个顾客而言，就应该轻松地花钱买东西，为啥要操那么多心了解这么个深奥的玩意。所以，在“看不清”的现状下，只能笼统地下个结论：只有SDN的网络才是最有可能近几十年内不会被历史淘汰的网络，我部署成SDN网络，这个网络才是长期有效的。至于其他的，厂商说出花来也没有用。这是从客户自身网络的稳定性和可发展性角度来考虑的。</p>
<p>顾客有需求，我们就要满足，谁让顾客是上帝呢。既然顾客有这个担心，那我们就要解答：敏捷网络到底怎么就SDN了呢。</p>
<p>要回答这个问题，首先要回答，怎么就算SDN了呢？</p>
<p>这里不是SDN的专题介绍，自然不能将SDN的来龙去脉讲得清清楚楚。这里只能按照个人的理解对其特征进行一些总结。特别声明的是，纯属个人理解，如有争议，借用电视台常用的一句话：言论仅代表嘉宾个人观点，不代表本台立场。</p>
<h3 id="2-1-软件定义网络"><a href="#2-1-软件定义网络" class="headerlink" title="2.1      软件定义网络"></a>2.1      软件定义网络</h3><p>首先，还是SDN的字面意思，软件定义网络。个人认为这个词比“转发与控制分离”更能代表SDN的本质。这个词有以下几层意思：</p>
<p>l  让网络本身可以抽象化成“算法+数据结构”，可以用软件语言来描述和操控。这个抽象化又包含几层意思：</p>
<p>n  把网络中的各种物理实体抽象成编程对象。</p>
<p>比如，以前网管看待网络的视角是网元和拓扑。网元是网络组成的最小单位。依附于网元的，是网元的各种状态参数，比如接口的UP/DOWN状态，CPU占用率等等。网管首先是个“查看器”。基于查看结果，管理员通过自己的知识与智慧，完成“期望结果”到“设备配置”的转换。然后网管又是个“配置器”，利用网管与设备间的某些接口，向设备下发配置。最终利用设备的某些功能，间接达到调整设备状态的目的。比如通过接口限速降低设备的CPU负载等。</p>
<p>而SDN的想法更加彻底和激进。SDN希望让网络中每一个可操作的单元都变成编程语言中的一个“对象”，可以通过程序来直接调节其各种属性值。比如，有可能未来交换机上某个接口，就是一个编程对象。应用程序可以直接通过调节这个物理接口的PoE供电电压，来调整智能灯泡的亮度，起到节能减排的目的。当然，最为大家熟悉的，还是将网络设备的转发表变成可编程的对象，利用Openflow来实现控制器对转发表的操控。</p>
<p>n  把整张网络进行虚拟化，实现逻辑拓扑和物理拓扑的分离。</p>
<p>其实这个想法现在已经有应用案例了，那就是BGP MPLS VPN对网络的多实例化。BGP MPLS VPN想要实现的效果就是同一张物理网络，被逻辑隔离成多张虚拟网络。然而，BGP MPLS VPN其实并没有实现真正的网络虚拟化。</p>
<p>简单理解一下，BGP MPLS VPN的公网中，除了PE设备外，其他的设备对各个VPN实例都是不感知的。这些设备并没有存在“属于哪个VPN实例”这一说，它们只是转发着被封装好的，不知道属于谁的报文。从网管上看，管理员不能看到一张完整的只属于某个VPN实例的公网网络拓扑，而只能看到哪个站点跟哪个站点可以互联。</p>
<p>所谓的VPN实例，其实只是公网的边界设备，也就是PE之间的一种点到点的隧道把戏。相应的代价是，管理员需要进行非常复杂的标签过滤规则和路由配置来实现多个站点之间的合理互联。这种方式通常被称为“Overlay”。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2015/0428/15/553f326ecd483.png" alt="img" loading="lazy"></p>
<p>真正的网络虚拟化应该是网络中每台设备都被一虚多为多台逻辑设备，这些逻辑设备间既可以通过物理线缆直连，也可以通过隧道进行虚拟直连。管理员可以随心所欲地定义这些逻辑设备间的互联关系以及相应工作机制，从而在同一张物理网络上，为某个客户定义出一张的既有二层，又有三层的纯树状网络，同时又为另一个客户定义出一张纯二层的环网。管理员可以在网管上看到每一个客户的一张完整、可控的逻辑拓扑图。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2015/0428/15/553f326f1ac58.png" alt="img" loading="lazy"></p>
<p>这么牛叉的技术有用么？配合云计算就有用了。将来大家都不自建网络，全去租用ISP的云数据中心，当这个数据中心达到一定规模时，我们要关心就不只是服务器的数量问题了，而应该关心服务器采用何种网络架构互联。不同架构适合于不同的数据模型，不同行业和客户需求，匹配好了才能达到最高传输效率。</p>
<p>n  把网络设备进行虚拟化。</p>
<p>网络设备虚拟化现在也是一个很笼统的概念。其实跟传统意义上的SDN没有太大关系，但是因为提到了虚拟化概念，就顺带着介绍一下。也刚好印证我们的“白猫黑猫”理论。目前主要包括三类概念：</p>
<p>u  将通用服务器虚拟化为一台或多台网络设备。就像现在数据中心的虚拟服务器一样。这就是现在也很火的NFV。NFV和SDN其实是两码事。</p>
<p>u  将一台物理网络设备虚拟化为多台网络设备。前面的网络虚拟化中已经提到。目前实际上已有部分设备支持类似特性，比如华为NGFW的虚拟系统则从管理界面、安全策略到路由转发都进行了多实例化，是已经比较完善的“一虚多”特性了。</p>
<p>u  将多台物理网络设备虚拟为一台网络设备。这种虚拟化跟多台服务器虚拟化为一台服务器不同。服务器的虚拟化根本目的是为了提升性能，而这里提到的网络设备虚拟化主要是为了提高可靠性的同时，还可以简化网络设备的管理。以前华为交换机所支持的CSS特性就是这个目的。敏捷园区网方案中做得更加强大一些。后面讲到时会再详细介绍。</p>
<p>l  讲完抽象化，接下来就是软件定义网络的第二层意思，将网络设备的能力开放给软件。</p>
<p>这里大家可能要疑惑的就是，以前网络设备里难道没有软件吗？</p>
<p>当然有。只不过以前网络设备在追求更快更高更强的路上艰难前行，最佳的策略就是软硬件的一体化设计。现在大家希望通过SDN实现的，是 “通用硬件+更多定制化软件”，在网络设备领域复制“Intel+微软+开发者”的辉煌。所以，重点在“开放”而不是“软件”。</p>
<p>事实上，一家厂商包揽软硬件设计的方法，从最终成品的质量上来看，一定是最佳策略。因为这意味着会有更多的精细化的调优和控制。</p>
<p>很明显的例子就是iPhone和Android。iPhone的硬件配置一直不高，连开始用2G的内存都上了最近的新闻。而Android早在前年就已经陆续上了2G内存了。但是从流畅度上来讲，iPhone的对手很少。</p>
<p>那么为什么我们要讲开放？要把网络设备做成Android手机那样的一个通用平台，软件给大家一起编？因为凡事都抗不过一个综合成本。一体化设计虽然最终产品的工作效率高，但是成本也高。一个公司就这么点人，扩展功能和需求响应都是很慢的。通用平台虽然工作效率低，但是因为批量化可以降低成本，可以通过“量”来弥补“质”的不足。就好像现在Android天生就比iPhone慢，那就靠提升硬件配置来追平对手。最后总成本还是比iPhone低，卖得还是比iPhone多。苹果电脑一开始用自己的PowerPC处理器，后来不也是换成了Intel。凡事没有绝对，在商业利益面前，技术还是矮一头的。</p>
<p>好，先不论孰优孰劣，总之就是，还是有很多人希望网络设备厂商出厂的设备一方面越来越傻，即自主的控制能力越来越弱，一方面又越来越灵活，即根据各种上层软件的指令可以对网络报文进行随心所欲的处理。拿QoS来说，就是希望，什么队列调度，什么优先级标记，网络设备都有很高效的芯片可以处理，可以保证报文的高速转发，唯独不知道的就是到底谁应该进什么队列，谁应该标记什么优先级。这个东西要靠大家编写的软件来告诉它。</p>
<p>以上就是SDN中关于什么叫做“软件定义网络”的一些个人理解。接下来，我们就来看看大家对SDN提得很多的“转发控制分离”。</p>
<h3 id="2-2-转发与控制分离"><a href="#2-2-转发与控制分离" class="headerlink" title="2.2      转发与控制分离"></a>2.2      转发与控制分离</h3><p>事实上，从前面的阐述，大家已经可以看出来，“转发控制分离”不过是为了更好实现“软件定义网络”而采用的一种手段，顶多可以算一个充分条件，但肯定不是必要条件。</p>
<p>传统的网络设备的软件系统早就已经从稳定性和安全性的角度，将转发面、控制面和管理面三面进行分离。只不过原来是逻辑分离，代码本身还是跑在同一台设备上。现在SDN所强调的转发控制分离，不就是把以前网络设备中的控制面和管理面代码拿到控制器上去，同时将原来的设备内的主线通信改成了网络通信么？不仅没有本质区别，而且还降低了通信速率――网络通信会比板间通信更快么？</p>
<p>那么为什么还要这么做？还是从功能性的角度来考虑的。把控制面挪到控制器上之后，才能更好地对控制面进行扩展，才可以在集群服务器上实现更复杂的编程和更强大的计算。同时以前每个设备的控制器都是独立工作，路由是自己去计算，链路通断是自己去探测，现在挪到控制器上之后，就可以让全网可以更好地协同工作，实现更多的功能。理念就是牺牲单设备的工作效率，提升整网的工作效率。</p>
<p>那么这么做，真的可以达到我们想要的效果吗？在目前还没有一个非常理想的控制器产品出现的背景下，大家对控制器调控全网资源的“智力”还是存疑的。因此，基于技术和现实，旧网与新网的调和，现在控制器的模型也还存在好几种：</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2015/0428/15/553f326f60321.png" alt="img" loading="lazy"></p>
<p>简单解释一下：</p>
<p>l  策略控制器模型保留了网络设备的基本能力，但是通过策略控制器来对大量网络设备的策略配置进行统一编排，从管理角度起到了简化网络运维的作用，同时还保留了传统网络的高效转发能力。相当于由控制器接管（或者两者并存）了网络设备的管理面的部分职能。是与传统网络融合最好的模型。该模型重点关注的是如何快速部署网络业务，而对于网络设备上诸如二层交换，三层转发等基本转发能力（例如MAC地址表，路由表）不做过多干预。</p>
<p>l  虚拟化模型是从网络虚拟化的角度出发，一方面保留了网络设备的基本转发能力，使得网络设备可以按照传统机制构建一个高效互联的物理网络，另一方面利用虚拟化技术在物理网络的基础上构建出所需的虚拟设备和虚拟网络。这个就有点像是BGP MPLS VPN了。BPG MPLS VPN在一个全互联的物理网络基础上，先将边界设备进行多实例化，再利用隧道技术快速建立边界设备上的实例间的多点到多点的逻辑链路，最终实现部分站点才可互联的虚拟网络的效果。只不过正如之前所说，这次的虚拟化做得更加彻底和完善。控制器要将每一台设备都进行多实例化，并且根据需要控制每个实例的配置与转发表项。这种全面的虚拟化在原来的纯手工配置的时代里是无法完成的，如果有一个超级强大的控制器这种虚拟化就会变得异常简单。</p>
<p>l  SDN模型是对传统网络改造最大的模型。其完全剥夺了网络设备的转发“判断”能力，离了控制器，网络设备什么也干不了，既无法学习路由，也无法感知网络质量。而且实际网络的运行效率能运行到什么程度，关键看控制器的拓扑发现、链路质量识别、路由计算算法的设计与实现。总体来说，是个比较美好，但是实际实现风险很高的模型。</p>
<p>可以看出，前两种模型都没有或者只是部分实现了网络设备的转发面和控制面在物理实体上的分离，但是其实由于SDN的笼统定义，这几种模型都属于SDN讨论的范畴，它们都涉及到SDN的几个关键特征：需要对网络对象进行抽象化描述（只是抽象的维度和目的各不相同），网络设备的能力开放给更多的应用程序（只是开放的能力范围各不相同），存在一个统一的控制器（只是控制器接管的工作各不相同）等等。这进一步解释了为何“转发与控制分离”或者单纯的一种南向接口协议“Openflow”不能算是SDN的本质特征。即使转发与控制没有实现物理实体的分离，如果网络设备提供了足够强大的编程空间和计算能力，也就是被软件定义的能力，其实也仍然可以算是SDN。</p>
<p>这几种模型其实各有各的优势和适用场合，并不存在绝对的冲突，事实上也是可以相互融合使用的。这也敏捷网络的做法。</p>
<p><strong>所以总结一下，怎么才算SDN了呢？符合以下一个或多个特征的网络都可以算作SDN网络：</strong></p>
<p>l  <strong>对网络的抽象化，主要是指两个维度：</strong></p>
<p>n  <strong>网络设备的部分软硬件元素（例如转发表项和接口电压）可以抽象为可编程对象，并可受上层软件操控。结合第二、三个特征，这里的上层软件通常是指独立于设备实体之外的统一管理平台及其加载的厂商自编或第三方编写的软件。</strong></p>
<p>n  <strong>网络本身的抽象化和逻辑化。需要澄清的是这种虚拟化存在三种角度：NFV、Overlay、网络设备集群（多虚一）。目前大家普遍认为的，与SDN联系较为紧密的，是指“在一张物理网络基础上逻辑化出多张overlay的虚拟网络”这种角度。</strong></p>
<p>l  <strong>网络设备能力的开放，有三种层次：</strong></p>
<p>n  <strong>网络设备管理面的开放。即由控制器接管网络设备的配置。</strong></p>
<p>n  <strong>网络设备控制面的开放。即由控制器接管网络设备的路由学习和转发表项计算。</strong></p>
<p>n  <strong>控制器自身的开放。即控制器上的应用软件不仅可由网络设备厂商来编写，还可以由第三方应用程序供应商来编写，大家可以共同统一的南北向接口。</strong></p>
<p>l  <strong>转发与控制分离：基于前两个特征，在网络设备实体之外独立存在一个全网统一的控制器，是实现前两种特征的最佳方案。</strong></p>
<h3 id="-1"><a href="#-1" class="headerlink" title="====================================================================================================="></a><strong>=====================================================================================================</strong></h3><h3 id="3-敏捷网络究竟做了些什么？――敏捷网络各方案简介"><a href="#3-敏捷网络究竟做了些什么？――敏捷网络各方案简介" class="headerlink" title="3 敏捷网络究竟做了些什么？――敏捷网络各方案简介"></a>3 敏捷网络究竟做了些什么？――敏捷网络各方案简介</h3><p>我们从SDN的简单介绍里面其实已经提取到了很多有用的东西，既有理念层面，也有技术层面的。</p>
<p>理念层面的关键点包括“网络对象的抽象化”、“网络控制器”、“控制与转发分离”等等。具体技术层面我们有控制器向设备下发指导转发的流表的“Openflow”，和XMPP、Restful等一堆南北向接口协议。</p>
<p>那么回到敏捷网络的出发点“让网络快而灵活起来”，这些东西有一些是有助于实现这一目标。具体怎么帮助，后面会在对敏捷网络的一篇篇解析中娓娓道来。这里只举两个例子：</p>
<p>l  敏捷园区网络中的业务随行方案，就是借鉴了策略控制器模型，以及对象抽象化和网络虚拟化的思想，将参与网络通讯的终端抽象化为不同的逻辑组，通过管理逻辑组之间的策略来控制终端之间的互访，实现业务策略与网络物理拓扑、VLAN、IP的解耦。最终达到快速进行业务策略部署的目的。</p>
<p>l  敏捷园区网络中的SVF方案，就是借鉴了网络设备虚拟化的思想，将原本只有相同型号的交换机才可以虚拟化的堆叠技术发展成为了可以同时将核心、汇聚、接入三层交换机，全部虚拟为一台“超级交换机”的技术。相当于一整个园区网络最后变成了一台交换机，可想而知管理工作简化了多少。</p>
<p>在这些例子中，我们都是从管理员每天都要面对的实际问题出发，以解决客户需求为最终目标，借鉴已有的思想和技术，同时根据需求创造或发展必要的新技术。</p>
<p>在详细解析一个个解决具体问题的敏捷网络方案之前，我们先来系统地看一下，敏捷网络在SDN之下（硬件基础），SDN之中（Openflow兼容），和SDN之上（应用层方案）都做了什么。</p>
<h3 id="3-1-SDN之下：ENP"><a href="#3-1-SDN之下：ENP" class="headerlink" title="3.1      SDN之下：ENP"></a>3.1      SDN之下：ENP</h3><p>SDN定义了一个“网络设备基于流表转发+应用程序控制流表”的模型，以解决网络设备非常关键但是同时也是非常小的一部分功能。</p>
<p>以往的网络设备也是基于各种表项来转发的，交换机需要将MAC地址转发表下发到ASIC芯片中，然后芯片就可以做到线速的转发。简单理解线速就是，有一个盒子，盒子里面提前把“水”槽挖好了，“水”从一端流入，自然而然地就沿着槽从指定的出口出来，流动的速率完全看“水”的速率。当然ASIC就是这个盒子，“水流”在这里就是“电流”，电流的速度那是杠杠的。ASIC本身具备一定的编程能力，但是可由软件自由修改的部分很少，尤其是商业套片。打个比方就是说，“目的MAC地址XX从接口YY发送出去”这句话里面，软件可以修改XX和YY，却修改不了这句话的结构，因为其已经固化在ASIC芯片里了。</p>
<p>那么线速转发的对应面是什么呢？就是CPU转发。大致的意思就是报文的部分或全部内容都要根据其含义拆分成一个一个数据节，然后根据算法将一个个数据节依次送到CPU里面去计算，最终得出这个报文应该向哪里发送，怎么发送的结论，然后再将报文重新组装好了发送出去。重组后的报文可能内容都一样，但是其实“太阳还是太阳，报文已经不是那个报文了”。这个速率显然会比ASIC的线速慢很多，但是其处理的灵活性基本达到了“万能”的地步，全看算法怎么编。</p>
<p>这两者就是效率与功能的两个极端。就像所有领域一样，这两者总是存在不可调和的矛盾。</p>
<p>既然SDN模型的基础其实也基于流表转发，那么SDN相比于以往的ASIC模型有什么本质改进？其实没有，SDN模型基本上是按照ASIC这个模式来的，即不改变设备按照流表转发的基本模型，但是SDN增强了流表计算的能力――目前大部分厂商的交换机都是ASIC的，这也是SDN的创造者的一种惯性思维。</p>
<p>这也就意味着，SDN确实可以在流量的具体表项计算上大做文章，但是一旦涉及到调整表项结构，比如增加表项匹配的报文字段、增加报文处理的动作、改变报文匹配的流程，就可能因为硬件芯片的不支持而导致无法快速落地到设备上。现在Openflow协议本身也是在不停地出新版本，实际上已经有出现过几次调整流表结构的情况了。</p>
<p>但是敏捷网络看来，一方面ASIC带来的高速转发能力是网络设备尤其是交换机不可或缺的部分，另一方面ASIC所带来的功能禁锢又是实现敏捷，实现软件定义网络中的一个大绊脚石。以往由客户需求或者协议成熟触发的ASIC芯片改造，通常周期长达数年甚至数十年。在这个一年倒闭几千个公司的时代，这种芯片改造的速度是跟不上软件发展的速度的。</p>
<p>同时，目前靠控制器来直接指导转发的生态系统并未成熟，冒然全面切换至Openflow很可能导致网络的基本业务都受到影响，而且还有很多基本转发能力之外的，目前正在海量设备上工作的产品特性，SDN并未给出任何解决方案。</p>
<p>因此继续用ASIC不行，全部换成SDN方案也不行，华为最终选择了自主创新：ENP芯片。</p>
<p>ENP芯片是一种效率和功能折中的底层硬件方案，它基于华为路由器已经成熟应用十几年的NP芯片，工作原理是ASIC和NP芯片的一个融合，其通过内置硬件加速组件、片内集成SmartMemory和高速查找算法，在保留了传统交换机ASIC成本、功耗、性能优势的同时，更具备灵活的全可编程能力。</p>
<p>ENP的可编程分成两个层次，即华为自己可编程和第三方可编程。传统采用ASIC芯片的交换机将所有功能都固化在芯片里，后期无法更改。而采用了ENP芯片的敏捷交换机具备了按需定制的能力。华为可以根据客户的业务变化去给客户定制行业需要的功能，第三方也可以利用华为在敏捷交换机上提供的API接口进行编程。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2015/0428/15/553f32f998ce9.png" alt="img" loading="lazy"></p>
<p>由于ENP芯片采用全可编程架构，通过微码编程实现新业务，客户无需更换新的硬件，六个月即可上线。而传统ASIC芯片采用固定的转发架构和转发流程，新业务无法快速部署，需要等待数年的硬件支持。</p>
<p>就拿业务随行中的“策略解耦”来说，最后实现时要求芯片先根据报文的源/目的IP去匹配一张由Controller动态维护的“IP-Group”映射表，得到的结果就是报文的源/目的组，然后再用源/目的组号去匹配管理员基于组配置的业务策略。原理其实很简单，就是把原来的ASIC的一次表项匹配改成了两次，但是ASIC就是做不到（ASIC哭诉：臣妾做不到哇～～）。</p>
<p>本人也不是芯片方面的专家，这里篇幅有限也不能深入介绍ENP是怎么做到的。反正blablabla一堆最后就是一个“好”字！谁叫是华为给咱发工资，给咱带来幸福生活呢。</p>
<p>通过ENP这个设计，其实我们可以看出，敏捷网络并没有全面放弃网络设备自身的智能，反而让网络设备自身的计算与报文改造能力更加强大和灵活。换句话说，敏捷网络虽然会上收一部分控制权到控制器上，但是同时也保留了一部分控制权给设备本身，并且这部分能力会比传统设备更加强大。相当于我们不仅可以拥有一个独立于网络设备之外的控制器，我们还拥有了一个集成在设备上的微型控制器。</p>
<p><strong>所以，ENP并未阻挡SDN的落地，相反它是一个更加坚强的底层平台，它让SDN可以更快地落地。SDN能解决的，我们可以让SDN来解决，通过对独立控制器进行编程来解决，ENP可以更快地适应各种控制器南向接口协议和不同的转发模型；SDN暂时解决不了的，我们仍然可以通过对设备上的ENP芯片直接进行编程来解决。</strong></p>
<p>下面，我们就来看敏捷网络对SDN的准备情况。</p>
<h3 id="3-2-SDN之中：控制器以及一机双平面"><a href="#3-2-SDN之中：控制器以及一机双平面" class="headerlink" title="3.2      SDN之中：控制器以及一机双平面"></a>3.2      SDN之中：控制器以及一机双平面</h3><p>诚如前面所讲，控制器也有很多种模型。敏捷网络目前有三大板块：敏捷园区、敏捷数据中心和敏捷分支。其中目前已经商用的敏捷园区控制器基本属于“策略控制器”这个模型，而敏捷分支和敏捷数据中心的控制器因为还在开发过程中，暂时不能透露太多小秘密。本期以及未来的几期都将先聚焦于敏捷园区方案。</p>
<p>首先简单解释一下为什么敏捷园区控制器没有做成经典SDN模型。</p>
<p>经典的SDN模型目前的关注点在流量转发的相关问题上，比如拓扑发现，路径调优，负载分担等等，其实最终目的都是为了让网络带宽得到更有效的利用，网络业务更少丢包、抖动和时延。这些问题在广域网里面比较突出。</p>
<p>在园区网络里面，由于高性能交换机和10G、40G光纤互联大量使用，园区带宽还是比较充裕的。同时园区的网络结构因为一般都是局域网，规模不是很大，路由域也很小，规划得比较好的园区网络都是简单清晰的树状结构，不存在错综复杂的广域网里面各种乱七八糟的路径和路由问题。因此，如果现在在园区网里面用经典的SDN模型，实在是有些杀鸡用牛刀的感觉。</p>
<p>然后我们再来看敏捷园区方案是准备如何兼容未来的“转发与控制分离”的SDN网络的。</p>
<p>采用ENP芯片之后，由于园区内的交换机保留了控制面的计算能力，同时又具备了更强的编程能力，因此可以实现“一机双平面”，即“一台物理设备，既支持传统路由转发，又支持Openflow流表转发”。华为可以用一张物理网络实现两张逻辑网络。一张逻辑网络运行原有的协议和业务；另外一张逻辑网络运行SDN，以便试验新业务。ENP交换机既支持现有网络的全部协议，又支持SDN协议。使用这样一机双平面的ENP交换机就可以构建一张支持平滑过渡到SDN的网络。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2015/0428/15/553f330cd4f56.png" alt="img" loading="lazy"></p>
<p>以上是网络设备这一侧，最后我们来看控制器一侧。网络设备的管理面的部分能力由控制器接管是必然的，这个是哪个模型都要做的事情。敏捷园区方案仍然采用的是一步一个脚印的策略，并未完全接管设备的管理配置界面，同时根据实际客户场景的需求，逐步上收部分功能的配置权。我们可以看到敏捷园区的一个一个版本中，控制器可配置的网络设备的能力是在一点一点增加和丰富的。同时，虽然目前已经商用的敏捷园区控制器并没有接管网络设备的控制平面，但是基于一机双平面这个硬件基础，敏捷园区控制器随时都有接管的能力。具体时机要看整个生态系统的成熟度和网络的实际需求，</p>
<p>这也就解答了客户关心的敏捷网络能不能平滑演进到SDN的问题。<strong>其实现在不是能不能的问题，而是需不需要的问题。总体而言，敏捷网络在涉及到SDN技术方面，已经属于Ready状态，而且是从芯片，协议支持，以及控制器三个方面都做了充分的准备。</strong>在此基础上，敏捷网络还从SDN的理念出发对网络进行了深入的扩展。</p>
<p>下面，我们就来看看都有哪些意外惊喜。</p>
<h3 id="3-3-SDN之上：那些意外惊喜"><a href="#3-3-SDN之上：那些意外惊喜" class="headerlink" title="3.3      SDN之上：那些意外惊喜"></a>3.3      SDN之上：那些意外惊喜</h3><p>前面已经提到，有一些现网已经运行的特性，并不能靠一个简单的流表可以替代。有一些客户的实际问题，也不能靠Openflow解决。我们使用了SDN的一些思想和技术，但是同时也不会受到SDN的束缚。因此，我们会在敏捷网络中看到很多貌似跟SDN没什么关系的方案。</p>
<p>这些方案基本上都是围绕网络安全和网络管理来展开的。如果硬要对应到TCP/IP五层架构里面去，这些方案都可算是工作在应用层的方案（SDN其实基本可以算是工作在链路层和网络层）。即这些方案通常都是建立在网络设备和终端之间已经通过各种方式（包括传统网络协议和SDN）实现了互联互通的基础上，目的不是为了改变报文的基本转发机制，而是对网络施加业务控制。我们可以称之为“SDN之上”的方案。</p>
<p>下面我们以敏捷园区方案为例，简单介绍一下目前已有的方案，每个方案的详细情况我们会在后续期目里为大家逐一道来：</p>
<p>l  关注于快速开局，精简网络拓扑管理的“有线无线深度融合方案”、“SVF方案”、“零配置开局方案”。</p>
<p>用一个词来总结这几个方案的目标的话，应该是“即插即用”。传统园区网络里面，交换机成百上千，WiFi普及后，AP又是成百上千，海量的接入设备如何安装、维护、管理成了管理员的心头事。在敏捷网络看来，要解决这些问题，应该从这几方面入手：</p>
<p>n  第一步，把冰箱门打开，让有线无线融合成一张网络</p>
<p>原来的有线网络中交换机之间是没有从属关系，要管也只能被网管管。还好传统园区拓扑固定，人员固定，接入位置固定，有线网络这种松散的管理模型还能勉力前行。</p>
<p>结果无线网络一出来，由于网络需要快速扩张，人员需要大范围移动，大家立马发现“胖AP”这种自己管自己的方式已经完全不可行了，于是就在无线网络中引入了AC这一角色。其实AC就有点像是SDN里面那个控制器，属于“策略控制器模型”，接管了AP的管理面。</p>
<p>由于AC的引入，无线网络和有线网络分道扬镳，各管各的，长久以往，问题也就出现了――企业员工才不管有线还是无线呢，在他们眼里，这就是一张网，认证的账号应该是一样的，相应的体验应该是一样的，自己还可以随时在有线无线中切换。于是管理员配啥都得配两套。</p>
<p>为了解决这个问题，敏捷园区在网络简化上的第一刀就是将交换机和AC进行了融合，也就是“有线无线深度融合方案”，也就是我们常说的“随板AC方案”。随板AC可不是传统的AC插卡。AC插卡只是比独立AC少了两根线，管理面还是独立的。敏捷园区真正做到了交换机和AC的管理面的合一。</p>
<p>n  第二步，让有线网络可以像无线网络一样集中管起来，实现海量接入交换机像AP一样即插即用。</p>
<p>“AC+瘦AP”模型所带来的好处是有目共睹的。最大的亮点是“AP完全没有配置工作量”。其实AP不是没有配置，而是配置都是由AC来下发的。能实现这一点的前提就是AP具有相似性。很多AP，其发布的SSID是一致的，绑定的VLAN是一致的，各种无线信号参数都是一致，那为啥要管理员在每台AP上面一遍一遍地配置，对吧？接入交换机难道不是这样吗？其实大量的接入交换机的配置基本都是趋同的。</p>
<p>有了这个现实基础，接下来就好办了。既然核心交换机已经与AC做了管理面的融合，那自然核心交换机也可以借鉴AC与AP之间的管理模式，对接入交换机进行自动识别，统一管理，批量配置，从而实现接入交换机的即插即用。</p>
<p>这就是敏捷园区的SVF方案，将核心、汇聚、接入三层交换机虚拟化为一台“超级交换机”，由核心交换机来对汇聚、接入交换机的配置进行统一管理。汇聚交换机变成不可见的通信通道，接入交换机变成核心交换机的虚拟接口卡。</p>
<p><img src="https://forum.huawei.com/enterprise/zh/data/attachment/forum/dm/ecommunity/uploads/2015/0428/15/553f331d39400.png" alt="img" loading="lazy"></p>
<p>n  第三步，实现自动开局。</p>
<p>通过前两个方案，园区网络的逻辑拓扑已经得到了尽可能的简化，接下来就要动刀的就是冗长乏味且极容易出错的开局阶段了。</p>
<p>目前对于大型园区，通常的自动化开局方法是：</p>
<p>\1.   由管理员为每台设备手工编制（通常是用记事本这个大杀器）开局配置文件。</p>
<p>\2.   管理员再到一台主控制设备（通常选用核心交换机）上配置每一台设备的MAC地址或ESN号与每一个开局文件的对应关系。</p>
<p>\3.   开局设备（接入或汇聚交换机）上电时通过DHCP的Option字段获取到主控制设备的地址，再从主控制设备获取到FTP服务器的地址和对应的配置文件的ID，最后到FTP服务器上自动获取开局配置文件，完成开局过程。</p>
<p>这其中“逐台设备手工编制开局配置文件”、“设备标示与配置文件一一映射”两个过程都存在不直观，繁琐，易出错的问题。</p>
<p>而且由于网规和安装通常是两批人负责，经常会出现设备安装位置出错的问题――即某台设备根据其标示获取到了配置文件，但是由于该设备的安装位置不是原计划的位置，例如本来应该安装到1楼设备间，结果安装到了2楼，导致其获得的配置不符合当前的实际位置。</p>
<p>敏捷园区网中的“零配置开局方案”通过“网管界面化绘制规划拓扑”、“根据规划拓扑生成配置文件”、“设备上电后自动感知实际拓扑”、“实际拓扑与规划拓扑一致性校验”、“网管根据设备所在位置自动下发对应配置文件”这几步改进了以上传统方案的问题，实现了完善的开局自动化。</p>
<p>l  关注于网络业务策略快速部署，简化网络策略管理的“智能应用控制方案”、“业务随行方案”。</p>
<p>这两个方案都致力于一方面增强网络设备的策略匹配能力（基于端口识别服务演进到基于流识别应用，基于IP执行策略演进到基于身份执行策略），另外一方面对传统网络的业务策略部署方式进行革新（实现业务策略与拓扑解耦无关、实现全网批量部署）。</p>
<p>由于下一期就要开始详细介绍业务随行方案，所以这里只简单说一下策略与拓扑解耦有什么好处。</p>
<p>传统网络设备上的策略都是基于“IP+端口”来配置，因为这两个元素被携带在报文中，沿途所有设备都可以识别。背后的逻辑其实就是“身份到IP进行一一映射”。也就是管理员一开始想的是“为XX部门配策略”，结合“XX部门使用YY网段”，才可以把策略配出来。</p>
<p>这种配法首先是绕了一个弯，是麻烦的，对于管理员记忆力和Excel的使用功力要求很高。更重要的是，它把“人限制在了网络里”，也就是为了管理员配置策略方便，人不能在不同的网段里面跑来跑去。这可真是天理难容。人怎么可以被网络限制呢。传统有线网中，人被网线捆住，所以这个问题还不显眼，随着WiFi、远程VPN技术的大力发展，这个问题越来越突出。所以我们希望策略与拓扑无关，其实就是希望策略与VLAN无关、与IP无关、与接入位置无关，从而实现人在网络中的真正“自由连接”。</p>
<p>以往也有一些网络设备可以基于“用户”来做策略，但是前提都是人需要在这个设备上认证成为“本地接入用户”。显然如果我们希望全网设备都可以基于身份做策略，是不可能要求人在每一台设备都做认证的。业务随行实现了身份信息的全网统一，所以全路径上的设备都可以基于流量的身份做策略。从用户角度看来，就是不管用户从哪里接入，用什么IP地址，都可以在网络中享受一致的权限和体验。这就是业务随行方案。</p>
<p>l  关注于网络质量感知，故障快速定位的“质量感知方案”。</p>
<p>局也开完了，策略也部署完了，网络终于轰轰烈烈地上线了，让我们红尘作伴，活得潇潇洒洒，策马奔腾，哦，No，马掉沟里了――网络在运维阶段出故障了怎么办？</p>
<p>以前诊断网络故障不仅是一门技术活，还是一门体力活。通常来说，诊断通断问题要靠管理员从一端PC上一个路由器一个路由器地Ping，Ping到哪里不通了就是哪里出错了。好吧，Tracert也蛮好用的。知道哪里出错了，再去断的设备上看接口状态，看配置等等。但是有时IP通断还是跟ICMP报文通断不能完全等同的，有些设备上的包过滤就是配置成ICMP允许通过，IP报文阻断的，这时就定位不出来了。</p>
<p>比配置问题导致的业务通断更头疼的是偶发的丢包。来无影去无踪，大家只知道打个电话断断续续的，管理员根本找不到丢包的设备。就算找到了设备，业务也可能早已已经恢复了正常，完全看不出来问题在哪了。实际有可能是接口接触不良，网络浪涌导致的拥塞，线缆老化导致信号质量变差等等各种各样稀奇古怪的原因。</p>
<p>之所以会存在这些“维护难”的问题都是因为传统网络质量的检测技术都是“事后的”、“模拟的”，案发现场无法还原导致丢包案件无法侦破。而敏捷园区的质量感知方案想要实现的就是“随流检测，实时检测”，具体方法是统计一条或多条流量经过的路径上每一台设备上的报文收***况，一旦出现丢包的情况，网管马上就可以感知到，而且立刻就能定位是哪条链路，哪台设备，甚至是哪块单板发生了丢包，丢了多少包。这样前面所提到的问题就能迎刃而解，实现真正的网络质量可感知。具体实现原理还是非常复杂和高大上的，这里先不深入展开。</p>
<p>l  关注于利用大数据分析进行网络安全防护的“安全协防方案”。</p>
<p>网络的基本业务开展顺利了，接下来就要操心网络安全的问题。</p>
<p><strong><em>登为一个童话世界的毁灭踏上了最后一脚，大家发现原来不只是非法的黑客可能会对网络进行攻击，就连合法的</em></strong>也在大行其肆――人心险恶，不能不防啊。</p>
<p>传统网络安全技术通常结晶为某一种网络安全设备，最著名的就是防火墙，其他的还有IPS、IDS、AV、Anti-DDoS等等各种安全设备，导致很多人在针对一个园区网络做安全设计的时候就简单理解为解决“网络安全设备的摆放”问题。但是实际上网络安全是一个系统工程，牵扯到制度、架构、技术、设备等等方方面面。单台安全设备确实被证实在某些安全问题防护上是卓有成效的。但是也仍然有一些隐形或未知攻击是单台设备很难甚至无法发现的。所以最近APT（Advanced Persistent Threat，高级持续性威）这个词也很火热，有兴趣的童鞋可以问下度娘。</p>
<p>高级的系统化的入侵或攻击方法自然也需要系统化的防御方法。在互联网领域风生水起的大数据分析在网络安全领域同样可以如鱼得水。事实上，在战争时期，靠人工进行海量信息的收集、汇总、分析、预测，从而防御敌人的进攻已经有了数不胜数的成功案例，积累了大量宝贵经验。目前市场已经已有许多SOC（Security Operations Center）系统，就是基于这个想法，通过收集网络终端、服务器、网络设备以及各种软件上报的事件与日志进行大数据分析，进而发现潜在的安全威胁。而由于传统SOC系统与网络本身的脱节，导致SOC系统目前通常只能工作成一个告警系统，即只能完成安全威胁的检测，不能完成防御。敏捷园区网方案基于SDN中的网络能力开放理念，尝试将网络的部分控制能力开放给这些SOC系统。一方面敏捷园区控制器可以提供给SOC系统更多无法从单台设备获取的信息，另一方面SOC可以通过与敏捷园区控制器进行联动完成攻击的实时阻断或限制，从而使得SOC系统的检测能力和网络的防御能力完整结合在一起，形成“检测―分析―联动―防御―继续检测直至防御撤销”的闭环系统。</p>
<p>通过以上简单介绍，<strong>我们可以看到敏捷网络的出发点不是仅仅为了落地一个Openflow或者一个控制器，而是为了解决我们所找到的一系列影响网络部署、运行、管理效率的问题。</strong>从下一期开始，我们就将从目前已经商用的这些方案开始，逐渐揭开敏捷网络的神秘面纱，前方高能预警，敬请期待。</p>
<p>=========================================================================================================================</p>
<p>原文链接：<a href="https://forum.huawei.com/enterprise/zh/thread-294425.html">https://forum.huawei.com/enterprise/zh/thread-294425.html</a></p>
]]></content>
      <categories>
        <category>SDN</category>
      </categories>
      <tags>
        <tag>SDN</tag>
      </tags>
  </entry>
  <entry>
    <title>RAID技术全解图解-RAID0、RAID1、RAID5、RAID100【转】</title>
    <url>/2019/06/11/58/</url>
    <content><![CDATA[<h3 id="图文并茂-RAID-技术全解-–-RAID0、RAID1、RAID5、RAID100……"><a href="#图文并茂-RAID-技术全解-–-RAID0、RAID1、RAID5、RAID100……" class="headerlink" title="图文并茂 RAID 技术全解 – RAID0、RAID1、RAID5、RAID100……"></a>图文并茂 RAID 技术全解 – RAID0、RAID1、RAID5、RAID100……</h3><p>　　RAID 技术相信大家都有接触过，尤其是服务器运维人员，RAID 概念很多，有时候会概念混淆。这篇文章为网络转载，写得相当不错，它对 RAID 技术的概念特征、基本原理、关键技术、各种等级和发展现状进行了全面的阐述，并为用户如何进行应用选择提供了基本原则，对于初学者应该有很大的帮助。</p>
<h3 id="一、RAID-概述"><a href="#一、RAID-概述" class="headerlink" title="一、RAID 概述"></a>一、RAID 概述</h3><p>　　1988 年美国加州大学伯克利分校的 D. A. Patterson 教授等首次在论文 “A Case of Redundant Array of Inexpensive Disks” 中提出了 RAID 概念 [1] ，即廉价冗余磁盘阵列（ Redundant Array of Inexpensive Disks ）。由于当时大容量磁盘比较昂贵， RAID 的基本思想是将多个容量较小、相对廉价的磁盘进行有机组合，从而以较低的成本获得与昂贵大容量磁盘相当的容量、性能、可靠性。随着磁盘成本和价格的不断降低， RAID 可以使用大部分的磁盘， “廉价” 已经毫无意义。因此， RAID 咨询委员会（ RAID Advisory Board, RAB ）决定用 “ 独立 ” 替代 “ 廉价 ” ，于时 RAID 变成了独立磁盘冗余阵列（ Redundant Array of Independent Disks ）。但这仅仅是名称的变化，实质内容没有改变。</p>
<p>　　RAID 这种设计思想很快被业界接纳， RAID 技术作为高性能、高可靠的存储技术，已经得到了非常广泛的应用。 RAID 主要利用数据条带、镜像和数据校验技术来获取高性能、可靠性、容错能力和扩展性，根据运用或组合运用这三种技术的策略和架构，可以把 RAID 分为不同的等级，以满足不同数据应用的需求。 D. A. Patterson 等的论文中定义了 RAID1 ~ RAID5 原始 RAID 等级， 1988 年以来又扩展了 RAID0 和 RAID6 。近年来，存储厂商不断推出诸如 RAID7 、 RAID10/01 、 RAID50 、 RAID53 、 RAID100 等 RAID 等级，但这些并无统一的标准。目前业界公认的标准是 RAID0 ~ RAID5 ，除 RAID2 外的四个等级被定为工业标准，而在实际应用领域中使用最多的 RAID 等级是 RAID0 、 RAID1 、 RAID3 、 RAID5 、 RAID6 和 RAID10。</p>
<p>　　从实现角度看， RAID 主要分为软 RAID、硬 RAID 以及软硬混合 RAID 三种。软 RAID 所有功能均有操作系统和 CPU 来完成，没有独立的 RAID 控制 / 处理芯片和 I/O 处理芯片，效率自然最低。硬 RAID 配备了专门的 RAID 控制 / 处理芯片和 I/O 处理芯片以及阵列缓冲，不占用 CPU 资源，但成本很高。软硬混合 RAID 具备 RAID 控制 / 处理芯片，但缺乏 I/O 处理芯片，需要 CPU 和驱动程序来完成，性能和成本 在软 RAID 和硬 RAID 之间。</p>
<p>　　RAID 每一个等级代表一种实现方法和技术，等级之间并无高低之分。在实际应用中，应当根据用户的数据应用特点，综合考虑可用性、性能和成本来选择合适的 RAID 等级，以及具体的实现方式。</p>
<h3 id="二、基本原理"><a href="#二、基本原理" class="headerlink" title="二、基本原理"></a>二、基本原理</h3><p>　　RAID （ Redundant Array of Independent Disks ）即独立磁盘冗余阵列，通常简称为磁盘阵列。简单地说， RAID 是由多个独立的高性能磁盘驱动器组成的磁盘子系统，从而提供比单个磁盘更高的存储性能和数据冗余的技术。 RAID 是一类多磁盘管理技术，其向主机环境提供了成本适中、数据可靠性高的高性能存储。 SNIA 对 RAID 的定义是 [2] ：一种磁盘阵列，部分物理存储空间用来记录保存在剩余空间上的用户数据的冗余信息。当其中某一个磁盘或访问路径发生故障时，冗余信息可用来重建用户数据。磁盘条带化虽然与 RAID 定义不符，通常还是称为 RAID （即 RAID0 ）。</p>
<p>　　RAID 的初衷是为大型服务器提供高端的存储功能和冗余的数据安全。在整个系统中， RAID 被看作是由两个或更多磁盘组成的存储空间，通过并发地在多个磁盘上读写数据来提高存储系统的 I/O 性能。大多数 RAID 等级具有完备的数据校验、纠正措施，从而提高系统的容错性，甚至镜像方式，大大增强系统的可靠性， Redundant 也由此而来。</p>
<p>　　这里要提一下 JBOD （ Just a Bunch of Disks ）。最初 JBOD 用来表示一个没有控制软件提供协调控制的磁盘集合，这是 RAID 区别与 JBOD 的主要因素。目前 JBOD 常指磁盘柜，而不论其是否提供 RAID 功能。</p>
<p>　　RAID 的两个关键目标是提高数据可靠性和 I/O 性能。磁盘阵列中，数据分散在多个磁盘中，然而对于计算机系统来说，就像一个单独的磁盘。通过把相同数据同时写入到多块磁盘（典型地如镜像），或者将计算的校验数据写入阵列中来获得冗余能力，当单块磁盘出现故障时可以保证不会导致数据丢失。有些 RAID 等级允许更多地 磁盘同时发生故障，比如 RAID6 ，可以是两块磁盘同时损坏。在这样的冗余机制下，可以用新磁盘替换故障磁盘， RAID 会自动根据剩余磁盘中的数据和校验数据重建丢失的数据，保证数据一致性和完整性。数据分散保存在 RAID 中的多个不同磁盘上，并发数据读写要大大优于单个磁盘，因此可以获得更高的聚合 I/O 带宽。当然，磁盘阵列会减少全体磁盘的总可用存储空间，牺牲空间换取更高的可靠性和性能。比如， RAID1 存储空间利用率仅有 50% ， RAID5 会损失其中一个磁盘的存储容量，空间利用率为 (n-1)/n 。</p>
<p>　　磁盘阵列可以在部分磁盘（单块或多块，根据实现而论）损坏的情况下，仍能保证系统不中断地连续运行。在重建故障磁盘数据至新磁盘的过程中，系统可以继续正常运行，但是性能方面会有一定程度上的降低。一些磁盘阵列在添加或删除磁盘时必须停机，而有些则支持热交换 （ Hot Swapping ），允许不停机下替换磁盘驱动器。这种高端磁盘阵列主要用于要求高可能性的应用系统，系统不能停机或尽可能少的停机时间。一般来说， RAID 不可作为数据备份的替代方案，它对非磁盘故障等造成的数据丢失无能为力，比如<a href="http://www.hack520.com/topic/virus/">病毒</a>、人为破坏、意外删除等情形。此时的数据丢失是相对操作系统、文件系统、卷管理器或者应用系统来说的，对于 RAID 系统来身，数据都是完好的，没有发生丢失。所以，数据备份、灾 备等数据保护措施是非常必要的，与 RAID 相辅相成，保护数据在不同层次的安全性，防止发生数据丢失。</p>
<p>　　RAID 中主要有三个关键概念和技术：镜像（ Mirroring ）、数据条带（ Data Stripping ）和数据校验（ Data parity ） [3][4][5] 。镜像，将数据复制到多个磁盘，一方面可以提高可靠性，另一方面可并发从两个或多个副本读取数据来提高读性能。显而易见，镜像的写性能要稍低， 确保数据正确地写到多个磁盘需要更多的时间消耗。数据条带，将数据分片保存在多个不同的磁盘，多个数据分片共同组成一个完整数据副本，这与镜像的多个副本是不同的，它通常用于性能考虑。数据条带具有更高的并发粒度，当访问数据时，可以同时对位于不同磁盘上数据进行读写操作， 从而获得非常可观的 I/O 性能提升 。数据校验，利用冗余数据进行数据错误检测和修复，冗余数据通常采用海明码、异或操作等算法来计算获得。利用校验功能，可以很大程度上提高磁盘阵列的可靠性、鲁棒性和容错能力。不过，数据校验需要从多处读取数据并进行计算和对比，会影响系统性能。 不同等级的 RAID 采用一个或多个以上的三种技术，来获得不同的数据可靠性、可用性和 I/O 性能。至于设计何种 RAID （甚至新的等级或类型）或采用何种模式的 RAID ，需要在深入理解系统需求的前提下进行合理选择，综合评估可靠性、性能和成本来进行折中的选择。</p>
<p>　　RAID 思想从提出后就广泛被业界所接纳，存储工业界投入了大量的时间和财力来研究和开发相关产品。而且，随着处理器、<a href="http://www.hack520.com/topic/ram/">内存</a>、计算机接口等技术的不断发展， RAID 不断地发展和革新，在计算机存储领域得到了广泛的应用，从高端系统逐渐延伸到普通的中低端系统。 RAID 技术如此流行，源于其具有显著的特征和优势，基本可以满足大部分的数据存储需求。总体说来， RAID 主要优势有如下几点：</p>
<p><strong>(1) 大容量</strong></p>
<p>　　这是 RAID 的一个显然优势，它扩大了磁盘的容量，由多个磁盘组成的 RAID 系统具有海量的存储空间。现在单个磁盘的容量就可以到 1TB 以上，这样 RAID 的存储容量就可以达到 PB 级，大多数的存储需求都可以满足。一般来说， RAID 可用容量要小于所有成员磁盘的总容量。不同等级的 RAID 算法需要一定的冗余开销，具体容量开销与采用算法相关。如果已知 RAID 算法和容量，可以计算出 RAID 的可用容量。通常， RAID 容量利用率在 50% ~ 90% 之间。</p>
<p><strong>(2) 高性能</strong></p>
<p>　　 RAID 的高性能受益于数据条带化技术。单个磁盘的 I/O 性能受到接口、带宽等计算机技术的限制，性能往往很有 限，容易成为系统性能的瓶颈。通过数据条带化， RAID 将数据 I/O 分散到各个成员磁盘上，从而获得比单个磁盘成倍增长的聚合 I/O 性能。</p>
<p><strong>(3) 可靠性</strong></p>
<p>　　可用性和可靠性是 RAID 的另一个重要特征。从理论上讲，由多个磁盘组成的 RAID 系统在可靠性方面应该比单个磁盘要差。这里有个隐含假定：单个磁盘故障将导致整个 RAID 不可用。 RAID 采用镜像和数据校验等数据冗余技术，打破了这个假定。 镜像是最为原始的冗余技术，把某组磁盘驱动器上的数据完全复制到另一组磁盘驱动器上，保证总有数据副本可用。 比起镜像 50% 的冗余开销 ，数据校验要小很多，它利用校验冗余信息对数据进行校验和纠错。 RAID 冗余技术大幅提升数据可用性和可靠性，保证了若干磁盘出错时，不 会导致数据的丢失，不影响系统的连续运行。</p>
<p><strong>(4) 可管理性</strong></p>
<p>　　实际上， RAID 是一种虚拟化技术，它对多个物理磁盘驱动器虚拟成一个大容量的逻辑驱动器。对于外部主机系统来说， RAID 是一个单一的、快速可靠的大容量磁盘驱动器。这样，用户就可以在这个虚拟驱动器上来组织和存储应用系统数据。 从用户应用角度看，可使存储系统简单易用，管理也很便利。 由于 RAID 内部完成了大量的存储管理工作，管理员只需要管理单个虚拟驱动器，可以节省大量的管理工作。 RAID 可以动态增减磁盘驱动器，可自动进行数据校验和数据重建，这些都可以 大大简化管理工作。</p>
<h3 id="三、关键技术"><a href="#三、关键技术" class="headerlink" title="三、关键技术"></a>三、关键技术</h3><p><strong>3.1 镜像</strong></p>
<p>　　镜像是一种冗余技术，为磁盘提供保护功能，防止磁盘发生故障而造成数据丢失。对于 RAID 而言，采用镜像技术 典型地 将会同时在阵列中产生两个完全相同的数据副本，分布在两个不同的磁盘驱动器组上。镜像提供了完全的数据冗余能力，当一个数据副本失效不可用时，外部系统仍可正常访问另一副本，不会对应用系统运行和性能产生影响。而且，镜像不需要额外的计算和校验，故障修复非常快，直接复制即可。镜像技术可以从多个副本进行并发读取数据，提供更高的读 I/O 性能，但不能并行写数据，写多个副本会会导致一定的 I/O 性能降低。</p>
<p>　　镜像技术提供了非常高的数据安全性，其代价也是非常昂贵的，需要至少双倍的存储空间。高成本限制了镜像的广泛应用，主要应用于至关重要的数据保护，这种场合下数据丢失会造成巨大的损失。另外，镜像通过“ 拆分 ”能获得特定时间点的上数据快照，从而可以实现一种备份窗口几乎为零的数据备份技术。</p>
<p><strong>3.2 数据条带</strong></p>
<p>　　磁盘存储的性能瓶颈在于磁头寻道定位，它是一种慢速机械运动，无法与高速的 CPU 匹配。再者，单个磁盘驱动器性能存在物理极限， I/O 性能非常有限。 RAID 由多块磁盘组成，数据条带技术将数据以块的方式分布存储在多个磁盘中，从而可以对数据进行并发处理。这样写入和读取数据就可以在多个磁盘上同时进行，并发产生非常高的聚合 I/O ，有效提高了整体 I/O 性能，而且具有良好的线性扩展性。这对大容量数据尤其显著，如果不分块，数据只能按顺序存储在磁盘阵列的磁盘上，需要时再按顺序读取。而通过条带技术，可获得数倍与顺序访问的性能提升。</p>
<p>　　数据条带技术的分块大小选择非常关键。条带粒度可以是一个字节至几 KB 大小，分块越小，并行处理能力就越强，数据存取速度就越高，但同时就会增加块存取的随机性和块寻址时间。实际应用中，要根据数据特征和需求来选择合适的分块大小，在数据存取随机性和并发处理能力之间进行平衡，以争取尽可能高的整体性能。<br>数据条带是基于提高 I/O 性能而提出的，也就是说它只关注性能， 而对数据可靠性、可用性没有任何改善。实际上，其中任何一个数据条带损坏都会导致整个数据不可用，采用数据条带技术反而增加了数据发生丢失的概念率。</p>
<p><strong>3.3 数据校验</strong></p>
<p>　　镜像具有高安全性、高读性能，但冗余开销太昂贵。数据条带通过并发性来大幅提高性能，然而对数据安全性、可靠性未作考虑。数据校验是一种冗余技术，它用校验数据来提供数据的安全，可以检测数据错误，并在能力允许的前提下进行数据重构。相对镜像，数据校验大幅缩减了冗余开销，用较小的代价换取了极佳的数据完整性和可靠性。数据条带技术提供高性能，数据校验提供数据安全性， RAID 不同等级往往同时结合使用这两种技术。</p>
<p>　　采用数据校验时， RAID 要在写入数据同时进行校验计算，并将得到的校验数据存储在 RAID 成员磁盘中。校验数据可以集中保存在某个磁盘或分散存储在多个不同磁盘中，甚至校验数据也可以分块，不同 RAID 等级实现各不相同。当其中一部分数据出错时，就可以对剩余数据和校验数据进行反校验计算重建丢失的数据。校验技术相对于镜像技术的优势在于节省大量开销，但由于每次数据读写都要进行大量的校验运算，对计算机的运算速度要求很高，必须使用硬件 RAID 控制器。在数据重建恢复方面，检验技术比镜像技术复杂得多且慢得多。</p>
<p>　　海明校验码和 异或校验是两种最为常用的 数据校验算法。海明校验码是由理查德.海明提出的，不仅能检测错误，还能给出错误位置并自动纠正。海明校验的基本思想是：将有效信息按照某种规律分成若干组，对每一个组作奇偶测试并安排一个校验位，从而能提供多位检错信息，以定位错误点并纠正。可见海明校验实质上是一种多重奇偶校验。异或校验通过异或逻辑运算产生，将一个有效信息与一个给定的初始值进行异或运算，会得到校验信息。如果有效信息出现错误，通过校验信息与初始值的异或运算能还原正确的有效信息。</p>
<h3 id="四、RAID-等级"><a href="#四、RAID-等级" class="headerlink" title="四、RAID 等级"></a>四、RAID 等级</h3><p><strong>4.1 JBOD</strong></p>
<p>　　JBOD （ Just a Bunch Of Disks ）不是标准的 RAID 等级，它通常用来表示一个没有控制软件提供协调控制的磁盘集合。 JBOD 将多个物理磁盘串联起来，提供一个巨大的逻辑磁盘。 JBOD （如图 1 ）的数据存放机制是由第一块磁盘开始按顺序往后存储，当前磁盘存储空间用完后，再依次往后面的磁盘存储数据。 JBOD 存储性能完全等同于单块磁盘，而且也不提供数据安全保护。它只是简单提供一种扩展存储空间的机制， JBOD 可用存储容量等于所有成员磁盘的存储空间之和。目前 JBOD 常指磁盘柜，而不论其是否提供 RAID 功能。</p>
<p><img src="http://www.hack520.com/images/2017/20170621112044769.png" alt="RAID" loading="lazy"><br>图1 JBOD</p>
<p><strong>4.2 标准 RAID 等级</strong></p>
<p>　　SNIA 、 Berkeley 等组织机构把 RAID0 、 RAID1 、 RAID2 、 RAID3 、 RAID4 、 RAID5 、 RAID6 七个等级定为标准的 RAID 等级，这也被业界和学术界所公认。标准等级是最基本的 RAID 配置集合，单独或综合利用数据条带、镜像和数据校验技术。标准 RAID 可以组合，即 RAID 组合等级，满足 对性能、安全性、可靠性要求更高的存储应用需求。 [6][7][8][9][10][11]</p>
<p><strong>1.RAID0</strong></p>
<p>　　RAID0 是一种简单的、无数据校验的数据条带化技术。实际上不是一种真正的 RAID ，因为它并不提供任何形式的冗余策略。 RAID0 将所在磁盘条带化后组成大容量的存储空间（如图 2 所示），将数据分散存储在所有磁盘中，以独立访问方式实现多块磁盘的并读访问。由于可以并发执行 I/O 操作，总线带宽得到充分利用。再加上不需要进行数据校验，RAID0 的性能在所有 RAID 等级中是最高的。理论上讲，一个由 n 块磁盘组成的 RAID0 ，它的读写性能是单个磁盘性能的 n 倍，但由于总线带宽等多种因素的限制，实际的性能提升低于理论值。</p>
<p>　　RAID0 具有低成本、高读写性能、 100% 的高存储空间利用率等优点，但是它不提供数据冗余保护，一旦数据损坏，将无法恢复。 因此， RAID0 一般适用于对性能要求严格但对数据安全性和可靠性不高的应用，如视频、音频存储、临时数据缓存空间等。</p>
<p><img src="http://www.hack520.com/images/2017/20170621112044832.png" alt="RAID" loading="lazy"><br>图2 RAID0 ：无冗错的数据条带</p>
<p><strong>2.RAID1</strong></p>
<p>　　RAID1 称为镜像，它将数据完全一致地分别写到工作磁盘和镜像 磁盘，它的磁盘空间利用率为 50% 。 RAID1 在数据写入时，响应时间会有所影响，但是读数据的时候没有影响。 RAID1 提供了最佳的数据保护，一旦工作磁盘发生故障，系统自动从镜像磁盘读取数据，不会影响用户工作。工作原理如图 3 所示。</p>
<p>　　RAID1 与 RAID0 刚好相反，是为了增强数据安全性使两块 磁盘数据呈现完全镜像，从而达到安全性好、技术简单、管理方便。 RAID1 拥有完全容错的能力，但实现成本高。 RAID1 应用于对顺序读写性能要求高以及对数据保护极为重视的应用，如对邮件系统的数据保护。</p>
<p><img src="http://www.hack520.com/images/2017/20170621112044948.png" alt="RAID" loading="lazy"><br>图3 RAID1 ：无校验的相互镜像</p>
<p><strong>3.RAID2</strong></p>
<p>　　RAID2 称为纠错海明码磁盘阵列，其设计思想是利用海明码实现数据校验冗余。海明码是一种在原始数据中加入若干校验码来进行错误检测和纠正的编码技术，其中第 2n 位（ 1, 2, 4, 8, … ）是校验码，其他位置是数据码。因此在 RAID2 中，数据按位存储，每块磁盘存储一位数据编码，磁盘数量取决于所设定的数据存储宽度，可由用户设定。图 4 所示的为数据宽度为 4 的 RAID2 ，它需要 4 块数据磁盘和 3 块校验磁盘。如果是 64 位数据宽度，则需要 64 块 数据磁盘和 7 块校验磁盘。可见， RAID2 的数据宽度越大，存储空间利用率越高，但同时需要的磁盘数量也越多。</p>
<p>　　海明码自身具备纠错能力，因此 RAID2 可以在数据发生错误的情况下对纠正错误，保证数据的安全性。它的数据传输性能相当高，设计复杂性要低于后面介绍的 RAID3 、 RAID4 和 RAID5 。</p>
<p>　　但是，海明码的数据冗余开销太大，而且 RAID2 的数据输出性能受阵列中最慢磁盘驱动器的限制。再者，海明码是按位运算， RAID2 数据重建非常耗时。由于这些显著的缺陷，再加上大部分磁盘驱动器本身都具备了纠错功能，因此 RAID2 在实际中很少应用，没有形成商业产品，目前主流存储磁盘阵列均不提供 RAID2 支持。</p>
<p><img src="http://www.hack520.com/images/2017/20170621112045235.png" alt="RAID" loading="lazy"><br>图 4 RAID2 ：海明码校验</p>
<p><strong>4.RAID3</strong></p>
<p>　　RAID3 （图 5 ）是使用专用校验盘的并行访问阵列，它采用一个专用的磁盘作为校验盘，其余磁盘作为数据盘，数据按位可字节的方式交叉存储到各个数据盘中。RAID3 至少需要三块磁盘，不同磁盘上同一带区的数据作 XOR 校验，校验值写入校验盘中。 RAID3 完好时读性能与 RAID0 完全一致，并行从多个磁盘条带读取数据，性能非常高，同时还提供了数据容错能力。向 RAID3 写入数据时，必须计算与所有同条带的校验值，并将新校验值写入校验盘中。一次写操作包含了写数据块、读取同条带的数据块、计算校验值、写入校验值等多个操作，系统开销非常大，性能较低。</p>
<p>　　如果 RAID3 中某一磁盘出现故障，不会影响数据读取，可以借助校验数据和其他完好数据来重建数据。假如所要读取的数据块正好位于失效磁盘，则系统需要读取所有同一条带的数据块，并根据校验值重建丢失的数据，系统性能将受到影响。当故障磁盘被更换后，系统按相同的方式重建故障盘中的数据至新磁盘。</p>
<p>　　RAID3 只需要一个校验盘，阵列的存储空间利用率高，再加上并行访问的特征，能够为高带宽的大量读写提供高性能，适用大容量数据的顺序访问应用，如影像处理、流媒体服务等。目前， RAID5 算法不断改进，在大数据量读取时能够模拟 RAID3 ，而且 RAID3 在出现坏盘时性能会大幅下降，因此常使用 RAID5 替代 RAID3 来运行具有持续性、高带宽、大量读写特征的应用。</p>
<p><img src="http://www.hack520.com/images/2017/20170621112045398.png" alt="RAID" loading="lazy"><br>图5 RAID3 ：带有专用位校验的数据条带</p>
<p><strong>5.RAID4</strong></p>
<p>　　RAID4 与 RAID3 的原理大致相同，区别在于条带化的方式不同。 RAID4 （图 6 ）按照 块的方式来组织数据，写操作只涉及当前数据盘和校验盘两个盘，多个 I/O 请求可以同时得到处理，提高了系统性能。 RAID4 按块存储可以保证单块的完整性，可以避免受到其他磁盘上同条带产生的不利影响。</p>
<p>　　RAID4 在不同磁盘上的同级数据块同样使用 XOR 校验，结果存储在校验盘中。写入数据时， RAID4 按这种方式把各磁盘上的同级数据的校验值写入校验 盘，读取时进行即时校验。因此，当某块磁盘的数据块损坏， RAID4 可以通过校验值以及其他磁盘上的同级数据块进行数据重建。</p>
<p>　　RAID4 提供了 非常好的读性能，但单一的校验盘往往成为系统性能的瓶颈。对于写操作， RAID4 只能一个磁盘一个磁盘地写，并且还要写入校验数据，因此写性能比较差。而且随着成员磁盘数量的增加，校验盘的系统瓶颈将更加突出。正是如上这些限制和不足， RAID4 在实际应用中很少见，主流存储产品也很少使用 RAID4 保护。</p>
<p><img src="http://www.hack520.com/images/2017/20170621112045507.png" alt="RAID" loading="lazy"><br>图6 RAID4 ：带有专用块级校验的数据条带</p>
<p><strong>6.RAID5</strong></p>
<p>　　 RAID5 应该是目前最常见的 RAID 等级，它的原理与 RAID4 相似，区别在于校验数据分布在阵列中的所有磁盘上，而没有采用专门的校验磁盘。对于数据和校验数据，它们的写操作可以同时发生在完全不同的磁盘上。因此， RAID5 不存在 RAID4 中的并发写操作时的校验盘性能瓶颈问题。另外， RAID5 还具备很好的扩展性。当阵列磁盘 数量增加时，并行操作量的能力也随之增长，可比 RAID4 支持更多的磁盘，从而拥有更高的容量以及更高的性能。</p>
<p>　　RAID5 （图 7）的磁盘上同时存储数据和校验数据，数据块和对应的校验信息存保存在不同的磁盘上，当一个数据盘损坏时，系统可以根据同一条带的其他数据块和对应的校验数据来重建损坏的数据。与其他 RAID 等级一样，重建数据时， RAID5 的性能会受到较大的影响。</p>
<p>　　RAID5 兼顾存储性能、数据安全和存储成本等各方面因素，它可以理解为 RAID0 和 RAID1 的折中方案，是目前综合性能最佳的数据保护解决方案。 RAID5 基本上可以满足大部分的存储应用需求，数据中心大多采用它作为应用数据的保护方案。</p>
<p><img src="http://www.hack520.com/images/2017/20170621112045620.png" alt="RAID" loading="lazy"><br>图7 RAID5 ：带分散校验的数据条带</p>
<p><strong>7.RAID6</strong></p>
<p>　　前面所述的各个 RAID 等级都只能保护因单个磁盘失效而造成的数据丢失。如果两个磁盘同时发生故障，数据将无法恢复。 RAID6 （如图 8 ）引入双重校验的概念，它可以保护阵列中同时出现两个磁盘失效时，阵列仍能够继续工作，不会发生数据丢失。 RAID6 等级是在 RAID5 的基础上为了进一步增强数据保护而设计的一种 RAID 方式，它可以看作是一种扩展的 RAID5 等级。</p>
<p>　　RAID6 不仅要支持数据的恢复，还要支持校验数据的恢复，因此实现代价很高，控制器的设计也比其他等级更复杂、更昂贵。 RAID6 思想最常见的实现方式是采用两个独立的校验算法，假设称为 P 和 Q ，校验数据可以分别存储在两个不同的校验盘上，或者分散存储在所有成员磁盘中。当两个磁盘同时失效时，即可通过求解两元方程来重建两个磁盘上的数据。</p>
<p>　　RAID6 具有快速的读取性能、更高的容错能力。但是，它的成本要高于 RAID5 许多，写性能也较差，并有设计和实施非常复杂。因此， RAID6 很少得到实际应用，主要用于对数据安全等级要求非常高的场合。它一般是替代 RAID10 方案的经济性选择。</p>
<p><img src="http://www.hack520.com/images/2017/20170621112045706.png" alt="RAID" loading="lazy"><br>图8 RAID6 ：带双重分散校验的数据条带</p>
<p><strong>4.3 RAID 组合等级</strong></p>
<p>　　标准 RAID 等级各有优势和不足。自然地，我们想到把多个 RAID 等级组合起来，实现优势互补，弥补相互的不足，从而达到在性能、数据安全性等指标上更高的 RAID 系统。目前在业界和学术研究中提到的 RAID 组合等级主要有 RAID00 、 RAID01 、 RAID10 、 RAID100 、 RAID30 、 RAID50 、 RAID53 、 RAID60 ，但实际得到较为广泛应用的只有 RAID01 和 RAID10 两个等级。当然，组合等级的实现成本一般都非常昂贵，只是在 少数特定场合应用。 [12]</p>
<p><strong>1.RAID00</strong></p>
<p>　　简单地说， RAID00 是由多个成员 RAID0 组成的高级 RAID0 。它与 RAID0 的区别在于， RAID0 阵列替换了原先的成员磁盘。可以把 RAID00 理解为两层条带化结构的磁盘阵列，即对条带再进行条带化。这种阵列可以提供更大的存储容量、更高的 I/O 性能和更好的 I/O 负均衡。</p>
<p><strong>2. RAID01 和 RAID10</strong></p>
<p>　　一些文献把这两种 RAID 等级看作是等同的，本文认为是不同的。 RAID01 是先做条带化再作镜像，本质是对物理磁盘实现镜像；而 RAID10 是先做镜像再作条带化，是对虚拟磁盘实现镜像。相同的配置下，通常 RAID01 比 RAID10 具有更好的容错能力，原理如图 9 所示。</p>
<p>　　RAID01 兼备了 RAID0 和 RAID1 的优点，它先用两块磁盘建立镜像，然后再在镜像内部做条带化。 RAID01 的数据将同时写入到两个磁盘阵列中，如果其中一个阵列损坏，仍可继续工作，保证数据安全性的同时又提高了性能。 RAID01 和 RAID10 内部都含有 RAID1 模式，因此整体磁盘利用率均仅为 50% 。</p>
<p><img src="http://www.hack520.com/images/2017/20170621112045783.png" alt="RAID" loading="lazy"><br><img src="http://www.hack520.com/images/2017/20170621112045812.png" alt="RAID" loading="lazy"><br>图 9 典型的 RAID01 （上）和 RAID10 （下）模型</p>
<p><strong>3.RAID100</strong></p>
<p>　　通常看作 RAID 1+0+0 ，有时也称为 RAID 10+0 ，即条带化的 RAID10 。原理如图 10 所示。 RAID100 的缺陷与 RAID10 相同，任意一个 RAID1 损坏一个磁盘不会发生数据丢失，但是剩下的磁盘存在单点故障的危险。最顶层的 RAID0 ，即条带化任务，通常由软件层来完成。</p>
<p>　　RAID100 突破了单个 RAID 控制器对物理磁盘数量的限制，可以获得更高的 I/O 负载均衡， I/O 压力分散到更多的磁盘上，进一步提高随机读性能，并有效降低热点盘故障风险。因此， RAID100 通常是大数据库的最佳选择。</p>
<p><img src="http://www.hack520.com/images/2017/2017062111204647.png" alt="RAID" loading="lazy"><br>图10 典型的 RAID100 模型</p>
<p><strong>4.RAID30 （ RAID53 ）、 RAID50 和 RAID60</strong></p>
<p>　　这三种 RAID 等级与 RAID00 原理基本相同，区别在于成员 “ 磁盘 ” 换成了 RAID3 、 RAID5 和 RAID6 ，分别如图 11 、 12 、 13 所示。其中， RAID30 通常又被称为 RAID53[13] 。其实，可把这些等级 RAID 统称为 RAID X0 等级， X 可为标准 RAID 等级，甚至组合等级（如 RAID100 ）。利用多层 RAID 配置，充分利用 RAID X 与 RAID0 的优点，从而获得在存储容量、数据安全性和 I/O 负载均衡等方面的大幅性能提升。</p>
<p><img src="http://www.hack520.com/images/2017/20170621112046191.png" alt="RAID" loading="lazy"><br>图11 典型的 RAID50 模型</p>
<p><img src="http://www.hack520.com/images/2017/20170621112046378.png" alt="RAID" loading="lazy"><br>图12 典型的 RAID50 模型</p>
<p><img src="http://www.hack520.com/images/2017/20170621112046473.png" alt="RAID" loading="lazy"><br>图13 典型的 RAID60 模型</p>
<p><strong>4.4 非标准 RAID 等级</strong></p>
<p>　　虽然标准 RAID 和组合 RAID 在具体实现上存在一定程度的不同，但与标准规范是保持一致或兼容的。然而除此之外，一些存储厂商还实现了非标准的 RAID 等级，往往都是公司私有的产品。这里简单介绍几个非标准 RAID 等级。 [14]</p>
<p><strong>1.RAID7</strong></p>
<p>　　RAID7 的全称是最优化的异步高 I/O 速率和高数据传输率，它与其他 RAID 等级有着明显区别。它不仅仅是一种技术，它还是一个独立存储计算机，自身带的操作系统和管理工具，完全可以独立运行。</p>
<p>　　RAID7 的存储计算机操作系统是一套实时事件驱动操作系统，其主要用来进行系统初始化和安排 RAID7 磁盘阵列的所有数据传输，并把它们转换到相应的物理存储驱动器上。 RAID7 通过自身系统中的专用控制板来控制读写速度，存储计算机操作系统可使主机 I/O 传递性能达到最佳。如果一个磁盘出现故障， RAID7 还能够自动执行恢复操作，并可管理备份磁盘的重建过程。</p>
<p>　　RAID7 突破了以往 RAID 标准的技术架构，采用了非同步访问，极大地减轻了数据写瓶颈，提高了 I/O 速度。 RAID7 系统内置实时操作系统还可自动对主机发送过来的读写指令进行优化处理，以智能化方式将可能被读取的数据预先读入快速缓存中，从而大大减少了磁头的转动次数，提高存储系统的 I/O 速度。</p>
<p>　　RAID7 可帮助用户有效地管理日益庞大的数据存储系统，并使系统的运行效率大大提高，满足不同用户的存储需求。但是， RAID7 的成本比其他 RAID 等级要高许多。另外， RAID7 已被某公司注册为商标，目前仅有一家公司提供 RAID7 的产品，用户没有更多的选择。技术封闭，缺乏主流专业存储厂商的参与和研发严重制约了 RAID7 的发展。</p>
<p><strong>2.RAID-DP</strong></p>
<p>　　按照 SNIA 最新的 RAID6 定义 [15] ，双重数据校验的磁盘阵列都可归为 RAID6 等级。 NetApp 公司按照 RAID6 的定义实现了 RAID-DP ，使用双重的数据校验来保护数据，可以保证两块磁盘同时损坏的情况下不发生数据丢失。与该公司的 RAID4 实现对比，传统的 RAID6 实现会致使系统性能损失 30% 左右，而 RAID-DP 的性能下降低于 2% 。上层文件系统的请求首先写入后端的 NVRAM 中，确保即使在 掉电的情况下也不会有任何数据丢失。因此，数据块不会立即更新，当执行新来的写操作，会对写操作进行聚集，然后存储控制器尝试一次性写入包括校验数据在内的整个数据条带。 RAID-DP 提供了比 RAID10 更好的数据保护，性能却不低于 RAID10 。对于相同大小的 RAID 组，在大多数情况下， RAID-DP 没有受到传统 RAID6 即时更新数据块的挑战，并提供更多的磁盘进行读写。它甚至允许磁盘固件实时更新而不发生任何中断。</p>
<p><strong>3.RAID1.5</strong></p>
<p>　　这是 HighPoint 公司的 RAID 产品，有时也被错误地称为 RAID15 。 RAID1.5 仅使用两个磁盘驱动器同时进行数据条带化和镜像，数据可以同时从两块磁盘进行读取。这其中的大部分工作都由硬件来完成，而非驱动程序。 Linux 、 Solaris 等操作系统实现的 RAID1 也可以实现同时从两块磁盘进行读取数据，因此 RAID1.5 并不优于传统的　RAID1。</p>
<p><strong>4. RAID5E 、 RAID5EE 和 RAID6E</strong></p>
<p>　　这种概念首次在 IBM ServerRAID 中被提出， E 是 Enhanced 的首字母。它们分别是对 RAID5 和 RAID6 的增强，增加了热冗余磁盘驱动器，冗余磁盘与其他磁盘一块进行数据块编排。这种设计使得 I/O 可以分散到包括热冗余在内的所在磁盘，从而减小单块磁盘的 I/O 带宽， 提供更高的性能。然而，热冗余磁盘不能够被多个阵列共享。</p>
<p>　　在实现中，实际上不存在专用的热冗余磁盘，就像 RAID5 和 RAID6 中没有专用的校验磁盘一样，所有的冗余数据块分布在所的成员磁盘中。例如，一个 10 块磁盘的 RAID5E ，包括 80% 数据块、 10% 的冗余数据块和 10% 的校验数据。对于 RAID5E 和 RAID6E ，冗余数据块位于阵列尾部，而 RAID5EE 则分布在整个 RAID 中。如果 RAID5E/5EE 中发生一块磁盘损坏，则系统会自动降级并重建至标准的 RAID5 。这一过程中， I/O 操作非常密集，并且需要花费大量时间，从几个小时至甚至几天，根据阵列的具体配置而异。当损坏磁盘被替换后，系统则又会自动升级并重建至原先的 RAID5E/5EE ，同时非常耗时。在上面的重建过程中，数据没有冗余保护。由于系统升级和降级时， I/O 活动密集且所需时间过长，因此实际应用中成员磁盘数据限制在 4~8 块。一旦超过 8 块磁盘，由于损坏磁盘的重建耗时和重建中发生第二块磁盘损坏造成的数据丢失， RAID5E/5EE 所获得的性能提升和其他获益都将严重降低。</p>
<p><strong>5.RAID S (Parity RAID)</strong></p>
<p>　　 RAID S 是 EMC 公司的 Symmetrix 存储系统所使用的条带化校验 RAID 。该系统中，每个卷位于单独的物理磁盘上，多个卷组合进行数据校验。 EMC 最早引入了 RAID S 概念，后来改名为 Parity RAID 并应用于 Symmetrix DMX 平台。 EMC 现在也为 Symmetrix DMX 提供标准的 RAID5 ， RAID S 已经不再 EMC 产品中使用。</p>
<p><strong>6.Intel Matrix RAID</strong></p>
<p>　　 Matrix RAID 是 Intel ICH6R 和后继的南桥芯片的一个重要特征，可以通过 RAID <a href="http://www.hack520.com/topic/bios/">BIOS</a> 进行访问。它使用两块磁盘或者控制器能支持的最多磁盘，它的显著特征是允许 RAID0 、 1 、 5 、 10 多种数据卷混合共存，每块磁盘的指定部分分配给相应的 RAID 卷。 Matrix RAID 主要用于改善性能和数据完整性，实际应用中可以将操作系统应用于小的 RAID0 ，而大的 RAID1 存储关键数据以及用户数据。海量的流媒体数据容易发生数据丢失，可以考虑使用这种 RAID 。 linux 的 MD RAID 也可以实现类似的功能。</p>
<p><strong>7.Linux MD RAID 10</strong></p>
<p>　　RAID 10 是 Linux 内核所支持的软 RAID 等级之一，它还支持 RAID0、1、3、4、5、6 等级别。软 RAID 驱动程序通常通过构造典型的 RAID1+0 阵开来实现 RAID10 ， 2.6.9 以后的内核也可作为单独的级别来实现。</p>
<p>　　MD RAID10 支持重复数据块的近布局和远布局两种模式。近布局与标准 RAID10 相同，镜像数据块相邻存储。对于 n 重镜像的 k 路条带，不要求 k 为 n 的 整倍数。两重镜像的2、3、4路条带的 MD RAID10 分布相当于 RAID1 、 RAID-1E 和 RAID10 。远布局模式下，所有磁盘被划分为 f （ f= 镜像数）个数据存储区，重复数据块相对于原始数据块具有一个磁盘和若干依偏移的距离，即保存在下一个磁盘对应存储区的偏移位置。这种设计能够提高镜像阵列的条带性能，有效提高顺序和随机读性能，但对写性能没有显著提升。许多应该通常具有读密集而写稀疏的特点， RAID10 适合此类数据应用。需要指出的是，近布局和远布局两种模式可以同时使用，这种情况下将有 n * f 个数据副本。</p>
<p><strong>8. IBM ServerRAID 1E</strong></p>
<p>　　 IBM 公司的 ServerRAID 阵列卡系列支持任意数量驱动器上的两路镜像，多个磁盘对数据块进行轮转镜像。这种配置能够对不相邻磁盘驱动器发生的损坏进行容错，其他的存储系统也支持这种模式，比如 SUN 公司的 StorEdge T3 。</p>
<p><strong>9.RAID-K</strong></p>
<p>　　 Kaleidescape 公司实现了一种称为 RAID-K[16] 的 RAID 类型。 RAID-K 与 RAID4 相似，但不对文件数据进行块级的条带化处理，它企图将整个电影或音乐集合完整地存储在单个磁盘上。另外，它的冗余校验信息可存储在多个磁盘上，从而适应由多个容量不同的磁盘所组成的逻辑磁盘。而且，冗余数据包含比校验信息更多的数据，用于获取更高的容错性。这些特征可以为影像、音乐提供更好的性能，增加数据存储的安全性。 RAID-K 还可以允许用户以增量方式扩充存储容量，能够增加容量更大的磁盘，甚至它还可以增加包含数据（仅限影像和音乐）的磁盘。 RAID-K 会自动把这些磁盘组建成 RAID-K 阵列和 Kaleidescape 文件系统。</p>
<p><strong>10. RAID-Z</strong></p>
<p>　　 RAID-Z 是集成在 SUN 公司 ZFS 文件系统中的一种与 RAID5 相似的 RAID 模式。利用写时复制策略， RAID-Z 避免了 RAID5 的写操作困境（即更新数据同时需要更新校验数据），它不用新数据覆盖旧数据，而是把新数据写到新位置并自动更新数据指针。对于小的写操作，仅仅执行完全的写条带操作，有效避免 “ 读取－更改－写回 ” 的操作需求。另外，还可以直接对小写操作使用镜像替换校验进行保护，因为文件系统了解下层存储结构，可以在必要时分配 额外存储空间。 ZFS 还实现了 RAID-Z2 ，提供类似与 RAID6 的双重校验保护能力，可以保证不块磁盘发生损坏而不发生数据丢失。根据 2009 年 6 月的更新， ZFS 加入了三重校验 RAID 支持，或许称为 RAID-Z3 。</p>
<h3 id="五、实现方式"><a href="#五、实现方式" class="headerlink" title="五、实现方式"></a>五、实现方式</h3><p>　　通常计算机功能既可以由硬件来实现，也可以由软件来实现。对于 RAID 系统而言，自然也不例外，它可以采用软件方式实现，也可以采用硬件方式实现，或者采用软硬结合的方式实现。 [3][8]</p>
<p><strong>5.1 软 RAID</strong></p>
<p>　　软 RAID 没有专用的控制芯片和 I/O 芯片，完全由操作系统和 CPU 来实现所的 RAID 的功能。现代操作系统基本上都提供软 RAID 支持，通过在磁盘设备驱动程序上添加一个软件层，提供一个物理驱动器与逻辑驱动器之间的抽象层。目前，操作系统支持的最常见的 RAID 等级有 RAID0 、 RAID1 、 RAID10 、 RAID01 和 RAID5 等。比如， Windows Server 支持 RAID0 、 RAID1 和 RAID5 三种等级， Linux 支持 RAID0 、 RAID1 、 RAID4 、 RAID5 、 RAID6 等， Mac OS X Server 、 FreeBSD 、 NetBSD 、 OpenBSD 、 Solaris 等操作系统也都支持相应的 RAID 等级。</p>
<p>　　软 RAID 的配置管理和<a href="http://www.hack520.com/topic/data-recovery/">数据恢复</a>都比较简单，但是 RAID 所有任务的处理完全由 CPU 来完成，如计算校验值，所以执行效率比较低下，这种方式需要消耗大量的运算资源，支持 RAID 模式 较少，很难广泛应用。</p>
<p>　　软 RAID 由操作系统来实现，因此系统所在分区不能作为 RAID 的逻辑成员磁盘，软 RAID 不能保护系统盘 D 。对于部分操作系统而言， RAID 的配置信息保存在系统信息中，而不是单独以文件形式保存在磁盘上。这样当系统意外崩溃而需要重新安装时， RAID 信息就会丢失。另外，磁盘的容错技术并不等于完全支持在线更换、热插拔或热交换，能否支持错误磁盘的热交换与操作系统实现相关，有的操作系统热交换。</p>
<p><strong>5.2 硬 RAID</strong></p>
<p>　　硬 RAID 拥有自己的 RAID 控制处理与 I/O 处理芯片，甚至还有阵列缓冲，对 CPU 的占用率和整体性能是三类实现中最优的，但实现成本也最高的。硬 RAID 通常都支持热交换技术，在系统运行下更换故障磁盘。<br>　　<br>　　硬 RAID 包含 RAID 卡和主板上集成的 RAID 芯片， 服务器平台多采用 RAID 卡。 RAID 卡由 RAID 核心处理芯片（ RAID 卡上的 CPU ）、端口、缓存和电池 4 部分组成。其中，端口是指 RAID 卡支持的磁盘接口类型，如 IDE/ATA 、 SCSI 、 SATA 、 SAS 、 FC 等接口。</p>
<p><strong>5.3 软硬混合 RAID</strong></p>
<p>　　软 RAID 性能欠佳，而且不能保护系统分区，因此很难应用于桌面系统。而硬 RAID 成本非常昂贵，不同 RAID 相互独立，不具互操作性。因此，人们采取软件与硬件结合的方式来实现 RAID ，从而获得在性能和成本上的一个折中，即较高的性价比。</p>
<p>　　这种 RAID 虽然采用了处理控制芯片，但是为了节省成本，芯片往往比较廉价且处理能力较弱， RAID 的任务处理大部分还是通过固件驱动程序由 CPU 来完成。</p>
<h3 id="六、RAID-应用选择"><a href="#六、RAID-应用选择" class="headerlink" title="六、RAID 应用选择"></a>六、RAID 应用选择</h3><p>　　RAID 等级的选择主要有三个因素，即数据可用性、 I/O 性能和成本。　目前，在实际应用中常见的主流 RAID 等级是 RAID0 ， RAID1 ， RAID3 ， RAID5 ， RAID6 和 RAID10 ，它们之间的技术对比情况如表 1 所示。如果不要求可用性，选择 RAID0 以获得高性能。如果可用性和性能是重要的，而成本不是一个主要因素，则根据磁盘数量选择 RAID1 。如果可用性，成本和性能都同样重要，则根据一般的数据传输和磁盘数量选择 RAID3 或 RAID5 。在实际应用中，应当根据用户的数据应用特点和具体情况，综合考虑可用性、性能和成本来选择合适的 RAID 等级。 [10]</p>
<p><strong>表1 主流 RAID 等级技术对比</strong></p>
<table>
<thead>
<tr>
<th><strong>RAID</strong> <strong>等级</strong></th>
<th><strong>RAID0</strong></th>
<th><strong>RAID1</strong></th>
<th><strong>RAID3</strong></th>
<th><strong>RAID5</strong></th>
<th><strong>RAID6</strong></th>
<th><strong>RAID10</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>别名</strong></td>
<td>条带</td>
<td>镜像</td>
<td>专用奇偶校验条带</td>
<td>分布奇偶校验条带</td>
<td>双重奇偶校验条带</td>
<td>镜像加条带</td>
</tr>
<tr>
<td><strong>容错性</strong></td>
<td>无</td>
<td>有</td>
<td>有</td>
<td>有</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td><strong>冗余类型</strong></td>
<td>无</td>
<td>有</td>
<td>有</td>
<td>有</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td><strong>热备份选择</strong></td>
<td>无</td>
<td>有</td>
<td>有</td>
<td>有</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td><strong>读性能</strong></td>
<td>高</td>
<td>低</td>
<td>高</td>
<td>高</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td><strong>随机写性能</strong></td>
<td>高</td>
<td>低</td>
<td>低</td>
<td>一般</td>
<td>低</td>
<td>一般</td>
</tr>
<tr>
<td><strong>连续写性能</strong></td>
<td>高</td>
<td>低</td>
<td>低</td>
<td>低</td>
<td>低</td>
<td>一般</td>
</tr>
<tr>
<td><strong>需要磁盘数</strong></td>
<td>n≥1</td>
<td>2n (n≥1)</td>
<td>n≥3</td>
<td>n≥3</td>
<td>n≥4</td>
<td>2n(n≥2)≥4</td>
</tr>
<tr>
<td><strong>可用容量</strong></td>
<td>全部</td>
<td>50%</td>
<td>(n-1)/n</td>
<td>(n-1)/n</td>
<td>(n-2)/n</td>
<td>50%</td>
</tr>
</tbody></table>
<p>　　近年来，企业的信息化水平不断发展，数据已经取代计算成为了信息计算的中心，信息数据的安全性就显得尤为至关重要。随着存储技术的持续发展， RAID 技术在成本、性能、数据安全性等诸多方面都将优于其他存储技术，例如磁带库、光盘库等，大多数企业数据中心首选 RAID 作为存储系统。当前存储行业的知名存储厂商均提供全线的磁盘阵列产品，包括面向个人和中小企业的入门级的低端 RAID 产品，面向大中型企业的中高端 RAID 产品。这些存储企业包括了国内外的主流存储厂商，如 EMC 、 IBM 、 HP 、 SUN 、 NetApp 、 NEC 、 HDS 、 H3C 、 Infortrend 、华赛等。另外，这些厂商在提供存储硬件系统的同时，还往往提供非常全面的软件系统，这也是用户采购产品的一个主要参考因素。</p>
<p>　　不同的存储厂商的产品在技术、成本、性能、管理、服务等方面各有优势和不足。用户选择 RAID 的原则是：在成本预算内，满足数据存储需求的前提下，选择最优的存储厂商解决方案。因此，首先用户需要对存储需求作深入的调研和分析，并给出成本预算，然后对众多存储厂商的解决方案进行分析和对比，最后选择出一个综合最优的存储方案。其中，存储产品的扩展性和存储厂家的售后服务需要重点考察，存储需求（如容量、性能）可能会不断升级，存储产品发生故障后的维修和支持保障，这些都要未雨先缪。</p>
<h3 id="七、总结与展望"><a href="#七、总结与展望" class="headerlink" title="七、总结与展望"></a>七、总结与展望</h3><p>　　回顾 RAID 发展历史，从首次提出概念至今已有二十多年。在此期间，整个社会信息化水平不断提高，数据呈现爆炸式增长趋势，数据取代计算成为信息计算的中心。这促使人们对数据愈加重视，不断追求海量存储容量、高性能、高 安全性、高可用性、可扩展性、可管理性等等。 RAID 技术在这样强大的存储需求推动下不断发展进步，时至今日技术已经非常成熟，在各种数据存储系统中得到了十分广泛的应用。<br>　　<br>　　正是由于技术发展的成熟， RAID 技术的未来发展已经不被广泛看好，甚至预言在不久的将来会停止发展，称之为 “ 僵尸技术 ” ，即虽然宣布死亡，但在很长一段时间内仍会继续发挥巨大的价值。<br>　　<br>　　然而，当前的 RAID 技术仍然存在诸多不足，各种 RAID 模式都存在自身的缺陷，主要集中在读写性能、实现成本、恢复时间窗口、多磁盘损坏等方面。因此， RAID 技术显然还存在很大的提升空间，具有很大的发展潜力。近年来新出现的 RAID 模式以及学术研究显示了其未来的发展趋势，包括分布式校验、多重校验、混合 RAID 模式、水平和垂直条带、基于固态内存 RAID 、网络校验等等。特别指出的是，多核 CPU 和 GPU 是当前的热点技术，它们大幅提升了主机的可用计算资源，这可以解决 RAID 对计算资源的消耗问题，软 RAID 很可能将重新成为热点。另外，存储硬件性能的提升、存储虚拟化技术、重复数据删除技术以及其他存储技术都会极大地推动 RAID 技术的进一步创新和发展。</p>
]]></content>
      <categories>
        <category>RAID</category>
      </categories>
      <tags>
        <tag>RAID</tag>
      </tags>
  </entry>
  <entry>
    <title>中小型园区/分支出口综合配置举例</title>
    <url>/2019/07/15/66/</url>
    <content><![CDATA[<p>原文链接：<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000098180&amp;partNo=10012#dc_cfg_campus_002">http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000098180&amp;partNo=10012#dc_cfg_campus_002</a></p>
<h1 id="1-中小型园区-分支出口综合配置举例"><a href="#1-中小型园区-分支出口综合配置举例" class="headerlink" title="1  中小型园区/分支出口综合配置举例"></a><strong>1</strong>  中小型园区/分支出口综合配置举例</h1><h2 id="园区网出口简介"><a href="#园区网出口简介" class="headerlink" title="园区网出口简介"></a>园区网出口简介</h2><p>园区网出口一般位于企业网内部网络与外部网络的连接处，是内部网络与外部网络之间数据流的唯一出入口。对于中小型企业来说，考虑到企业网络建设的初期投资与长期运维成本，一般希望将多种业务部署在同一设备上。企业网络用户一般同时需要访问Internet和私网VPN，而对于中小型企业来说考虑到建设及维护成本问题，一般租用运营商Internet网络组建私网VPN。对于部分可靠性要求较高的园区网络，一般考虑部署两台出口路由器做冗余备份实现设备级可靠性，同时应用链路聚合、VRRP、主备路由等技术保证园区出口的可靠性。华为AR系列路由器配合华为S系列交换机是中小型园区网出口设备的理想解决方案。</p>
<ul>
<li>园区出口设备需要具备NAT Outbound及NAT Server的功能，实现私网地址和公网地址之间的转换，以满足用户访问Internet或者Internet用户访问内网服务器的需求。</li>
<li>园区出口设备需要具备通过Internet构建私网VPN的功能，以满足企业用户各个机构之间私网VPN互通的需求</li>
<li>园区出口设备需要具备数据加密传输的功能，以保证数据的完整性和机密性，保障用户业务传输的安全</li>
<li>中小型园区出口需要具备可靠性、安全性、低成本、易维护等特点。</li>
</ul>
<h2 id="配置注意事项"><a href="#配置注意事项" class="headerlink" title="配置注意事项"></a>配置注意事项</h2><ul>
<li>本配置案例适用于中小型企业园区/分支出口解决方案。</li>
<li>本配置案例仅涉及企业网络出口相关配置，涉及企业内网的相关配置请参见华为S系列园区交换机快速配置中的“中小园区组网场景”。</li>
</ul>
<h2 id="组网需求"><a href="#组网需求" class="headerlink" title="组网需求"></a>组网需求</h2><p>某企业总部和分支分别位于不同的城市，地域跨度较远，总部存在A、B两个不同的部门，分支只有一个部门。现在需要建设跨地域的企业园区网络，需要实现的需求如下：</p>
<ul>
<li>总部和分支都需要实现用户访问Internet的需求。总部划分为A、B两个部门，其中A部门的用户可以访问Internet，但是B部门的用户不能访问Internet；分支所有用户都可以访问Internet。</li>
<li>总部有Web服务器，对外提供WWW服务，外网用户可以访问内网服务器。</li>
<li>总部和分支之间需要通过Internet进行私网VPN互通，通信内容需要有安全保护。</li>
<li>总部园区出口可靠性要求较高，需要考虑链路级的可靠性和设备级的可靠性。</li>
<li>分支可以适当降低可靠性要求。</li>
</ul>
<a id="more"></a>



<h2 id="方案介绍"><a href="#方案介绍" class="headerlink" title="方案介绍"></a>方案介绍</h2><p>根据用户需求，可以给出如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000098180&partNo=10012#fig_dc_cfg_campus_002_01">图1-1</a>所示的综合配置解决方案，该方案具备层次化、模块化、冗余性、安全性的特点，适用于中小型企业/分支的园区网络部署。</p>
<p><strong>图1-1</strong>  中小型园区/分支出口综合配置组网图<br><img src="http://support.huawei.com/enterprise/product/images/4d904db9c09842ba9ca70b11b5eb11c9" alt="img" loading="lazy"></p>
<ul>
<li>在网络的接入层部署华为S2700&amp;S3700交换机（ACC1、ACC2、SwitchA），在网络的核心部署华为S5700交换机（CORE），在园区出口部署华为AR3200路由器（RouterA、RouterB、RouterC）。</li>
<li>总部采用双AR出口冗余备份方式，保证设备级的可靠性。分支部署一台AR路由器做出口。</li>
<li>总部核心交换机采用两台S5700交换机做堆叠，保证设备级的可靠性。</li>
<li>总部接入交换机与核心交换机之间以及核心交换机与出口路由器之间采用Eth-Trunk方式组网，保证链路级的可靠性。</li>
<li>总部每个部门业务划分到一个VLAN中，部门间的业务在核心交换机CORE上通过VLANIF三层互通。</li>
<li>总部核心交换机作为用户及服务器网关，部署DHCP Server为用户分配IP地址。</li>
<li>分支用户的网关直接部署在出口路由器上。</li>
<li>总部两个出口路由器之间部署VRRP，保证可靠性。</li>
<li>总部和分支之间通过Internet构建IPSec VPN进行私网互通，同时保证数据传输的安全性。</li>
<li>总部两台出口路由器和核心交换机之间部署OSPF，用于发布用户路由，便于后期扩容及维护。</li>
</ul>
<h2 id="配置思路"><a href="#配置思路" class="headerlink" title="配置思路"></a>配置思路</h2><p>采用如下思路部署中小型园区/分支出口综合配置举例：</p>
<ol>
<li><p>部署总部及分支园区内网</p>
<p>总部：部署堆叠、链路聚合，配置各VLAN及IP地址、部署DHCP Server，实现园区内网互通。部门内部通过接入层交换机进行二层互通，部门间通过核心交换机CORE上的VLANIF进行三层互通。</p>
<p>分支：配置接入层交换机及出口路由器的各接口VLAN及IP地址，部署DHCP Server，实现分支园区内网互通。</p>
</li>
<li><p>部署VRRP</p>
<p>为了保证总部核心交换机与两个出口路由器之间的可靠性，在两个出口路由器之间部署VRRP，VRRP的心跳报文经过核心交换机进行交互。RouterA为Master设备，RouterB为Backup设备。</p>
<p>为了防止总部RouterA上行链路故障的时候业务断流，将VRRP状态与RouterA的上行口进行联动，保证上行链路故障时VRRP进行快速倒换。</p>
</li>
<li><p>部署路由</p>
<p>为了引导各设备的上行流量，在总部核心交换机上配置一条缺省路由，下一跳指向VRRP的虚地址，在总部及分支的出口路由器上各配置一条缺省路由，下一跳指向运营商网络设备的对接地址（公网网关）。</p>
<p>为了引导总部两个出口路由器的回程流量，在两个出口路由器和核心交换机之间部署OSPF，核心交换机上将所有用户网段发布到OSPF里面，通告给两个出口路由器。</p>
<p>为了引导外网用户访问Web服务器的流量，需要在总部的运营商路由器上配置两条目的地址为服务器公网地址的静态路由，下一跳分别指向两个出口路由器的上行口IP地址。并且为了保证路由和VRRP同步切换，设置下一跳为RouterA的这条路由优先，当这条路由失效的时候下一跳指向RouterB的路由生效。</p>
</li>
<li><p>部署NAT Outbound</p>
<p>为了使内网用户访问Internet，在两台出口路由器的上行口配置NAT，实现私网地址和公网地址之间的转换。通过ACL匹配A部门的源IP地址，从而实现A部门的用户可以访问Internet，而B部门的用户不能访问Internet。</p>
</li>
<li><p>NAT Server</p>
<p>为了实现外网用户访问内网Web服务器，在两个出口路由器的上行口上配置NAT Server，实现服务器公网地址和私网地址之间的映射。</p>
</li>
<li><p>部署IPSec VPN</p>
<p>为了实现总部和分支之间进行私网VPN互通，在总部出口路由器和分支出口路由器之间部署IPSec VPN，通过Internet构建IPSec VPN，实现总部和分支之间的安全通信。</p>
</li>
</ol>
<p> 说明：</p>
<p>部署总部及分支园区内网所涉及的配置不在本例中给出，请参见华为S系列园区交换机快速配置中的“中小园区组网场景”。</p>
<h2 id="数据规划"><a href="#数据规划" class="headerlink" title="数据规划"></a>数据规划</h2><p>详细的数据规划如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000098180&partNo=10012#table_01">表1-1</a>、<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000098180&partNo=10012#table_02">表1-2</a>、<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000098180&partNo=10012#table_03">表1-3</a>所示。</p>
<p><strong>表1-1</strong>  链路聚合接口规划</p>
<table>
<thead>
<tr>
<th>设备</th>
<th>聚合接口</th>
<th>物理接口</th>
</tr>
</thead>
<tbody><tr>
<td>RouterA</td>
<td>Eth-trunk1</td>
<td>GE2/0/0GE2/0/1</td>
</tr>
<tr>
<td>RouterB</td>
<td>Eth-trunk1</td>
<td>GE2/0/0GE2/0/1</td>
</tr>
<tr>
<td>CORE</td>
<td>Eth-trunk1</td>
<td>GE0/0/1GE1/0/1</td>
</tr>
<tr>
<td>Eth-trunk2</td>
<td>GE0/0/2GE1/0/2</td>
<td></td>
</tr>
<tr>
<td>Eth-trunk3</td>
<td>GE0/0/3GE1/0/3</td>
<td></td>
</tr>
<tr>
<td>Eth-trunk4</td>
<td>GE0/0/4GE1/0/4</td>
<td></td>
</tr>
<tr>
<td>ACC1</td>
<td>Eth-trunk1</td>
<td>GE0/0/1GE0/0/2</td>
</tr>
<tr>
<td>ACC2</td>
<td>Eth-trunk1</td>
<td>GE0/0/1GE0/0/2</td>
</tr>
</tbody></table>
<p> 说明：</p>
<p>所有链路聚合采用LACP模式。</p>
<p><strong>表1-2</strong>  VLAN规划</p>
<table>
<thead>
<tr>
<th>设备</th>
<th>数据项</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>RouterA</td>
<td>Eth-trunk1.100：配置Dot1q终结子接口，终结VLAN100</td>
<td>用于和总部核心交换机CORE对接</td>
</tr>
<tr>
<td>RouterB</td>
<td>Eth-trunk1.100：配置Dot1q终结子接口，终结VLAN100</td>
<td>用于和总部核心交换机CORE对接</td>
</tr>
<tr>
<td>CORE</td>
<td>Eth-trunk1：Trunk类型，透传VLAN10</td>
<td>用于和总部部门A对接</td>
</tr>
<tr>
<td>Eth-trunk2：Trunk类型，透传VLAN20</td>
<td>用于和总部部门B对接</td>
<td></td>
</tr>
<tr>
<td>GE0/0/5：Access类型，缺省VLAN为VLAN30</td>
<td>用于连接总部Web服务器</td>
<td></td>
</tr>
<tr>
<td>Eth-trunk3：Trunk类型，透传VLAN100</td>
<td>用于和总部出口路由器RouterA对接</td>
<td></td>
</tr>
<tr>
<td>Eth-trunk4：Trunk类型，透传VLAN100</td>
<td>用于和总部出口路由器RouterB对接</td>
<td></td>
</tr>
<tr>
<td>ACC1</td>
<td>Eth-trunk1：Trunk类型，透传VLAN10</td>
<td>用于和总部CORE对接</td>
</tr>
<tr>
<td>Ethernet0/0/2：Access类型，缺省VLAN为VLAN10</td>
<td>用于连接总部A部门的PC1</td>
<td></td>
</tr>
<tr>
<td>ACC2</td>
<td>Eth-trunk1：Trunk类型，透传VLAN20</td>
<td>用于和总部CORE对接</td>
</tr>
<tr>
<td>Ethernet0/0/2：Access类型，缺省VLAN为VLAN20</td>
<td>用于连接总部B部门的PC3</td>
<td></td>
</tr>
<tr>
<td>RouterC</td>
<td>GE2/0/0.200：配置Dot1q终结子接口，终结VLAN200</td>
<td>用于连接分支接入交换机SwitchA</td>
</tr>
<tr>
<td>SwitchA</td>
<td>GE0/0/1：Trunk类型，透传VLAN200</td>
<td>用于连接分支出口路由器RouterC</td>
</tr>
<tr>
<td>Ethernet0/0/2：Access类型，缺省VLAN为VLAN200</td>
<td>用于连接分支PC5</td>
<td></td>
</tr>
</tbody></table>
<p><strong>表1-3</strong>  IP地址规划</p>
<table>
<thead>
<tr>
<th>设备</th>
<th>数据项</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>RouterA</td>
<td>GE1/0/0：202.10.1.2/24Eth-trunk1.100：10.10.100.2/24</td>
<td>GE1/0/0用于和运营商网络对接Eth-trunk1.100用于和总部核心交换机CORE对接</td>
</tr>
<tr>
<td>RouterB</td>
<td>GE1/0/0：202.10.2.2/24Eth-trunk1.100：10.10.100.3/24</td>
<td>-</td>
</tr>
<tr>
<td>CORE</td>
<td>VLANIF10：10.10.10.1/24VLANIF20：10.10.20.1/24VLANIF30：10.10.30.1/24VLANIF100：10.10.100.4/24</td>
<td>VLANIF10作为A部门的用户网关VLANIF20作为B部门的用户网关VLANIF30作为Web服务器的网关VLANIF100用于和出口路由器互联</td>
</tr>
<tr>
<td>Web服务器</td>
<td>IP地址：10.10.30.2/24默认网关：10.10.30.1</td>
<td>通过NAT Server 映射后的公网IP地址：202.10.100.3</td>
</tr>
<tr>
<td>PC1</td>
<td>IP地址：10.10.10.2/24默认网关：10.10.10.1</td>
<td>假设通过DHCP获取到的IP地址就是10.10.10.2/24</td>
</tr>
<tr>
<td>PC3</td>
<td>IP地址：10.10.20.2/24默认网关：10.10.20.1</td>
<td>假设通过DHCP获取到的IP地址就是10.10.20.2/24</td>
</tr>
<tr>
<td>RouterD</td>
<td>接口B，编号：GigabitEthernet1/0/0，IP地址：202.10.1.1/24接口C，编号：GigabitEthernet2/0/0，IP地址：202.10.2.1/24</td>
<td>该设备为运营商网络的设备，此处接口编号为假设，请以实际设备为准</td>
</tr>
<tr>
<td>RouterE</td>
<td>接口A，编号：GigabitEthernet1/0/0，IP地址：203.10.1.1/24</td>
<td>该设备为运营商网络的设备，此处接口编号为假设，请以实际设备为准</td>
</tr>
<tr>
<td>RouterC</td>
<td>GE1/0/0：203.10.1.2/24GE2/0/0.200：10.10.200.1/24</td>
<td>-</td>
</tr>
<tr>
<td>PC5</td>
<td>IP地址：10.10.200.2/24默认网关：10.10.200.1</td>
<td>假设通过DHCP获取到的IP地址就是10.10.200.2/24</td>
</tr>
</tbody></table>
<h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>配置总部核心交换机CORE和两个出口路由器之间互联的Eth-Trunk</li>
</ol>
<p>   # 配置核心交换机CORE。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HUAWEI&gt; system-view</span><br><span class="line">[HUAWEI] sysname CORE</span><br><span class="line">[CORE] interface eth-trunk 3</span><br><span class="line">[CORE-Eth-Trunk3] mode lacp</span><br><span class="line">[CORE-Eth-Trunk3] quit</span><br><span class="line">[CORE] interface eth-trunk 4</span><br><span class="line">[CORE-Eth-Trunk4] mode lacp</span><br><span class="line">[CORE-Eth-Trunk4] quit</span><br><span class="line">[CORE] interface gigabitethernet 0&#x2F;0&#x2F;3</span><br><span class="line">[CORE-GigabitEthernet0&#x2F;0&#x2F;3] eth-trunk 3</span><br><span class="line">[CORE-GigabitEthernet0&#x2F;0&#x2F;3] quit</span><br><span class="line">[CORE] interface gigabitethernet 1&#x2F;0&#x2F;3</span><br><span class="line">[CORE-GigabitEthernet1&#x2F;0&#x2F;3] eth-trunk 3</span><br><span class="line">[CORE-GigabitEthernet1&#x2F;0&#x2F;3] quit</span><br><span class="line">[CORE] interface gigabitethernet 0&#x2F;0&#x2F;4</span><br><span class="line">[CORE-GigabitEthernet0&#x2F;0&#x2F;4] eth-trunk 4</span><br><span class="line">[CORE-GigabitEthernet0&#x2F;0&#x2F;4] quit</span><br><span class="line">[CORE] interface gigabitethernet 1&#x2F;0&#x2F;4</span><br><span class="line">[CORE-GigabitEthernet1&#x2F;0&#x2F;4] eth-trunk 4</span><br><span class="line">[CORE-GigabitEthernet1&#x2F;0&#x2F;4] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置总部出口路由器RouterA。RouterB的配置与RouterA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Huawei&gt; system-view</span><br><span class="line">[Huawei] sysname RouterA</span><br><span class="line">[RouterA] interface eth-trunk 1</span><br><span class="line">[RouterA-Eth-Trunk1] undo portswitch</span><br><span class="line">[RouterA-Eth-Trunk1] mode lacp-static</span><br><span class="line">[RouterA-Eth-Trunk1] quit</span><br><span class="line">[RouterA] interface gigabitethernet 2&#x2F;0&#x2F;0</span><br><span class="line">[RouterA-GigabitEthernet2&#x2F;0&#x2F;0] eth-trunk 1</span><br><span class="line">[RouterA-GigabitEthernet2&#x2F;0&#x2F;0] quit</span><br><span class="line">[RouterA] interface gigabitethernet 2&#x2F;0&#x2F;1</span><br><span class="line">[RouterA-GigabitEthernet2&#x2F;0&#x2F;1] eth-trunk 1</span><br><span class="line">[RouterA-GigabitEthernet2&#x2F;0&#x2F;1] quit</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>配置各接口的所属VLAN及IP地址</li>
</ol>
<p>   # 配置核心交换机CORE。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CORE] vlan 100</span><br><span class="line">[CORE] quit</span><br><span class="line">[CORE] interface Eth-Trunk 3</span><br><span class="line">[CORE-Eth-Trunk3] port link-type trunk</span><br><span class="line">[CORE-Eth-Trunk3] port trunk allow-pass vlan 100</span><br><span class="line">[CORE-Eth-Trunk3] quit</span><br><span class="line">[CORE] interface Eth-Trunk 4</span><br><span class="line">[CORE-Eth-Trunk4] port link-type trunk</span><br><span class="line">[CORE-Eth-Trunk4] port trunk allow-pass vlan 100</span><br><span class="line">[CORE-Eth-Trunk4] quit</span><br><span class="line">[CORE] interface vlanif 100</span><br><span class="line">[CORE-Vlanif100] ip address 10.10.100.4 24</span><br><span class="line">[CORE-Vlanif100] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置总部出口路由器RouterA。RouterB的配置与RouterA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[RouterA] interface Eth-Trunk 1.100</span><br><span class="line">[RouterA-Eth-Trunk1.100] ip address 10.10.100.2 24</span><br><span class="line">[RouterA-Eth-Trunk1.100] dot1q termination vid 100</span><br><span class="line">[RouterA-Eth-Trunk1.100] arp broadcast enable     &#x2F;&#x2F;使能接口可以处理ARP广播报文功能；AR3200系列路由器V200R003C01及之后的版本默认已经使能了该功能，无需配置。</span><br><span class="line">[RouterA-Eth-Trunk1.100] quit</span><br><span class="line">[RouterA] interface gigabitethernet 1&#x2F;0&#x2F;0</span><br><span class="line">[RouterA-GigabitEthernet1&#x2F;0&#x2F;0] ip address 202.10.1.2 24</span><br><span class="line">[RouterA-GigabitEthernet1&#x2F;0&#x2F;0] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置分支出口路由器RouterC。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Huawei&gt; system-view</span><br><span class="line">[Huawei] sysname RouterC</span><br><span class="line">[RouterC] interface gigabitethernet 1&#x2F;0&#x2F;0</span><br><span class="line">[RouterC-GigabitEthernet1&#x2F;0&#x2F;0] ip address 203.10.1.2 24</span><br><span class="line">[RouterC-GigabitEthernet1&#x2F;0&#x2F;0] quit</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>部署VRRP。在总部两个出口路由器RouterA和RouterB之间配置VRRP，RouterA为VRRP的Master，RouterB为VRRP的Backup</li>
</ol>
<p>   # 配置RouterA。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[RouterA] interface Eth-Trunk 1.100</span><br><span class="line">[RouterA-Eth-Trunk1.100] vrrp vrid 1 virtual-ip 10.10.100.1</span><br><span class="line">[RouterA-Eth-Trunk1.100] vrrp vrid 1 priority 120</span><br><span class="line">[RouterA-Eth-Trunk1.100] vrrp vrid 1 track interface GigabitEthernet1&#x2F;0&#x2F;0 reduced 40</span><br><span class="line">[RouterA-Eth-Trunk1.100] quit</span><br><span class="line"> &#x2F;&#x2F;为了防止RouterA的上行链路中断的时候数据流发送至VRRP的Master以后不能继续上行，配置VRRP的状态和RouterA的上行口进行联动，保证RouterA上行链路中断的时候VRRP状态迅速倒换。</span><br></pre></td></tr></table></figure>

<p>   # 配置RouterB。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[RouterB] interface Eth-Trunk 1.100</span><br><span class="line">[RouterB-Eth-Trunk1.100] vrrp vrid 1 virtual-ip 10.10.100.1</span><br><span class="line">[RouterB-Eth-Trunk1.100] quit</span><br></pre></td></tr></table></figure>

<p>   配置完成后，RouterA和RouterB之间应该能建立VRRP的主备份关系，执行<strong>display vrrp</strong>命令可以看到RouterA和RouterB的VRRP状态。</p>
<p>   # 查看RouterA的VRRP状态为Master。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[RouterA] display vrrp</span><br><span class="line">  Eth-Trunk1.100 | Virtual Router 1</span><br><span class="line">    State : Master</span><br><span class="line">    Virtual IP : 10.10.100.1</span><br><span class="line">    Master IP : 10.10.100.2</span><br><span class="line">    PriorityRun : 120</span><br><span class="line">    PriorityConfig : 120</span><br><span class="line">    MasterPriority : 120</span><br><span class="line">    Preempt : YES   Delay Time : 0 s</span><br><span class="line">    TimerRun : 1 s</span><br><span class="line">    TimerConfig : 1 s</span><br><span class="line">    Auth type : NONE</span><br><span class="line">    Virtual MAC : 0000-5e00-0101</span><br><span class="line">    Check TTL : YES</span><br><span class="line">    Config type : normal-vrrp</span><br><span class="line">    Backup-forward : disabled</span><br><span class="line">    Track IF : GigabitEthernet1&#x2F;0&#x2F;0   Priority reduced : 40</span><br><span class="line">    IF state : UP</span><br><span class="line">    Create time : 2015-05-18 06:53:47 UTC-05:13</span><br><span class="line">    Last change time : 2015-05-18 06:54:14 UTC-05:13</span><br></pre></td></tr></table></figure>

<p>   # 查看RouterB的VRRP状态为Backup。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[RouterB] display vrrp</span><br><span class="line">  Eth-Trunk1.100 | Virtual Router 1</span><br><span class="line">    State : Backup</span><br><span class="line">    Virtual IP : 10.10.100.1</span><br><span class="line">    Master IP : 10.10.100.2</span><br><span class="line">    PriorityRun : 100</span><br><span class="line">    PriorityConfig : 100</span><br><span class="line">    MasterPriority : 120</span><br><span class="line">    Preempt : YES   Delay Time : 0 s</span><br><span class="line">    TimerRun : 1 s</span><br><span class="line">    TimerConfig : 1 s</span><br><span class="line">    Auth type : NONE</span><br><span class="line">    Virtual MAC : 0000-5e00-0101</span><br><span class="line">    Check TTL : YES</span><br><span class="line">    Config type : normal-vrrp</span><br><span class="line">    Backup-forward : disabled</span><br><span class="line">    Create time : 2015-05-18 06:53:52 UTC-05:13</span><br><span class="line">    Last change time : 2015-05-18 06:57:12 UTC-05:13</span><br></pre></td></tr></table></figure>



<ol start="4">
<li><p>部署路由</p>
<ol>
<li>部署缺省路由，用于引导各个设备的上行流量</li>
</ol>
</li>
</ol>
<pre><code>  \# 在核心交换机CORE上配置一条缺省路由，下一跳指向VRRP的虚地址。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[CORE] ip route-static 0.0.0.0 0.0.0.0 10.10.100.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;

  \# 在总部及分支出口路由器上各配置一条缺省路由，下一跳指向运行商网络设备的对接地址（公网网关）。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterA] ip route-static 0.0.0.0 0.0.0.0 202.10.1.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterB] ip route-static 0.0.0.0 0.0.0.0 202.10.2.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterC] ip route-static 0.0.0.0 0.0.0.0 203.10.1.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
<ol start="2">
<li>部署OSPF。在总部两个出口路由器RouterA、RouterB以及总部核心交换机CORE之间部署OSPF，用于两个出口路由器RouterA和RouterB学习用户网段的回程路由</li>
</ol>
<pre><code>  \# 配置总部出口路由器RouterA。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterA] ospf 1 router-id 10.1.1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-ospf-1] area 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-ospf-1-area-0.0.0.0] network 10.10.100.0 0.0.0.255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-ospf-1-area-0.0.0.0] quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;

  \# 配置总部出口路由器RouterB。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterB] ospf 1 router-id 10.2.2.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterB-ospf-1] area 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterB-ospf-1-area-0.0.0.0] network 10.10.100.0 0.0.0.255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterB-ospf-1-area-0.0.0.0] quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;

  \# 配置总部核心交换机CORE。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[CORE] ospf 1 router-id 10.3.3.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[CORE-ospf-1] area 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[CORE-ospf-1-area-0.0.0.0] network 10.10.100.0 0.0.0.255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[CORE-ospf-1-area-0.0.0.0] network 10.10.10.0 0.0.0.255      &amp;#x2F;&amp;#x2F;将用户网段发布到OSPF里面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[CORE-ospf-1-area-0.0.0.0] network 10.10.20.0 0.0.0.255      &amp;#x2F;&amp;#x2F;将用户网段发布到OSPF里面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[CORE-ospf-1-area-0.0.0.0] network 10.10.30.0 0.0.0.255     &amp;#x2F;&amp;#x2F;将Web服务器网段发布到OSPF里面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[CORE-ospf-1-area-0.0.0.0] quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;

  \# 配置完成后，RouterA、RouterB和Core之间应该建立OSPF邻居关系，执行**display ospf peer**命令可以查看OSPF邻居状态为Full，以CORE为例，OSPF邻居状态如下。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[CORE] display ospf peer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   OSPF Process 1 with Router ID 10.3.3.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     Neighbors &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Area 0.0.0.0 interface 10.10.100.4(Vlanif100)&amp;#39;s neighbors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Router ID: 10.1.1.1         Address: 10.10.100.2     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   State: Full  Mode:Nbr is  Slave  Priority: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   DR: 10.10.100.4  BDR: 10.10.100.3  MTU: 0    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Dead timer due in 40  sec &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Retrans timer interval: 5 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Neighbor is up for 00:26:37     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Authentication Sequence: [ 0 ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Router ID: 10.2.2.2         Address: 10.10.100.3     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   State: Full  Mode:Nbr is  Slave  Priority: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   DR: 10.10.100.4  BDR: 10.10.100.3  MTU: 0    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Dead timer due in 36  sec &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Retrans timer interval: 5 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Neighbor is up for 00:26:37     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Authentication Sequence: [ 0 ] &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
<ol start="3">
<li>配置外网到内网服务器公网地址的静态路由（回程路由）</li>
</ol>
<pre><code>  \# 在和总部出口对接的运营商路由器RouterD上配置两条目的地址为服务器公网地址的静态路由，下一跳分别指向两个出口路由器RouterA、RouterB的上行口IP地址。为了保证路由和VRRP同步切换，设置下一跳为RouterA的这条路由优先，当这条路由失效的时候下一跳指向RouterB的路由生效。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterD] ip route-static 202.10.100.0 255.255.255.0 202.10.1.2 preference 40     &amp;#x2F;&amp;#x2F;下一跳为RouterA的这条路由优先&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterD] ip route-static 202.10.100.0 255.255.255.0 202.10.2.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;

  当总部出口路由器RouterA的上行链路中断的时候会触发两个动作：

  1. 两台总部出口路由器VRRP主备切换，这个通过VRRP状态联动总部出口路由器上行口状态来实现。
  2. 和总部出口对接的运营商路由器RouterD到达内网服务器的路由进行主备切换，这个通过RouterD配置主备路由实现。

  这两个动作保证了当出口路由器RouterA的上行链路中断的时候内网VRRP状态和公网回程主备路由同时切换，保证了来回路径双向可靠性。</code></pre>
<ol start="5">
<li><p>部署NAT Outbound</p>
<ol>
<li>在总部及分支出口路由器上定义需要进行NAT转换的数据流</li>
</ol>
</li>
</ol>
<pre><code>  总部仅部门A允许访问Internet，源IP地址是10.10.10.0/24；分支所有用户都允许访问Internet，源IP地址是10.10.200.0/24。

  \# 配置总部出口路由器RouterA。RouterB的配置和RouterA类似。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterA] acl 3000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-acl-adv-3000] rule 5 deny ip source 10.10.10.0 0.0.0.255 destination 10.10.200.0 0.0.0.255       &amp;#x2F;&amp;#x2F;需要IPSec保护的数据流&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-acl-adv-3000] rule 10 deny ip source 10.10.20.0 0.0.0.255 destination 10.10.200.0 0.0.0.255      &amp;#x2F;&amp;#x2F;需要IPSec保护的数据流&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-acl-adv-3000] rule 15 permit ip source 10.10.10.0 0.0.0.255       &amp;#x2F;&amp;#x2F;需要进行NAT转换的数据流&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-acl-adv-3000] quit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#x2F;&amp;#x2F;对于华为AR3200系列路由器，如果接口上同时配置了IPSec和NAT，则先执行NAT。所以为了避免把IPSec保护的数据流进行NAT转换，需要NAT引用的ACL规则deny掉需要IPSec保护的数据流，即对“IPSec感兴趣的数据流”做NAT豁免。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;

  \# 配置分支出口路由器RouterC。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterC] acl 3000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-acl-adv-3000] rule 5 deny ip source 10.10.200.0 0.0.0.255 destination 10.10.10.0 0.0.0.255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-acl-adv-3000] rule 10 deny ip source 10.10.200.0 0.0.0.255 destination 10.10.20.0 0.0.0.255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-acl-adv-3000] rule 15 permit ip source 10.10.200.0 0.0.0.255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-acl-adv-3000] quit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#x2F;&amp;#x2F;同样需要配置对“IPSec感兴趣的数据流”做NAT豁免&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
<ol start="2">
<li>在总部及分支出口路由器的上行口上配置NAT转换</li>
</ol>
<pre><code>  \# 配置RouterA。RouterB及RouterC的配置与RouterA类似。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterA] interface GigabitEthernet1&amp;#x2F;0&amp;#x2F;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-GigabitEthernet1&amp;#x2F;0&amp;#x2F;0] nat outbound 3000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-GigabitEthernet1&amp;#x2F;0&amp;#x2F;0] quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
<ol start="3">
<li>检查配置结果</li>
</ol>
<pre><code>  \# 配置完成后可以通过**display nat outbound**命令查看NAT转换的配置信息，以RouterA为例详细信息如下。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterA] display nat outbound&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; NAT Outbound Information:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; --------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Interface                     Acl     Address-group&amp;#x2F;IP&amp;#x2F;Interface      Type&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; --------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; GigabitEthernet1&amp;#x2F;0&amp;#x2F;0         3000                     202.10.1.2    easyip  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; --------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Total : 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
<ol start="6">
<li>部署NAT Server</li>
</ol>
<p>   总部有Web服务器，需在两个出口路由器RouterA和RouterB上都配置NAT Server，实现外网用户访问内网Web服务器。</p>
<p>   # 配置RouterA。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[RouterA] interface GigabitEthernet1&#x2F;0&#x2F;0</span><br><span class="line">[RouterA-GigabitEthernet1&#x2F;0&#x2F;0] nat server protocol tcp global 202.10.100.3 www inside 10.10.30.2 8080</span><br><span class="line">[RouterA-GigabitEthernet1&#x2F;0&#x2F;0] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置RouterB。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[RouterB] interface GigabitEthernet1&#x2F;0&#x2F;0</span><br><span class="line">[RouterB-GigabitEthernet1&#x2F;0&#x2F;0] nat server protocol tcp global 202.10.100.3 www inside 10.10.30.2 8080</span><br><span class="line">[RouterB-GigabitEthernet1&#x2F;0&#x2F;0] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置完成后可以通过<strong>display nat server</strong>命令查看NAT Server的配置信息，以RouterA为例详细信息如下。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[RouterA] display nat server</span><br><span class="line"></span><br><span class="line">  Nat Server Information:</span><br><span class="line">  Interface  : GigabitEthernet1&#x2F;0&#x2F;0</span><br><span class="line">    Global IP&#x2F;Port     : 202.10.100.3&#x2F;80(www) </span><br><span class="line">    Inside IP&#x2F;Port     : 10.10.30.2&#x2F;8080</span><br><span class="line">    Protocol : 6(tcp)   </span><br><span class="line">    VPN instance-name  : ----                            </span><br><span class="line">    Acl number         : ----</span><br><span class="line">    Description : ----</span><br><span class="line"></span><br><span class="line">  Total :    1</span><br></pre></td></tr></table></figure>



<ol start="7">
<li><p>部署IPSec VPN，实现总部和分支之间通过Internet实现私网互通，并且数据通信具有安全保护</p>
<ol>
<li>配置ACL，定义需要IPSec保护的数据流</li>
</ol>
</li>
</ol>
<pre><code>  \# 配置总部出口路由器RouterA。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterA] acl 3001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-acl-adv-3001] rule 5 permit ip source 10.10.10.0 0.0.0.255 destination 10.10.200.0 0.0.0.255       &amp;#x2F;&amp;#x2F;需要IPSec保护的数据流&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-acl-adv-3001] rule 10 permit ip source 10.10.20.0 0.0.0.255 destination 10.10.200.0 0.0.0.255       &amp;#x2F;&amp;#x2F;需要IPSec保护的数据流&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-acl-adv-3001] quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;

  \# 配置总部出口路由器RouterB。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterB] acl 3001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterB-acl-adv-3001] rule 5 permit ip source 10.10.10.0 0.0.0.255 destination 10.10.200.0 0.0.0.255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterB-acl-adv-3001] rule 10 permit ip source 10.10.20.0 0.0.0.255 destination 10.10.200.0 0.0.0.255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterB-acl-adv-3001] quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;

  \# 配置分支出口路由器RouterC。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterC] acl 3001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-acl-adv-3001] rule 5 permit ip source 10.10.200.0 0.0.0.255 destination 10.10.10.0 0.0.0.255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-acl-adv-3001] rule 10 permit ip source 10.10.200.0 0.0.0.255 destination 10.10.20.0 0.0.0.255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-acl-adv-3001] quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
<ol start="2">
<li>配置IPSec安全提议</li>
</ol>
<pre><code>  \# 配置总部出口路由器RouterA。总部出口路由器RouterB以及分支出口路由器RouterC的配置和RouterA类似。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterA] ipsec proposal tran1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-ipsec-proposal-tran1] esp authentication-algorithm sha2-256      &amp;#x2F;&amp;#x2F;设置ESP协议采用的认证算法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-ipsec-proposal-tran1] esp encryption-algorithm aes-128      &amp;#x2F;&amp;#x2F;设置ESP协议采用的加密算法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-ipsec-proposal-tran1] quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
<ol start="3">
<li>配置IKE安全提议</li>
</ol>
<pre><code>  \# 配置总部出口路由器RouterA。总部出口路由器RouterB以及分支出口路由器RouterC的配置和RouterA类似。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterA] ike proposal 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-ike-proposal-5] encryption-algorithm aes-cbc-128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-ike-proposal-5] quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
<ol start="4">
<li>配置IKE对等体</li>
</ol>
<pre><code>  \# 配置总部出口路由器RouterA。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterA] ike peer vpn v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-ike-peer-vpn] pre-shared-key cipher huawei123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-ike-peer-vpn] ike-proposal 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-ike-peer-vpn] dpd type periodic     &amp;#x2F;&amp;#x2F;配置周期性对等体存活检测&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-ike-peer-vpn] dpd idle-time 10     &amp;#x2F;&amp;#x2F;设置对等体存活检测空闲时间为10秒&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-ike-peer-vpn] remote-address 203.10.1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-ike-peer-vpn] quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;

  \# 配置总部出口路由器RouterB。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterB] ike peer vpn v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterB-ike-peer-vpn] pre-shared-key cipher huawei123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterB-ike-peer-vpn] ike-proposal 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterB-ike-peer-vpn] dpd type periodic&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterB-ike-peer-vpn] dpd idle-time 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterB-ike-peer-vpn] remote-address 203.10.1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterB-ike-peer-vpn] quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;

  \# 配置分支出口路由器RouterC。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterC] ike peer vpnr1 v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ike-peer-vpnr1] pre-shared-key cipher huawei123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ike-peer-vpnr1] ike-proposal 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ike-peer-vpnr1] dpd type periodic&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ike-peer-vpnr1] dpd idle-time 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ike-peer-vpnr1] remote-address 202.10.1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ike-peer-vpnr1] quit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC] ike peer vpnr2 v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ike-peer-vpnr2] pre-shared-key cipher huawei123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ike-peer-vpnr2] ike-proposal 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ike-peer-vpnr2] dpd type periodic&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ike-peer-vpnr2] dpd idle-time 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ike-peer-vpnr2] remote-address 202.10.2.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ike-peer-vpnr2] quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
<ol start="5">
<li>配置安全策略</li>
</ol>
<pre><code>  \# 配置总部出口路由器RouterA。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterA] ipsec policy ipsec_vpn 10 isakmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-ipsec-policy-isakmp-ipsec_vpn-10] security acl 3001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-ipsec-policy-isakmp-ipsec_vpn-10] ike-peer vpn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-ipsec-policy-isakmp-ipsec_vpn-10] proposal tran1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-ipsec-policy-isakmp-ipsec_vpn-10] quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;

  \# 配置总部出口路由器RouterB。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterB] ipsec policy ipsec_vpn 10 isakmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterB-ipsec-policy-isakmp-ipsec_vpn-10] security acl 3001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterB-ipsec-policy-isakmp-ipsec_vpn-10] ike-peer vpn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterB-ipsec-policy-isakmp-ipsec_vpn-10] proposal tran1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterB-ipsec-policy-isakmp-ipsec_vpn-10] quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;

  \# 配置分支出口路由器RouterC。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterC] ipsec policy ipsec_vpn 10 isakmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ipsec-policy-isakmp-ipsec_vpn-10] security acl 3001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ipsec-policy-isakmp-ipsec_vpn-10] ike-peer vpnr1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ipsec-policy-isakmp-ipsec_vpn-10] proposal tran1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ipsec-policy-isakmp-ipsec_vpn-10] quit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC] ipsec policy ipsec_vpn 20 isakmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ipsec-policy-isakmp-ipsec_vpn-20] security acl 3001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ipsec-policy-isakmp-ipsec_vpn-20] ike-peer vpnr2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ipsec-policy-isakmp-ipsec_vpn-20] proposal tran1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-ipsec-policy-isakmp-ipsec_vpn-20] quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
<ol start="6">
<li>接口上引用安全策略组</li>
</ol>
<pre><code>  \# 在总部出口路由器RouterA的接口上引用安全策略组。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterA] interface GigabitEthernet1&amp;#x2F;0&amp;#x2F;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-GigabitEthernet1&amp;#x2F;0&amp;#x2F;0] ipsec policy ipsec_vpn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterA-GigabitEthernet1&amp;#x2F;0&amp;#x2F;0] quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;

  \# 在总部出口路由器RouterB的接口上引用安全策略组。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterB] interface GigabitEthernet1&amp;#x2F;0&amp;#x2F;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterB-GigabitEthernet1&amp;#x2F;0&amp;#x2F;0] ipsec policy ipsec_vpn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterB-GigabitEthernet1&amp;#x2F;0&amp;#x2F;0] quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;

  \# 在分支出口路由器RouterC的接口上引用安全策略组。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterC] interface GigabitEthernet1&amp;#x2F;0&amp;#x2F;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-GigabitEthernet1&amp;#x2F;0&amp;#x2F;0] ipsec policy ipsec_vpn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[RouterC-GigabitEthernet1&amp;#x2F;0&amp;#x2F;0] quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
<ol start="7">
<li>检查配置结果</li>
</ol>
<pre><code>  \# 配置完成后，可以执行**display ike sa**命令查看由IKE建立的安全联盟信息，以RouterC为例，由IKE建立的安全联盟信息如下。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterC] display ike sa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Conn-ID  Peer            VPN   Flag(s)                Phase  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ---------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        7    202.10.2.2      0     RD|ST                  2     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        4    202.10.2.2      0     RD                     2     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        2    202.10.2.2      0     RD                     1     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        6    202.10.1.2      0     RD|ST                  2     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        5    202.10.1.2      0     RD                     2     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        3    202.10.1.2      0     RD                     1     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Flag Description:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  RD--READY   ST--STAYALIVE   RL--REPLACED   FD--FADING   TO--TIMEOUT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  HRT--HEARTBEAT   LKG--LAST KNOWN GOOD SEQ NO.   BCK--BACKED UP&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;

  \# 配置完成后，可以执行**display ipsec sa**命令查看安全联盟的相关信息，以RouterC为例，安全联盟信息如下。

  &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[RouterC] display ipsec sa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Interface: GigabitEthernet1&amp;#x2F;0&amp;#x2F;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Path MTU: 1500&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -----------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  IPSec policy name: &amp;quot;ipsec_vpn&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Sequence number  : 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Acl Group        : 3001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Acl rule         : 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Mode             : ISAKMP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -----------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Connection ID     : 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Encapsulation mode: Tunnel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Tunnel local      : 203.10.1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Tunnel remote     : 202.10.1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Flow source       : 10.10.200.0&amp;#x2F;255.255.255.0 0&amp;#x2F;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Flow destination  : 10.10.10.0&amp;#x2F;255.255.255.0 0&amp;#x2F;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Qos pre-classify  : Disable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [Outbound ESP SAs] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      SPI: 969156085 (0x39c425f5)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Proposal: ESP-ENCRYPT-AES-128 SHA2-256-128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      SA remaining key duration (bytes&amp;#x2F;sec): 1887313920&amp;#x2F;1521&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Max sent sequence-number: 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      UDP encapsulation used for NAT traversal: N&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [Inbound ESP SAs] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      SPI: 1258341975 (0x4b00c657)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Proposal: ESP-ENCRYPT-AES-128 SHA2-256-128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      SA remaining key duration (bytes&amp;#x2F;sec): 1887436080&amp;#x2F;1521&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Max received sequence-number: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Anti-replay window size: 32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      UDP encapsulation used for NAT traversal: N&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -----------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  IPSec policy name: &amp;quot;ipsec_vpn&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Sequence number  : 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Acl Group        : 3001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Acl rule         : 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Mode             : ISAKMP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -----------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Connection ID     : 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Encapsulation mode: Tunnel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Tunnel local      : 203.10.1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Tunnel remote     : 202.10.1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Flow source       : 10.10.200.0&amp;#x2F;255.255.255.0 0&amp;#x2F;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Flow destination  : 10.10.20.0&amp;#x2F;255.255.255.0 0&amp;#x2F;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Qos pre-classify  : Disable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [Outbound ESP SAs] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      SPI: 4217384908 (0xfb602fcc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Proposal: ESP-ENCRYPT-AES-128 SHA2-256-128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      SA remaining key duration (bytes&amp;#x2F;sec): 1887283200&amp;#x2F;1522&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Max sent sequence-number: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      UDP encapsulation used for NAT traversal: N&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [Inbound ESP SAs] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      SPI: 654720480 (0x27063de0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Proposal: ESP-ENCRYPT-AES-128 SHA2-256-128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      SA remaining key duration (bytes&amp;#x2F;sec): 1887436080&amp;#x2F;1522&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Max received sequence-number: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Anti-replay window size: 32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      UDP encapsulation used for NAT traversal: N&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -----------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  IPSec policy name: &amp;quot;ipsec_vpn&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Sequence number  : 20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Acl Group        : 3001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Acl rule         : 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Mode             : ISAKMP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -----------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Connection ID     : 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Encapsulation mode: Tunnel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Tunnel local      : 203.10.1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Tunnel remote     : 202.10.2.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Flow source       : 10.10.200.0&amp;#x2F;255.255.255.0 0&amp;#x2F;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Flow destination  : 10.10.10.0&amp;#x2F;255.255.255.0 0&amp;#x2F;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Qos pre-classify  : Disable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [Outbound ESP SAs] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      SPI: 240759500 (0xe59b2cc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Proposal: ESP-ENCRYPT-AES-128 SHA2-256-128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      SA remaining key duration (bytes&amp;#x2F;sec): 1887436800&amp;#x2F;1521&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Max sent sequence-number: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      UDP encapsulation used for NAT traversal: N&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [Inbound ESP SAs] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      SPI: 3888073495 (0xe7bf4b17)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Proposal: ESP-ENCRYPT-AES-128 SHA2-256-128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      SA remaining key duration (bytes&amp;#x2F;sec): 1887436800&amp;#x2F;1521&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Max received sequence-number: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Anti-replay window size: 32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      UDP encapsulation used for NAT traversal: N&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -----------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  IPSec policy name: &amp;quot;ipsec_vpn&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Sequence number  : 20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Acl Group        : 3001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Acl rule         : 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Mode             : ISAKMP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -----------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Connection ID     : 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Encapsulation mode: Tunnel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Tunnel local      : 203.10.1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Tunnel remote     : 202.10.2.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Flow source       : 10.10.200.0&amp;#x2F;255.255.255.0 0&amp;#x2F;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Flow destination  : 10.10.20.0&amp;#x2F;255.255.255.0 0&amp;#x2F;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Qos pre-classify  : Disable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [Outbound ESP SAs] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      SPI: 2751917383 (0xa406ed47)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Proposal: ESP-ENCRYPT-AES-128 SHA2-256-128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      SA remaining key duration (bytes&amp;#x2F;sec): 1887436800&amp;#x2F;1522&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Max sent sequence-number: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      UDP encapsulation used for NAT traversal: N&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [Inbound ESP SAs] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      SPI: 739146604 (0x2c0e7b6c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Proposal: ESP-ENCRYPT-AES-128 SHA2-256-128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      SA remaining key duration (bytes&amp;#x2F;sec): 1887436800&amp;#x2F;1522&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Max received sequence-number: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Anti-replay window size: 32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      UDP encapsulation used for NAT traversal: N&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
<ol start="8">
<li>检查配置结果</li>
</ol>
<p>   # 通过<strong>ping</strong>命令验证总部和分支之间的连通性。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC1&gt;ping 10.10.200.2</span><br><span class="line"></span><br><span class="line">Ping 10.10.200.2: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 10.10.200.2: bytes&#x3D;32 seq&#x3D;1 ttl&#x3D;126 time&#x3D;140 ms</span><br><span class="line">From 10.10.200.2: bytes&#x3D;32 seq&#x3D;2 ttl&#x3D;126 time&#x3D;235 ms</span><br><span class="line">From 10.10.200.2: bytes&#x3D;32 seq&#x3D;3 ttl&#x3D;126 time&#x3D;266 ms</span><br><span class="line">From 10.10.200.2: bytes&#x3D;32 seq&#x3D;4 ttl&#x3D;126 time&#x3D;140 ms</span><br><span class="line">From 10.10.200.2: bytes&#x3D;32 seq&#x3D;5 ttl&#x3D;126 time&#x3D;141 ms</span><br><span class="line"></span><br><span class="line">--- 10.10.200.2 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  5 packet(s) received</span><br><span class="line">  0.00% packet loss</span><br><span class="line">  round-trip min&#x2F;avg&#x2F;max &#x3D; 140&#x2F;184&#x2F;266 ms</span><br></pre></td></tr></table></figure>

   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC3&gt;ping 10.10.200.2</span><br><span class="line"></span><br><span class="line">Ping 10.10.200.2: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 10.10.200.2: bytes&#x3D;32 seq&#x3D;1 ttl&#x3D;126 time&#x3D;156 ms</span><br><span class="line">From 10.10.200.2: bytes&#x3D;32 seq&#x3D;2 ttl&#x3D;126 time&#x3D;297 ms</span><br><span class="line">From 10.10.200.2: bytes&#x3D;32 seq&#x3D;3 ttl&#x3D;126 time&#x3D;156 ms</span><br><span class="line">From 10.10.200.2: bytes&#x3D;32 seq&#x3D;4 ttl&#x3D;126 time&#x3D;141 ms</span><br><span class="line">From 10.10.200.2: bytes&#x3D;32 seq&#x3D;5 ttl&#x3D;126 time&#x3D;109 ms</span><br><span class="line"></span><br><span class="line">--- 10.10.200.2 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  5 packet(s) received</span><br><span class="line">  0.00% packet loss</span><br><span class="line">  round-trip min&#x2F;avg&#x2F;max &#x3D; 109&#x2F;171&#x2F;297 ms</span><br></pre></td></tr></table></figure>

<p>   可以看到，PC1和PC5、PC3和PC5之间都是可以互通的，公司总部和分支之间可以通过运营商网络组建的私网VPN进行互通。</p>
<p>   # 验证企业总部各部门与公网之间的连通性，以企业总部的公网网关202.10.1.1作为测试地址。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC1&gt;ping 202.10.1.1</span><br><span class="line"></span><br><span class="line">Ping 202.10.1.1: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 202.10.1.1: bytes&#x3D;32 seq&#x3D;1 ttl&#x3D;253 time&#x3D;235 ms</span><br><span class="line">From 202.10.1.1: bytes&#x3D;32 seq&#x3D;2 ttl&#x3D;253 time&#x3D;109 ms</span><br><span class="line">From 202.10.1.1: bytes&#x3D;32 seq&#x3D;3 ttl&#x3D;253 time&#x3D;79 ms</span><br><span class="line">From 202.10.1.1: bytes&#x3D;32 seq&#x3D;4 ttl&#x3D;253 time&#x3D;63 ms</span><br><span class="line">From 202.10.1.1: bytes&#x3D;32 seq&#x3D;5 ttl&#x3D;253 time&#x3D;63 ms</span><br><span class="line"></span><br><span class="line">--- 202.10.1.1 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  5 packet(s) received</span><br><span class="line">  0.00% packet loss</span><br><span class="line">  round-trip min&#x2F;avg&#x2F;max &#x3D; 63&#x2F;109&#x2F;235 ms</span><br></pre></td></tr></table></figure>

   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC3&gt;ping 202.10.1.1</span><br><span class="line"></span><br><span class="line">Ping 202.10.1.1: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">Request timeout!</span><br><span class="line">Request timeout!</span><br><span class="line">Request timeout!</span><br><span class="line">Request timeout!</span><br><span class="line">Request timeout!</span><br><span class="line"></span><br><span class="line">--- 202.10.1.1 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  0 packet(s) received</span><br><span class="line">  100.00% packet loss</span><br></pre></td></tr></table></figure>

<p>   可以看到，部门A（PC1）的用户可以访问公网，部门B（PC3）的用户不能访问公网。</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul>
<li><p>总部核心交换机CORE的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname CORE</span><br><span class="line">#</span><br><span class="line">vlan batch 100</span><br><span class="line">#</span><br><span class="line">interface Vlanif100</span><br><span class="line"> ip address 10.10.100.4 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Eth-Trunk3</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 100</span><br><span class="line"> mode lacp</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">interface Eth-Trunk4</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 100</span><br><span class="line"> mode lacp</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;3</span><br><span class="line"> eth-trunk 3</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;4</span><br><span class="line"> eth-trunk 4</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1&#x2F;0&#x2F;3</span><br><span class="line"> eth-trunk 3</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1&#x2F;0&#x2F;4</span><br><span class="line"> eth-trunk 4</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.3.3.3</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 10.10.100.0 0.0.0.255</span><br><span class="line">  network 10.10.10.0 0.0.0.255</span><br><span class="line">  network 10.10.20.0 0.0.0.255</span><br><span class="line">  network 10.10.30.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">ip route-static 0.0.0.0 0.0.0.0 10.10.100.1</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>总部出口路由器RouterA的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"> sysname RouterA</span><br><span class="line">#</span><br><span class="line">acl number 3000  </span><br><span class="line"> rule 5 deny ip source 10.10.10.0 0.0.0.255 destination 10.10.200.0 0.0.0.255 </span><br><span class="line"> rule 10 deny ip source 10.10.20.0 0.0.0.255 destination 10.10.200.0 0.0.0.255 </span><br><span class="line"> rule 15 permit ip source 10.10.10.0 0.0.0.255 </span><br><span class="line">acl number 3001  </span><br><span class="line"> rule 5 permit ip source 10.10.10.0 0.0.0.255 destination 10.10.200.0 0.0.0.255 </span><br><span class="line"> rule 10 permit ip source 10.10.20.0 0.0.0.255 destination 10.10.200.0 0.0.0.255 </span><br><span class="line">#</span><br><span class="line">ipsec proposal tran1</span><br><span class="line"> esp authentication-algorithm sha2-256 </span><br><span class="line"> esp encryption-algorithm aes-128</span><br><span class="line">#</span><br><span class="line">ike proposal 5</span><br><span class="line"> encryption-algorithm aes-cbc-128</span><br><span class="line">#</span><br><span class="line">ike peer vpn v1</span><br><span class="line"> pre-shared-key cipher &quot;@J*U2S*(7F,YWX*NZ55OA!!</span><br><span class="line"> ike-proposal 5</span><br><span class="line"> dpd type periodic</span><br><span class="line"> dpd idle-time 10</span><br><span class="line"> remote-address 203.10.1.2</span><br><span class="line">#</span><br><span class="line">ipsec policy ipsec_vpn 10 isakmp</span><br><span class="line"> security acl 3001</span><br><span class="line"> ike-peer vpn</span><br><span class="line"> proposal tran1</span><br><span class="line">#</span><br><span class="line">interface Eth-Trunk1</span><br><span class="line"> undo portswitch</span><br><span class="line"> mode lacp-static</span><br><span class="line">#</span><br><span class="line">interface Eth-Trunk1.100</span><br><span class="line"> dot1q termination vid 100</span><br><span class="line"> ip address 10.10.100.2 255.255.255.0 </span><br><span class="line"> vrrp vrid 1 virtual-ip 10.10.100.1</span><br><span class="line"> vrrp vrid 1 priority 120</span><br><span class="line"> vrrp vrid 1 track interface GigabitEthernet1&#x2F;0&#x2F;0 reduced 40</span><br><span class="line"> arp broadcast enable</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1&#x2F;0&#x2F;0</span><br><span class="line"> ip address 202.10.1.2 255.255.255.0 </span><br><span class="line"> ipsec policy ipsec_vpn</span><br><span class="line"> nat server protocol tcp global 202.10.100.3 www inside 10.10.30.2 8080</span><br><span class="line"> nat outbound 3000</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet2&#x2F;0&#x2F;0</span><br><span class="line"> eth-trunk 1</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet2&#x2F;0&#x2F;1</span><br><span class="line"> eth-trunk 1</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.1.1.1 </span><br><span class="line"> area 0.0.0.0 </span><br><span class="line">  network 10.10.100.0 0.0.0.255 </span><br><span class="line">#</span><br><span class="line">ip route-static 0.0.0.0 0.0.0.0 202.10.1.1</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>总部出口路由器RouterB的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"> sysname RouterB</span><br><span class="line">#</span><br><span class="line">acl number 3000  </span><br><span class="line"> rule 5 deny ip source 10.10.10.0 0.0.0.255 destination 10.10.200.0 0.0.0.255 </span><br><span class="line"> rule 10 deny ip source 10.10.20.0 0.0.0.255 destination 10.10.200.0 0.0.0.255 </span><br><span class="line"> rule 15 permit ip source 10.10.10.0 0.0.0.255 </span><br><span class="line">acl number 3001  </span><br><span class="line"> rule 5 permit ip source 10.10.10.0 0.0.0.255 destination 10.10.200.0 0.0.0.255 </span><br><span class="line"> rule 10 permit ip source 10.10.20.0 0.0.0.255 destination 10.10.200.0 0.0.0.255 </span><br><span class="line">#</span><br><span class="line">ipsec proposal tran1</span><br><span class="line"> esp authentication-algorithm sha2-256 </span><br><span class="line"> esp encryption-algorithm aes-128</span><br><span class="line">#</span><br><span class="line">ike proposal 5</span><br><span class="line"> encryption-algorithm aes-cbc-128</span><br><span class="line">#</span><br><span class="line">ike peer vpn v1</span><br><span class="line"> pre-shared-key cipher &quot;@J*U2S*(7F,YWX*NZ55OA!!</span><br><span class="line"> ike-proposal 5</span><br><span class="line"> dpd type periodic</span><br><span class="line"> dpd idle-time 10</span><br><span class="line"> remote-address 203.10.1.2</span><br><span class="line">#</span><br><span class="line">ipsec policy ipsec_vpn 10 isakmp</span><br><span class="line"> security acl 3001</span><br><span class="line"> ike-peer vpn</span><br><span class="line"> proposal tran1</span><br><span class="line">#</span><br><span class="line">interface Eth-Trunk1</span><br><span class="line"> undo portswitch</span><br><span class="line"> mode lacp-static</span><br><span class="line">#</span><br><span class="line">interface Eth-Trunk1.100</span><br><span class="line"> dot1q termination vid 100</span><br><span class="line"> ip address 10.10.100.3 255.255.255.0 </span><br><span class="line"> vrrp vrid 1 virtual-ip 10.10.100.1</span><br><span class="line"> arp broadcast enable</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1&#x2F;0&#x2F;0</span><br><span class="line"> ip address 202.10.2.2 255.255.255.0 </span><br><span class="line"> ipsec policy ipsec_vpn</span><br><span class="line"> nat server protocol tcp global 202.10.100.3 www inside 10.10.30.2 8080</span><br><span class="line"> nat outbound 3000</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet2&#x2F;0&#x2F;0</span><br><span class="line"> eth-trunk 1</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet2&#x2F;0&#x2F;1</span><br><span class="line"> eth-trunk 1</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.2.2.2 </span><br><span class="line"> area 0.0.0.0 </span><br><span class="line">  network 10.10.100.0 0.0.0.255 </span><br><span class="line">#</span><br><span class="line">ip route-static 0.0.0.0 0.0.0.0 202.10.2.1</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>分支出口路由器RouterC的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"> sysname RouterC</span><br><span class="line">#</span><br><span class="line">acl number 3000  </span><br><span class="line"> rule 5 deny ip source 10.10.200.0 0.0.0.255 destination 10.10.10.0 0.0.0.255 </span><br><span class="line"> rule 10 deny ip source 10.10.200.0 0.0.0.255 destination 10.10.20.0 0.0.0.255 </span><br><span class="line"> rule 15 permit ip source 10.10.200.0 0.0.0.255 </span><br><span class="line">acl number 3001  </span><br><span class="line"> rule 5 permit ip source 10.10.200.0 0.0.0.255 destination 10.10.10.0 0.0.0.255 </span><br><span class="line"> rule 10 permit ip source 10.10.200.0 0.0.0.255 destination 10.10.20.0 0.0.0.255 </span><br><span class="line">#</span><br><span class="line">ipsec proposal tran1</span><br><span class="line"> esp authentication-algorithm sha2-256 </span><br><span class="line"> esp encryption-algorithm aes-128</span><br><span class="line">#</span><br><span class="line">ike proposal 5</span><br><span class="line"> encryption-algorithm aes-cbc-128</span><br><span class="line">#</span><br><span class="line">ike peer vpnr1 v1</span><br><span class="line"> pre-shared-key cipher &quot;@J*U2S*(7F,YWX*NZ55OA!!</span><br><span class="line"> ike-proposal 5</span><br><span class="line"> dpd type periodic</span><br><span class="line"> dpd idle-time 10</span><br><span class="line"> remote-address 202.10.1.2</span><br><span class="line">#</span><br><span class="line">ike peer vpnr2 v1</span><br><span class="line"> pre-shared-key cipher &quot;@J*U2S*(7F,YWX*NZ55OA!!</span><br><span class="line"> ike-proposal 5</span><br><span class="line"> dpd type periodic</span><br><span class="line"> dpd idle-time 10</span><br><span class="line"> remote-address 202.10.2.2</span><br><span class="line">#</span><br><span class="line">ipsec policy ipsec_vpn 10 isakmp</span><br><span class="line"> security acl 3001</span><br><span class="line"> ike-peer vpnr1</span><br><span class="line"> proposal tran1</span><br><span class="line">#</span><br><span class="line">ipsec policy ipsec_vpn 20 isakmp</span><br><span class="line"> security acl 3001</span><br><span class="line"> ike-peer vpnr2</span><br><span class="line"> proposal tran1</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1&#x2F;0&#x2F;0</span><br><span class="line"> ip address 203.10.1.2 255.255.255.0 </span><br><span class="line"> ipsec policy ipsec_vpn</span><br><span class="line"> nat outbound 3000</span><br><span class="line">#</span><br><span class="line">ip route-static 0.0.0.0 0.0.0.0 203.10.1.1</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>总部运营商路由器RouterD的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"> sysname RouterD</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1&#x2F;0&#x2F;0</span><br><span class="line"> ip address 202.10.1.1 255.255.255.0 </span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet2&#x2F;0&#x2F;0</span><br><span class="line"> ip address 202.10.2.1 255.255.255.0 </span><br><span class="line">#</span><br><span class="line">ip route-static 202.10.100.0 255.255.255.0 202.10.1.2 preference 40</span><br><span class="line">ip route-static 202.10.100.0 255.255.255.0 202.10.2.2</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>分支运营商路由器RouterE的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"> sysname RouterE</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1&#x2F;0&#x2F;0</span><br><span class="line"> ip address 203.10.1.1 255.255.255.0 </span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>华为</category>
      </categories>
      <tags>
        <tag>华为</tag>
      </tags>
  </entry>
  <entry>
    <title>基于VLAN的二层、三层转发原理</title>
    <url>/2019/05/31/56/</url>
    <content><![CDATA[<p>VLAN是为解决以太网的广播问题和安全性而提出的一种协议，它在以太网帧的基础上增加了VLAN头，用VLAN ID把用户划分为更小的工作组，限制不同工作组间的用户二层互访，每个工作组就是一个虚拟局域网。虚拟局域网的好处是可以限制广播范围，并能够形成虚拟工作组，动态管理网络。</p>
<p>MAC地址</p>
<p>MAC(Media Access Control，介质访问控制)地址是网络设备的硬件标识，具有唯一性。MAC地址也称为物理地址或硬件地址，由网络设备制造商生产时烧入NIC(网络接口控制器)中。MAC地址长48比特，分成块ID和设备ID两部分，前24位是OUI(Organizationally unique identifier，机构唯一标识符)，后24位由厂商自行分配。MAC地址采用点分十六进制表示，如图1所示。</p>
<p><img src="https://img-blog.csdn.net/20181009085118571?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p> MAC地址格式</p>
<p>MAC地址通常分为：</p>
<p>单播MAC地址：单播MAC地址唯一标识以太网上的一个终端，该地址固化在硬件(如网卡)内部。</p>
<p>组播MAC地址：首字节最后一位为1(通常以0x01开头)的MAC地址，标志一组设备。</p>
<p>广播MAC地址：48位全1的MAC地址，标志本网段内所有设备。</p>
<p>网络中按照大字节序传输报文(即先传输高字节)，而字节内先传输低位比特。因此，若发送的首位比特为0就是单播，否则为组播或广播。</p>
<p>MAC地址按生存期也可分为：</p>
<p>动态MAC地址：交换机在网络中通过数据帧学习到，有老化时间，MAC地址和端口的对应关系会随着设备所连的交换机的端口的变化而变化。交换机关电重启后会消失，需重新学习。</p>
<p>静态MAC地址：通过配置产生，不会被老化，MAC地址和端口的对应关系始终不变，但交换机关电重启后也会消失，需重新配置。</p>
<p>永久MAC地址：通过配置产生，不会被老化，MAC地址和端口的对应关系始终不变，且交换机关电重启后也不会消失。</p>
<p>冲突域和广播域</p>
<p>冲突域(物理层)：不同主机或设备同时发出的帧可能会互相冲突的网络区域。一条导线上所有工作站的集合，或一个物理网段上所有节点的集合，或以太网上竞争同一带宽的节点的集合都是一个冲突域。当冲突发生时，传送的帧可能遭到破坏或干扰，发生冲突的主机将根据802.3以太网的CSMA/CD规则在一段随机的时间内停止发送后续帧。其缺点是每台主机得到的可用带宽很低，当冲突域内主机设备数量增加时，网络冲突将成倍增加，信息传输安全得不到保证。集线器连接的各设备就是一个典型冲突域，如图2所示。</p>
<p><img src="https://img-blog.csdn.net/20181009085400785?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>典型的HUB构成的冲突域</p>
<p>广播域(数据链路层)：网络中能接收任一设备发出的广播帧的所有设备集合。所有需要接收其他广播的节点被划分为同一广播域或逻辑网段。连接在HUB和传统交换机端口上的所有节点构成一个广播域。当交换机收到广播帧时，它将该帧转发到自己除接收该帧的端口外的每一个端口，每个连接设备都会接收并处理该帧。</p>
<p>随着网络规模的扩大，广播域中广播报文相遇的次数也随之增加。所有这些广播报文会严重影响网络性能，若管理不当，甚至会导致整个网络的崩溃。</p>
<p>集线器、交换机、路由器</p>
<p>* 集线器</p>
<p>以太网集线器(HUB)从任一端口收到以太网数据帧后，都会将该帧广播到其它所有端口。集线器对应物理层，不同端口所连接的设备同时传数据时会引起冲突，故其冲突域和广播域是所有端口，既不能隔离冲突域也不能隔离广播域。非交换式HUB不能划分物理网段，因为它没有划分冲突域。</p>
<p>* 网桥和交换机</p>
<p>网桥和交换机位于数据链路层，基于MAC地址进行数据转发。网桥和交换机的每个物理端口属于一个冲突域，所有端口在一个广播域。两者均能隔离冲突域，但不能隔离广播域，不能阻止广播并对网络进行逻辑分段。</p>
<p>网桥与交换机有以下不同之处：</p>
<p>网桥只有少数几个端口;交换机却可有上百个端口。</p>
<p>网桥速度比交换机慢，交换机采用硬件ASIC芯片进行线速转发交换，比网桥速度快。</p>
<p>网桥采取存储转发的机制，等收到全部数据后再进行转发;而交换机除存储机制外还有直接转发机制，只需帧头到达处理后就可转发，不必等到所有数据都到达，故交换机处理速度比网桥快些。</p>
<p>鉴于网桥的局限性，现代交换LAN中已很少使用网桥。</p>
<p>* 路由器</p>
<p>路由器位于网络层，可以隔离冲突域和广播域。每个子网(subnet)属于一个广播域，不同子网间不能发送广播。因此，对广播进行控制就必须使用路由器(或具有路由功能的三层交换机)。使用路由器后，可以路由器上的网络接口(LAN Interface)为单位分割广播域。</p>
<p>一般使用路由器和交换机把LAN分段为大量更小的冲突域和广播域。传统交换机对LAN分段的方法如图3所示。</p>
<p><img src="https://img-blog.csdn.net/20181009085451524?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>传统LAN的分割</p>
<p>虽然交换机可缩小冲突域的规模(每个端口就是一个冲突域)，但连接到交换机的所有端口的主机仍然处于一个广播域中。传统交换机相连构成的一个广播域内广播帧的转发过程如图4所示。</p>
<p><img src="https://img-blog.csdn.net/20181009085519575?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>传统交换机上的广播</p>
<p>图中是一个由5台二层交换机(SW1～5)连接了大量客户主机构成的网络。假设主机PC1要与主机PC2通信。以太网通信中必须在数据帧中指定目标MAC地址才能正常通信，故PC1必须先广播ARP请求信息，来尝试获取PC2的MAC地址。交换机SW1收到ARP广播帧后，将其转发到除入帧端口外的其他所有端口，于是SW2和SW3收到广播帧，它们也将帧转发到各自的所有端口……最终同一网络中与交换机相连的所有主机(PC2-PC8)都接收到该ARP请求。可见，本应发往PC2的ARP请求扩散至整个网络，不仅消耗了网络整体带宽，而且收到广播帧的主机还要消耗一部分CPU时间对其进行处理。在网络规模较大时，大量广播帧将严重影响网络性能，造成广播风暴问题。此外，由于整个网络在一个广播域，所有用户都能不受控制地直接访问和影响网络所有部分，进而威胁到网络安全性。</p>
<p>默认情况下，路由器不转发广播流量，因此可用于分割广播域。用路由器创建广播域将减少广播流量，并为单播通讯提供更多的带宽，每个路由器端口都连接到单独的网络，广播流量仅限于发出该广播的LAN网段内。但通常路由器网络接口较少(1～4个左右)，所能分割的广播域个数有限，且路由器相对交换机成本也较高。而二层交换机一般带有多个网络接口，若能用其分割广播域，则会大大提高网络设计的自由度。</p>
<p>VLAN</p>
<p>VLAN(Vitual Local Area Network，虚拟局域网)是将物理网络划分成多个逻辑局域网的技术。一个VLAN就是一个广播域，亦即一个逻辑子网，在其内的站点可位于不同物理LAN上，但站点间像在同一个普通局域网上那样自由通信而不受物理位置的限制。利用VLAN技术，网络管理者可根据实际应用需要，在二层交换机上把同一物理局域网中的用户逻辑划分成不同广播域，使具有相同需求或业务的用户处于同一广播域，不同需求或业务的用户处于不同的广播域。</p>
<p>在未设置任何Vlan的二层交换机上，任何广播帧都会被转发给除接收端口外的所有其他端口。配置Vlan后，当交换机属于某Vlan的一个端口收到广播帧后，为保证同属一个Vlan的所有主机都收到该广播帧，交换机必须按照如下原则转发：</p>
<ol>
<li><p>发送给本交换机中同一个Vlan中的其它端口;</p>
</li>
<li><p>发送给本交换机的包含该Vlan的所有汇聚链路，以便其它交换机上同一Vlan的端口也发送该帧。</p>
</li>
</ol>
<p>图5给出交换机上创建两个Vlan后，主机发出的广播帧被转发的示例。为便于说明，以红、蓝两色识别不同Vlan(实际使用中以Vlan ID来区分)。其中端口1、2属于红色Vlan，端口3、4属于蓝色Vlan。</p>
<p><img src="https://img-blog.csdn.net/20181009085551941?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>Vlan分割广播域</p>
<p>可见，从PC1发出的广播帧仅被转发给同一Vlan内的其他端口，即同属于红色Vlan的端口2，而不会再转发给属于蓝色Vlan的端口。就这样，Vlan通过限制广播帧转发的范围分割广播域，进而改善网络效率和安全性。</p>
<p>Vlan可理解为在逻辑上将一台交换机分割成数台虚拟交换机，且这些虚拟交换机互不相通。Vlan是广播域，而通常两个广播域间由路由器连接，广播域间来往的数据帧由路由器中继。因此，Vlan间的通信也需要路由器(或三层交换机)提供中继服务，即“Vlan间路由”。在Vlan之间配置路由器，使Vlan内部流量仍通过原来Vlan的内部二层网络进行，从一个Vlan到另一Vlan的通信流量通过路由进行三层转发，转发到目的网络后再通过二层交换网络把数据帧最终发送给目的主机。路由器不转发以太网广播帧，故Vlan间配置的路由器不会改变划分Vlan所达到的隔离广播的目的。</p>
<p>VLAN帧格式</p>
<p>* 以太网V2 MAC帧格式</p>
<p>以太网MAC帧格式有两种标准，即DIX(DEC,Intel,Xerox) Ethernet V2标准(RFC894)和IEEE 802.3标准。图6所示的是常用的以太网V2的MAC帧格式(事实标准)：</p>
<p><img src="https://img-blog.csdn.net/20181009131250868?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>以太网V2的MAC帧格式</p>
<p>以太网帧在链路层传输，故源和目的MAC地址又称链路层地址(link layer address)，也称L2地址、二层地址或硬件地址。</p>
<p>类型(Type)字段表明上层使用什么协议。常用协议类型值如表1所示：</p>
<p>表1 常用协议类型值</p>
<p><a href="http://s1.51cto.com/wyfs02/M01/30/67/wKioL1Oniduj-wHGAAIZJ_sdR88548.jpg"><img src="https://img-blog.csdn.net/20181009131328178?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="表1 常用协议类型值" loading="lazy"></a></p>
<p>数据(Data)字段为帧承载的数据内容，由一个上层协议的协议数据单元PDU构成。数据长度在46~1500之间，若上层协议数据单元长度少于46 字节，则必须填充该字段的其余部分，以保证MAC帧长度不小于64字节。</p>
<p>可见，一个以太网帧长范围为64~1518字节。</p>
<p>注意：发包工具如Testcenter设置发包长度时会将CRC考虑在内，即帧长包含CRC的4字节;而抓包工具如Wireshark显示的帧长不包括CRC字段。</p>
<p>* 带VLAN的以太网帧格式</p>
<p>IEEE 802.1Q(俗称Dot One Q)标准在以太网数据帧中“发送源MAC地址”与“类别域(Type Field)”之间附加4字节的Vlan识别信息(标签)，如图7所示：</p>
<p><img src="https://img-blog.csdn.net/20181009131353516?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>插入Vlan后的以太网帧格式</p>
<p>TPID(Tag Protocol Identifier，标签协议标识)值规定为0x8100。设备缺省采用协议规定的TPID值，交换机通过TPID来确定数据帧是否附加基于IEEE802.1Q的VLAN信息。</p>
<p>TCI(Tag Control Information，标签控制信息)字段分为Pri、CFI和VLAN三部分。Pri表示报文优先级(也称1p优先级、COS或1q优先级)，CFI(Canonical Format Indicator)标识MAC地址在不同传输介质中是否以标准格式进行封装，通常为0(标准格式)。Vlan ID标识该报文所属的VLAN编号，取值范围为 0～4095，一般0和4095保留(中兴设备Vid=0表示priority-tagged帧)。</p>
<p>在交换网络环境中，以太网帧有两种格式：有些帧未附加四字节标签，称为未标记帧(ungtagged frame)，有些帧附加四字节标签，称为带标记帧(tagged frame)。</p>
<p>在基于端口划分的Vlan中，每个802.1Q端口都会分配一个默认的Vlan ID，称为PVID(Port Vlan ID)或端口默认Vlan ID(default Vid)，CISCO称之为native Vlan。端口接收到的所有untagged帧都认为属于端口默认Vlan ID，并在端口默认Vlan ID内转发。</p>
<p>注意，插入或剥除Vlan标签时均会对数据帧重新计算CRC。</p>
<p>VLAN链路与端口</p>
<p>* VLAN链路类型</p>
<p>Vlan内的链路可分为：</p>
<p>接入链路(Access Link，或称访问链路)：将没有也无法识别Vlan标签的设备(如用户主机)连接到配置Vlan的交换机端口。它只能传送不带标签(untagged)的以太网帧，且只与一个Vlan关联。</p>
<p>汇聚链路(Trunk Link，或称干道链路、中继链路) ：连接两个能够识别Vlan标签的设备(如交换机)，可传输发往多个Vlan的带标签(tagged)帧，可与多个Vlan相关联。</p>
<p>混合链路(Hybrid Link)：既可传送不带标签的帧，也可传送带标签的帧。但对于一个特定Vlan，传送的所有帧必须类型相同，即对于一个Vlan，传送的帧要么不带标签，要么携带相同标签。</p>
<p>显示三种链路的区别：</p>
<p><img src="https://img-blog.csdn.net/20181009131417122?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>Vlan链路类型</p>
<p>规划企业级网络时，很有可能会遇到隶属同一部门的用户分散在同一座建筑中不同楼层的情况，此时可能需要考虑如何跨越多台交换机设置Vlan。如在下图所示网络中，通过汇聚链路将不同楼层的四台主机设置为同一Vlan。</p>
<p><img src="https://img-blog.csdn.net/20181009131440995?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>汇聚链路</p>
<p>如图所示，PC1发送的数据帧从SW1经过汇聚链路到达SW2时，帧内附加了表示属于红色Vlan的标签。SW2收到数据帧后，检查Vlan标签发现该帧属于红色Vlan，故剥除标签后根据需要(单播、广播或组播)将复原的数据帧转发给其他属于红色Vlan的端口。</p>
<p>若不使用汇聚链路，则需在两台交换机上各设一个红、蓝Vlan专用接口并用网线互联(接入链路)。但建筑楼层间的纵向布线比较麻烦，一般不能由基层管理人员随意进行。而且，VLAN越多，楼层间(严格地说是交换机间)互联所需的端口越多，端口利用率低，也限制网络的扩展。</p>
<p>汇聚链路承载多个Vlan的数据，负载较重，故汇聚链路必须支持100Mbps以上的传输速度。</p>
<p>默认情况下，汇聚链路会转发交换机上所有Vlan的数据，亦即汇聚链路同时属于交换机上所有的Vlan。实际应用中可能并不需要转发所有Vlan数据，因此为减轻交换机负载并减少带宽浪费，用户可设定限制能经由汇聚链路互联的Vlan。</p>
<p>VLAN端口类型</p>
<p>根据对Vlan帧的识别情况，交换机端口的类型(模式)分为Access端口、Trunk端口及Hybrid端口。</p>
<p>Access端口：交换机上连接用户主机的端口，只能连接接入链路。Access端口只属于一个Vlan，且仅向该Vlan转发数据帧。该Vlan的Vid = 端口PVid，故Vlan内所有端口都处于untagged状态。Access端口在从主机接收帧时，给帧加上Tag标签;在向主机发送帧时，将帧中的Tag标签剥掉。</p>
<p>Trunk端口：交换机上与其他交换机或路由器连接的端口，只能连接汇聚链路。Trunk端口允许多个Vlan的带标签帧通过，在收发帧时保留Tag标签。在它所属的这些Vlan中，对于Vid = 端口PVid的Vlan，它处于Untagged port状态;对于Vid ≠ 端口PVid的Vlan，它处于Tagged port状态。</p>
<p>Hybrid端口：交换机上既可连接用户主机又可连接其他交换机的端口，它既可连接接入链路又可连接汇聚链路。Hybrid 端口允许多个Vlan的帧通过，并可在出端口方向将某些Vlan帧的Tag标签剥掉。</p>
<p>注意，Access、Trunk和Hybrid端口是厂家对某种端口的称谓，并非IEEE802.1Q协议标准定义。</p>
<p>Access端口只属于一个Vlan，PVid就是其所在Vlan，故不用设置;Trunk和Hybrid端口属于多个Vlan，故需要设置PVid(缺省为1)。若设置端口PVid，则当端口收到不带Vlan Tag的数据帧时，对该帧加上Tag标记(Vid设置为端口所属的默认Vlan编号)并转发到属于PVid的端口;当端口发送Vlan Tag的数据帧时，若收帧的Vlan Tag和端口PVid相同，剥除Vlan Tag后再发送该帧。</p>
<p>Hybrid端口与Trunk端口在接收数据时处理方法相同，区别在于发送数据时：Hybrid端口允许多个Vlan的数据帧发送时不带标签，而Trunk端口只允许默认Vlan的数据帧发送时不带标签。在同一交换机上Hybrid端口和Trunk端口不能并存，实际使用中可用Hybrid代替Trunk。</p>
<p>本Hybrid端口的PVid和相连的对端交换机Hybrid端口的PVid必须一致。</p>
<p>由于端口类型不同，交换机对帧的处理过程也不同。下表根据不同的端口类型分别介绍。</p>
<p>表2 不同端口类型的Vlan帧处理方式</p>
<p><a href="http://s1.51cto.com/wyfs02/M02/30/67/wKioL1Oniazjn7gPAAOnDwZ_WM8441.jpg-wh_600x-s_623438431.jpg"><img src="https://img-blog.csdn.net/20181009131509859?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="表2 不同端口类型的Vlan帧处理方式" loading="lazy"></a></p>
<p>VLAN端口状态</p>
<p>交换机端口可配置为属于某个或某几个Vlan。端口状态指其在某个Vlan中的状态，该状态决定端口接收到tagged或untagged帧时对该帧的处理方式。针对每个Vlan，端口有两种状态，即Tagged port和Untagged port。同一端口可根据不同Vlan ID设置Tagged或Untagged。</p>
<p>当为该端口配置其所属的Vlan时，若该Vlan的Vid = 端口PVid时，则端口在此Vlan中处于Untagged port状态;若Vid ≠ 端口PVid，则端口在此Vlan中处于Tagged port状态。</p>
<p>PVid只与报文的入口方向有关，对于进入交换机的无标签帧会打上进入端口的PVid标签;交换机内每个数据帧都带标签。Tagged/Untagged只与帧的出口方向有关，对于出端口为Untagged port的，转发帧时要剥除帧中的标签，否则保留标签。</p>
<p>VLAN划分方式</p>
<p>接入链路可事先设定，称为“静态Vlan”;也可根据所连主机而动态设定，称为“动态Vlan”。</p>
<p>* 静态VLAN</p>
<p>静态Vlan又称基于端口的Vlan (Port Based Vlan)，即明确指定各端口属于哪个Vlan，如下图所示。</p>
<p><img src="https://img-blog.csdn.net/20181009131536757?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>基于端口划分Vlan</p>
<p>根据端口划分Vlan因其简单而最为常用。但由于需要逐个端口地指定Vlan，因此当网络中主机数目较多时，操作就变得非常烦杂。并且，主机每次变更所连端口时，必须同时更改该端口所属Vlan的设定——这显然不适合那些需要频繁改变拓扑结构的网络。</p>
<p>* 动态VLAN</p>
<p>动态Vlan主要有：</p>
<p>基于MAC地址的Vlan (MAC Based Vlan)</p>
<p>基于子网的Vlan (Subnet Based Vlan)</p>
<p>基于用户的Vlan(User Based Vlan)</p>
<p>……</p>
<p>其差异主要在于根据OSI参照模型哪一层的信息决定端口所属的Vlan。决定端口所属Vlan时利用的信息在OSI中的层面越高，就越适于构建灵活多变的网络。</p>
<p>网络设备厂商可能使用私有协议实现基于子网和基于用户的Vlan，因此不同厂商的设备间互联时可能出现兼容性问题。</p>
<p>* 基于MAC地址的VLAN</p>
<p>基于MAC地址的Vlan，就是通过查询并记录端口所连主机网卡的MAC地址来决定端口所属Vlan。假定MAC-A地址被交换机设定为属于Vlan10，则不论MAC-A地址的主机连在交换机哪个端口，该端口都会被划分到Vlan10内，如下图所示。</p>
<p><img src="https://img-blog.csdn.net/20181009131611151?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>基于MAC地址划分Vlan</p>
<p>基于MAC地址划分Vlan，在初始设定时必须调查所连接的所有主机MAC地址并加以记录，工作量很大。而且这种划分方法会降低交换机执行效率，因为交换机每个端口都可能存在很多个Vlan组的成员，这样就无法限制广播包。此外，若主机(如笔记本电脑)经常更换网卡，则不得不经常更改Vlan设定。</p>
<p>* 基于子网的VLAN</p>
<p>基于子网的Vlan，就是通过所连主机的IP地址来决定端口所属Vlan。同一子网的所有数据帧属于同一Vlan，从而将同一子网内的用户划分在一个Vlan内(与路由器相似)。即使主机MAC地址改变，只要其IP地址不变，就仍可加入原先设定的Vlan，如下图所示。</p>
<p><img src="https://img-blog.csdn.net/20181009131640667?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>基于子网划分Vlan</p>
<p>基于IP子网划分Vlan可按传输协议划分网段，有利于针对具体应用的服务来组织用户。再者，用户可在网络内部自由移动而不用重新配置主机，尤其是使用TCP/IP的用户。</p>
<p>这种方法的缺点是效率，因为检查每个数据包的网络层地址比较费时。同时由于一个端口也可能存在多个Vlan的成员，对广播报文也无法有效抑制。</p>
<p>* 基于用户的VLAN</p>
<p>基于用户的Vlan，则是根据交换机各端口所连的主机上当前登录的用户，来决定该端口属于哪个Vlan。用户识别信息一般是主机操作系统登录的用户，如Windows域中使用的用户名。</p>
<p>* 基于协议的VLAN</p>
<p>基于协议的Vlan将物理网络划分为基于协议的逻辑Vlan。在端口接收帧时，它的Vlan由帧中的协议类型决定。例如，IP、IPX和Appletalk可能有各自独立的Vlan，IP 广播帧只被送到IP Vlan中的所有端口。</p>
<p>* 基于组播地址的VLAN</p>
<p>基于组播地址的Vlan由组播分组动态创建的。如每个组播分组对应一个不同Vlan，保证组播数据帧只被那些连接到相应组播分组成员的端口接收到。这种划分方式效率不高，不适合局域网。但因其将Vlan扩大至广域网，故灵活性更高，且易于通过路由器进行扩展。</p>
<p>* 基于策略的VLAN</p>
<p>基于策略的Vlan是Vlan的最基本的定义。每个输入(无标签)帧都在策略数据库查看，该数据库决定该帧所属的Vlan。如建立公司管理人员之间往来电子邮件的特别Vlan策略，以便不在其他地方被看见。</p>
<p>这种划分方式最为灵活，具有自动配置能力，能够把相关用户连成一体，在逻辑划分上称为“关系网络”。网络管理员只需在网管软件中确定划分Vlan的规则(或属性)，则站点加入网络时将会被“感知”，并被自动包含进正确的Vlan中。同时，也可自动识别和跟踪站点的移动和改变。</p>
<p>基于VLAN的转发与路由</p>
<p>Vlan内通信的主机同属一个广播域，主机之间的流量通过二层网络直接转发;Vlan间通信的主机位于不同广播域，主机无法直接通过ARP广播请求到对方的地址，此时必须借助三层路由器来完成通信。</p>
<p>路由器可视为各个Vlan的网关，因此通过路由器来互相通信的主机必须知道路由器的存在及其在本Vlan上的接口地址(默认网关)。在主机上配置默认网关后，对于跨Vlan的通信，主机会自动寻找默认网关，并把报文交给默认网关转发而不是直接发给目的主机。</p>
<p>可见，当报文的目的MAC地址是网关地址(路由器或三层交换机MAC地址)时，该报文为三层报文。</p>
<p>*  二层转发</p>
<p>基于Vlan的二层转发流程主要包括：确定和查找Vlan、查找和学习源MAC、查找目的MAC并转发数据帧。</p>
<ol>
<li>确定和查找Vlan：交换机端口接收到一个数据帧时，首先通过TPID值判断该帧是否带标签[1]。</li>
</ol>
<p>若是tagged帧，且Vid≠0，则在端口所属的Vlan表中查找该帧标签中的Vid是否存在，若存在，则进入下一步，否则丢弃该帧(或提交CPU处理);</p>
<p>若是tagged帧，且Vid=0(即priority帧[2])，则对该帧附加端口PVid使之成为tagged帧;</p>
<p>若是untagged帧，则对该帧附加端口PVid并指定优先级使之成为tagged帧。</p>
<p>注：①为提高处理效率，交换机内部所有数据帧均携带Vlan标签，以统一方式处理。故需对输入交换机的数据帧进行标签检查并按需加上标签。</p>
<p>②802.1Q Vlan环境下，帧可分为tagged、untagged和priority-tagged三种。Tagged帧根据其携带的标签Vid进行MAC学习转发。Untagged和Priority-tagged帧进入交换机端口后根据PVid进行MAC学习转发。</p>
<ol start="2">
<li>查找和学习源MAC：交换机在MAC转发表(Mac+Vid+Port)中查找收帧Vid对应的源MAC表项，未找到则学习收帧源MAC (将“源MAC+Vid+Port”添加到MAC表中);若找到则更新该表项的老化时间。</li>
</ol>
<p>注：MAC地址学习只学习单播地址，对于广播和组播地址不进行学习。组播MAC表项通过CPU配置建立。</p>
<ol start="3">
<li><p>查找目的MAC：若目的MAC是广播或组播，则在所属的Vlan中广播或组播;否则在MAC表中查找是否存在Vid对应的目的MAC表项。</p>
</li>
<li><p>转发数据帧：若在MAC表中查找到完全匹配的DMAC+Vid表项，则将该帧转发到表项中的相应端口(若相应端口为收帧端口，则应丢弃该帧);否则向所属Vlan内除收包端口外的其他所有端口洪泛该帧(洪泛广播的是未知单播帧而不是广播帧)。</p>
</li>
</ol>
<p>图所示为二层转发的一般流程。</p>
<p><img src="https://img-blog.csdn.net/20181009131710437?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>二层转发流程</p>
<p>【例】数据帧从PC1经过一台交换机转发到与另一台交换机相连的PC2并得到响应，如下图所示。</p>
<p><img src="https://img-blog.csdn.net/20181009131734967?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>PC1向PC2发送信息</p>
<p>假设两台交换机刚刚开机(此时MAC地址表为空)，其具体的转发过程如下：</p>
<p>①PC1发出的数据帧进入交换机SW1的Access端口后，按照端口PVid加上Vid=100的标签。交换机将该帧源MAC地址存入MAC地址表(学习)，并将该帧洪泛到Vid=100的所有端口(除入端口外);</p>
<p>②SW1的Trunk端口属于Vid=100的Vlan，故接受这个标记为100的Tagged数据帧;而该端口在Vid=100上为Tagged port，因此在发送数据帧出交换机SW1时，不改变Tagged帧的结构;</p>
<p>③Tagged帧到达交换机SW2的Trunk端口，由于Trunk端口拥有VID=100的Vlan，故接受该帧;该Trunk端口不改变Tagged帧的结构，而是学习源MAC地址后把该数据帧洪泛给所有Vid=100的端口(除入端口外);</p>
<p>④SW2的Access端口接收到该帧，剥除该帧的Tag标签后发送给PC2。</p>
<p>⑤PC2收到PC1发送的数据帧，并发送响应帧给PC1。</p>
<p>⑥经过与前述过程类似的转发，响应帧到达交换机SW1。交换机发现该帧的目的MAC地址已在MAC地址表中，则仅转发给PC1。</p>
<p>可见，收发双方同属一个Vlan的通信，一切处理均在二层网络内完成。</p>
<p>三层路由</p>
<p>* 路由器路由</p>
<p>使用路由器进行Vlan间路由时，大致有以下两种：</p>
<ol>
<li><p>用多个路由器端口分别与每个Vlan相连接。</p>
</li>
<li><p>单个路由器接口与交换机的Trunk端口相连(称为dot1Q连接)，使多个Vlan共享同一条物理连接到路由器。</p>
</li>
</ol>
<p>方式1将交换机上用于和路由器互联的每个端口设为接入链路，再分别用网线与路由器上的独立端口互联。如下图所示，交换机上有两个Vlan，需在交换机上预留两个端口用于与路由器互联;路由器上同样需要有两个端口;两者之间用两条网线分别连接。</p>
<p><img src="https://img-blog.csdn.net/2018100913180614?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>每个Vlan一个物理连接</p>
<p>如图，每个Vlan都要独占一个交换机端口和一个路由器端口，并需重新布设一条网线。而路由器上通常LAN接口有限，这无疑带来扩展性问题。</p>
<p>方式2将用于连接路由器的交换机端口设为汇聚端口，而路由器上的端口也必须支持汇聚链路。双方用于汇聚链路的协议也必须相同。接着在路由器上定义对应各Vlan的“子接口(Sub Interface)”。尽管实际与交换机连接的物理端口只有一个，但在理论上可将其分割为多个虚拟端口。如下图所示。</p>
<p><img src="https://img-blog.csdn.net/20181009131837792?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>Vlan Trunking</p>
<p>使用这种Vlan Trunking技术，可使多个Vlan的业务流共享相同的物理连接，通过在汇聚链路上传递带标签的帧来区分各Vlan的流量。通常情况下，Vlan间路由的流量不足以达到链路的线速度，使用Vlan Trunking的配置，可提高链路的带宽利用率，节省端口资源以及简化管理(网络新增Vlan时只需在路由器上新设一个对应新Vlan的子接口，无需重新布线)</p>
<p>【例】不同Vlan间通信时数据的流程，如下图所示。</p>
<p><img src="https://img-blog.csdn.net/20181009131858816?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>不同Vlan间通信流程</p>
<p>主机PC1通过通信目标IP地址(192.168.2.1) 与子网掩码计算比较发现PC2与本机不属于同一网段，不能直接访问。根据IP通信规则，PC1查找本机路由表寻找相应的网关。在实际网络中，主机通常只配置默认网关(Default Gateway，GW)，故PC1找到默认网关。然后，PC1在本机ARP高速缓存中查找默认网关(即路由器)的MAC地址，若没有则向外广播发送一个ARP请求帧，其目的MAC地址为全1，源MAC地址为本机MAC地址，请求的IP地址为网关192.168.1.100。从路由器返回的ARP单播应答帧中得到路由器MAC地址R后，接下来就按图中所示的步骤向PC2发送数据帧①，其目的MAC地址是路由器地址R、但目的IP地址仍是最终要通信的对象PC2的地址。</p>
<p>交换机在端口1上收到数据帧①后，检索MAC地址表中与端口1同属一个Vlan的表项。汇聚链路被视为属于所有的Vlan，因此端口6也属于检索对象。检索后交换机得知往MAC地址R发送数据帧时，需经过端口6转发。</p>
<p>从汇聚端口6发送数据帧时，会附加Vlan识别信息。图中数据帧②被加上原属的红色Vlan标签后，进入汇聚链路。路由器收到数据帧②后，确认其Vlan标签，交由负责红色Vlan的子接口接收。</p>
<p>接着，根据路由器内部的路由表，判断该向哪里转发。由于目标网络192.168.2.0/24属于蓝色Vlan，且该网络通过子接口与路由器直连，因此只需从负责蓝色Vlan的子接口转发即可。此时数据帧的目的MAC地址被改成PC2的MAC地址;由于需要经过汇聚链路转发，故附加属于蓝色Vlan的识别信息(数据帧③)。</p>
<p>交换机收到数据帧③后，根据Vlan标签从MAC地址表中检索属于蓝色Vlan的表项。由于通信目标PC2连接在端口3上且该端口为接入端口，因此交换机剥除数据帧的Vlan标签后(数据帧④)转发给端口3，最终PC2成功收到PC1发来的数据帧。</p>
<p>可见，Vlan间通信时，即使双方都连接在同一台交换机上，也必须经过“发送方→交换机→路由器→交换机→接收方”这样一个流程。在进行三层路由转发时，数据包IP地址保持不变，MAC地址则在每个节点都会改变。</p>
<p>* 三层交换机路由</p>
<p>使用VLAN Trunking后，用传统路由器进行Vlan间路由在性能上存在一定的不足：由于路由器采用通用CPU，转发完全依靠软件处理，同时支持各种通信接口，给软件带来较大负担。软件要处理包括报文接收、校验、查找路由、选项处理、报文分片等，导致性能不可能很高。就Vlan间路由而言，流量会集中到路由器和交换机互联的汇聚链路部分，该部分容易成为速度瓶颈。</p>
<p>由于Vlan间通信比较简单，只需查下路由表，所以可将交换机集成查路由表的专用芯片(ASIC)，实现二层交换和三层路由的功能集成，即三层交换机(Layer 3 Switch)。</p>
<p>三层交换机的设计基于对IP路由的仔细分析，提取出IP路由中每个报文都必经的简化过程：</p>
<p>IP路由中绝大多数报文不包含IP选项，因此多数情况下无需处理报文IP选项;</p>
<p>不同的网络报文长度不同，为支持各种异构网络的互连，IP实现了报文分片功能，但在全以太网环境中，数据帧(报文)长度固定，因此可裁减报文分片功能;</p>
<p>三层交换机采用与路由器最长地址掩码匹配不同的方法，使用精确地址匹配的方式处理，有利于硬件实现快速查找;</p>
<p>三层交换机采用Cache方法，将最近经常使用的主机路由放入硬件查找表。只有在该Cache中无法匹配到的条项才通过软件转发。这样，只有每个流的第一个报文通过软件转发，其后的大量数据流则在硬件中得以完成，极大提升转发性能。</p>
<p>三层交换机的内部结构可参照下面的简图。</p>
<p><img src="https://img-blog.csdn.net/20181009131920724?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>三层交换机内部结构简图</p>
<p>如图，内置的路由模块与交换模块相同，使用ASIC硬件处理路由。因此，与传统的路由器相比，可实现高速路由。并且，路由与交换模块由内部汇聚链路连接，可确保相当大的带宽。</p>
<p>对应到IP网络模型中，每个Vlan对应一个IP网段，三层交换机中的三层转发引擎在各网段(Vlan)间转发报文，实现Vlan之间的互通，因此三层交换机的路由功能通常叫做Vlan间路由(Inter-VLAN Routing)。</p>
<p>使用路由器连接时，一般需要在LAN接口上设置对应各Vlan的子接口;三层交换机则是在内部生成“VLAN接口(VLAN Interface)”，用于各Vlan收发数据。在Cisco的Catalyst系列交换机上，VLAN接口被称为SVI(Switched Virtual Interface，交换虚拟接口)。三层交换机每创建一个Vlan就会自动生成一个SVI。在SVI接口设置默认网关后，并将主机网关配置成与交换机SVI相同，即可实现不同Vlan间的路由。</p>
<p>使用三层交换机进行Vlan间路由与使用汇聚链路连接路由器与交换机相似，即需经过“发送方→交换模块→路由模块→交换模块→接收方”的流程。</p>
<p>【例】假设网络按图19连接好后，所有设备均为初始状态，也未向外发送过任何报文。若PC1已知PC2的IP地址，则可通过ping命令发送ICMP报文来获知PC1能否到达PC2。以下分析该过程。</p>
<p><img src="https://img-blog.csdn.net/20181009131945800?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>ping流程网络拓扑</p>
<p>⑴ PC1将自身IP和子网掩码255.255.255.0相与得到网络号1.1.1.0，将PC2的IP与子网掩码相与得到网络号2.2.2.0，得知PC2与自己不在同一网段。于是PC1检索路由表得到默认网关。PC1欲向网关传递信息，但此时PC1中ARP表为空，所以向默认网关(交换机三层接口)发出ARP请求帧，请求网关MAC地址。该帧目的MAC地址为全1，源MAC地址为本机MAC地址，请求的IP地址为网关1.1.1.1;</p>
<p>⑵ SW收到ARP请求帧，对其附加端口PVid(10)的标签;</p>
<p>⑶ SW用ARP请求帧的Mac1和Vid10查找MAC转发表，发现没有该项，则进行学习，即在表中添加“Mac1—Vid10—Port1”的记录;并将源IP和MAC的对应关系(“1.1.1.2—Mac1”)记录到ARP表，表明目的IP为1.1.1.2的数据帧转发时目的MAC为Mac1，同时需路由到端口Port1;</p>
<p>⑷ ARP请求的目的地址是广播地址，SW将其洪泛到该Vlan的每个端口(除入端口);同时SW自身截获一份上送CPU(网关)，发现是询问自己的MAC，于是回复ARP单播应答帧，目的MAC为PC1的Mac1，源MAC为网关的MAC地址GwMac1，源IP为1.1.1.1，目的IP为PC1的1.1.1.2;</p>
<p>⑸ PC1收到SW发来的ARP应答帧，得到SW三层网关MAC地址，将“1.1.1.1—GwMac1”记录到ARP表。PC1向SW发送ICMP请求帧，目的IP为PC2的IP(2.2.2.2)，目的MAC为网关MAC，源IP和源MAC为PC1的;</p>
<p>⑹ SW收到ICMP请求帧，对其附加端口PVid(10)的标签，然后进行源MAC地址学习，发现二层转发表有该条目，更新老化时间。因该帧目的MAC地址是网关，SW送交三层路由处理。</p>
<p>⑺ 在三层首先检查IP报文的版本、IP首部检验和TTL是否正确，若不正确则标记丢弃并交由CPU处理;正确则在三层主机路由表(又称L3表)中查找目的IP(即PC2的IP 2.2.2.2)。此时L3表中只包含与自己直连的32位地址(包括自身接口)及步骤⑶中ARP表学习后下发的PC1信息，而找不到PC2的信息。进而按最长前缀匹配算法查找子网路由表(又称Longest Prefix Match即LPM表)得到2.2.2.1目的网段的条目，下一跳的IP地址为 2.2.2.1;</p>
<p>⑻ 索引回L3表查找2.2.2.1，得到该条目，发现要提交CPU处理(CPU也需要看作是一个端口);</p>
<p>⑼ CPU没有到PC2的路由，但PC2的目的IP属于自己接口地址2.2.2.1的网段，故向接口Vlan20所包含的所有物理端口广播一个ARP请求帧，源MAC地址为交换机接口的三层MAC地址GwMac2，源IP地址为2.2.2.1，请求IP地址2.2.2.2的MAC地址;</p>
<p>⑽ PC2收到ARP请求，学习“2.2.2.1—GwMac2”加入ARP表;并回复ARP应答帧，目的IP为交换机接口Vlan20的IP地址2.2.2.1，目的MAC为交换机接口Vlan20的MAC地址GwMac2;</p>
<p>⑾ SW收到PC2发送的ARP应答帧，附加端口PVid(20)后在MAC表中查找“Mac2+Vid20”，没找到则学习源地址，在MAC转发表中添加PC2相关记录。因该帧目的MAC为网关地址，故提交三层处理;</p>
<p>⑿ 三层首先检查报文正确性，无误则在L3表中查找目的IP。由于目的IP为本机，故上送CPU处理。CPU对报文处理后得到“2.2.2.2—Mac2”将相关信息加入ARP表(CPU下发给L3表进行记录)。</p>
<p>⒀ PC1向SW发送的第一个ICMP请求帧存储在内存中，此时交由CPU进行IP报文头部修改(TTL减1,FCS重新计算封装)和MAC封装(目的MAC地址改为PC2的MAC地址，源MAC地址改为SW三层MAC地址)并发送给PC2，如果超时则丢弃，CPU发送ICMP超时给PC1;</p>
<p>⒁ PC2收到PC1发来的ICMP请求后，回复ICMP应答帧，目的IP为PC1的IP 1.1.1.2，同样PC2发现该地址和自己不在同一子网，需要网关进行转发。之前PC2已学习到交换机接口Vlan20的ARP，此时根据该ARP将ICMP应答帧目的MAC地址填为网关MAC地址GwMac2发送出去。交换机收到帧后，发现目的MAC地址是网关地址，取出帧中的目的IP地址1.1.1.1查找路由。之前交换机已学习到该IP的路由，所以会查找到主机路由表中相应的路由并将帧目的MAC地址换成Mac1，源MAC地址换成网关MAC地址GwMac2，发送到端口Port1上。最终，PC1就收到PC2的ICMP应答。</p>
<p>⒂ 经过以上流程后，PC1和PC2分别学到各自网关接口的ARP，交换机也有了分别到达PC1和PC2的路由。后续的报文不再通过路由，而直接由L3表中对应的表项进行硬件转发。</p>
<p>注意，此例步骤说明相比“路由器路由”一节稍为详细，所补充的部分并非差异。</p>
<p>* VLAN间通信加速</p>
<p>Vlan间路由时，并非所有数据都需要经过外部路由器或三层交换机的内置路由模块。例如，使用FTP(File Transfer Protocol，文件传输协议)传输容量为数兆字节以上的较大文件时，由于MTU(Maximum Transfer Unit，最大传输单元)的限制，IP协议会将数据分割成小块后传输并在接收方重新组合。这些被分割的数据具有相同的源/目的IP地址和(TCP/UDP)端口号。这样一连串数据流被称为“流(Flow)”。只要将流最初的数据正确地路由以后，后继数据理应也会被同样地路由，实际上无需路由器处理。</p>
<p>三层交换机进行高速Vlan间路由时，整个流的第一块数据仍旧由交换模块转发→路由模块路由→交换模块转发到目标所连端口。这时，将第一块数据路由结果记录到缓存里保存下来。需记录的信息有源/目的IP地址和(TCP/UDP)端口号、交换机收发端口号及转发目标MAC地址等。</p>
<p>同一个流的第二块及后续的数据到达交换机后，直接通过查询先前保存在缓存中的信息查出转发端口号后即可转发给目标所连端口。这样，就无需反复经由内部路由模块中继，而仅凭交换机内部的缓存信息就足以判断应该转发的端口。这时，交换机对数据帧进行由路由器中继时相似的处理，如改写MAC地址、IP包头中的TTL和Check Sum校验码信息等。</p>
<p>若Vlan间路由信息变化，路由模块会发送控制信息给交换模块，交换机重新建立转发路径，按照常规方式转发。</p>
<p>通过在交换机上缓存路由结果，可实现以缆线速度(Wired Speed)接收发送方传输来的数据、并且能够全速路由、转发给接收方。</p>
<p>* 路由器和交换机配合构建LAN</p>
<p>虽然三层交换机能提供比传统型路由器更为高速的路由处理，但网络中仍有使用路由器的必要性。其必要性主要表现在以下几个方面：</p>
<p>用于与WAN连接。绝大多数三层交换机只配有LAN(以太网)接口。少数高端交换机上也有用于连接WAN的串行接口或ATM接口，但大多数情况下连接WAN需要用到路由器。</p>
<p>保证网络安全。在三层交换机上，通过数据包过滤也能确保一定程度的网络安全。但使用路由器所提供的各种网络安全功能(数据包过滤、基于IPSec构建VPN、利用RADIUS进行用户认证等)，用户可构建更为安全可靠的网络。</p>
<p>支持TCP/IP以外的网络架构。尽管TCP/IP已成为当前主流的网络协议架构，但还有不少网络利用Novell Netware下的IPX/SPX或Macintosh下的Appletalk等网络协议。三层交换机中，除部分高端机型外基本上只支持TCP/IP。路由器对于需要其他网络协议的环境必不可少。</p>
<p>注：少数高端交换机也能支持上述路由器的功能。例如Cisco的Catalyst6500系列就可选择与WAN连接的接口模块;还有可选的基于IPSec实现VPN的模块;并且也能支持TCP/IP以外的其他网络协议。</p>
<p>下图是一个路由器和交换机搭配构建LAN的实例。</p>
<p><img src="https://img-blog.csdn.net/20181009132007856?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>路由器和交换机搭配构建局域网</p>
<p>利用在各楼层配置的二层交换机定义Vlan，连接TCP/IP客户主机。各楼层间的Vlan间通信利用三层交换机的高速路由加以实现。若网络环境要求高可靠性，还可考虑冗余配置三层交换机。与WAN的连接，则通过带有各种网络接口的路由器进行，并通过路由器的数据包过滤和VPN等功能实现网络安全。此外，使用路由器还能支持Novell Netware等TCP/IP之外的网络。</p>
<p>通过使用Vlan构建局域网，用户能够不受物理链路的限制而自由地分割广播域。通过路由器与三层交换机提供的Vlan间路由，能够适应灵活多变的网络结构。但由于利用Vlan容易导致网络复杂化，因此也会造成整个网络的组成难以把握。特别是由于数据流纵横交错，一旦发生故障时，准确定位并排除故障会比较困难。</p>
<p>VLAN扩展</p>
<p>* VLAN Translation</p>
<p>Vlan转换又称Vlan翻译或Vlan映射，它允许用于边缘接入的不同以太网交换机的Vlan ID设置互相重叠，通过以太网交换机的Vlan转换功能，将不同交换机的重复Vlan ID修改为不同的Vlan ID，并从上联端口发送出去，从而在二层核心交换机中也实现用户的隔离，以简化边缘接入交换机的设置。</p>
<p>例如PON系统中，通过Vlan转换模式，OLT或ONU设备将上行以太网帧中用户自行添加的Vlan标签(Vid可能不是其独用的，可能在同一个系统内有其他用户使用相同的Vid)转换为唯一的网络侧Vlan标签;并在下行方向执行相反的操作。</p>
<p>* QinQ</p>
<p>随着以太网技术在运营商网络中的大量部署(城域以太网)，利用IEEE 802.1Q Vlan对用户进行隔离和标识受到很大限制。因为802.1Q定义的Vlan标签域仅能表示4096个Vlan(12比特)，对于城域网中需要标识的大量用户捉襟见肘，于是QinQ技术应运而生。</p>
<p>QinQ(也称Stacked Vlan即Vlan堆叠或Double Vlan)技术出自IEEE 802.1ad标准，是对基于IEEE 802.1Q封装的隧道协议的形象称呼。QinQ实现在原有802.1Q Vlan标签(内层标签，也称Customer Vlan，CVlan)之外再增加一个Vlan标签(外层标签，也称Service Provider Vlan，SVlan)，外层公网标签将内层用户私网标签屏蔽起来，使报文携带两层Vlan标签穿越运营商骨干网络(公网)，到达用户另一端网络边缘交换机时再剥除外层公网Vlan标签，还原出内层用户标签便于用户进行下一步的通信。可见，QinQ技术不仅可有效拓展Vlan的数量空间(多达4096×4096个)，而且可提供简单的二层VPN(虚拟专用网)隧道，特别适合以三层交换机为骨干的小型企业网或小型局域网。</p>
<p>* QinQ报文格式</p>
<p>QinQ报文封装格式如下图所示。公网传输时内层Vlan标签为用户私网Vlan标签，外层Vlan标签由运营商分配给用户。私网Vlan标签被透明传输，故不同的用户Vlan标签可重复使用，只需外层Vlan标签在公网上唯一即可。</p>
<p><img src="https://img-blog.csdn.net/20181009132032217?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>QinQ报文封装格式</p>
<p>某些厂商将QinQ报文外层标签的TPID值设置为0x9100或其他数值。为和这些设备互通，用户应可自行配置TPID值，使发送到公网中的QinQ帧携带的TPID值与其他厂商相同。由于TPID字段在以太网帧中所处位置与不带Vlan标签的帧中协议类型(Type)字段所处位置相同，为避免造成网络中数据帧转发和接收混乱，不允许用户将TPID值配置为常用协议类型值。</p>
<p>* QinQ封装方式</p>
<p>QinQ封装是指如何把单层Q报文转换为双层Q报文， 封装主要发生在城域网面向用户的UPE设备，一般在交换式的端口上进行。根据不同的封装依据，QinQ可分为基于端口的QinQ、基于流的QinQ和路由子接口上进行的特殊QinQ封装。</p>
<p>* 基于端口的QinQ封装</p>
<p>基于端口封装指进入一个端口的所有流量全部封装一个外层Vlan。当端口收到报文时，无论报文是否带有Vlan标签，交换机都会为该报文附加本端口缺省Vlan的标签。若接收报文已带标签，则该报文成为双标签报文;若接收报文不带标签(untagged)，则该报文将携带本端口缺省Vlan标签。基于端口的QinQ封装容易实现，故业界主流厂家的三层交换机都支持。其缺点是外层Vlan标签封装方式死板，当多个不同用户或用户网络以不同的Vlan接入到同一个端口时无法区分用户，即无法在一个端口上根据业务种类选择多个外层标签，从而很难有效支持单端口多业务的灵活运营。</p>
<p>此外，基于端口封装需增加链路，组网复杂，不利于扩展维护。</p>
<p>* 基于流的QinQ封装</p>
<p>基于流的QinQ封装先对进入端口的数据进行流分类，然后对于不同的数据流选择是否插入外层标签以及插入何种外层标签，因此也称灵活QinQ(Smart QinQ或Selective QinQ)。当一些数据流(如组播)出口不添加外层标签，或单个端口根据内层Vlan添加不同的外层标签时，就需要用到灵活QinQ。</p>
<p>灵活QinQ根据流分类方法又可细分如下：</p>
<ol>
<li>根据报文中的Vlan区间分流</li>
</ol>
<p>当同一用户的不同业务使用不同Vlan时，可根据Vlan区间进行分流，如PC上网Vlan范围是101<del>200，IPTV的Vlan范围是201</del>300，VoIP的Vlan范围是301~400。面向用户的设备收到用户数据后，根据Vlan范围，对上网业务插入100的外层标签，对IPTV插入300的外层标签，对VoIP插入500的外层标签。</p>
<ol start="2">
<li>根据报文中的Vid+Priority分流</li>
</ol>
<p>不同业务有不同优先级，当同一用户的多种业务使用相同Vlan时，可根据不同业务的优先级进行区分，然后插入不同的外层标签。</p>
<ol start="3">
<li>根据报文的目的IP地址分流</li>
</ol>
<p>当同一台PC既包括上网业务又包括语音业务时，不同业务目的IP不同，可利用ACL对目的IP地址进行分流，然后插入不同的外层标签。</p>
<ol start="4">
<li>根据ETYPE进行QinQ封装</li>
</ol>
<p>当同一用户既包括PPPOE的上网业务，又包括IPOE的IPTV业务时，这些终端都通过一个Vlan上行，可根据PPPoE(0x8863/8864)和IPoE(0x0800)报文不同的ETYPE协议号作为QinQ的分流依据。</p>
<p>当前灵活QinQ主要应用于运营商接入网络。在运营商网络中给接入用户分配一个Vlan，以便于追踪问题和防止不同用户间互访，用外层标签区分用户应用;或在接入环境中用外层标签区分不同的接入地点，用内外两层标签唯一标识一个接入用户。</p>
<p>* 路由子接口QinQ封装</p>
<p>QinQ封装一般在交换式端口上直接进行，但特殊情况下QinQ也可在路由子接口上进行封装。</p>
<p>当核心网采用VLL/PWE3透传用户数据时，NPE设备上的路由子接口可根据用户Vlan ID封装外层Vlan，通过外层Vlan接入VLL/PWE3。可通过一个QinQ Stacking子接口来透传多个标识用户的Vlan ID。</p>
<p>该方式也是基于流的QinQ封装，但QinQ Stacking子接口只能与L2VPN(PWE3/VLL/VPLS)结合起来才有意义，不支持三层转发功能。</p>
<p>* QinQ报文转发</p>
<p>三层交换机连接用户网络的端口称为Customer端口，连接骨干网的端口称为Uplink端口，骨干网的边缘接入设备称为PE(Provider Edge)。一般用户侧网络通过Trunk方式接入骨干边缘交换机，骨干网络内Uplink端口通过Trunk方式对称连接。</p>
<p>在通过QinQ实现简单二层VPN的过程中，报文按如下方式转发：</p>
<p><img src="http://s3.51cto.com/wyfs02/M01/30/68/wKiom1OniPyC3MG7AABjZjk3UKs235.jpg-wh_600x-s_4160358895.jpg" alt="img" loading="lazy"></p>
<p>QinQ报文转发过程</p>
<p>当报文从用户侧网络1到达运营商骨干网边缘交换机Switch A的Customer端口时，无论该报文是否携带标签，Switch A都基于端口PVid对其强行插入外层标签(Vid=10)。在骨干网络内部，报文沿着Vlan10的Trunk端口传播，用户私网标签在骨干网络中保持透明状态，直至到达边缘交换机Switch B。</p>
<p>Switch B发现与用户网络2相连的端口为Customer端口，按照传统的802.1Q协议剥离外层标签，恢复成用户的原始报文，转发到用户侧网络2，从而实现一个简单二层VPN功能。PE接入点用外层SVlan隔离，安全且节省Vlan。对用户的管理可基于外层SVlan和内层CVlan唯一定位。</p>
<p>易知，若Vlan映射为C→S+C，则为Vlan堆叠;若Vlan映射为C→S，则为Vlan转换。</p>
<p>注意，MAC地址学习、生成树等均基于外层SVlan。</p>
<p>* QinQ优缺点</p>
<p>利用QinQ提供接入业务时具有以下优点：</p>
<p>Ÿ可解决日益紧缺的公网Vlan资源问题;</p>
<p>Ÿ用户可规划自己的私网Vlan ID，不会与公网Vlan ID冲突;</p>
<p>Ÿ提供一种较为简单的二层VPN解决方案;</p>
<p>Ÿ使用户网络具有较高的独立性，在服务提供商升级网络时，用户网络不必更改原有配置;</p>
<p>Ÿ可按不同层次的Vlan ID区分不同的业务，以区别提供不同的管道、QoS策略;</p>
<p>ŸQinQ技术上可多层嵌套，仅受以太网帧长度的限制，具有很好的扩充性。</p>
<p>但随着用户数量的增加，QinQ模型也会带来可扩展性问题。某些用户可能希望在分支机构间传输数据时可携带自己的Vlan ID，这就使采用QinQ技术的管理服务提供商面临以下两个问题：第一个客户的Vlan标识可能与其他客户冲突;服务提供商将受到客户可使用标识数量的严重限制。若允许用户按他们自己的方式使用各自的Vlan ID空间，则核心网络仍存在4096个Vlan的限制。</p>
<p>* PVlan(Cisco)</p>
<p>PVLAN(Private VLAN，私有VLAN)即所有工作站在同一个子网中，但工作站只能与自己的默认网关通信。PVlan采用两层Vlan隔离技术，只有上层Vlan全局可见，下层Vlan互相隔离。若将交换机的每个端口划为一个(下层)Vlan，则实现所有端口的隔离。</p>
<p>每个Private Vlan包含两种Vlan：主Vlan(Primary Vlan)和辅助Vlan(Secondary Vlan)，后者又分为隔离Vlan(Isolated Vlan)和团体Vlan(Community Vlan)。</p>
<p>PVlan通信范围：</p>
<p>主Vlan可与所有与之关联的隔离Vlan、团体Vlan通信。不同主Vlan之间的任何端口都不能互相通信(此处“互相通信”指二层连通性)。</p>
<p>团体Vlan可与处于相同团体Vlan内的团体端口通信，也可与PVlan中的混杂端口通信。 每个PVlan可有多个团体Vlan。</p>
<p>隔离Vlan不可与处于相同隔离Vlan内的其它隔离端口通信，只可与混杂端口通信。每个PVlan中只能有一个隔离Vlan。</p>
<p>相应地，交换机物理端口有三种类型：</p>
<p>隔离端口(Isolated port)，与用户相连，属于隔离Vlan。只可与混杂端口通信，彼此不能通信。</p>
<p>团体端口(Community port)，属于团体Vlan。不仅可与混杂端口通信，也可与同一团体中的其它物理端口进行通信。</p>
<p>混杂端口(Promiscuous port)，与路由器或三层交换机接口相连，属于主Vlan。它收到的流量可发往隔离端口和团体端口。</p>
<p><img src="https://img-blog.csdn.net/20181009132134979?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>PVlan端口类型</p>
<p>如图，port1、port2和port3三者之间互相隔离，不允许通信，只能与port6通信;port4和port5间可以通信，也可以与port6通信。所有端口只需分配共享一个IP地址。</p>
<p>PVlan的应用对于保证接入网络的数据通信安全性非常有效。所有用户都接入PVlan，每个用户一个Vlan，用户间二层互相隔离。用户只需与自己的默认网关连接，一个PVlan不需要多个Vlan和IP子网就可提供具备二层数据通信安全性的连接。PVlan功能可保证同一个Vlan中的各个端口相互之间不能通信，但可穿过Trunk端口。这样即使同一Vlan中的用户，相互之间也不会受到广播的影响。</p>
<p>对于上层交换机来说，可认为下层交换机中只有几个主Vlan，而不必关心主Vlan 中的端口实际所属的Vlan，从而简化配置并节省Vlan 资源。一个主Vlan中包含的所有Private Vlan处于同一个子网中，可节省子网数目和IP 地址资源。</p>
<p>PVlan通常用于企业内部网，用来阻断连接到某些接口或接口组的网络设备间的相互通信，但却允许与默认网关进行通信。尽管各设备处于不同的PVlan中，但可使用相同的IP子网。</p>
<p>* SuperVlan</p>
<p>不同Vlan间通信需要通过三层路由进行转发，而每个子网(Vlan)都需要设置一个路由地址。每分配一个子网，就有三个IP地址(子网的网络号、广播地址和默认网关)被占用。同时，这种地址分配的固有约束也严重降低编址的灵活性，使许多闲置地址被浪费。为提高IP地址的利用率，Super VLAN超网应运而生。</p>
<p>SuperVlan(又称VLAN Aggregation，即Vlan聚合)把多个子Vlan(SubVlan)聚合成一个SuperVlan，这些SubVlan共同使用一个IP子网和默认网关。通过VLAN聚合可使所有在同一子网上的终端用户通过统一的路由(同一子网网段地址)而使用不同的广播域。</p>
<p>利用SuperVlan技术，只需为SuperVlan分配一个子网地址，并为每个用户或子网建立一个SubVlan。所有SubVlan可灵活分配SuperVlan子网中的IP地址，使用SuperVlan的默认网关。每个SubVlan都是一个独立的广播域，保证不同用户之间的隔离;SubVlan间通信需要通过SuperVlan进行路由。由于各个SubVlan不需要真正的子网网段，可有效提高IP利用率。这样的子网可分配足够小且扩展方便，无需重新定义子网大小。</p>
<p>SuperVlan内的主机使用同一个网段的地址，共用同一个上行网关。即使是属于不同SubVlan的主机，由于其地址同属一个子网，设备会认为它们是二层互通的，会做二层转发，而不会送网关进行三层转发。而实际上SubVlan间在二层互相隔离，因此需要采用ARP代理(Proxy)来实现SubVlan间的互通。Subvlan之间以及和外部通信通过ARP代理，所有Subvlan内主机发送的ARP请求都由SuperVlan的MAC地址作为ARP应答。</p>
<p>注意，SuperVlan并不包含物理端口，可将其视作逻辑的三层概念——若干SubVlan的集合。对交换芯片来说SuperVlan是透明的，仍按芯片中的Vlan进行转发。在基于端口的Vlan中，二层通信时，无论收发都不会有针对SuperVlan的报文。即进入SubVlan设备的数据帧会附加该SubVlan的标签，从Trunk端口发出时也不会改为SuperVlan的标签。</p>
<p>* ARP Proxy原理</p>
<p>一个物理网络子网(Subnet)中的源主机向另一个物理网络子网中的目的主机发送ARP request请求，和源主机直连的网关用自己接口的MAC地址代替目的主机回复ARP reply应答，该过程称为ARP代理。</p>
<p>ARP代理的基本过程如下：</p>
<p>源主机向另一物理网络的子网中的目的主机发ARP请求;</p>
<p>与源主机网络相连的网关已使能ARP代理功能，若存在到达目的主机的正常路由，则代替目的主机应答自己接口的MAC地址;</p>
<p>源主机向目的主机发送的IP报文都发给路由器;</p>
<p>路由器对报文做正常的IP路由转发;</p>
<p>发往目的主机的IP报文通过网络，最终到达目的主机。</p>
<p>*  SubVlan间的三层互通</p>
<p>【例】SuperVlan 2包含SubVlan 21和SubVlan 22，分析PC1与PC2的互通过程(假设PC1的ARP表中无PC2对应表项)。IP地址和MAC地址如下图所示。</p>
<p><img src="https://img-blog.csdn.net/20181009132156672?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>用ARP代理实现不同SubVlan间的三层互通</p>
<p>PC1要发送报文给PC2，则将PC2的IP地址(1.1.1.3)与自己所在网段1.1.1.0 /24进行比较。由于SubVlan 21和SubVlan 22同属一个SuperVlan所在子网，于是发广播ARP请求PC2的MAC地址;而PC2并不在SubVlan 21的广播域内，无法接收到该ARP请求。当PC1在二层发出的ARP请求在其广播域内没有回应时，交换机网关运行ARP代理，查找路由表并发现下一跳为直连路由接口(SubVlan 22)，则在该接口发送一个ARP请求PC2的MAC地址;得到PC2回应后，就把网关自己的MAC地址GwMac当作PC2的MAC地址(实际是Mac2 )回给PC1 (不同设备实现略有不同)。之后，主机PC1要发给PC2的报文都发给交换机，由三层交换机做正常的三层转发。</p>
<p>PC2回送给PC1的报文转发过程和上述的PC1到PC2的报文流程类似。</p>
<p>* SuperVlan与外部的三层通信</p>
<p>【例】交换机1上配置SuperVlan 2、SubVlan 21和22，并有一个正常的Vlan 10。交换机2上配置两个正常的Vlan 10和20。假设SuperVlan 2下SubVlan 21中的PC1想访问交换机2下连的PC3，分析其上下行报文的转发流程。</p>
<p><img src="https://img-blog.csdn.net/20181009132223257?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZXl1bmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" loading="lazy"></p>
<p>Super VLAN与外部的三层通信图例</p>
<p>* 报文上行流程</p>
<p>PC1 (1.1.1.2/24)要访问PC3(1.1.3.2/24)，因为IP地址不在一个网段，故PC1发送ARP请求给自己的网关，请求网关的MAC地址。SubVlan21收到ARP报文后，将其上送CPU。CPU查找SubVlan和SuperVlan的对应关系，知道应回应SuperVlan2的MAC地址(不同设备实现可能略有不同)，且知道回应报文应从SubVlan21发送给PC1。</p>
<p>PC1学到网关MAC地址后，开始发送目的MAC为SuperVlan2、目的IP为1.1.3.2的报文。SubVlan21收到报文后，检测目的MAC后得知应进行三层转发，于是查找转发路由表，发现下一跳地址为1.1.2.2，出接口为Vlan10，并通过ARP表项和MAC表项确定出端口，把报文发送给交换机2，交换机2根据正常的转发流程把报文发送给PC3。</p>
<p>* 报文下行流程</p>
<p>PC3回应的报文，在交换机2上按正常的转发流程到达交换机1，此时交换机1查找转发路由表表项，发现目的地址为PC1(1.1.1.2)，对应的出接口为SuperVlan2。但SuperVlan2未包含任何端口，那么如何确定报文的出端口呢?</p>
<p>仔细查看可发现，尽管转发路由表中1.1.1.2/24网段的出接口为SuperVlan2，但在ARP表中IP地址1.1.1.2对应的出接口却为SubVlan 21。而芯片真正用来构建转发表时所用的出接口应是ARP表中对应的SubVlan接口，通过在SubVlan下查找目的MAC地址即可找到正确的出端口。于是，PC3的回应报文就可正常到达PC1。</p>
<p>注意，若位于一个SuperVlan内的计算机运行基于广播或组播的高层应用，则这些应用被限制在SubVlan内。因此，应仔细分析高层应用，在没有基于组播或广播的应用时才可使用SuperVlan。</p>
<p>原文链接：<a href="https://www.cnblogs.com/xieyunc/p/9784041.html">https://www.cnblogs.com/xieyunc/p/9784041.html</a></p>
]]></content>
      <categories>
        <category>VLAN</category>
      </categories>
      <tags>
        <tag>VLAN</tag>
      </tags>
  </entry>
  <entry>
    <title>企业园区网络建设技术方案（华为）</title>
    <url>/2019/07/16/67/</url>
    <content><![CDATA[<p>原文链接：<a href="https://zhuanlan.zhihu.com/p/53512258">https://zhuanlan.zhihu.com/p/53512258</a></p>
<h2 id="1-项目概述"><a href="#1-项目概述" class="headerlink" title="1 项目概述"></a>1 项目概述</h2><p>根据实际情况增加项目介绍</p>
<h2 id="1-1-项目背景"><a href="#1-1-项目背景" class="headerlink" title="1.1 项目背景"></a>1.1 项目背景</h2><h2 id="1-2-项目目标"><a href="#1-2-项目目标" class="headerlink" title="1.2 项目目标"></a>1.2 项目目标</h2><h2 id="2-园区总体系统规划设计"><a href="#2-园区总体系统规划设计" class="headerlink" title="2 园区总体系统规划设计"></a>2 园区总体系统规划设计</h2><h2 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h2><p>随着企业信息化建设不断深入，企业的生产业务系统、经营管理系统、办公自动化系统均得到大力发展，对于企业园区网的建设要求越来越高。传统园区网建设初期往往面临如下问题：</p>
<p><strong>(一)</strong> <strong>网络架构较为混乱，不便于扩容和维护管理：</strong>园区网在建设初期，设备和光纤/电缆随意布放，缺乏统一的网络分层规划管理，网络拓扑相对混乱，不便于对网络性能瓶颈进行正确评估和有效扩容，给日常网络管理也带来很大难度。</p>
<p><strong>(二)</strong> <strong>网络可靠性规划不合理，影响企业生产和经营管理、造成投资浪费：</strong>由于缺乏有效的园区网规划，对于网络可靠性考虑不够，网络中既存在单点故障导致网络可靠性低、影响企业生产和经营管理行为，同时也存在网络过度冗余、造成投资浪费的现象。</p>
<p><strong>(三)</strong> <strong>网络信息安全存在隐患：</strong>网络安全性是园区网建设的重中之重，传统园区网安全漏洞较多，无法应对内外部用户日益猖獗的网络攻击行为（例如：对园区网设备进行攻击、消耗网络带宽、窃取企业核心电子资产信息），对于内部和外部用户缺乏有效的身份认证手段、用户可随意接入网络，网络层面的安全保证和防御措施也不到位，造成园区网的脆弱和易攻击。</p>
<p><strong>(四)</strong> <strong>无法满足日益增长的网络业务需求：</strong>随着企业的业务发展，出现了基于园区网基础设施的丰富增值业务需求，例如：网络接入形式要求多样化，支持WLAN无线接入，满足移动办公、大区域无线缆覆盖等特殊要求；对于企业用户访问外网进行计费，计费策略可灵活设置（时长计费、流量计费、按目的地址计费）；企业多出口链路场景下的负载均衡、灵活选路需求。传统园区网建设缺乏有效满足这些增值业务需求的统一解决方案考虑，支持这些业务存在园区网络分散建设、重复投资的问题。</p>
<p><strong>(五)</strong> <strong>缺乏简单有效的网络管理系统，企业IT网络运维部门面临很大压力：</strong>当前，企业网IT运维部门面临很大的网络运维压力，来自于园区网内外部的安全事件频发、网络可靠性低引起的网络业务中断现象，网络故障诊断、分析定位过程对于IT运维人员的技术能力和经验水平要求较高，缺乏简单有效/低成本的图形化网管工具、进行实时网络拓扑显示、状态监控和各种故障事件预警/告警展示。另外，IT运维部门也需要实施统计园区网各路径的流量信息，便于对网络带宽进行管理和规划，给后续网络扩容提供参考。</p>
<h2 id="2-2-设计原则"><a href="#2-2-设计原则" class="headerlink" title="2.2 设计原则"></a>2.2 设计原则</h2><p><strong>(一)</strong> <strong>安全性：</strong>安全性是企业园区网建设中的关键，它包括物理空间的安全控制及网络的安全控制。需要有完整的安全策略控制体系来实现企业园区网的安全控制。</p>
<p><strong>(二)</strong> <strong>可靠性、可用性：</strong>高可靠性是园区网提供使用的关键，其可靠性设计包括：关键设备冗余、链路/网络冗余和重要业务模块冗余。</p>
<p>关键设备均采用电信级全冗余设计，可实现单板热拔插、冗余的控制模块设计、冗余电源设计。采用冗余网络设计，每个层次均采用双机方式，层次与层次之间采用全冗余连接。提供多种冗余技术，采用高效、负载均衡的双机备份。</p>
<p>可采用交换机的集群或者堆叠技术，在不降低网络可靠性的前提下，减化网络架构。</p>
<p><strong>(三)</strong> <strong>可扩展性：</strong>园区网方案设计中，采用分层的网络设计；每个层次的设计所采用的设备本身都应具足够高的端口密度，为后续园区网扩展奠定基础。</p>
<p>在园区出口层、核心层、汇聚层的设备都采用模块化设计，可根据园区网的发展进行灵活扩展。</p>
<p>功能的可扩展性是园区网随着发展提供增值业务的基础。实现防火墙、负载均衡、WLAN接入、认证计费等功能，为园区网增值业务的扩展提供基础。</p>
<p><strong>(四)</strong> <strong>可维护、可管理性：</strong>网络可管理性是园区网成功运维的基础。应提供低成本、简单有效的园区网统一网管系统，对园区网所有网络设备进行管理，包括网络拓扑显示、网络状态监控、故障事件实时预警和告警、网络流量统计。</p>
<a id="more"></a>

<h2 id="3-园区网络架构规划设计"><a href="#3-园区网络架构规划设计" class="headerlink" title="3 园区网络架构规划设计"></a>3 园区网络架构规划设计</h2><h2 id="3-1-园区网络总体网络架构规划设计"><a href="#3-1-园区网络总体网络架构规划设计" class="headerlink" title="3.1 园区网络总体网络架构规划设计"></a>3.1 园区网络总体网络架构规划设计</h2><h2 id="3-1-1-典型园区网网络架构"><a href="#3-1-1-典型园区网网络架构" class="headerlink" title="3.1.1 典型园区网网络架构"></a>3.1.1 典型园区网网络架构</h2><p><img src="https://pic1.zhimg.com/80/v2-d1590ffcea82b0fe3068edc687ac18dc_hd.jpg" alt="img" loading="lazy">图 3‑1 典型园区网网络架构</p>
<p>典型园区网方案采用层次化、模块化的设计思路，按照接入层、汇聚层、核心层和出口层进行网络设备设计部署，在汇聚层交换机，通过模块化（业务单板）方式提供WLAN AC控制器、防火墙、负载均衡器等增值业务功能，满足企业日益增长的业务需求。</p>
<p>典型园区网的重要特征是不存在网络单点故障，交换机设备和链路都存在冗余备份，接入交换机与核心交换机通过双规或环网相连接，汇聚交换机双规接入核心交换机，交换机之间采用TRUNK链路保证链路级可靠性。</p>
<h2 id="3-1-2-经济型园区网网络架构"><a href="#3-1-2-经济型园区网网络架构" class="headerlink" title="3.1.2 经济型园区网网络架构"></a>3.1.2 经济型园区网网络架构</h2><p><img src="https://pic3.zhimg.com/80/v2-ffa4d15431ded70c16cff9f15017968a_hd.jpg" alt="img" loading="lazy">图 3‑2 经济型园区网网络架构</p>
<p>考虑到节省园区网网络建设投资成本，允许网络存在单点故障，不再部署冗余交换机设备，交换机之间互联采用TRUNK链路，保证链路级可靠性，但是园区网交换机设备故障，会导致网络故障和业务中断。</p>
<p>经济型的园区网汇聚层交换机仍然可通过模块化（业务单板）方式提供WLAN AC控制器、防火墙、负载均衡器等增值业务功能。</p>
<h2 id="3-1-3-虚拟交换园区网网络架构"><a href="#3-1-3-虚拟交换园区网网络架构" class="headerlink" title="3.1.3 虚拟交换园区网网络架构"></a>3.1.3 虚拟交换园区网网络架构</h2><p>图 3‑3 虚拟交换园区网网络架构</p>
<p><img src="https://pic1.zhimg.com/80/v2-744e089d67b0cf05a87b327b1af520f0_hd.jpg" alt="img" loading="lazy">图 3‑3 虚拟交换园区网网络架构</p>
<p>园区网仍然按照分层结构建设，园区交换机分为接入层交换机、汇聚层交换机和核心层交换机。为了增加园区网可靠性、降低园区网组网复杂度，园区网未来向虚拟化、扁平化方向发展，同层次交换机可以多台虚拟成一台，接入交换机通过堆叠（Stack）特性，将多台接入交换机虚拟成一台接入交换机，汇聚/核心交换机通过CSS（Cluster Switch ）将两台交换机虚拟成一台交换机。</p>
<p>园区网接入层/汇聚层/核心层交换机虚拟化后，可以减少网络节点、简化网络拓扑，二层网络不需要部署RSTP/MSTP/RRPP/Smart Link等复杂的环网协议和可靠性保护协议，实现无二层环路网络构建，提高二层网络可靠性和链路故障收敛性能，三层网络虚拟化的多台设备间路由表统一计算、路由收敛速度快，</p>
<p>通过交换机虚拟化设计，交换机互联的两条链路就可以作为Trunk链路进行管理，对于虚拟交换机而言，实现跨设备的链路聚合（TRUNK），大大增强链路可靠性，另外可实现链路的流量负载均衡，构建无二层环路网络，网络可靠性（链路故障自收敛性能）和带宽利用率都得到提高。</p>
<p><img src="https://pic4.zhimg.com/80/v2-92948290e3947c9f34c68a3eeb56d803_hd.jpg" alt="img" loading="lazy">图 3‑4 交换机集群（堆叠）方案</p>
<h2 id="3-2-园区网络分层网络规划设计"><a href="#3-2-园区网络分层网络规划设计" class="headerlink" title="3.2 园区网络分层网络规划设计"></a>3.2 园区网络分层网络规划设计</h2><p>园区网的网络层次采用业界成熟的三层架构：接入、汇聚和核心，最后企业园区通过出口层网络设备（路由器或交换机）连接到外网通过。</p>
<p>这种分层的网络架构，可以保证根据的业务需求，分别对不同层次进行扩容。</p>
<h2 id="3-2-1-接入层"><a href="#3-2-1-接入层" class="headerlink" title="3.2.1 接入层"></a>3.2.1 接入层</h2><p>接入层交换机一般部署在楼道的网络机柜中，接入园区网用户（PC机或服务器），提供二层交换机功能，也支持三层接入功能（接入交换机为三层交换机）。</p>
<p>由于接入层交换机直接接园区网用户，根据用户接入信息点数目和类型（GE/FE），对接入交换机的GE/FE接口密度有较高的要求。另外接入交换机部署在楼道网络机柜，数量大，对于成本、功耗和易管理维护等特性要求较高。</p>
<p>高用户密度的园区接入场景推荐使用S5300/S9300作为接入交换机，低用户密度的场景推荐使用S2300/S3300作为接入交换机。</p>
<h2 id="3-2-2-汇聚层"><a href="#3-2-2-汇聚层" class="headerlink" title="3.2.2 汇聚层"></a>3.2.2 汇聚层</h2><p>园区汇聚层交换机一般部署在楼宇独立的网络汇聚机柜中，汇聚园区接入交换机的流量，一般提供三层交换机功能，汇聚层交换机作为园区网的网关，终结园区网用户的二层流量，进行三层转发。</p>
<p>根据需要，可以在汇聚交换机上集成增值业务板卡（如防火墙，负载均衡器、WLAN AC控制器）或者旁挂独立的增值业务设备，为园区网用户提供增值业务。</p>
<p>汇聚交换机需要提供高密度的GE接口，汇聚接入交换机的流量，通过10GE接口接到核心交换机，推荐使用S9300系列交换机作为园区汇聚层交换机。</p>
<h2 id="3-2-3-核心层"><a href="#3-2-3-核心层" class="headerlink" title="3.2.3 核心层"></a>3.2.3 核心层</h2><p>园区核心层交换机部署在园区核心机房中，汇聚各楼宇/区域之间的用户流量，提供三层交换机功能，连接园区外部网络到内部用户的“纵向流量”和不同汇聚区域用户之间的“横向流量”要求高密10GE、高转发性能。</p>
<p>推荐使用S9300作为园区核心层交换机。</p>
<h2 id="3-2-4-出口层"><a href="#3-2-4-出口层" class="headerlink" title="3.2.4 出口层"></a>3.2.4 出口层</h2><p>园区出口路由器，连接Internet/WAN广域网和园区内部局域网。推荐华为AR和SRG系列路由器作为企业出口路由器。</p>
<p>对于中小型企业园区网，核心层和出口层可进行合并，通过核心交换机（S9300）的WAN接口板的广域网接口（POS等）直接与外网相连。 3.3 二三层网络分界点设计</p>
<p><strong>二三层网络分界点（用户网关）设置在汇聚交换机</strong></p>
<p>汇聚交换机作为用户的网关设备，接入交换机与汇聚交换机之间是二层网络，通过STP/RSTP/MSTP/RRPP保证网络可靠性和防止二层网络环路产生，汇聚交换机与核心交换机之间是三层网络，运行OSPF等路由协议，通过等价路由、IP FRR保证三层网络可靠性、加快路由收敛时间。</p>
<p>【优点】</p>
<ol>
<li><p>接入交换机是二层交换机，成本低，并且可保护客户现有低端二层交换机的投资；</p>
</li>
<li><p>高可靠性，二层网络故障收敛速度快；</p>
</li>
</ol>
<p>【缺点】</p>
<ol>
<li><p>接入交换机和汇聚交换机之间存在二层环路风险，需要配置保证；</p>
</li>
<li><p>接入交换机与汇聚交换机之间链路利用率低，需要启用二层协议负载均担多实例以提高链路利用率。</p>
</li>
</ol>
<p>本方案的缺点可以通过接入交换机堆叠/汇聚交换机集群（交换机虚拟化）方案来解决。园区汇聚交换机作为二三层网络分界点（用户网关设备）是经典的园区网架构，推荐使用。</p>
<p><strong>二三层网络分界点（用户网关）设置在接入交换机</strong></p>
<p>接入交换机作为用户的二三层分界点（网关设备），即三层到边缘的园区网架构，接入交换机到汇聚交换机、汇聚交换机到核心交换机之间都是三层网络，运行OSPF等路由协议，整个企业园区是全路由型网络。</p>
<p>【优点】</p>
<ol>
<li><p>网络易扩展：园区网架构对物理网络拓扑依赖度低，可以任意网络拓扑形式扩展；</p>
</li>
<li><p>网络易维护：全网为三层网络、无二层环路网络风险，无需配置生成树协议、RRPP和VRRP，降低网络配置和维护工作量。</p>
</li>
</ol>
<p>【缺点】</p>
<ol>
<li><p>交换机成本相对较高：相对与二层接入交换机，成本较高；</p>
</li>
<li><p>接入层为三层网络，网络故障路由收敛速度相对较慢。</p>
</li>
</ol>
<h2 id="4-园区网络高可靠性规划设计"><a href="#4-园区网络高可靠性规划设计" class="headerlink" title="4 园区网络高可靠性规划设计"></a>4 园区网络高可靠性规划设计</h2><h2 id="4-1-园区网络高可靠性规划设计"><a href="#4-1-园区网络高可靠性规划设计" class="headerlink" title="4.1 园区网络高可靠性规划设计"></a>4.1 园区网络高可靠性规划设计</h2><p>园区网高可靠性设计总体方案如下图所示：</p>
<p><img src="https://pic3.zhimg.com/80/v2-df3c4a7cd992bd1267be40be41f73bea_hd.jpg" alt="img" loading="lazy">图 4‑1 园区网高可靠性设计方案总览</p>
<p>针对二层接入（接入交换机是二层交换机、汇聚交换机作为用户网关）典型园区网架构，从接入层、汇聚层、核心层来分层考虑网络可靠性设计。</p>
<p>接入层网络是二层网络，接入交换机与汇聚交换机之间通过Smart Link/STP/RSTP/MSTP/RRPP保证网络可靠性，同时解决二层网络环路问题；汇聚层交换机之间通过VRRP（BFD for VRRP）协议确定用户的主备网关，交换机互联通过TRUNK链路，保证链路级可靠性，汇聚交换机与接入交换机之间可通过DLDP协议检测光纤单向故障（单通故障）。</p>
<p>园区网接入/汇聚/核心交换机通过虚拟化技术进行集群（或堆叠），将两台/多台交换机虚拟化成一台交换机，降低网络拓扑复杂度的同时，提高网络可靠性，是未来高可靠性园区网的发展趋势。</p>
<p>典型园区网可靠性组网设计方案有：口子型组网、三角型组网、U子型组网。 </p>
<p><strong>可靠性组网方案1：口子型组网</strong></p>
<p><img src="https://pic3.zhimg.com/80/v2-018f448a3251ad1f49542e718dfbb802_hd.jpg" alt="img" loading="lazy">图 4‑2 口子型组网</p>
<p>接入交换机与汇聚交换机之间是二层网络，汇聚交换机作为用户网关设备，两台汇聚交换机之间通过二层TRUNK链路互连，多台接入交换机与两台汇聚交换机之间组成口子型二层环网，并且通过部署STP/RSTP/MSTP/RRPP等协议进行二层环网阻断、环网故障检测和保护倒换功能。两台汇聚交换机运行VRRP（BFD+VRRP）协议确定主备用户网关，VRRP报文直接在汇聚交换机直连的TRUNK链路上收发。注意：两台汇聚交换机链路需要保证绝对可靠，必须采用TRUNK链路、包含两条以上物理链路，因为汇聚交换机间链路DOWN，两台汇聚交换机VRRP状态都为主（VRRP双主情况产生），此时接入二层环网阻塞在汇聚交换机之间的直连链路上，这样接入用户同时感知两个处于VRRP主用状态的网关设备（汇聚交换机），出现问题。</p>
<p>口子型组网方案的优点是，园区网各个楼层接入交换机可以串在一起，与汇聚交换机组成二层环网，汇聚交换机统一为各楼层接入交换机下的用户分配IP地址，实现园区不同楼层的用户可以共用同一个IP地址网段； 该组网方案的缺点是接入层网络需要部署较为复杂的二层环网协议、网络配置和维护较为复杂。</p>
<p>口子型组网方案是园区网非常经典的可靠性设计方案，适合各种规模的园区网应用场景。</p>
<p><strong>可靠性组网方案2：三角型组网</strong></p>
<p><img src="https://pic1.zhimg.com/80/v2-17997fcaaceda05f154de148900df07c_hd.jpg" alt="img" loading="lazy">图 4‑3 三角型组网</p>
<p>汇聚交换机作为用户网关设备，两台汇聚交换机之间通过二层链路互连，每台接入交换机上行有两条链路接入到两台汇聚交换机，接入交换机上行两条链路的主备关系由运行的Smart Link协议确定。两台汇聚交换机运行VRRP（BFD+VRRP）协议确定主备用户网关，VRRP报文直接在汇聚交换机直连链路上收发。注意：两台汇聚交换机链路需要保证绝对可靠，必须采用TRUNK链路。口子型组网场景下，多个楼层之间可以共用VRRP组，不受汇聚交换机VRRP组数量限制，可实现不同楼层间的园区用户可以共享一个IP地址网段。</p>
<p>三角型组网方案的优点是：二层接入网不存在环路，不需要配置相对复杂的环网保护协议（STP/RSTP/MSTP/RRPP）；Smart Link故障检测和保护倒换速度快（200～400ms）；支持园区网园区不同楼层的用户可以共用同一个IP地址网段。</p>
<p>三角型组网方案的缺点是每台接入交换机上行需要部署主备两条链路，增加布线成本，对汇聚交换机的端口密度有较高要求。</p>
<p><strong>可靠性组网方案3：U字型组网</strong></p>
<p><img src="https://pic3.zhimg.com/80/v2-f103961d2a1c7fb70c8dd312f6913976_hd.jpg" alt="img" loading="lazy">图 4‑4 U字型组网</p>
<p>园区网汇聚交换机之间通过纯三层链路互连，无直连二层链路。汇聚交换机作为园区用户网关，与接入交换机组成二层网络，汇聚交换机的主备通过VRRP（BFD for VRRP）协议协商，VRRP协议通过接入交换机转发，每组接入交换机与两台汇聚交换机组成的一个物理U型网络需要启用一组VRRP，汇聚交换机通过多个物理端口会接入多个二层U型网络，这样汇聚交换机间需要运行多个VRRP组（每个二层U型接入网络运行一个VRRP组），一般一个U型二层接入网覆盖的是同一个楼层的接入交换机。由于不同VRRP组的网关IP网段不能相同，因此每个U型接入网下的所有园区用户需要独占一个IP网段，不同U型接入网的用户（不同楼层的园区用户）之间不能共享一个IP网段，这是此方案应用的最大缺点。</p>
<p>U子型方案的优点：二层接入网不存在环路，不需要配置相对复杂的环网保护协议（STP/RSTP/MSTP/RRPP）。</p>
<p><strong>可靠性设计目标方案（发展趋势）：园区网交换机虚拟化</strong></p>
<p><img src="https://pic1.zhimg.com/80/v2-0cc406480699395a23b35c186680bfa8_hd.jpg" alt="img" loading="lazy">图 4‑5 可靠性设计目标方案组网</p>
<p>园区网可靠性方案设计的目标方案或发展趋势是各层次园区网交换机都进行虚拟化，通过集群/堆叠技术将两台或多台交换机虚拟成一台交换机。可以提高单节点设备可靠性，一台交换机故障，另外一台交换机自动接管故障设备上的所有业务，可以做到业务无损切换。设备虚拟化通过跨设备的TRUNK链路，提升链路级可靠性，并且流量可以均匀分布在TRUNK成员链路上，提高链路带宽利用率，条或多条链路故障后,流量自动切换到其他正常的链路。</p>
<p>该方案另外一个优点网络配置和维护简单，园区二层接入网，不需要配置复杂的二层环网和保护倒换协议，二层链路故障直接感知快速切换，三层网络中多个设备间共享路由表，网络故障路由收敛速度快。网络管理和维护难度大大降低，此方案适应面广，扩展性强，是未来园区网的发展趋势。</p>
<h2 id="4-2-园区网络设备高可靠性规划设计"><a href="#4-2-园区网络设备高可靠性规划设计" class="headerlink" title="4.2 园区网络设备高可靠性规划设计"></a>4.2 园区网络设备高可靠性规划设计</h2><h2 id="4-2-1-重要部件冗余"><a href="#4-2-1-重要部件冗余" class="headerlink" title="4.2.1 重要部件冗余"></a>4.2.1 重要部件冗余</h2><p>设备本身要具有电信级5个9的可靠性，需要网络设备支持:</p>
<p>主控1:1备份</p>
<p>交换网1+1/1:1两种方式</p>
<p>DC电源1+1备份；AC电源1+1/2+2备份</p>
<p>模块化的风扇设计，高端配置支持单风扇失效</p>
<p>无源背板，高可靠性</p>
<p>独立的设备监控单元，和主控解耦</p>
<p>所有模块热插拔</p>
<p>完善的各种告警功能</p>
<p>设备管理1:1备份</p>
<h2 id="4-2-2-设备自身安全"><a href="#4-2-2-设备自身安全" class="headerlink" title="4.2.2 设备自身安全"></a>4.2.2 设备自身安全</h2><p>如下图所示,随着黑客工具的泛滥和使用的方便,使的网络攻击的成本越来越来,但危害越来越大.</p>
<p><img src="https://pic2.zhimg.com/80/v2-4888f5bb80b393f464eb7d731d65a1ad_hd.jpg" alt="img" loading="lazy">图 4‑6 黑客工具的危害性</p>
<p>这就要求具有强大灵活的自身防护功能,以不变应万变的方法,才能抵挡日益泛滥的网络攻击。</p>
<p>华为公司全系列园区网交换机（S9300/S5300/S3300/S2300）提供攻击防范功能，能够检测出多种类型的网络攻击，并能采取相应的措施保护设备自身及其所连接的内部网络免受恶意攻击，保证内部网络及设备的正常运行。</p>
<p>华为全系列交换机支持的攻击防范功能包括防DDOS攻击、IP欺骗攻击、Land攻击、Ping of Death攻击、Teardrop攻击、ICMP Flood攻击、SYN FLOOD攻击等。</p>
<p>另外，以太网交换机的MAC地址表作为二层报文转发的核心，在受到攻击的时候，直接导致交换机无法正常工作。发生MAC地址攻击的时候，攻击者通过不停的发送MAC地址来刷新，填充交换机的MAC地址表，由于MAC地址表的规格有限，导致正常流量由于没有正确的转发表项而无法正常转发。ARP攻击与此类似，通过攻击报文来更改MAC与IP地址的绑定，从而重新定向流量。</p>
<p>华为全系列交换机可以通过MAC地址与端口的绑定以及限制端口/VLAN/VSI下MAC地址的最大学习个数可防止MAC扫描，并通过VLAN、IP、MAC之间的任意绑定可防范ARP攻击（SAI/DAI功能）。</p>
<p>华为全系列交换机支持黑洞MAC功能，园区交换机收到报文时比较报文目的MAC地址，若与黑洞MAC表项相同则丢弃该报文。当用户察觉到某MAC地址的报文具有一定攻击性，则可以在园区交换机上配置黑洞MAC，从而将具有该MAC地址的报文过滤掉，避免遭受攻击。</p>
<h2 id="4-3-园区网络交换机虚拟化规划设计"><a href="#4-3-园区网络交换机虚拟化规划设计" class="headerlink" title="4.3 园区网络交换机虚拟化规划设计"></a>4.3 园区网络交换机虚拟化规划设计</h2><h2 id="4-3-1-汇聚交换机的集群CSS-Cluster-Switch-Switching"><a href="#4-3-1-汇聚交换机的集群CSS-Cluster-Switch-Switching" class="headerlink" title="4.3.1 汇聚交换机的集群CSS(Cluster Switch Switching)"></a>4.3.1 汇聚交换机的集群CSS(Cluster Switch Switching)</h2><p>所谓集群，就是把物理的多台服务器连接在一起，对外表现为一台逻辑的服务器，提供服务。</p>
<p>因为企业园区网为了增加可靠性，都是双节点备份，特别适合集群技术。如下图所示：</p>
<p><img src="https://pic4.zhimg.com/80/v2-1350c0781e69a3f6d037f6d39d1b2037_hd.jpg" alt="img" loading="lazy">图 4‑7 集群组网的优势</p>
<p>采用集群技术，对企业园区网络，有四大优势：</p>
<ol>
<li>减化管理和配置</li>
</ol>
<p>首先，集群后需要管理的设备节点减少一半以上。</p>
<p>其次，组网变得简洁，不需要配置复杂的协议，包括STP/SmartLink/VRRP等。</p>
<ol start="2">
<li>快速的故障收敛</li>
</ol>
<p>故障收敛时间可以控制在&lt; 1ms, 大大降低了网络链路/节点的故障，对业务的影响。</p>
<ol start="3">
<li>带宽利用率高</li>
</ol>
<p>采用链路Trunk的方式，带宽利用率可以达到100％。</p>
<ol start="4">
<li>扩容方便</li>
</ol>
<p>保护用户投资。随着业务的增加，当用户进行网络升级时，采用集群的方式，只需要增加新设备既可，不需要更改网络配置的情况下，平滑扩容，很好的保护了用户投资。</p>
<p>目前，业界有两种堆叠的方式，一种是采用业务接口堆叠，一种是采用专用的堆叠线；</p>
<p><img src="https://pic2.zhimg.com/80/v2-78493c57b0a8348b7d93149242b19fb9_hd.jpg" alt="img" loading="lazy">图 4‑8 两种集群方式比较</p>
<p>华为的S93系列交换机采用堆叠线的方式，通过在主板板上插入堆叠卡，连接多台设备。如下图所示，这种方式有如下的优势：</p>
<p><img src="https://pic2.zhimg.com/80/v2-d1a5d87863061b5546c7abadfe5a8fb5_hd.jpg" alt="img" loading="lazy">图 4‑9 华为CSS集群技术</p>
<p>采用交换机网集群的方式，相比接口板集群，有如下的优势：</p>
<p><strong>堆叠带宽高</strong></p>
<p>交换机网集群一般采用专用的接口线，堆叠带宽高。</p>
<p>S93系列的堆叠带宽高达128G(单向)；并且可平滑升级到200G(单向)； 相对于业界的80G（单向）的互联带宽，具有明显的优势。</p>
<p><strong>不占用业务槽位</strong></p>
<p>S93系列采用在主控板预留的灵活插卡槽位，插入堆叠卡互联的方式，不占用接口槽位。相对于接口堆叠的方式，节省了1～2个接口槽位。</p>
<p><strong>可靠性高</strong></p>
<p>S93系列采用堆叠线连接，实际上是对交换网的延伸。从上图可以看出，接口板堆叠方式需要经过两个堆叠接口板转发，处理复杂度增加；另外，接口板的硬件可靠性也比交换网低。</p>
<p>总体来看，交换网堆叠在软件和硬件方面，可靠性都高于接口堆叠的方式。</p>
<h2 id="4-3-2-接入交换机的堆叠iStack"><a href="#4-3-2-接入交换机的堆叠iStack" class="headerlink" title="4.3.2 接入交换机的堆叠iStack"></a>4.3.2 接入交换机的堆叠iStack</h2><p>iStack堆叠就是将多台设备通过堆叠口连接起来形成一台虚拟的逻辑设备。一个园区网用户上行的2个网络接口，对于堆叠后的设备，可以看作Trunk接口。</p>
<p>多台设备堆叠成一台设备后，从功能和管理方面，都可以作为一台设备来看待。</p>
<p>华为的iStack堆叠技术有如下的优势： </p>
<p>ü <strong>简化管理</strong></p>
<p>堆叠设备的角色分为Master和Slave；通过对Master 设备的配置达到管理整个iStack 堆叠以及堆叠内所有成员设备的效果，而不用物理连接到每台成员设备上分别对它们进行配置和管理。</p>
<p><strong>简化网络运行</strong></p>
<p>iStack 形成的虚拟设备中运行的各种控制协议也是作为单一设备统一运行的，例如路由协议会作为单一设备统一计算。这样省去了设备间大量协议报文的交互，简化了网络运行，缩短了网络动荡时的收敛时间。</p>
<p><strong>强大的网络扩展能力</strong></p>
<p>通过增加成员设备，可以轻松自如的扩展堆叠系统的端口数、带宽和处理能力。</p>
<p><strong>高可靠性</strong></p>
<p>堆叠的高可靠性体现在多个方面，比如：成员设备之间堆叠物理端口支持聚合功能，堆叠系统和上、下层设备之间的物理连接也支持聚合功能，这样通过多链路备份提高了堆叠系统的可靠性；堆叠系统由多台成员设备组成，Master 设备负责堆叠的运行、管理和维护，Slave 设备在作为备份的同时也可以处理业务，一旦Master 设备故障，系统会迅速自动选举新的Master，以保证通过堆叠的业务不中断，从而实现了设备级的1:N 备份。</p>
<p><strong>高性能</strong></p>
<p>由于iStack 设备是由多个支持iStack 特性的单机设备堆叠而成的，iStack设备的交换容量和端口数量就是iStack 内部所有单机设备交换容量和端口数量的总和。因此，iStack 技术能够通过多个单机设备的堆叠，轻易的将设备的交换能力、用户端口的密度扩大数倍，从而大幅度提高了设备的性能。</p>
<h2 id="5-园区网络安全方案规划设计"><a href="#5-园区网络安全方案规划设计" class="headerlink" title="5 园区网络安全方案规划设计"></a>5 园区网络安全方案规划设计</h2><h2 id="5-1-园区网安全方案总体规划设计"><a href="#5-1-园区网安全方案总体规划设计" class="headerlink" title="5.1 园区网安全方案总体规划设计"></a>5.1 园区网安全方案总体规划设计</h2><p><img src="https://pic2.zhimg.com/80/v2-9b29f3528db581a98619c2bdeb98f9f5_hd.jpg" alt="img" loading="lazy">图 5‑1 园区网安全方案总体设计</p>
<p>从园区接入、网络监管/监控、边界防御、园区出口传输安全等多纬度、多层次进行安全设计和安全防御，对内部员工进行身份认证和网络访问权限控制，对企业内部进行安全区域划分、隔离和权限控制，对企业外部用户访问进行安全控制、数据加密，防止恶意攻击。园区网全方位的</p>
<p>安全设计方案保证内部、外部用户访问园区网资源的安全性。</p>
<h2 id="5-2-园区接入安全规划设计"><a href="#5-2-园区接入安全规划设计" class="headerlink" title="5.2 园区接入安全规划设计"></a>5.2 园区接入安全规划设计</h2><p><img src="https://pic2.zhimg.com/80/v2-527ba6b04b5c60ed944efa2e520d2529_hd.jpg" alt="img" loading="lazy">图 5‑2 网络准入控制NAC</p>
<p>企业网交换机与华为赛门铁克的NAC方案配套，实现对接入用户的身份认证、终端健康检查，并实现基于用户角色的差异化权限控制。NAC解决方案包含三个关键组件：通信代理、网络访问控制设备（园区交换机）和认证策略服务器组：</p>
<p>通信代理也就是安全客户端，是安装在用户终端系统上的软件，是对用户终端进行身份认证、安全状态评估检查以及安全策略实施的主体，其主要功能包括：</p>
<p>支持802.1x、Portal、MAC等多种认证方式，可以与园区网交换机实现接入、汇聚层的端点准入控制。</p>
<p>检查用户终端的安全状态，包括操作系统版本、系统补丁等信息；同时提供与防病毒客户端联动的接口，实现与第三方防病毒客户端的联动，检查用户终端的防病毒软件版本、病毒库版本、以及病毒查杀信息，这些信息将被传递到安全策略服务器，执行端点准入的判断与控制。</p>
<p>安全策略实施，接收安全策略服务器下发的安全策略并强制用户终端执行，包括设置安全策略（是否监控邮件、注册表）、系统修复通知与实施（自动或手工升级补丁和病毒库）等功能。不按要求实施安全策略的用户终端将被限制在隔离区。</p>
<p>实时监控系统安全状态，包括是否更改安全设置、是否发现新病毒等，并将安全事件定时上报到安全策略服务器，用于事后进行安全审计。</p>
<p>网络访问控制设备是企业网络中安全策略的实施点，起到强制用户准入认证、隔离不合格终端、为合法用户提供网络服务的作用。园区网的网络访问控制设备推荐为华为交换机，可分别实现不同认证方式（如802.1x、MAC认证和Portal等）的端点准入控制,具备以下功能：</p>
<p>强制网络接入终端进行身份认证和安全状态评估。</p>
<p>隔离不符合安全策略的用户终端，园区交换机接收到安全策略服务器下发的隔离指令后，可以通过 VLAN 或 ACL 方式限制用户的访问权限；同样，收到解除用户隔离的指令后也可以在线解除对用户终端的隔离。</p>
<p>提供基于身份的网络服务，园区交换机可以根据安全策略服务器下发的策略，为用户提供个性化的网络服务，如提供不同的 QoS、ACL、VLAN 等。</p>
<p>根据用户接入安全控制范围需要，作为NAC网络访问控制设备的交换机可以部署在园区接入层、汇聚层，设置可部署在核心层、仅控制用户访问园区外部网络的权限。</p>
<p>策略服务器也就是管理服务器，NAC方案的核心是整合与联动，其中的安全策略服务器是NAC方案中的管理与控制中心，兼具用户管理、安全策略管理、安全状态检查评估、安全联动控制以及安全事件审计等功能。</p>
<p><strong>802.1x接入认证</strong></p>
<p><img src="https://pic1.zhimg.com/80/v2-c5086aa8281c1dbbb44ee4846fa86d50_hd.jpg" alt="img" loading="lazy"></p>
<p>图 5‑3 802.1x接入认证流程</p>
<p><strong>802.1x认证过程如下：</strong></p>
<ol>
<li><p>用户在802.1x客户端输入用户名、密码，发起802.1x认证请求至园区交换机； 2) 交换机作为Radius客户端将用户名、密码发送到认证服务器进行Radius认证；</p>
</li>
<li><p>认证服务器将携带VLAN或二三层ACL的Radius属性下发至园区交换机，根据用户认证结果控制其网络访问权限；</p>
</li>
<li><p>用户获取IP地址，NAC客户端软件与策略服务器联动，按照预先定制的安全检查策略，对用户终端健康状态进行检查，检查不通过Radius COA下发VLAN或ACL，限制用户网络访问权限；</p>
</li>
<li><p>用户通过802.1x身份认证和终端健康检查后，获取业务网络访问权限。</p>
</li>
</ol>
<p><strong>用户MAC认证</strong></p>
<p><img src="https://pic4.zhimg.com/80/v2-e949721a660854fbf1d774dbd273b8cb_hd.jpg" alt="img" loading="lazy"></p>
<p>图 5‑4 MAC认证流程</p>
<p><strong>用户MAC认证过程如下：</strong></p>
<ol>
<li><p>用户终端上电（无802.1x认证客户端），用户发起ARP或DHCP请求等报文；</p>
</li>
<li><p>园区交换机收到用户终端的数据报文，触发Radius认证请求至认证服务器，根据MAC地址生成用户名和密码；</p>
</li>
<li><p>认证服务器将携带VLAN或二三层ACL的Radius属性下发至园区交换机，根据用户认证结果控制其网络访问权限；</p>
</li>
<li><p>用户获取IP地址，NAC客户端软件与策略服务器联动，按照预先定制的安全检查策略，对用户终端健康状态进行检查，检查不通过Radius COA下发VLAN或ACL，限制用户网络访问权限；</p>
</li>
<li><p>用户通过802.1x身份认证和终端健康检查后，获取业务网络访问权限。</p>
</li>
</ol>
<p><strong>802.1X MAC旁路认证</strong></p>
<p><img src="https://pic3.zhimg.com/80/v2-11e14d7a5a1afc3f7fe9fa4b30ee4176_hd.jpg" alt="img" loading="lazy"></p>
<p>图 5‑5 802.1x MAC旁路认证流程</p>
<p><strong>802.1x MAC旁路认证过程如下：</strong></p>
<ol>
<li><p>用户终端上电，用户发起ARP或DHCP请求等报文；</p>
</li>
<li><p>园区交换机先向用户终端发起EAP探测报文，如果用户终端已经安装802.1x认证客户端，则触发用户802.1x接入认证过程，否则进行MAC认证过程；</p>
</li>
<li><p>认证服务器将携带VLAN或二三层ACL的Radius属性下发至园区交换机，根据用户认证结果控制其网络访问权限；</p>
</li>
<li><p>用户获取IP地址，NAC客户端软件与策略服务器联动，按照预先定制的安全检查策略，对用户终端健康状态进行检查，检查不通过Radius COA下发VLAN或ACL，限制用户网络访问权限；</p>
</li>
<li><p>用户通过802.1x身份认证和终端健康检查后，获取业务网络访问权限。</p>
</li>
</ol>
<p><strong>WEB Portal认证</strong></p>
<p><img src="https://pic3.zhimg.com/80/v2-5661bc9f8207e04faa4de1987d91aae6_hd.jpg" alt="img" loading="lazy"></p>
<p>图 5‑6 WEB Portal认证流程</p>
<p><strong>WEB Portal认证过程如下：</strong></p>
<ol>
<li><p>用户终端打开WEB页面，发起HTTP请求至园区交换机；</p>
</li>
<li><p>园区交换机进行HTTP重定向，将用户的打开的WEB页面重定向至Portal服务器；</p>
</li>
<li><p>用户访问WEB Portal页面，输入用户名和密码进行认证；</p>
</li>
<li><p>Portal服务器通过Portal 2.0协议将用户输入的用户名和密码信息发送给交换机，交换机到认证服务器进行Radius认证；</p>
</li>
<li><p>认证服务器将携带VLAN或二三层ACL的Radius属性下发至园区交换机，根据用户认证结果控制其网络访问权限；</p>
</li>
<li><p>NAC客户端软件与策略服务器联动，按照预先定制的安全检查策略，对用户终端健康状态进行检查，检查不通过Radius COA下发VLAN或ACL，限制用户网络访问权限； 7) 用户通过802.1x身份认证和终端健康检查后，获取业务网络访问权限。</p>
</li>
</ol>
<h2 id="5-3-园区网络监管-监控-规划设计"><a href="#5-3-园区网络监管-监控-规划设计" class="headerlink" title="5.3 园区网络监管/监控 规划设计"></a>5.3 园区网络监管/监控 规划设计</h2><h2 id="5-3-1-防IP-MAC地址盗用和ARP中间人攻击"><a href="#5-3-1-防IP-MAC地址盗用和ARP中间人攻击" class="headerlink" title="5.3.1 防IP/MAC地址盗用和ARP中间人攻击"></a>5.3.1 防IP/MAC地址盗用和ARP中间人攻击</h2><p><strong>防IP/MAC地址盗用</strong></p>
<p>DHCP Snooping技术是DHCP安全特性，通过建立和维护DHCP Snooping绑定表过滤不可信任的DHCP信息，这些信息是指来自不信任区域的DHCP信息。DHCP Snooping绑定表包含不信任区域的用户MAC地址、IP地址、租用期、VLAN-ID 接口等信息，DHCP Snooping绑定表可以基于DHCP过程动态生成，也可以通过静态配置生成，此时需预先准备用户的IP 地址、MAC地址、用户所属VLAN ID、用户所属接口等信息。</p>
<p>园区交换机开启DHCP-Snooping后，会对DHCP报文进行侦听，并可以从接收到的DHCP Request或DHCP Ack报文中提取并记录IP地址和MAC地址信息。另外，DHCP-Snooping允许将某个物理端口设置为信任端口或不信任端口。信任端口可以正常接收并转发DHCP Offer报文，而不信任端口会将接收到的DHCP Offer报文丢弃。这样，可以完成交换机对假冒DHCP Server的屏蔽作用，确保客户端从合法的DHCP Server获取IP地址。</p>
<p><strong>防ARP中间人攻击</strong></p>
<p><img src="https://pic1.zhimg.com/80/v2-7fb633ba9f33f9cba422880adfda6280_hd.jpg" alt="img" loading="lazy"></p>
<p>图 5‑7 ARP中间人攻击防御</p>
<p>Dynamic ARP Inspection (DAI)在交换机上基于DHCP Snooping技术提供用户网关IP地址和MAC地址、VLAN和接入端口的绑定， 并动态建立绑定关系。对于用户终端没有使用DHCP动态获取IP地址的场景，可采用静态添加用户网关相关信息的静态绑定表。此时园区交换机检测过滤ARP请求响应报文中的源MAC、源IP是否可以匹配上述绑定表，不能匹配则认为是仿冒网关回应的ARP响应报文，予以丢弃，从而可以有效实现防御ARP中间人/网关ARP仿冒欺骗攻击行为。</p>
<h2 id="5-3-2-防IP-MAC地址扫描攻击"><a href="#5-3-2-防IP-MAC地址扫描攻击" class="headerlink" title="5.3.2 防IP/MAC地址扫描攻击"></a>5.3.2 防IP/MAC地址扫描攻击</h2><p><strong>防IP扫描攻击</strong></p>
<p>地址扫描攻击是攻击者向攻击目标网络发送大量的目的地址不断变化的IP报文。当攻击者扫描网络设备的直连网段时，触发ARP miss，使网络设备给该网段下的每个地址发送ARP报文，地址不存在的话，还需要发送目的主机不可达报文。如果直连网段较大，攻击流量足够大时，会消耗网络设备较多的CPU和内存资源，可引起网络中断。</p>
<p>园区交换机支持IP地址扫描攻击的防护能力，收到目的IP是直连网段的报文时，如果该目的地址的路由不存在，会发送一个ARP请求报文，并针对目的地址下一条丢弃表项（弃后续所有目的地址为该直连网段的ARP报文），以防止后续报文持续冲击CPU。如果有ARP应答，则立即删除相应的丢弃表项，并添加正常的路由表项；否则，经过一段时间后丢弃表项自动老化。这样，既防止直连网段扫描攻击对交换机造成影响，又保证正常业务流程的畅通。</p>
<p>在上述基础上，交换机还支持基于接口设置ARP miss的速率。当接口上触发的ARP miss超过设置的阈值时，接口上的ARP miss不再处理，直接丢弃。</p>
<p>如果用户使用相同的源IP进行地址扫描攻击，交换机还可以基于源IP做ARP miss统计。如果ARP miss的速率超过设定的阈值，则下发ACL将带有此源IP的报文进行丢弃，过一段时间后再允许通过。</p>
<p><strong>防MAC地址扫描攻击</strong></p>
<p>以太网交换机的MAC地址转发表作为二层报文转发的核心，在受到攻击的时候，直接导致交换机无法正常工作。发生MAC地址攻击的时候，攻击者向攻击目标网络发送大量的源MAC地址不断变化以太报文，园区交换机收到以太报文会基于报文的源MAC学习填充二层MAC转发表项，由于MAC地址转发表的规格有限，会因为MAC扫描攻击而很快填充满，无法再学习生成新的MAC转发表，已学习的MAC表条目需通过老化方式删除，这样途径园区交换机大量的单播报文会因为按照目的MAC找不到转发表项而不得不进行广播发送，导致园区网络中产生大量的二层广播报文，消耗网络带宽、引发网络业务中断异常。</p>
<p>交换机二层MAC转发表是全局共享资源，单板内各端口/VLAN共享一份MAC转发表，华为园区交换机支持基于端口/VLAN的MAC学习数目限制，同时支持MAC表学习速率限制，有效防御MAC地址扫描攻击行为。MAC学习数目达到端口/VLAN上设置的阈值时，会进行丢弃/转发/告警等动作（动作策略可定制、可叠加）。另外通过园区交换机的MAC地址与端口绑定来限制跨端口的MAC扫描攻击。</p>
<h2 id="5-3-3-广播-组播报文抑制"><a href="#5-3-3-广播-组播报文抑制" class="headerlink" title="5.3.3 广播/组播报文抑制"></a>5.3.3 广播/组播报文抑制</h2><p>攻击者不停地向园区网发送大量恶意的广播报文，恶意广播报文占据了大量的带宽，传统的广播风暴抑制无法识别用户VLAN，将导致正常的广播流量一并被交换机丢弃。园区网交换机需要识别恶意广播流量的VLAN ID，通过基于VLAN的广播风暴抑制丢弃恶意广播报文而不影响正常广播报文流量转发。可基于端口或VLAN限制广播报文流量百分比或速率阈值。</p>
<p>同时园区网交换机支持组播报文抑制，可基于端口限制组播报文流量百分比或速率阈值。</p>
<h2 id="5-4-园区网边界防御-规划设计"><a href="#5-4-园区网边界防御-规划设计" class="headerlink" title="5.4 园区网边界防御 规划设计"></a>5.4 园区网边界防御 规划设计</h2><h2 id="5-4-1-防火墙部署规划设计"><a href="#5-4-1-防火墙部署规划设计" class="headerlink" title="5.4.1 防火墙部署规划设计"></a>5.4.1 防火墙部署规划设计</h2><p><img src="https://pic4.zhimg.com/80/v2-5d55ac60b912355a4b4eaa4ab66a055f_hd.jpg" alt="img" loading="lazy"></p>
<p>图 5‑8 园区网防火墙功能部署</p>
<p>企业园区网边界防御分为两个部分：园区出口边界防御、园区内部边界防御。</p>
<p>园区出口连接Internet和企业WAN网的接入，企业外部网络尤其Internet网络，是各种攻击行为、病毒传播、安全事件引入的风险点，通过在企业出口部署高性能防火墙设备、或者在核心交换机内置防火墙模块，可以很好的缓解风险的传播，阻挡来自Internet/企业外部网络攻击行为的发生。企业园区出口位置部署的独立防火墙设备（或核心交换机内置的防火墙模块），需要满足高性能、高可靠、高安全的要求，是企业园区网的第一道安全屏障。</p>
<p>园区内部边界防御是将企业内部划分为多个区域，分为信任区域和非信任区域，分别实施不同的安全策略，包括部署区域间隔离、受限访问、防止来自区域内部的DOS攻击等安却措施。建议通过汇聚交换机上集成防火墙模块（单板）来实现园区内部的边界防御功能。</p>
<p>园区网中防火墙功能无论是独立设备部署还是集成在核心/汇聚交换机内部，都必须支持灵活的业务流控制策略配置，能把特定的流量引到防火墙进行处理，其他流量进行旁路。</p>
<p>防火墙本身需要保证高可靠性，需要考虑防火墙的冗余设计，支持Active/Active HA 设计方式，即交换机内集成的多块防火墙板卡支持负载分担和主备模式，不同交换机内的防火墙支持Active/Active模式，同时能够处理流量。</p>
<h2 id="5-4-2-防火墙功能规划设计"><a href="#5-4-2-防火墙功能规划设计" class="headerlink" title="5.4.2 防火墙功能规划设计"></a>5.4.2 防火墙功能规划设计</h2><p>网络隔离：能够对网络区域进行分割，对不同区域之间的数据流进行控制，通过对数据包的源地址、目的地址、源端口、目的端口、网络协议等参数的检查，实现对数据流的精细控制，把可能的安全风险控制在相对独立的区域内；</p>
<p>包过滤：支持基于ACL的基本包过滤，支持基于FTP、HTTP等应用层协议包过滤（ASPF）；</p>
<p>攻击防范：对常见的ICMP重定向/不可达、TCP SYN/ARP FLOOD、Land、Smurf、TearDrop、网络端口扫描、畸形报文、拒绝服务（DoS/DDoS）等攻击行为，能够提供有效的检测和防范措施。</p>
<p>NAT/PAT：支持园区外部公网地址到内部私网地址的代理转换，支持应用层网关ALG功能。</p>
<h2 id="5-4-3-防火墙性能选择"><a href="#5-4-3-防火墙性能选择" class="headerlink" title="5.4.3 防火墙性能选择"></a>5.4.3 防火墙性能选择</h2><p>园区网防火墙的选择首先是安全防护能力，对于每秒新建连接数，并发连接数和吞吐量，ACL匹配速度，DDOS识别均要进行重点考察。</p>
<p>防火墙的性能主要取决于以下参数：</p>
<p>转发性能：从吞吐量方面考虑,决定设备的防护性能</p>
<p>并发连接数： 从数据流数目方面考虑,决定设备的防护性能</p>
<p>每秒新建连接数：决定单位时间的防护能力</p>
<p>ACL匹配速度：决定规则匹配的可靠和性能</p>
<p>华为S93系列集成的防火墙单板在性能方面有突出的表现：</p>
<p>转发性能：每单板支持10Gbps (256Bytes)的吞吐量</p>
<p>并发连接数：每单板达到400万的并发连接</p>
<p>每秒新建连接数：每单板达到10万/，,同级别产品通常不足3万</p>
<p>ACL匹配速度：采用智能匹配算法，万条匹配速度和单条速度一致，即ACL匹配动作不影响防火墙整体转发性能</p>
<p>华为S93系列交换机集成的防火墙模块，每单板支持8Gbps的转发能力，400万的并发连</p>
<p>接，每秒钟15万的新建流速度；并且支持1K的虚拟化多实例。</p>
<h2 id="5-4-4-虚拟防火墙规划设计"><a href="#5-4-4-虚拟防火墙规划设计" class="headerlink" title="5.4.4 虚拟防火墙规划设计"></a>5.4.4 虚拟防火墙规划设计</h2><p>企业内部不同的部门具备不同的安全属性，部门内部需要进行独自的安全区域划分、并应用不同的安全策略。如下图所示，可以通过防火墙支持虚拟化实现上述需求，一个物理防火墙对资源进行划分和隔离，分配给企业内不同的部门使用，虚拟防火墙直接互相独立，就好像独立物理的防火墙一样，进行独立配置和控制。</p>
<p><img src="https://pic2.zhimg.com/80/v2-50302d7131326557fd277713b91f6df9_hd.jpg" alt="img" loading="lazy"></p>
<p>图 5‑9 虚拟防火墙设计</p>
<p>总结一下，虚拟防火墙具备如下特征：</p>
<p>同物理防火墙一样独立管理、独立设置、每个虚拟防火墙专用的系统日志和攻击日志，以及每个虚拟防火墙的各种内部组件——例如独立路由表、转换数据库、ACL等 </p>
<p>可通过VLAN划分园区网用户（PC机/服务器）属于那个虚拟防火墙 </p>
<p>一台物理防火墙虚拟成多个逻辑防火墙，节省投资和维护成本 </p>
<p>适合于大型企业园区各分支部门对防火墙相对独立使用和维护的场景</p>
<h2 id="5-4-5-NAT规划设计"><a href="#5-4-5-NAT规划设计" class="headerlink" title="5.4.5 NAT规划设计"></a>5.4.5 NAT规划设计</h2><p>考虑到园区内网安全和企业公网地址缺乏等原因，会有一些企业选择通过采用私网IP地址来建设园区网，可以隐藏企业园区内部网络拓扑，需要在企业出口通过NAT设备进行IP地址转换。为了进行安全防护，NAT功能一般部署在防火墙设备上。NAT的应用一般主要有如下的应用场景：</p>
<p><strong>1) PAT方式</strong></p>
<p>它通过使用“IP地址＋端口号”的形式进行转换，使多个私网用户可共用一个公网IP地址访问外网，是地址转换实现的主要形式。</p>
<p><strong>2) NAT Server方式</strong></p>
<p>一般情况下，Internet/WAN上的用户，无法直接访问NAT后的私网地址服务器的； 但实际应用中，需要给公网用户提供一个访问私网服务器(如DNS服务器)的机会。 NAT Server方式就可以解决这个问题——通过静态配置“公网IP地址＋端口号”与“私网IP地址＋端口号”间的映射关系，NAT设备可以将公网地址“反向”转换成私网地址。</p>
<p>在部署NAT时，需要考虑应用级ALG， 因为通常情况下，NAT只改变IP报文头部地址信息，而不对报文载荷进行分析，这对于普通的应用层协议（如Telnet）来说，并不会影响其业务的开展；然而有一些应用层协议，其报文载荷中可能也携带有数据通道的地址或端口信息，若这些信息不能被有效转换，就可能导致问题。所以，NAT需要采用ALG机制处理多种应用层协议。</p>
<p>华为S9300交换机内置防火墙模块上的NAT功能， 支持上述企业园区网NAT需求，包括： </p>
<p>1对1的IP地址转换</p>
<p>PAT方式的多对多的IP地址转换：每板地址池：1K，地址池中地址个数：255 </p>
<p>NAT Server功能,支持每板1K个Server</p>
<p>ALG功能包括DNS、FTP、TFTP、ICMP、RTSP、SIP、QQ、MSN 等 </p>
<p>NAT多实例</p>
<h2 id="5-5-园区网出口安全规划设计"><a href="#5-5-园区网出口安全规划设计" class="headerlink" title="5.5 园区网出口安全规划设计"></a>5.5 园区网出口安全规划设计</h2><p>随着现代社会网络经济的发展，企业日益发展扩大，办事处、分支机构以及商业合作伙伴逐步增多，如何将这些小型的办公网络和企业总部网络进行经济灵活而有效的互联，并且与整个企业网络安全方案有机融合，提高企业信息化程度，优化商业运作效率，成为企业IT网络设计亟待解决的问题；大量普及的SOHO网络、小型办公网络、智能家居网络也越来越注重接入的便捷性和网络安全性。</p>
<p><img src="https://pic3.zhimg.com/80/v2-277788db4419b1426820ffb7179f834e_hd.jpg" alt="img" loading="lazy"></p>
<p>图 5‑10 园区网出口安全设计</p>
<p>企业园区网出口设备是企业内部网络与外部网络的连接点，其安全保证能力非常重要，企业在信息化的过程中面临核心技术、商业机密泄密等信息安全问题，VPN技术是企业传输数据非常理想的选择，因为VPN技术正式是为了解决在不安全的Internet上安全传输机密信息，保证信息的完整性、可用性以及保密性，包括IPSec VPN和SSL VPN。企业办事处、分支机构以及商业合作伙伴如果采用主机VPN客户端接入企业总部网络，那么分之机构网络中的每个主机需要单独拨号接入，VPN接入不可控造成内部网络安全隐患，同时也大量消耗企业总部VPN网关隧道资源；如果采用单独的VPN网关与企业总部网关建立VPN隧道，又面临投资过大的问题。需要有效解决企业分支机构VPN接入灵活性、安全性和经济性之间的矛盾。</p>
<p>园区出口设备形态推荐：</p>
<p><strong>接入路由器</strong></p>
<p>针对企业办事处、分支机构、商业合作伙伴以及SOHO办公、智能家居等园区网络要求，采用华为SRG列业务路由网关（SRG1210/1220/2210/2220等多款产品）或AR系列接入路由器（AR18/28/46、AR19/29/49）作为园区网出口设备，集路由、交换、无线与数据安全于一体，能够提供灵活的宽带接入、WLAN解决方案、3G无线上网、NAT/PAT地址转换、攻击防范、状态检测等特性，全面满足客户自由安全联网需求。</p>
<p><strong>交换机</strong></p>
<p>针对部分小型园区网，可采用华为S9300交换机作为园区出口设备，考虑到降低设备投资成本，园区出口设备和核心交换机可以合一，通过S9300的WAN接口板提供POS/GE/10GE等广域网接口与企业外部网络互联，同时S9300作为园区核心交换机，下连各个汇聚交换机，S9300通过增值业务单板提供IPsec VPN和SSL VPN，满足企业分支机构安全互联以及企业员工或外部访客远程访问园区网的需求。</p>
<h2 id="6-园区网络网管系统方案规划设计"><a href="#6-园区网络网管系统方案规划设计" class="headerlink" title="6 园区网络网管系统方案规划设计"></a>6 园区网络网管系统方案规划设计</h2><h2 id="6-1-网管系统概述"><a href="#6-1-网管系统概述" class="headerlink" title="6.1 网管系统概述"></a>6.1 网管系统概述</h2><p>网管系统 提供了“无缝式IT运维管理”功能，其系统架构清晰，采用模块化的设计理念，各功能模块既可独立运行、松散耦合；亦可整体功能无缝衔接覆盖整个业务系统，灵活的自由组合真正实现个性化的IT无忧运维。</p>
<p>网管系统主要由网络管理、流量管理、认证计费等几个产品组成。</p>
<p><strong>网络管理：</strong>实现了对交换机、路由器、防火墙等设备的全方位管理，提供了丰富的拓扑、配置、资产、故障、性能、事件、流量、报表等网络管理功能。</p>
<p><strong>流量管理：</strong>提供网络流量监测、流量门限、协议分析、Web上网行为审计等功能。结合NetFlow网络流量分析器实现更为细化、便捷的全网流量分析功能。</p>
<p><strong>认证计费：</strong>提供灵活多样的计费策略，支持多种认证方式，满足组性化的用户管理，实现多样化的控制策略。</p>
<p>通过网管系统模块可以实现对IT资源的全面、可视化、统一管理。</p>
<p><img src="https://pic2.zhimg.com/80/v2-ca94d77f5504c02fb071a3249dc97879_hd.jpg" alt="img" loading="lazy"></p>
<p>图 6‑1 企业网网管系统组件</p>
<h2 id="6-2-系统优势介绍"><a href="#6-2-系统优势介绍" class="headerlink" title="6.2 系统优势介绍"></a>6.2 系统优势介绍</h2><p><strong>多角度管理:</strong></p>
<p>面向基础设施：提供全面的IT资源管理，实现对网络、主机、存储设备、安全设备、数据库、中间件及应用软件等IT资源的全面监控和管理；同时对网络和业务应用等IT资源的性能进行监控，定期性能报表和趋势报表，为IT系统性能优化提供科学依据。</p>
<p>面向维护管理人员：将人、技术与流程进行有效地融合，实现日常运维工作的自动化、信息化和标准化，实时展现当前企业IT系统的运行状态及趋势，帮助管理人员快速定位问题，修复故障，保障业务系统的稳定性，知识库能降低IT运维管理对个人的依赖。</p>
<p>面向领导决策者：可及时汇总系统运行状态信息，帮助领导全面了解IT系统状况和趋势，为其提供科学依据。同时可借助自动生成的多种工作记录，实现对运维人员的绩效考核，提高团队技术水平，建立以客户为中心的运维模式，提供低成本、高质量的IT服务，提高客户满意度</p>
<p>立体化分级管理：可根据不同用户的组织结构、地理分布及业务关系，实施跨地域、层次化的统一管理模式，使责权管理更加明确，拓扑图更加清晰，提高系统的工作效率；</p>
<p><strong>主动预警：</strong></p>
<p>对网络关键设备设置相关阈值，当达到范围时，自动产生告警，并执行事先设置动作。</p>
<p>内置解释器，告警信息可按指定方式进行解释，更加明白易懂。</p>
<p>支持声音、邮件和手机短信等多种告警方式，确保信息通知到相应负责人；</p>
<p><strong>资产生命周期管理：</strong></p>
<p>从运维的角度对IT资产进行管理，包括相关配置、使用年限、维修记录等。</p>
<p>全程跟踪记录IT设备的使用周期，包括入库、领用、使用负荷和报废等。</p>
<p>减少设备流失，提高设备利用率，以最少的资金投入带来最大的回报；</p>
<p><strong>易于使用：</strong>操作简单方便，拓扑图支持全屏显示、局部放大镜、延时拖动、鹰眼、拖动图标无极缩放等丰富的操作功能，并支持任意层次的拓扑结构划分；</p>
<p><strong>易于部署：</strong>无需在被监测信息系统、服务器上安装任何代理软件，只需将系统安装在一台管理机上，即可自动进行监测和管理，同时对现有系统性能影响甚微，不会改变现有系统的应用配置，便于安装实施、维护使用。</p>
<p><strong>易于定制：</strong>提供了灵活的Web方式的客户化定制、发布工具，可对软件界面呈现及风格、数据库表、对象属性和方法进行灵活配置和定制，以满足用户特定的业务需求；提供了丰富的扩展和开发接口，可以快捷的集成各种管理工具，可以快速将各类IT资源纳入到系统管理范围内，加入到IT服务管理的流程中；此外，可视化的客户定制工具可以支持用户灵活定义和调整流程，以支持组织架构和流程的变化和发展。</p>
<h2 id="6-2-1-网络管理优势功能"><a href="#6-2-1-网络管理优势功能" class="headerlink" title="6.2.1 网络管理优势功能"></a>6.2.1 网络管理优势功能</h2><p><strong>业界领先的全自动拓扑发现技术</strong></p>
<p>自动搜索网络、发现网络节点，包括：网络设备、服务器、打印机、PC主机及VLAN等，并基于网络的二层连接关系构建物理拓扑。</p>
<p><strong>故障智能预测与分析</strong></p>
<p>通过实时的网络运行监测，Apex U2810可智能分析和预测潜在故障，并根据告警程度的不同发送警报。</p>
<p><strong>智能阈值技术</strong></p>
<p>能为每一个IT资源监控项给出科学的差异化阈值设置指导，并可随着时间段和业务量的变化进行动态调整。</p>
<p><strong>网络拓扑快速全面</strong></p>
<p>可快速全面的呈现网络拓扑结构，自动发现网络及其承载的服务，并支持多种协议。</p>
<p><strong>支持分布式管理</strong></p>
<p>支持多用户，多角色，IT运维人员，决策人员，不同角色有不同权限，不同区域级别也有不同权限。</p>
<p><strong>多维度监控</strong></p>
<p>支持从路由、设备、终端、流量、故障等方面多角度、细颗粒度地监控、管理整个IT网络。</p>
<h2 id="6-2-2-网络流量分析器优势功能"><a href="#6-2-2-网络流量分析器优势功能" class="headerlink" title="6.2.2 网络流量分析器优势功能"></a>6.2.2 网络流量分析器优势功能</h2><p><strong>简化的带宽监控</strong></p>
<p>NetFLow Analyzer能分析园区网交换机和出口路由器等设备中导出的Netstream数据。它支持标准的的操作硬件，支持Windows和Linux环境，易于部署易于操作，且无需广泛培训。</p>
<p><strong>深入的流量分析</strong></p>
<p>无需使用硬件探针或其他设备，NetFlow Analyzer能简单有效地执行流量分析。除了设置路由/交换设备导出NetFlow数据到NetFlow Analyzer，不需要其它的配置。</p>
<p><strong>全面显示流量信息</strong></p>
<p>NetFlow Analyzer通过NetFlow数据能呈现占用带宽最多的应用、主机和会话。要了解高峰时间的使用和历史趋势，该信息就显得非常重要。此外，从长期来看这些信息还可用于带宽容量规划和巩固安全策略。</p>
<p><strong>高效的带宽利用</strong></p>
<p>在多数企业中，对带宽不加管理将导致在高峰时间不重要的应用具有高于重要应用的优先级。NetFlow Analyzer中的带宽报表准确地显示了哪些应用在高峰时间使用带宽，并深入分析使用这些应用的主机。这将有助于控制带宽使用并加强企业安全策略。</p>
<p><strong>灵活的设备管理</strong></p>
<p>NetFlow Analyzer可以将NetFLow输出设备分组到不同的组别，以便进行针对性监控，以及向用户授予访问权限。利用NetFlow Analyzer中的设备分组，就可以专门管理某组导出NetFlow数据的设备，您可以将操作员指派到不同的组，监控带宽利用情况，以及查看针对每个设备组的流量模式。</p>
<p><strong>降低运维成本</strong></p>
<p>NetFlow Analyzer通过简化管理任务以降低成本。比起分析数据包需要许多时间分析结果并得到结论，故障诊断只需要相当少的时间。带宽报表以及深入分析选项使得流量分析更加快速有效，从而高效地使用企业的重要资源。</p>
<p><strong>高效的报表，易于趋势分析</strong></p>
<p>NetFlow Analyzer提供了丰富的带宽报表，便于分析流量的相关信息。通过查看不同时段的流量模式，NetFlow Analyzer显著简化了趋势分析过程。NetFlow Analyzer具有30多种不同的图表和报表，并带有能深入分析特定明细的选项，便于用户直接访问重要的信息。用户可以在线查看不同时段的图表，并将其输出为PDF格式。</p>
<p><strong>完全基于Web</strong></p>
<p>NetFlow Analyzer完全基于web，因此只需一个web浏览器就可以从网络中的任何位置跨WAN链接轻松查看流量报表。</p>
<h2 id="6-2-3-认证计费优势功能"><a href="#6-2-3-认证计费优势功能" class="headerlink" title="6.2.3 认证计费优势功能"></a>6.2.3 认证计费优势功能</h2><p><strong>成熟先进的宽带综合业务管理平台</strong></p>
<p>集成实时计费、业务管理和客户管理，提供各种应用的运行和管理、计费平台</p>
<p><strong>先进宽带运营理念的载体</strong></p>
<p><strong>基于用户的全方位管理控制手段</strong></p>
<p><strong>支持多种接入认证方式：</strong></p>
<p>802.1x、</p>
<p>WEB、</p>
<p>PPPoE、</p>
<p>RADIUS认证</p>
<p><strong>多层次计费策略：</strong></p>
<p>针对储值卡、充值卡有效期设置；</p>
<p>支持交费送免费用量设置；</p>
<p>提供信用额功能，允许用户超支部分用量；</p>
<p>支持预付费、后付费方式；</p>
<p>支持月结、即用即结、先付后用、包日等结算方式；</p>
<p>支持期限用户，即按每月固定月租，开通日开始计费，服务结束日自动停机，可以续交费，计费开始日自动按续费日开始计算；</p>
<p>支持月结延迟停机，在线催费；</p>
<p>支持开机停机预受理；</p>
<p><strong>灵活的控制策略：</strong></p>
<p>用户每日上网时段控制；</p>
<p>目标地址控制过滤策略；</p>
<p>目标端口控制策略；</p>
<p>源地址控制策略；</p>
<p>每日或每月上网时间和流量上限控制策略；</p>
<p>完整的登录记录、访问记录；</p>
<p>完整的设备运行日志</p>
<h2 id="6-3-网管系统部署"><a href="#6-3-网管系统部署" class="headerlink" title="6.3 网管系统部署"></a>6.3 网管系统部署</h2><h2 id="6-3-1-集中式网管系统部署"><a href="#6-3-1-集中式网管系统部署" class="headerlink" title="6.3.1 集中式网管系统部署"></a>6.3.1 集中式网管系统部署</h2><p><img src="https://pic3.zhimg.com/80/v2-7483e7441c549e4ce0899cf884f36d9a_hd.jpg" alt="img" loading="lazy"></p>
<p>图 6‑2 集中式网管系统部署</p>
<p><strong>硬件推荐配置：</strong></p>
<p><strong>软件推荐配置：</strong></p>
<p>操作系统</p>
<p>数据库</p>
<p>Web服务器</p>
<h2 id="6-3-2-分布式网管系统部署"><a href="#6-3-2-分布式网管系统部署" class="headerlink" title="6.3.2 分布式网管系统部署"></a>6.3.2 分布式网管系统部署</h2><p>系统可以通过将网管服务和数据库分离，降低数据库系统和网管服务器在高负荷状态下的相互影响。目前可将网管服务器和南向接口服务器分离。一方面可以降低南向接口承受的通信压力对网管服务器造成的影响。另外，对于大规模的网络，通过部署多个南向接口服务器，可以提高通信效率，降低单点失效造成的全网无法管理的风险。</p>
<p>网络管理系统均部署在一台中心服务器（以下简称Apex中心服务器）上，并通过PlusWell HA Cluster做集群。数据库服务器单独部署一台服务器，流量分析单独部署一台服务器，网络管理的二级系统部署在一台二级服务器上，分布在各个分支机构，可已经根据网络规模的不断增长灵活扩容。</p>
<p><img src="https://pic2.zhimg.com/80/v2-f7ead39000ee1c32e6f755ca9bde88ad_hd.jpg" alt="img" loading="lazy"></p>
<p>图 6‑3分布式网管系统部署</p>
<p><strong>硬件推荐配置：</strong></p>
<p><strong>软件推荐配置：</strong></p>
<h2 id="7-园区网络设备介绍"><a href="#7-园区网络设备介绍" class="headerlink" title="7 园区网络设备介绍"></a>7 园区网络设备介绍</h2><h2 id="7-1-园区汇聚-核心交换机"><a href="#7-1-园区汇聚-核心交换机" class="headerlink" title="7.1 园区汇聚/核心交换机"></a>7.1 园区汇聚/核心交换机</h2><p>Quidway® S9300系列运营级园区汇聚交换机是由华为公司自主开发的新一代高性能核心路由交换机产品，提供大容量、高密度、模块化的二到四层线速转发性能，具有强大组播功能，完善的QoS保障、有效的安全管理机制和电信级的高可靠设计，满足高端用户对多业务、高可靠、大容量、模块化的需求，降低运营商的建网成本和维护成本，可广泛应用于构建各种类型型园区网核心层和汇聚层交换机，对于接入交换机性能和接口密度要求高的某些大型园区网，也可使用S9303/S9306系列交换机作为接入交换机使用。</p>
<p><strong>产品特点</strong></p>
<p><strong>先进体系结构，高性能，配置灵活</strong></p>
<p>S9300系列交换机采用先进的全分布式体系结构设计，采用业界最新的硬件转发引擎技术，所有端口支持的业务能够线速转发，业务包括IPv4/MPLS/二层转发等。支持ACL线速转发。</p>
<p>S9300系列交换机实现组播线速转发，硬件完成两级复制：交换网板复制到接口板和转发引擎复制到接口。</p>
<p>S9300支持2Tbps交换容量，支持多种高密度板卡，满足核心、汇聚层设备大容量、高端口密度的要求，可以满足用户日益增长的带宽需求，能够极大的保护和节约用户投资。</p>
<p><strong>设备的性能规格参数：</strong></p>
<p><strong>安全机制</strong></p>
<p><strong>可靠性</strong></p>
<p>链路汇聚：S9300系列交换机最大支持128个汇聚组，每个汇聚组内支持最多8个成员端口，支持跨单板端口间的汇聚。</p>
<p>支持DLDP（Device Link Detection Protocol，设备连接检测协议）：可以监控光纤或铜质双绞线的链路状态。如果发现单向链路存在，DLDP会根据用户配置，自动关闭或通知用户手工关闭相关端口，以防止网络问题的发生。</p>
<p>支持RRPP及多实例：相比其他以太环网技术，RRPP具有以下优势――拓扑收敛速度快，低于50ms。收敛时间与环网上节点数无关，可应用于网络直径较大的网络。</p>
<p>支持标准STP/RSTP/MSTP二层环网保护协议</p>
<p>支持SmartLink及多实例</p>
<p>支持BFD for 单播路由/VRRP/FRR/PIM</p>
<h2 id="7-2-园区接入交换机"><a href="#7-2-园区接入交换机" class="headerlink" title="7.2 园区接入交换机"></a>7.2 园区接入交换机</h2><h2 id="7-2-1-Quidway-S5300系列交换机"><a href="#7-2-1-Quidway-S5300系列交换机" class="headerlink" title="7.2.1 Quidway S5300系列交换机"></a>7.2.1 Quidway S5300系列交换机</h2><p>Quidway S5300系列运营级园区交换机是华为公司为满足大带宽及多业务承载需求而推出的新一代全千兆运营级三层以太网交换机。S5300基于新一代高性能硬件和华为公司统一的VRP(Versatile Routing Platform)软件平台，支持万兆上行，提供高密度下行千兆端口，支持多种运营级可靠性技术，具备良好的扩展性和多业务接入/汇聚能力，可充分满足园区网络接入层交换机的应用需求。S5300为盒式产品设备，机箱高度1U，提供普通型(SI)和增强型(EI)产品版本，包括型号：S5328C-EI、S5328C-EI-24S、S5352C-EI、S5324TP-SI、S5324TP-PWR-SI、S5348TP-SI、S5348TP-PWR-SI、S5328C-PWR-EI、S5352C-PWR-EI、S5328C-SI、S5352C-SI、S5328C-PWR-SI、S5352C-PWR-SI。</p>
<p><strong>产品特点：</strong></p>
<p><strong>大带宽、高性能</strong></p>
<p>S5300最大可提供48个GE接口，以及4个GE接口或者2个10GE接口，充分满足对高密度千兆和万兆上行设备的需求。S5300硬件支持二/三层数据包线速转发能力。 </p>
<p><strong>强大的组播功能</strong></p>
<p>S5300支持组播组，支持可控组播、IGMP Snooping/Proxy/Filter/Fast leave等特性。S5300支持线速的跨VLAN组播复制，支持捆绑端口的组播负载分担，支持基于VLAN的组播呼叫接纳控制功能(组播CAC)，支持IPv6组播，支持MLD V1/V2 snooping, 充分满足IPTV等组播业务的运营要求。</p>
<p><strong>运营级高可靠性</strong></p>
<p>S5300不仅支持STP/RSTP/MSTP生成树协议，还支持树形(Smartlink/Monitorlink)和环形(RRPP)拓扑等增强型运营级以太网链路冗余保护技术，实现毫秒级的链路保护倒换，保证高可靠性业务要求的网络质量。</p>
<p>S5300支持Smartlink和RRPP的多实例功能，可实现链路负载分担，进一步提高链路带宽利用率。S5300支持BFD快速链路检测，可以为OSPF、ISIS、VRRP、PIM等路由协议提供毫秒级的连通性检测机制，提高网络拓扑收敛速度。</p>
<p>S5300同时提供Eth-OAM功能，802.1ag提供端到端可靠性检测，802.3ah提供最后一公里故障检测和链路性能管理。此外，S3300支持BPDU tunnel功能，为用户利用运营商提供的专线构建自己的二层网络提供可能。</p>
<p><strong>卓越的安全特性</strong></p>
<p>S5300支持MCE功能，实现不同VPN用户在同一台设备上的路由隔离，有效解决用户的数据安全问题，同时降低用户设备投资成本。S5300提供多种用户安全保护功能，支持大ACL表项，支持IP/MAC/端口的组合绑定，支持黑洞MAC地址、端口隔离、MAC地址学习数目限制、、端口安全、Sticky MAC、MFF、动态ARP检测、IP SOURCE GUARD等安全技术，支持Radius、Tacacs、802.1x、NAC、SSH等认证技术，为网络穿上坚实的保护衣。</p>
<p><strong>iStack功能</strong></p>
<p>S5300全系列产品支持堆叠功能，提供高速堆叠模块，支持双向48Gbps的堆叠带宽，在保证了堆叠设备高性能的同时，简化了管理和网络运行，降低了成本，提供强大的网络扩展能力，保障了网络的可靠性。</p>
<p><strong>支持IPv6功能</strong></p>
<p>S5300支持IPv6协议，支持双栈，实现了多种IPv6协议，支持IPv4向IPv6的多种过渡技术，实现了IPv6的多种路由协议，为下一代网络提供了保证。</p>
<h2 id="7-2-2-Quidway-S3300系列交换机"><a href="#7-2-2-Quidway-S3300系列交换机" class="headerlink" title="7.2.2 Quidway S3300系列交换机"></a>7.2.2 Quidway S3300系列交换机</h2><p>Quidway S3300系列运营级园区交换机是华为公司为满足以太网多业务承载需要而推出的新一代园区接入三层交换机。S3300基于新一代高性能硬件和华为公司统一的VRP(Versatile Routing Platform)软件平台，提供增强型灵活QinQ功能，具备限速的跨VLAN组播复制能力，支持环形拓扑和树形拓扑等运营级组网技术，具备以太网OAM功能，提供高性能低成本的堆叠功能，是企业网的楼宇、小区接入等多种场合的最佳选择。</p>
<p>S3300为盒式产品设备，机箱高度1U，从特性上划分为标准型(SI)和增强型(EI)两个产品版本，标准型支持二层和基本的三层功能，增强型支持复杂的路由协议和丰富的业务特性，包含型号：S3328TP-SI、S3352P-SI、S3328TP-EI、S3328TP-EI-24S、S3325-EI、S3325-EI-24S、S3325-EI-48S、S3328TP-PWR-EI、S3352P-PWR-EI。</p>
]]></content>
      <categories>
        <category>华为</category>
      </categories>
      <tags>
        <tag>华为</tag>
      </tags>
  </entry>
  <entry>
    <title>OSPF配置---华为</title>
    <url>/2019/05/28/54/</url>
    <content><![CDATA[<h2 id="6-1-OSPF简介"><a href="#6-1-OSPF简介" class="headerlink" title="6.1  OSPF简介"></a>6.1  OSPF简介</h2><p>介绍OSPF的定义和目的。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>开放式最短路径优先OSPF（Open Shortest Path First）是IETF组织开发的一个基于链路状态的内部网关协议（Interior Gateway Protocol）。</p>
<p>目前针对IPv4协议使用的是OSPF Version 2（RFC2328）；针对IPv6协议使用OSPF Version 3（RFC2740）。如无特殊说明，本文中所指的OSPF均为OSPF Version 2。</p>
<ul>
<li>OSPF把自治系统AS（Autonomous System）划分成逻辑意义上的一个或多个区域；</li>
<li>OSPF通过LSA（Link State Advertisement）的形式发布路由；</li>
<li>OSPF依靠在OSPF区域内各设备间交互OSPF报文来达到路由信息的统一；</li>
<li>OSPF报文封装在IP报文内，可以采用单播或组播的形式发送。</li>
</ul>
<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>在OSPF出现前，RIP是网络上使用最广泛的IGP协议。</p>
<p>由于RIP是基于距离矢量算法的路由协议，存在着收敛慢、路由环路、可扩展性差等问题，OSPF成为了网络上使用最广泛的IGP协议。</p>
<p>OSPF作为基于链路状态的协议，能够解决RIP所面临的诸多问题。此外，OSPF还有以下优点：</p>
<ul>
<li>OSPF采用组播形式收发报文，这样可以减少对其它不运行OSPF路由器的影响。</li>
<li>OSPF支持无类型域间选路（CIDR）。</li>
<li>OSPF支持对等价路由进行负载分担。</li>
<li>OSPF支持报文加密。</li>
</ul>
<h3 id="相关信息"><a href="#相关信息" class="headerlink" title="相关信息"></a>相关信息</h3><p><strong>技术论坛</strong></p>
<p><a href="http://support.huawei.com/ecommunity/bbs/10259484.html">问鼎OSPF系列技术贴</a></p>
<h2 id="6-2-原理描述"><a href="#6-2-原理描述" class="headerlink" title="6.2  原理描述"></a>6.2  原理描述</h2><h3 id="6-2-1-OSPF基础"><a href="#6-2-1-OSPF基础" class="headerlink" title="6.2.1  OSPF基础"></a>6.2.1  OSPF基础</h3><h4 id="6-2-1-1-OSPF的特点"><a href="#6-2-1-1-OSPF的特点" class="headerlink" title="6.2.1.1  OSPF的特点"></a>6.2.1.1  OSPF的特点</h4><p>在OSPF网络中，每台路由器根据自己周围的网络拓扑结构生成链路状态通告LSA（Link State Advertisement），并通过更新报文将LSA发送给网络中的其它路由器。</p>
<p>RIP交互的是路由。与RIP不同，OSPF交互的是链路状态信息。也就是说，RIP中，路由器的选路依赖于邻居路由器的路由信息，但不管邻居路由器传达的信息是否正确；而OSPF中，路由器的选路是一种“自主行为”，LSA只是一种选路的参考信息。</p>
<p>每台路由器都通过链路状态数据库LSDB(Link State DataBase)掌握全网的拓扑结构。如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_111501">图6-1</a>所示，每台路由器都会收集其它路由器发来的LSA，所有的LSA放在一起便组成了链路状态数据库LSDB。LSA是对路由器周围网络拓扑结构的描述，LSDB则是对整个自治系统的网络拓扑结构的描述。路由器将LSDB转换成一张带权的有向图，这张图便是对整个网络拓扑结构的真实反映。在网络拓扑稳定的情况下，各个路由器得到的有向图是完全相同的。</p>
<p><strong>图6-1</strong>  通过LSDB掌握全网的拓扑结构<br><img src="http://support.huawei.com/enterprise/product/images/76d5fe7788bc45ac8b07e7f99d5cb807" alt="img" loading="lazy"></p>
<p>路由器根据最短路径优先(Shortest Path First)算法计算到达目的网络的路径，而不是根据路由通告来获取路由信息。如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_111502">图6-2</a>所示，每台路由器根据有向图，使用SPF算法计算出一棵以自己为根的最短路径树，这棵树给出了到自治系统中各节点的路由。相对于RIP，这种机制极大地提升了路由器的自主选路能力，使得路由器不再依靠路由通告进行选路。</p>
<p><strong>图6-2</strong>  根据SPF计算到达目的网络的路径<br><img src="http://support.huawei.com/enterprise/product/images/ef85c3eb05ed403d8ba6d19f54bfc020" alt="img" loading="lazy"></p>
<p>总之，LSDB保证路由器能够时刻掌握全网的拓扑机构，SPF算法保证路由器能够迅速计算出到达目的网络的最短路径。</p>
<h4 id="6-2-1-2-OSPF运行机制"><a href="#6-2-1-2-OSPF运行机制" class="headerlink" title="6.2.1.2  OSPF运行机制"></a>6.2.1.2  OSPF运行机制</h4><p>OSPF的运行机制包括以下5个步骤：</p>
<ol>
<li><p>通过交互Hello报文形成邻居关系</p>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_111601">图6-3</a>所示，路由器运行OSPF协议后，会从所有启动OSPF协议的接口上发送Hello报文。如果两台路由器共享一条公共数据链路，并且能够成功协商各自Hello报文中所指定的某些参数，就能形成邻居关系。</p>
<p><strong>图6-3</strong>  通过交互Hello报文形成邻居关系<br><img src="http://support.huawei.com/enterprise/product/images/3ecba075c8024ae49a9917fcad8de3cd" alt="img" loading="lazy"></p>
</li>
<li><p>通过泛洪LSA通告链路状态信息</p>
<p>形成邻接关系的路由器之间可以交互LSA，如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_111602">图6-4</a>所示。LSA描述了路由器所有的链路、接口、邻居及链路状态等信息。路由器通过交互这些链路信息来了解整个网络的拓扑信息。由于链路的多样性，OSPF协议定义了多种LSA类型。详见<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_feature_ospf_1123">6.2.1.9 OSPF LSA类型</a>。</p>
<p><strong>图6-4</strong>  通过泛洪LSA通告链路状态信息<br><img src="http://support.huawei.com/enterprise/product/images/6e0284db542442a6b644e637b9ddf01c" alt="img" loading="lazy"></p>
</li>
<li><p>通过组建LSDB形成带权有向图</p>
<p>通过LSA的泛洪，路由器会把收到的LSA汇总记录在LSDB中。最终，所有路由器都会形成同样的LSDB，如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_111603">图6-5</a>所示。LSA是对路由器周围网络拓扑结构的描述，而LSDB则是对整个自治系统的网络拓扑结构的描述，LSDB是LSA的汇总。</p>
<p><strong>图6-5</strong>  通过组建LSDB形成带权有向图<br><img src="http://support.huawei.com/enterprise/product/images/40ece72d5e9e466c8dafc300cc776a35" alt="img" loading="lazy"></p>
</li>
<li><p>通过SPF算法计算并形成路由</p>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_111604">图6-6</a>所示，当LSDB同步完成之后，每一台路由器都将以其自身为根，使用SPF算法来计算一个无环路的拓扑图来描述它所知道的到达每一个目的地的最短路径（最小的路径代价）。这个拓扑图就是最短路径树，有了这棵树，路由器就能知道到达自治系统中各个节点的最优路径。</p>
<p><strong>图6-6</strong>  通过SPF算法计算并形成路由<br><img src="http://support.huawei.com/enterprise/product/images/c55e9f3ac146428e8bf29fcd5fa6d77d" alt="img" loading="lazy"></p>
</li>
<li><p>维护和更新路由表</p>
<p>根据SPF算法得出最短路径树后，每台路由器将计算得出的最短路径加载到OSPF路由表形成指导数据转发的路由表项，并且实时更新，如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_111605">图6-7</a>所示。同时，邻居之间交互Hello报文进行保活，维持邻居关系或邻接关系，并且周期性地重传LSA。</p>
<p><strong>图6-7</strong>  维护和更新路由表<br><img src="http://support.huawei.com/enterprise/product/images/fa920abb92e24c549d48c0150883adaa" alt="img" loading="lazy"></p>
</li>
</ol>
<h4 id="6-2-1-3-OSPF报文类型"><a href="#6-2-1-3-OSPF报文类型" class="headerlink" title="6.2.1.3  OSPF报文类型"></a>6.2.1.3  OSPF报文类型</h4><p>OSPF提供五种类型的报文。</p>
<ul>
<li><p>Hello报文</p>
<p>Hello报文是最常用的报文，用于建立和维护邻接关系。使能了OSPF功能的接口周期性地发送Hello报文。Hello报文中包括一些定时器的数值、本网络中的DR（Designated Router）、BDR（Backup Designated Router）以及已知的邻居。</p>
</li>
<li><p>DD报文</p>
<p>两台路由器在邻接关系初始化时，DD报文（Database Description packet）用来协商主从关系，此时报文中不包含LSA的Header。在两台路由器交换DD报文的过程中，一台为Master，另一台为Slave。由Master规定起始序列号，每发送一个DD报文序列号加1，Slave方使用Master的序列号作为确认。</p>
<p>邻接关系建立之后，路由器使用DD报文描述本端路由器的LSDB，进行数据库同步。DD报文里包括LSDB中每一条LSA的Header（LSA的Header可以唯一标识一条LSA），即所有LSA的摘要信息。LSA Header只占一条LSA的整个数据量的一小部分，这样可以减少路由器之间的协议报文流量。对端路由器根据LSA Header就可以判断出是否已有这条LSA。</p>
</li>
<li><p>LSR报文</p>
<p>两台路由器互相交换过DD报文之后，需要发送LSR报文（Link State Request packet）向对方请求更新LSA。LSR报文里包括所需要的LSA的摘要信息。</p>
</li>
<li><p>LSU报文</p>
<p>LSU报文（Link State Update packet）用来向对端路由器发送其所需要的LSA或者泛洪本端更新的LSA，其报文内容是多条完整的LSA的集合。为了实现泛洪的可靠性传输，需要LSAck报文对其进行确认，对没有收到确认报文的LSA进行重传，重传的LSA是直接发送到邻居的。</p>
</li>
<li><p>LSAck报文</p>
<p>LSAck报文（Link State Acknowledgment packet）用来对接收到的LSU报文进行确认，内容是需要确认的LSA的Header。一个LSAck报文可对多个LSA进行确认。</p>
</li>
</ul>
<h4 id="6-2-1-4-OSPF支持的网络类型"><a href="#6-2-1-4-OSPF支持的网络类型" class="headerlink" title="6.2.1.4  OSPF支持的网络类型"></a>6.2.1.4  OSPF支持的网络类型</h4><p>OSPF根据链路层协议类型，将网络分为如下四种类型：</p>
<ul>
<li><p>广播类型（Broadcast）</p>
<p>当链路层协议是Ethernet或FDDI（Fiber Distributed Digital Interface）时，缺省情况下，OSPF认为网络类型是Broadcast。</p>
<p>在该类型的网络中：</p>
<ul>
<li>通常以组播形式发送Hello报文、LSU报文和LSAck报文。其中，224.0.0.5的组播地址为OSPF设备的预留IP组播地址；224.0.0.6的组播地址为OSPF DR/BDR的预留IP组播地址。</li>
<li>以单播形式发送DD报文和LSR报文。</li>
</ul>
</li>
<li><p>NBMA类型（Non-Broadcast Multi-Access）</p>
<p>当链路层协议是帧中继或X.25时，缺省情况下，OSPF认为网络类型是NBMA。</p>
<p>在该类型的网络中，以单播形式发送协议报文（Hello报文、DD报文、LSR报文、LSU报文、LSAck报文）。</p>
</li>
<li><p>点到多点P2MP类型（Point-to-Multipoint）</p>
<p>没有一种链路层协议会被缺省的认为是P2MP类型。点到多点必须是由其他的网络类型强制更改的。常用做法是将非全连通的NBMA改为点到多点的网络。</p>
<p>在该类型的网络中：</p>
<ul>
<li>以组播形式（224.0.0.5）发送Hello报文。</li>
<li>以单播形式发送其他协议报文（DD报文、LSR报文、LSU报文、LSAck报文）。</li>
</ul>
</li>
<li><p>点到点P2P类型（Point-to-Point）</p>
<p>当链路层协议是PPP、HDLC或LAPB时，缺省情况下，OSPF认为网络类型是P2P。</p>
<p>在该类型的网络中，以组播形式（224.0.0.5）发送协议报文（Hello报文、DD报文、LSR报文、LSU报文、LSAck报文）。</p>
</li>
</ul>
<h4 id="6-2-1-5-DR和BDR选举"><a href="#6-2-1-5-DR和BDR选举" class="headerlink" title="6.2.1.5  DR和BDR选举"></a>6.2.1.5  DR和BDR选举</h4><h5 id="Router-ID"><a href="#Router-ID" class="headerlink" title="Router ID"></a>Router ID</h5><p>在了解DR/BDR的选举过程之前，需要先了解Router ID。Router ID是用于在自治系统中唯一标识一台运行OSPF的路由器的32位整数。每个运行OSPF的路由器都有一个Router ID。Router ID的格式和IP地址的格式是一样的。在实际网络部署中，考虑到协议的稳定，推荐使用路由器上Loopback接口的IP地址做为路由器的Router ID。</p>
<p>Router ID的选取有两种方式：通过命令行手动配置和设备自动设定。</p>
<p>如果没有手动配置Router ID，设备会从当前接口的IP地址中自动选取一个作为Router ID。其选择顺序是：</p>
<ol>
<li>优先从Loopback地址中选择最大的IP地址作为Router ID。</li>
<li>如果没有配置Loopback接口，则在接口地址中选取最大的IP地址作为Router ID。</li>
</ol>
<p>只有重新配置系统的Router ID或OSPF的Router ID，并且重新启动OSPF进程后，才会进行Router ID的重新选取。</p>
<h5 id="DR和BDR选举的原因"><a href="#DR和BDR选举的原因" class="headerlink" title="DR和BDR选举的原因"></a>DR和BDR选举的原因</h5><p>在广播网络和NBMA网络中，任意两台路由器之间都要传递路由信息。如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_111901">图6-8</a>所示，网络中有n台路由器，则需要建立n*(n-1)/2个邻接关系。这使得任何一台路由器的路由变化都会导致多次传递，浪费了带宽资源。</p>
<p>为解决这一问题，OSPF定义了DR。通过选举产生DR后，所有其他设备都只将信息发送给DR，由DR将网络链路状态LSA广播出去。</p>
<p>为了防止DR发生故障，重新选举DR时会产成业务中断，除了DR之外，还会选举一个备份指定路由器BDR。这样除DR和BDR之外的路由器（称为DR Other）之间将不再建立邻接关系，也不再交换任何路由信息，这样就减少了广播网和NBMA网络上各路由器之间邻接关系的数量。</p>
<p><strong>图6-8</strong>  DR和BDR选举<br><img src="http://support.huawei.com/enterprise/product/images/28927eee31074cf6ba4a37fcaefeb0fd" alt="img" loading="lazy"></p>
<h5 id="DR和BDR选举的原则"><a href="#DR和BDR选举的原则" class="headerlink" title="DR和BDR选举的原则"></a>DR和BDR选举的原则</h5><p>在广播网络和NBMA网络中，为了稳定地进行DR和BDR选举，OSPF规定了一系列的选举规则：选举制、终身制、继承制。</p>
<p><strong>选举制</strong></p>
<p>选举制是指DR和BDR不是人为指定的，而是由本网段中所有的路由器共同选举出来的。如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_111902">图6-9</a>所示，路由器接口的DR优先级决定了该接口在选举DR、BDR时所具有的资格，本网段内DR优先级大于0的路由器都可作为“候选人”。选举中使用的“选票”就是Hello报文，每台路由器将自己选出的DR写入Hello报文中，发给网段上的其他路由器。当处于同一网段的两台路由器同时宣布自己是DR时，DR优先级高者胜出。如果优先级相等，则Router ID大者胜出。如果一台路由器的优先级为0，则它不会被选举为DR或BDR。</p>
<p><strong>图6-9</strong>  DR和BDR选举的原则—选举制<br><img src="http://support.huawei.com/enterprise/product/images/8fcc2f94eabb4a55bbb80bd1b5604012" alt="img" loading="lazy"></p>
<p><strong>终身制</strong></p>
<p>终身制也叫非抢占制。每一台新加入的路由器并不急于参加选举，而是先考察一下本网段中是否已存在DR。如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_111903">图6-10</a>所示，如果目前网段中已经存在DR，即使本路由器的DR优先级比现有的DR还高，也不会再声称自己是DR，而是承认现有的DR。因为网段中的每台路由器都只和DR、BDR建立邻接关系，如果DR频繁更换，则会引起本网段内的所有路由器重新与新的DR、BDR建立邻接关系。这样会导致短时间内网段中有大量的OSPF协议报文在传输，降低网络的可用带宽。终身制有利于增加网络的稳定性、提高网络的可用带宽。实际上，在一个广播网络或NBMA网络上，最先启动的两台具有DR选举资格的路由器将成为DR和BDR。</p>
<p><strong>图6-10</strong>  DR和BDR选举的原则—终身制<br><img src="http://support.huawei.com/enterprise/product/images/47c62a5ef1284953a52fdc0dc8e6a83e" alt="img" loading="lazy"></p>
<p><strong>继承制</strong></p>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_111904">图6-11</a>所示，继承制是指如果DR发生故障了，那么下一个当选为DR的一定是BDR，其他的路由器只能去竞选BDR的位置。这个原则可以保证DR的稳定，避免频繁地进行选举，并且DR是有备份的（BDR），一旦DR失效，可以立刻由BDR来承担DR的角色。由于DR和BDR的数据库是完全同步的，这样当DR故障后，BDR立即成为DR，履行DR的职责，而且邻接关系已经建立，所以从角色切换到承载业务的时间会很短。同时，在BDR成为新的DR之后，还会选举出一个新的BDR，虽然这个过程所需的时间比较长，但已经不会影响路由的计算了。</p>
<p><strong>图6-11</strong>  DR和BDR选举的原则—继承制<br><img src="http://support.huawei.com/enterprise/product/images/125603863bea4fe2900e3d04fcad0ae5" alt="img" loading="lazy"></p>
<h5 id="DR和BDR选举过程"><a href="#DR和BDR选举过程" class="headerlink" title="DR和BDR选举过程"></a>DR和BDR选举过程</h5><p>广播链路或者NMBA链路上DR和BDR的选举过程如下：</p>
<ol>
<li>接口UP后，发送Hello报文，同时进入到Waiting状态。在Waiting状态下会有一个WaitingTimer，该计时器的长度与DeadTimer是一样的。默认值为40秒，用户不可自行调整。OSPF接口状态的详细描述，请参见<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_feature_ospf_1120">OSPF接口状态机</a>。</li>
<li>在WaitingTimer触发前，发送的hello报文是没有DR和BDR字段的。在Waiting阶段，如果收到Hello报文中有DR和BDR，那么直接承认网络中的DR和BDR，而不会触发选举。直接离开Waiting状态，开始邻居同步。</li>
<li>假设网络中已经存在一个DR和一个BDR，这时新加入网络中的路由器，不论它的Router ID或者DR优先级有多大，都会承认现网中已有的DR和BDR。</li>
<li>当DR因为故障Down掉之后，BDR会继承DR的位置，剩下的优先级大于0的路由器会竞争成为新的BDR。</li>
<li>只有当不同Router ID，或者配置不同DR优先级的路由器同时起来，在同一时刻进行DR选举才会应用DR选举规则产生DR。该规则是：优先选择DR优先级最高的作为DR，次高的作为BDR。DR优先级为0的路由器只能成为DR Other；如果优先级相同，则优先选择Router ID较大的路由器成为DR，次大的成为BDR，其余路由器成为DR Other。</li>
</ol>
<h5 id="DR和BDR选举过程验证"><a href="#DR和BDR选举过程验证" class="headerlink" title="DR和BDR选举过程验证"></a>DR和BDR选举过程验证</h5><p>五台路由器组成一个广播网络，R5作为纯二层设备，R1～R4作为路由设备。R1～R4都规划在OSPF的Area0区域内，各路由器的IP地址及Router ID如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_111905">图6-12</a>所示。</p>
<p><strong>图6-12</strong>  DR和BDR选举组网图<br><img src="http://support.huawei.com/enterprise/product/images/64593677b4554ae1a5fe7a9391a41dbc" alt="img" loading="lazy"></p>
<p><strong>网络中可以正常选举出DR和BDR时</strong></p>
<p>假设R1～R4各接口的配置已经完成，这里仅给出OSPF相关的配置。</p>
<ul>
<li><p>R1的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">ospf 1 Router ID 10.1.1.1 </span><br><span class="line"> area 0.0.0.0 </span><br><span class="line">  network 192.168.1.0 0.0.0.255 </span><br><span class="line">#</span><br></pre></td></tr></table></figure>
</li>
<li><p>R2的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">ospf 1 Router ID 10.2.2.2</span><br><span class="line"> area 0.0.0.0 </span><br><span class="line">  network 192.168.1.0 0.0.0.255 </span><br><span class="line">#</span><br></pre></td></tr></table></figure>
</li>
<li><p>R3的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">ospf 1 Router ID 10.3.3.3 </span><br><span class="line"> area 0.0.0.0 </span><br><span class="line">  network 192.168.1.0 0.0.0.255 </span><br><span class="line">#</span><br></pre></td></tr></table></figure>
</li>
<li><p>R4的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">ospf 1 Router ID 10.4.4.4</span><br><span class="line"> area 0.0.0.0 </span><br><span class="line">  network 192.168.1.0 0.0.0.255 </span><br><span class="line">#</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>配置完成后，待网络稳定后查看当前网络中DR和BDR的选举情况。</p>
<p># 在R1上查看OSPF的邻居信息。可以看出，该网络已经完成了DR和BDR的选举，R1是DR，R2是BDR，R3和R4是DR Other。这里R1是DR，R2是BDR跟系统的启动顺序是直接相关的。本例中按照R1、R2、R3、R4的顺序依次启动设备，所以R1和R2首先完成了初始化，自然成为了DR和BDR。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;R1&gt; display ospf peer</span><br><span class="line"></span><br><span class="line">         OSPF Process 1 with Router ID 10.1.1.1</span><br><span class="line">                 Neighbors</span><br><span class="line"></span><br><span class="line"> Area 0.0.0.0 interface 192.168.1.1(GigabitEthernet0&#x2F;0&#x2F;1)&#39;s neighbors</span><br><span class="line"> Router ID: 10.2.2.2         Address: 192.168.1.2</span><br><span class="line">   State: Full  Mode:Nbr is Master  Priority: 1</span><br><span class="line">   DR: 192.168.1.1  BDR: 192.168.1.2   MTU: 0</span><br><span class="line">   Dead timer due in 38  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:22:16</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br><span class="line"></span><br><span class="line"> Router ID: 10.3.3.3         Address: 192.168.1.3</span><br><span class="line">   State: Full  Mode:Nbr is Master   Priority: 1</span><br><span class="line">   DR: 192.168.1.1  BDR: 192.168.1.2   MTU: 0</span><br><span class="line">   Dead timer due in 35  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:21:30</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br><span class="line"></span><br><span class="line"> Router ID: 10.4.4.4         Address: 192.168.1.4</span><br><span class="line">   State: Full  Mode:Nbr is Master   Priority: 1</span><br><span class="line">   DR: 192.168.1.1  BDR: 192.168.1.2   MTU: 0</span><br><span class="line">   Dead timer due in 33  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:20:24</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br></pre></td></tr></table></figure>

<p># 在R1、R2、R3和R4上查看OSPF邻居的概要信息。可以看出，R1、R2和其他三台路由器的邻居关系都是Full，而R3和R4之间的邻居关系是2-Way状态。这表示DR、BDR与邻居间建立的是邻接关系，而DR Other之间建立的只是邻居关系。OSPF邻居状态的详细描述，请参见<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_feature_ospf_1120">OSPF邻居状态机</a>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;R1&gt; display ospf 1 peer brief</span><br><span class="line"></span><br><span class="line">         OSPF Process 1 with Router ID 10.1.1.1</span><br><span class="line">                   Peer Statistic Information</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Area Id         Interface                  Neighbor id      State</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.2.2.2         Full</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.3.3.3         Full</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.4.4.4         Full</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Total Peer(s):     3</span><br><span class="line">&lt;R2&gt; display ospf 1 peer brief</span><br><span class="line"></span><br><span class="line">         OSPF Process 1 with Router ID 10.2.2.2</span><br><span class="line">                   Peer Statistic Information</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Area Id         Interface                  Neighbor id      State</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.1.1.1         Full</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.3.3.3         Full</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.4.4.4         Full</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Total Peer(s):     3</span><br><span class="line">&lt;R3&gt; display ospf 1 peer brief</span><br><span class="line"></span><br><span class="line">         OSPF Process 1 with Router ID 10.3.3.3</span><br><span class="line">                   Peer Statistic Information</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Area Id         Interface                  Neighbor id      State</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.1.1.1         Full</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.2.2.2         Full</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.4.4.4         2-Way</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Total Peer(s):     3</span><br><span class="line">&lt;R4&gt; display ospf 1 peer brief</span><br><span class="line"></span><br><span class="line">         OSPF Process 1 with Router ID 10.4.4.4</span><br><span class="line">                   Peer Statistic Information</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Area Id         Interface                  Neighbor id      State</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1        10.1.1.1         Full</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1        10.2.2.2         Full</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1        10.3.3.3         2-Way</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Total Peer(s):     3</span><br></pre></td></tr></table></figure>

<p><strong>网络中无法选举出BDR时</strong></p>
<p>如果在R2、R3、R4的接口GE0/0/1上执行<strong>ospf dr-priority</strong>命令将接口的DR优先级配置为0，那么这个时候这三台路由器将失去DR和BDR的选举资格，只能作为DR Other，网络中仅存在一台具备DR和BDR选举资格的路由器，就是R1。</p>
<p># 在R1上查看OSPF邻居信息。可以看到，此时DR是R1，BDR显示为None，即网络中不存在BDR。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;R1&gt; display ospf peer</span><br><span class="line"></span><br><span class="line">         OSPF Process 1 with Router ID 10.1.1.1</span><br><span class="line">                 Neighbors</span><br><span class="line"></span><br><span class="line"> Area 0.0.0.0 interface 192.168.1.1(GigabitEthernet0&#x2F;0&#x2F;1)&#39;s neighbors</span><br><span class="line"> Router ID: 10.2.2.2         Address: 192.168.1.2</span><br><span class="line">   State: Full  Mode:Nbr is Master  Priority: 0</span><br><span class="line">   DR: 192.168.1.1  BDR: None   MTU: 0</span><br><span class="line">   Dead timer due in 38  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:04:31</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br><span class="line"></span><br><span class="line"> Router ID: 10.3.3.3         Address: 192.168.1.3</span><br><span class="line">   State: Full  Mode:Nbr is Master   Priority: 0</span><br><span class="line">   DR: 192.168.1.1  BDR: None   MTU: 0</span><br><span class="line">   Dead timer due in 35  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:03:45</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br><span class="line"></span><br><span class="line"> Router ID: 10.4.4.4         Address: 192.168.1.4</span><br><span class="line">   State: Full  Mode:Nbr is Master   Priority: 0</span><br><span class="line">   DR: 192.168.1.1  BDR: None   MTU: 0</span><br><span class="line">   Dead timer due in 33  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:03:36</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br></pre></td></tr></table></figure>

<p># 在R1、R2、R3和R4上查看OSPF邻居的概要信息。可以看出，R2、R3、R4分别和R1建立了邻接关系（状态为FULL），而R2、R3、R4之间的邻居状态只停留在2-Way的状态。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;R1&gt; display ospf 1 peer brief</span><br><span class="line"></span><br><span class="line">         OSPF Process 1 with Router ID 10.1.1.1</span><br><span class="line">                   Peer Statistic Information</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Area Id         Interface                  Neighbor id      State</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.2.2.2         Full</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.3.3.3         Full</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.4.4.4         Full</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Total Peer(s):     3</span><br><span class="line">&lt;R2&gt; display ospf 1 peer brief</span><br><span class="line"></span><br><span class="line">         OSPF Process 1 with Router ID 10.2.2.2</span><br><span class="line">                   Peer Statistic Information</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Area Id         Interface                  Neighbor id      State</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.1.1.1         Full</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.3.3.3         2-Way</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.4.4.4         2-Way</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Total Peer(s):     3</span><br><span class="line">&lt;R3&gt; display ospf 1 peer brief</span><br><span class="line"></span><br><span class="line">         OSPF Process 1 with Router ID 10.3.3.3</span><br><span class="line">                   Peer Statistic Information</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Area Id         Interface                  Neighbor id      State</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.1.1.1         Full</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.2.2.2         2-Way</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.4.4.4         2-Way</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Total Peer(s):     3</span><br><span class="line">&lt;R4&gt; display ospf 1 peer brief</span><br><span class="line"></span><br><span class="line">         OSPF Process 1 with Router ID 10.4.4.4</span><br><span class="line">                   Peer Statistic Information</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Area Id         Interface                  Neighbor id      State</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.1.1.1         Full</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.2.2.2         2-Way</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.3.3.3         2-Way</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Total Peer(s):     3</span><br></pre></td></tr></table></figure>

<p>由此可知，如果在一个广播网络或NBMA网络上只有一台路由器具有选举资格，那么这台路由器将成为DR，并且在这个网络上没有BDR，其他所有的路由器都将只和DR建立邻接关系。</p>
<p><strong>网络中无法选举出DR和BDR时</strong></p>
<p>在以上配置的基础上，如果在R1的接口GE0/0/1上执行<strong>ospf dr-priority</strong>命令将接口的DR优先级配置为0，则R1也失去DR、BDR的选举资格。此时该网络中将没有任何路由器具备DR和BDR的选举资格。</p>
<p># 在R1上查看OSPF邻居信息。可以看到，DR和BDR字段都显示None，表示这个网络中不存在DR和BDR。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;R1&gt; display ospf peer</span><br><span class="line"></span><br><span class="line">         OSPF Process 1 with Router ID 10.1.1.1</span><br><span class="line">                 Neighbors</span><br><span class="line"></span><br><span class="line"> Area 0.0.0.0 interface 192.168.1.1(GigabitEthernet0&#x2F;0&#x2F;1)&#39;s neighbors</span><br><span class="line"> Router ID: 10.2.2.2         Address: 192.168.1.2</span><br><span class="line">   State: Full  Mode:Nbr is Master  Priority: 0</span><br><span class="line">   DR: None  BDR: None   MTU: 0</span><br><span class="line">   Dead timer due in 38  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:00:00</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br><span class="line"></span><br><span class="line"> Router ID: 10.3.3.3         Address: 192.168.1.3</span><br><span class="line">   State: Full  Mode:Nbr is Master   Priority: 0</span><br><span class="line">   DR: None  BDR: None   MTU: 0</span><br><span class="line">   Dead timer due in 35  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:00:00</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br><span class="line"></span><br><span class="line"> Router ID: 10.4.4.4         Address: 192.168.1.4</span><br><span class="line">   State: Full  Mode:Nbr is Master   Priority: 0</span><br><span class="line">   DR: None  BDR: None   MTU: 0</span><br><span class="line">   Dead timer due in 33  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:00:00</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br></pre></td></tr></table></figure>

<p># 在R1、R2、R3和R4上查看OSPF邻居的概要信息。可以看出，此时所有的邻居状态都只停留在2-Way的状态，网络不能建立邻接关系，各个路由器之间不能完成路由信息的交互。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;R1&gt; display ospf 1 peer brief</span><br><span class="line"></span><br><span class="line">         OSPF Process 1 with Router ID 10.1.1.1</span><br><span class="line">                   Peer Statistic Information</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Area Id         Interface                  Neighbor id      State</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.2.2.2         2-Way</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.3.3.3         2-Way</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.4.4.4         2-Way</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Total Peer(s):     3</span><br><span class="line">&lt;R2&gt; display ospf 1 peer brief</span><br><span class="line"></span><br><span class="line">         OSPF Process 1 with Router ID 10.2.2.2</span><br><span class="line">                   Peer Statistic Information</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Area Id         Interface                  Neighbor id      State</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.1.1.1         2-Way</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.3.3.3         2-Way</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.4.4.4         2-Way</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Total Peer(s):     3</span><br><span class="line">&lt;R3&gt; display ospf 1 peer brief</span><br><span class="line"></span><br><span class="line">         OSPF Process 1 with Router ID 10.3.3.3</span><br><span class="line">                   Peer Statistic Information</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Area Id         Interface                  Neighbor id      State</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.1.1.1         2-Way</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.2.2.2         2-Way</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.4.4.4         2-Way</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Total Peer(s):     3</span><br><span class="line">&lt;R4&gt; display ospf 1 peer brief</span><br><span class="line"></span><br><span class="line">         OSPF Process 1 with Router ID 10.4.4.4</span><br><span class="line">                   Peer Statistic Information</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Area Id         Interface                  Neighbor id      State</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.1.1.1         2-Way</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.2.2.2         2-Way</span><br><span class="line"> 0.0.0.0         GigabitEthernet0&#x2F;0&#x2F;1       10.3.3.3         2-Way</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Total Peer(s):     3</span><br></pre></td></tr></table></figure>

<p>由此可知，如果在一个广播网络或NBMA网络上不存在具备DR和BDR选举资格的路由器，那么这个网络上将没有DR或者BDR，而且也不会建立任何邻接关系。这种情况下，网络上所有路由器的邻居状态都将停留在2-Way状态。</p>
<h4 id="6-2-1-6-OSPF状态机"><a href="#6-2-1-6-OSPF状态机" class="headerlink" title="6.2.1.6  OSPF状态机"></a>6.2.1.6  OSPF状态机</h4><h5 id="OSPF接口状态机"><a href="#OSPF接口状态机" class="headerlink" title="OSPF接口状态机"></a>OSPF接口状态机</h5><p>OSPF设备从接口获取链路信息后，与相邻设备建立邻接关系，交互这些信息。在建立邻接关系之前，邻居设备间需要明确角色分工才能正常建立连接。OSPF接口信息的State字段（可通过<strong>display ospf interface</strong>命令查看）表明了OSPF设备在对应链路中的作用。</p>
<p>OSPF接口共有以下七种状态：</p>
<ul>
<li><strong>Down</strong>：接口的初始状态。表明此时接口不可用，不能用于收发流量。</li>
<li><strong>Loopback</strong>：设备到网络的接口处于环回状态。环回接口不能用于正常的数据传输，但可以通过Router-LSA进行通告。因此，进行连通性测试时能够发现到达这个接口的路径。</li>
<li><strong>Waiting</strong>：设备正在判定网络上的DR和BDR。在设备参与DR和BDR选举前，接口上会启动Waiting定时器。在这个定时器超时前，设备发送的Hello报文不包含DR和BDR信息，设备不能被选举为DR或BDR。这样可以避免不必要地改变链路中已存在的DR和BDR。仅NMBA网络、广播网络有此状态。</li>
<li><strong>P-2-P</strong>：接口连接到物理点对点网络或者是虚拟链路，这个时候设备会与链路连接的另一端设备建立邻接关系。仅P2P、P2MP网络有此状态。</li>
<li><strong>DROther</strong>：设备没有被选为DR或BDR，但连接到广播网络或NBMA网络上的其他设备被选举为DR。它会与DR和BDR建立邻接关系。</li>
<li><strong>BDR</strong>：设备是相连的网络中的BDR，并将在当前的DR失效时成为DR。该设备与接入该网络的所有其他设备建立邻接关系。</li>
<li><strong>DR</strong>：设备是相连的网络中的DR。该设备与接入该网络的所有其他设备建立邻接关系。</li>
</ul>
<p>OSPF接口根据不同的情况（即输入事件）在各状态中进行灵活转换，这样就形成了一个高效运作的接口状态机，如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112001">图6-13</a>所示。</p>
<p><strong>图6-13</strong>  OSPF接口状态机<br><img src="http://support.huawei.com/enterprise/product/images/1fb59f67d2734943a4390a9ced1952b7" alt="img" loading="lazy"></p>
<p><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_feature_ospf_1120_mMcCpPsS_table_01">表6-1</a>列出了不同状态切换时的输入事件InputEvent（<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112001">图6-13</a>中简称IE）。</p>
<p><strong>表6-1</strong>  OSPF接口状态切换的输入事件</p>
<table>
<thead>
<tr>
<th>输入事件</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>IE1</td>
<td>InterfaceUP：底层协议表明接口是可操作的。</td>
</tr>
<tr>
<td>IE2</td>
<td>WaitTimer：等待定时器超时，表明DR和BDR选举等待时间结束。</td>
</tr>
<tr>
<td>IE3</td>
<td>BackupSeen：设备已检测过网络中是否存在BDR。发生这个事件主要有下面两种方式：接口收到邻居设备的Hello报文，宣称自己是BDR。接口收到邻居设备的Hello的报文，宣称自己是DR，而没有指明有BDR。这都说明邻居间已进行了相互通信，可以结束Waiting状态了。</td>
</tr>
<tr>
<td>IE4</td>
<td>接口所在的设备在网络中被选举为DR。</td>
</tr>
<tr>
<td>IE5</td>
<td>接口所在的设备在网络中被选举为BDR。</td>
</tr>
<tr>
<td>IE6</td>
<td>接口所在的设备在网络中没有被选举为DR或BDR。</td>
</tr>
<tr>
<td>IE7</td>
<td>NeighborChange：与该接口相关的邻居关系变化的事件发生，这表明DR和BDR需要重新选举。下面的这些邻居关系变化可能会导致DR和BDR重新选举：接口所在的设备和一个邻居设备建立了双向通信关系。接口所在的设备和一个邻居设备之间丢失了双向通信关系。通过邻居设备发送的Hello报文检测到邻居设备重新宣称自己是DR或BDR。通过邻居设备发送的Hello报文再一次检测到邻居设备宣称自己不再是DR或BDR。通过邻居设备发送的Hello报文再一次检测到相邻设备的DR优先级都已经改变。</td>
</tr>
<tr>
<td>IE8</td>
<td>UnLoopInd：网管系统或者底层协议表明接口不再处于环回状态。</td>
</tr>
<tr>
<td>IE9</td>
<td>InterfaceDown：底层协议表明接口不可操作。任何一种状态都可能触发此事件切换到Down状态。</td>
</tr>
<tr>
<td>IE10</td>
<td>LoopInd：网管系统或者底层协议表明接口处于环回状态。任何一种状态都可能触发此事件切换到Loopback状态。</td>
</tr>
</tbody></table>
<h5 id="OSPF邻居状态机"><a href="#OSPF邻居状态机" class="headerlink" title="OSPF邻居状态机"></a>OSPF邻居状态机</h5><p>在OSPF网络中，相邻设备间通过不同的邻居状态切换，最终可以形成完全的邻接关系，完成LSA信息的交互。</p>
<p>OSPF邻居信息的State字段（可通过<strong>display ospf peer</strong>命令查看）表明了OSPF设备的邻居状态。</p>
<p>OSPF邻居共有以下八种状态：</p>
<ul>
<li><strong>Down</strong>：邻居会话的初始阶段。表明没有在邻居失效时间间隔内收到来自邻居设备的Hello报文。除了NBMA网络OSPF路由器会每隔PollInterval时间对外轮询发送Hello报文，包括向处于Down状态的邻居路由器（即失效的邻居路由器）发送之外，其他网络是不会向失效的邻居路由器发送Hello报文的。</li>
<li><strong>Attempt</strong>：这种状态适用于NBMA网络，邻居路由器是手工配置的。邻居关系处于本状态时，路由器会每隔HelloInterval时间向自己手工配置的邻居发送Hello报文，尝试建立邻居关系。</li>
<li><strong>Init</strong>：本状态表示已经收到了邻居的Hello报文，但是对端并没有收到本端发送的Hello报文，收到的Hello报文的邻居列表并没有包含本端的Router ID，双向通信仍然没有建立。</li>
<li><strong>2-Way</strong>：互为邻居。本状态表示双方互相收到了对端发送的Hello报文，报文中的邻居列表也包含本端的Router ID，邻居关系建立。如果不形成邻接关系则邻居状态机就停留在此状态，否则进入ExStart状态。DR和BDR只有在邻居状态处于这个状态或者更高的状态才会被选举出来。</li>
<li><strong>ExStart</strong>：协商主从关系。建立主从关系主要是为了保证在后续的DD报文交换中能够有序的发送。邻居间从此时才开始正式建立邻接关系。</li>
<li><strong>Exchange</strong>：交换DD报文。本端设备将本地的LSDB用DD报文来描述，并发给邻居设备。</li>
<li><strong>Loading</strong>：正在同步LSDB。两端设备发送LSR报文向邻居请求对方的LSA，同步LSDB。</li>
<li><strong>Full</strong>：建立邻接。两端设备的LSDB已同步，本端设备和邻居设备建立了完全的邻接关系。</li>
</ul>
<p>OSPF邻居状态的切换如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112002">图6-14</a>所示。</p>
<p><strong>图6-14</strong>  OSPF邻居状态机<br><img src="http://support.huawei.com/enterprise/product/images/7293ad5cb7864b03a572b9b15d3e58fc" alt="img" loading="lazy"></p>
<p><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_feature_ospf_1120_mMcCpPsS_table_02">表6-2</a>列出了不同状态切换时的输入事件InputEvent（<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112001">图6-13</a>中简称IE）。</p>
<p><strong>表6-2</strong>  OSPF邻居状态切换的输入事件</p>
<table>
<thead>
<tr>
<th>输入事件</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>IE1</td>
<td>Start：以HelloInterval间隔向邻居设备发送Hello报文，尝试建立邻居关系。仅NMBA网络适用。</td>
</tr>
<tr>
<td>IE2</td>
<td>HelloReceived：从邻居设备收到一个Hello报文。</td>
</tr>
<tr>
<td>IE3</td>
<td>2-WayReceived：从邻居设备收到的Hello报文中包含了自己的RouterID，邻居间建立了双向通信关系。接下来会进行判断：IE3(Y)：如果相邻设备间应当建立邻接关系，会将邻居状态切换为ExStart。IE3(N)：如果相邻设备间不应当建立邻接关系，只建立邻居关系，会将邻居状态切换为2-Way。</td>
</tr>
<tr>
<td>IE4</td>
<td>NegotiationDone：邻居间主从关系已经协商完成，DD序列号已经交换。</td>
</tr>
<tr>
<td>IE5</td>
<td>ExchangeDone：邻居间成功交换了数据库描述报文。接下来会进行判断：IE5(Y)：如果链路状态请求列表为空，会将邻居状态切换为Full状态，表示链路状态数据已全部交换完成，邻居间建立了完全的邻接关系。IE5(N)：如果链路状态请求列表不为空，会将邻居状态切换为Loading状态，开始或继续向邻居发送LSR报文，请求还没有接收到的链路状态数据。</td>
</tr>
<tr>
<td>IE6</td>
<td>LoadingDone：链路请求状态列表为空。</td>
</tr>
</tbody></table>
<h4 id="6-2-1-7-OSPF邻接关系的建立"><a href="#6-2-1-7-OSPF邻接关系的建立" class="headerlink" title="6.2.1.7  OSPF邻接关系的建立"></a>6.2.1.7  OSPF邻接关系的建立</h4><h5 id="OSPF邻居关系和邻接关系"><a href="#OSPF邻居关系和邻接关系" class="headerlink" title="OSPF邻居关系和邻接关系"></a>OSPF邻居关系和邻接关系</h5><p>OSPF设备启动后，会通过OSPF接口向外发送Hello报文。网络中其它收到Hello报文的OSPF设备会检查该报文中所定义的参数，比如Hello报文发送间隔、网络类型、IP地址掩码等。如果双方Hello报文中的参数一致就会形成邻居关系，两端设备互为邻居。</p>
<p>OSPF邻接关系位于邻居关系之上。两端需要进一步交换DD报文、交互LSA信息时才建立邻接关系。</p>
<p>在广播链路和NBMA链路上，因为DR Other之间不需要交换LSA信息，所以建立的是邻居关系。而DR与BDR之间，DR、BDR与DR Other之间需要交互LSA信息，所以建立的是邻接关系。如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112101">图6-15</a>所示，两台DR Other各有三个邻居，但是分别只有两个邻接。</p>
<p><strong>图6-15</strong>  OSPF邻居关系和邻接关系<br><img src="http://support.huawei.com/enterprise/product/images/0e94dca1f06240eaaf96255e18339f75" alt="img" loading="lazy"></p>
<p>P2P链路和P2MP链路上只有OSPF邻接关系。</p>
<p>简单来说，邻居关系是指邻居状态达到了2-Way状态，而邻接关系则需要达到ExStart或以上状态。</p>
<h5 id="OSPF邻接关系建立过程"><a href="#OSPF邻接关系建立过程" class="headerlink" title="OSPF邻接关系建立过程"></a>OSPF邻接关系建立过程</h5><p>不同类型的网络，OSPF邻接关系建立过程略有不同。</p>
<p><strong>广播网络</strong></p>
<p>在广播网络中，DR、BDR和网段内的每一台路由器都形成邻接关系，但DR other之间只形成邻居关系。邻接关系建立的过程如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112102">图6-16</a>所示。</p>
<p><strong>图6-16</strong>  广播网络中邻接关系的建立过程<br><img src="http://support.huawei.com/enterprise/product/images/ce0e92c456ba4000aeab242dbd11e5e5" alt="img" loading="lazy"></p>
<ol>
<li><p>建立邻居关系</p>
<ol>
<li>RouterA连接到广播类型网络的接口上使能了OSPF协议，并发送了一个Hello报文（使用组播地址224.0.0.5）。此时，RouterA认为自己是DR设备（DR=1.1.1.1），但不确定邻居是哪台设备（Neighbors Seen=0）。</li>
<li>RouterB收到RouterA发送的Hello报文后，发送一个Hello报文回应给RouterA，并且在报文中的Neighbors Seen字段中填入RouterA的Router ID（Neighbors Seen=1.1.1.1），表示已收到RouterA的Hello报文，并且宣告DR设备是RouterB（DR=2.2.2.2），然后RouterB的邻居状态机置为Init。</li>
<li>RouterA收到RouterB回应的Hello报文后，将邻居状态机置为2-Way状态，下一步双方开始发送各自的链路状态数据库。在广播网络中，两个接口状态是DR Other的设备之间将停留在此步骤。</li>
</ol>
</li>
<li><p>主从关系协商、DD报文交换</p>
<ol>
<li><p>RouterA首先发送一个DD报文，宣称自己是Master（即将DD报文中的MS字段置为1），并规定序列号Seq=X。I=1表示这是第一个DD报文，报文中并不包含LSA的摘要，只是为了协商主从关系。M=1说明这不是最后一个报文。</p>
<p>为了提高发送的效率，RouterA和RouterB首先了解对端数据库中哪些LSA是需要更新的。如果某一条LSA在LSDB中已经存在，就不再需要请求更新了。为了达到这个目的，RouterA和RouterB先发送DD报文，DD报文中包含了对LSDB中LSA的摘要描述（每一条摘要可以唯一标识一条LSA）。为了保证报文在传输过程中的可靠性，在DD报文的发送过程中需要确定双方的主从关系，作为Master的一方定义一个序列号Seq，每发送一个新的DD报文将Seq加1，作为Slave的一方，每次发送DD报文时使用接收到的上一个Master的DD报文中的Seq。</p>
</li>
<li><p>RouterB在收到RouterA的DD报文后，将RouterA的邻居状态机改为ExStart，并且回应一个DD报文（该报文中同样不包含LSA的摘要信息）。由于RouterB的Router ID较大，所以在报文中RouterB认为自己是Master，并且重新规定了序列号Seq=Y。</p>
</li>
<li><p>RouterA收到报文后，同意了RouterB为Master，并将RouterB的邻居状态机改为Exchange。RouterA使用RouterB的序列号Seq=Y来发送新的DD报文，该报文开始正式传送LSA的摘要。在报文中RouterA将MS字段置为0，说明自己是Slave。</p>
</li>
<li><p>RouterB收到报文后，将RouterA的邻居状态机改为Exchange，并发送新的DD报文来描述自己的LSA摘要，此时RouterB将报文的序列号改为Seq=Y+1。上述过程持续进行，RouterA通过重复RouterB的序列号来确认已收到RouterB的报文。RouterB通过将序列号Seq加1来确认已收到RouterA的报文。当RouterB发送最后一个DD报文时，在报文中写上M=0。</p>
</li>
</ol>
</li>
<li><p>LSDB同步（LSA请求、LSA传输、LSA应答）</p>
<ol>
<li>RouterA收到最后一个DD报文后，发现RouterB的数据库中有许多LSA是自己没有的，将邻居状态机改为Loading状态。此时RouterB也收到了RouterA的最后一个DD报文，但RouterA的LSA，RouterB都已经有了，不需要再请求，所以直接将RouterA的邻居状态机改为Full状态。</li>
<li>RouterA发送LSR报文向RouterB请求更新LSA。RouterB用LSU报文来回应RouterA的请求。RouterA收到后，发送LSAck报文确认。</li>
</ol>
<p>上述过程持续到RouterA中的LSA与RouterB的LSA完全同步为止，此时RouterA将RouterB的邻居状态机改为Full状态。当路由器交换完DD报文并更新所有的LSA后，此时邻接关系建立完成。</p>
</li>
</ol>
<p><strong>NBMA网络</strong></p>
<p>在NBMA网络中，所有路由器只与DR和BDR之间形成邻接关系。邻接关系建立的过程如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112103">图6-17</a>所示。</p>
<p><strong>图6-17</strong>  NBMA网络中邻接关系的建立过程<br><img src="http://support.huawei.com/enterprise/product/images/87391de24c5549fbabc05a32fe55cafd" alt="img" loading="lazy"></p>
<ol>
<li>建立邻居关系<ol>
<li>RouterB向RouterA的一个状态为Down的接口发送Hello报文后，RouterB的邻居状态机置为Attempt。此时，RouterB认为自己是DR设备（DR=2.2.2.2），但不确定邻居是哪台设备（Neighbors Seen=0）。</li>
<li>RouterA收到Hello报文后将邻居状态机置为Init，然后再回复一个Hello报文。此时，RouterA同意RouterB是DR设备（DR=2.2.2.2），并且在Neighbors Seen字段中填入邻居设备的Router ID（Neighbors Seen=2.2.2.2）。在NBMA网络中，两个接口状态是DR Other的设备之间将停留在此步骤。</li>
</ol>
</li>
<li>主从关系协商、DD报文交换过程与广播网络中邻接关系建立过程相同。</li>
<li>LSDB同步（LSA请求、LSA传输、LSA应答）过程与广播网络中邻接关系建立过程相同。</li>
</ol>
<p><strong>点到点网络和点到多点网络</strong></p>
<p>点到点网络、点到多点网络中OSPF邻接关系建立的过程与广播网络相似。不同的是，在点到点、点到多点网络中不需要选举DR和BDR，且点到点网络中的DD报文是单播发送的。</p>
<h4 id="6-2-1-8-OSPF区域"><a href="#6-2-1-8-OSPF区域" class="headerlink" title="6.2.1.8  OSPF区域"></a>6.2.1.8  OSPF区域</h4><p>随着网络规模日益扩大，当一个大型网络中的路由器都运行OSPF路由协议时，路由器数量的增多会导致链路状态数据库LSDB（Link-State Database）非常庞大，占用大量的存储空间，并使得运行SPF算法的复杂度增加，导致路由器负担很重。在网络规模增大之后，拓扑结构发生变化的概率也增大，网络会经常处于“动荡”之中，造成网络中会有大量的OSPF协议报文在传递，降低了网络的带宽利用率。更为严重的是，每一次变化都会导致网络中所有的路由器重新进行路由计算。</p>
<p>OSPF协议通过将自治系统划分成不同的区域解决LSDB频繁更新的问题，提高网络的利用率。区域是从逻辑上将路由器划分为不同的组，每个组用区域号（Area ID）来标识。区域的边界是路由器，而不是链路。一个网段（链路）只能属于一个区域，或者说每个运行OSPF的接口必须指明属于哪一个区域。</p>
<p>在了解OSPF区域之前，需要先了解与区域相关的两个概念：路由器类型和路由类型。</p>
<h5 id="路由器类型"><a href="#路由器类型" class="headerlink" title="路由器类型"></a>路由器类型</h5><p>OSPF协议中常用到的路由器类型如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112201">图6-18</a>所示。</p>
<p><strong>图6-18</strong>  路由器类型<br><img src="http://support.huawei.com/enterprise/product/images/c7efd0b2fb4b4a3198e9435cf660b031" alt="img" loading="lazy"></p>
<p><strong>表6-3</strong>  路由器类型</p>
<table>
<thead>
<tr>
<th>路由器类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>区域内路由器（Internal Router）</td>
<td>该类设备的所有接口都属于同一个OSPF区域。</td>
</tr>
<tr>
<td>区域边界路由器ABR（Area Border Router）</td>
<td>该类设备可以同时属于两个以上的区域，但其中一个必须是骨干区域。ABR用来连接骨干区域和非骨干区域，它与骨干区域之间既可以是物理连接，也可以是逻辑上的连接。</td>
</tr>
<tr>
<td>骨干路由器（Backbone Router）</td>
<td>该类设备至少有一个接口属于骨干区域。所有的ABR和位于Area0的内部设备都是骨干路由器。</td>
</tr>
<tr>
<td>自治系统边界路由器ASBR（AS Boundary Router）</td>
<td>与其他AS交换路由信息的设备称为ASBR。ASBR并不一定位于AS的边界，它可能是区域内设备，也可能是ABR。只要一台OSPF设备引入了外部路由的信息，它就成为ASBR。</td>
</tr>
</tbody></table>
<h5 id="路由类型"><a href="#路由类型" class="headerlink" title="路由类型"></a>路由类型</h5><p>AS区域内和区域间路由描述的是AS内部的网络结构，AS外部路由则描述了应该如何选择到AS以外目的地址的路由。OSPF将引入的AS外部路由分为Type1和Type2两类。</p>
<p><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_feature_ospf_1122_mMcCpPsS_table_02">表6-4</a>中按优先级从高到低顺序列出了路由类型。</p>
<p><strong>表6-4</strong>  路由类型</p>
<table>
<thead>
<tr>
<th>路由类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Intra Area</td>
<td>区域内路由。</td>
</tr>
<tr>
<td>Inter Area</td>
<td>区域间路由。</td>
</tr>
<tr>
<td>第一类外部路由（Type1 External）</td>
<td>这类路由的可信程度高一些，所以计算出的外部路由的开销与自治系统内部的路由开销是相当的，并且和OSPF自身路由的开销具有可比性。到第一类外部路由的开销=本设备到相应的ASBR的开销+ASBR到该路由目的地址的开销。</td>
</tr>
<tr>
<td>第二类外部路由（Type2 External）</td>
<td>这类路由的可信度比较低，所以OSPF协议认为从ASBR到自治系统之外的开销远大于在自治系统之内到达ASBR的开销。所以，OSPF计算路由开销时只考虑ASBR到自治系统之外的开销，即到第二类外部路由的开销=ASBR到该路由目的地址的开销。</td>
</tr>
</tbody></table>
<h5 id="区域类型"><a href="#区域类型" class="headerlink" title="区域类型"></a>区域类型</h5><p>OSPF的区域类型包括普通区域、Stub区域、NSSA区域。</p>
<p><strong>表6-5</strong>  区域类型</p>
<table>
<thead>
<tr>
<th>区域类型</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>普通区域</td>
<td>缺省情况下，OSPF区域被定义为普通区域。普通区域包括：标准区域：最通用的区域，它传输区域内路由，区域间路由和外部路由。骨干区域：连接所有其他OSPF区域的中央区域，用<strong>Area 0</strong>表示。骨干区域负责区域之间的路由，非骨干区域之间的路由信息必须通过骨干区域来转发。</td>
<td>骨干区域自身必须保持连通。所有非骨干区域必须与骨干区域保持连通。</td>
</tr>
<tr>
<td>Stub区域</td>
<td>Stub区域是一些特定的区域，Stub区域的ABR不传播它们接收到的自治系统外部路由，因此这些区域中路由器的路由表规模以及路由信息传递的数量都会大大减少。一般情况下，Stub区域位于自治系统的边界，是只有一个ABR的非骨干区域，为保证到自治系统外的路由依旧可达，Stub区域的ABR将生成一条缺省路由，并发布给Stub区域中的其他非ABR路由器。Totally Stub区域允许ABR发布Type3缺省路由，不允许发布自治系统外部路由和区域间的路由，只允许发布区域内路由。</td>
<td>骨干区域不能配置成Stub区域。Stub区域内不能存在ASBR，因此自治系统外部的路由不能在本区域内传播。虚连接不能穿过Stub区域。</td>
</tr>
<tr>
<td>NSSA（Not-So-Stubby Area）区域</td>
<td>NSSA是Stub区域的一个变形，它和Stub区域有许多相似的地方。NSSA区域不允许存在Type5 LSA。NSSA区域允许引入自治系统外部路由，携带这些外部路由信息的Type7 LSA由NSSA的ASBR产生，仅在本NSSA内传播。当Type7 LSA到达NSSA的ABR时，由ABR将Type7 LSA转换成Type5 LSA，泛洪到整个OSPF域中。Totally NSSA区域不允许发布自治系统外部路由和区域间的路由，只允许发布区域内路由。</td>
<td>该区域的ABR发布Type7 LSA缺省路由传播到区域内，所有域间路由都必须通过ABR才能发布。虚连接不能穿过NSSA区域。</td>
</tr>
</tbody></table>
<p>OSPF网络划分区域以后，一个区域内参与SPF算法的只有区域内的LSA，其他的区域的LSA不参与本区域的SPF算法。如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112204">图6-19</a>所示，Area 1中的链路质量不好一直处于闪断中，所以Area 1的SPF算法会频繁运算。但是这种影响仅局限在Area 1内，其他区域不会因此而重新进行SPF运算，网络的震荡被限制在一个更小的范围内，提高了网络的稳定性。</p>
<p><strong>图6-19</strong>  划分区域后链路震荡的影响范围减小<br><img src="http://support.huawei.com/enterprise/product/images/897242c5165642e8acbc439cda8a5eae" alt="img" loading="lazy"></p>
<p><strong>Stub区域和Totally Stub区域</strong></p>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112202">图6-20</a>所示，OSPF划分了Area 0和Area 2，并且Area 0内的ASBR引入了外部路由。通常情况下，为了保证网络的路由可达性，可能把网络的各个角落的路由全都发布进了OSPF。此时，虽然各路由设备都能够到达网络的各个角落了，但如果网络越来越大，设备越来越多，那么每台设备的路由表项就会越来越大，而维护一个大规模的路由表项是需要消耗很多CPU及内存资源的。特别是对于一些边缘区域，设备性能可能比较低，维护大规模的路由表项会对设备性能带来巨大压力。</p>
<p><strong>图6-20</strong>  Stub区域和Totally Stub区域<br><img src="http://support.huawei.com/enterprise/product/images/8ff7e47c94524cae807edf1a7d0a0312" alt="img" loading="lazy"></p>
<p>从网络优化的角度考虑，通常在保证网络可达性的同时应尽量减小路由表项的规模，减少网络中LSA报文的泛洪。Area 2如果作为一个常规区域，那么可能存在Type1、Type2、Type3、Type4、Type5共计5中类型的LSA。对于Area 2中的路由器，无论想到达区域外的哪个网络，都必须首先到达到ABR路由器，也就是说这个时候Area 2中的其他路由器并不需要了解外部网络的细节。这种情况下，就产生了OSPF的Stub区域。</p>
<p>Stub区域是一种特殊的区域。Stub区域的ABR不传播它们接收到的自治系统外部路由，在这些区域中路由器的路由表规模以及路由信息传递的数量都会大大减少。</p>
<p>Stub区域是一种可选的配置属性，但并不是每个区域都符合配置的条件。通常来说，Stub区域位于自治系统的边界，是那些只有一个ABR的非骨干区域。</p>
<p>为保证到自治系统外的路由依旧可达，Stub区域的ABR将生成一条缺省路由，并发布给Stub区域中的其他非ABR路由器。</p>
<p>配置Stub区域时需要注意下列几点：</p>
<ul>
<li>骨干区域不能配置成Stub区域。</li>
<li>如果要将一个区域配置成Stub区域，则该区域中的所有路由器都要配置Stub区域属性。</li>
<li>Stub区域内不能存在ASBR，即自治系统外部的路由不能在本区域内传播。</li>
<li>虚连接不能穿过Stub区域。</li>
</ul>
<p>对于Area 2中的路由器来说，其实区域间的明细路由也没必要都了解，仅保留一个出口让Area 2中的路由器的数据包能够出去就足够了，这就产生了OSPF的Totally Stub区域。Totally Stub区域中，既不允许自治系统外部的路由在区域内传播，也不允许区域间路由在区域内传播，这样就进一步减少了区域内LSA的数量。</p>
<p><strong>NSSA区域和Totally NSSA区域</strong></p>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112203">图6-21</a>所示，假设Area 2原来作为一个Stub区域运行，但是有个外部网络需要通过Area 2接入到这个OSPF网络，也就是需要将自治系统外部路由引入并传播到整个OSPF自治系统中。此时可以在RouterA上将外部路由注入到OSPF自治系统，但是这样RouterA将成为ASBR，因此，Area 2也就不是Stub区域了。针对这种场景，OSPF定义了NSSA区域。</p>
<p><strong>图6-21</strong>  NSSA区域和Totally NSSA区域<br><img src="http://support.huawei.com/enterprise/product/images/861cfafbcc224151bc56e0a3adba4cae" alt="img" loading="lazy"></p>
<p>相比于Stub区域，NSSA区域能够将自治系统外部路由引入并传播到整个OSPF自治系统中，同时又不会学习来自OSPF网络其它区域的路由。</p>
<p>在NSSA区域中，为保证到自治系统外的路由可达，NSSA区域的ABR将生成一条缺省路由，并发布给NSSA区域中的其他路由器。</p>
<p>配置NSSA区域时需要注意下列几点：</p>
<ul>
<li>骨干区域不能配置成NSSA区域。</li>
<li>如果要将一个区域配置成NSSA区域，则该区域中的所有路由器都要配置NSSA区域属性。</li>
<li>虚连接不能穿过NSSA区域。</li>
</ul>
<p>在NSSA区域中，可能同时存在多个ABR，为了防止路由环路产生，边界路由器之间不计算对方发布的缺省路由。</p>
<p>一个区域内所有路由器上配置的区域类型必须保持一致。OSPF在Hello报文中使用N-bit来标识路由器支持的区域类型，区域类型选择不一致的路由器不能建立OSPF邻居关系。虽然协议有要求，但有些厂商实现时违背了这一原则，在OSPF DD报文中也置位了N-bit。为了和这些厂商互通，交换机的实现方式是可以通过命令设置N-bit来兼容。</p>
<p>与Totally Stub区域类似，为了进一步减少NSSA区域中LSA的数量，OSPF还定义了Totally NSSA区域。</p>
<h5 id="OSPF区域间环路及防环方法"><a href="#OSPF区域间环路及防环方法" class="headerlink" title="OSPF区域间环路及防环方法"></a>OSPF区域间环路及防环方法</h5><p>OSPF在区域内部运行的是SPF算法，这个算法能够保证区域内部的路由不会成环。然而划分区域后，区域之间的路由传递实际上是一种类似距离矢量算法的方式，这种方式容易产生环路。</p>
<p>为了避免区域间的环路，OSPF规定直接在两个非骨干区域之间发布路由信息是不允许的，只允许在一个区域内部或者在骨干区域和非骨干区域之间发布路由信息。因此，每个ABR都必须连接到骨干区域。</p>
<p>假设OSPF允许非骨干区域之间直接传递路由，则可能会导致区域间环路。如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112205">图6-22</a>所示，骨干区连接到其他网络的路由信息会传递至Area 1。假设非骨干区之间允许直接传递路由信息，那么这条路由信息最终又被传递回去，形成区域间的路由环路。为了防止这种区域间环路，OSPF禁止Area 1和Area 3，以及Area 2和Area 3之间直接进行路由交互，而必须通过骨干区域进行路由交互。这样就能防止区域间环路的产生。</p>
<p><strong>图6-22</strong>  OSPF区域间环路<br><img src="http://support.huawei.com/enterprise/product/images/784f45b916ce446fb56ce65526d53920" alt="img" loading="lazy"></p>
<h5 id="OSPF缺省路由"><a href="#OSPF缺省路由" class="headerlink" title="OSPF缺省路由"></a>OSPF缺省路由</h5><p>缺省路由是指目的地址和掩码都是0的路由。当设备无精确匹配的路由时，就可以通过缺省路由进行报文转发。由于OSPF路由的分级管理，Type3缺省路由的优先级高于Type5或Type7路由。</p>
<p>OSPF缺省路由通常应用于下面两种情况：</p>
<ul>
<li>由区域边界路由器（ABR）发布Type3缺省Summary LSA，用来指导区域内设备进行区域之间报文的转发。</li>
<li>由自治系统边界路由器（ASBR）发布Type5外部缺省ASE LSA，或者Type7外部缺省NSSA LSA，用来指导自治系统（AS）内设备进行自治系统外报文的转发。</li>
</ul>
<p>OSPF缺省路由的发布原则如下：</p>
<ul>
<li>OSPF路由器只有具有对区域外的出口时，才能够发布缺省路由LSA。</li>
<li>如果OSPF路由器已经发布了缺省路由LSA，那么不再学习其它路由器发布的相同类型缺省路由。即路由计算时不再计算其它路由器发布的相同类型的缺省路由LSA，但数据库中存有对应LSA。</li>
<li>外部缺省路由的发布如果要依赖于其它路由，那么被依赖的路由不能是本OSPF路由域内的路由，即不是本进程OSPF学习到的路由。因为外部缺省路由的作用是用于指导报文的域外转发，而本OSPF路由域的路由的下一跳都指向了域内，不能满足指导报文域外转发的要求。</li>
</ul>
<p>不同区域缺省路由发布原则如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#table_04">表6-6</a>所示。</p>
<p><strong>表6-6</strong>  OSPF缺省路由发布原则</p>
<table>
<thead>
<tr>
<th>区域类型</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>普通区域</td>
<td>缺省情况下，普通OSPF区域内的OSPF路由器是不会产生缺省路由的，即使它有缺省路由。当网络中缺省路由通过其他路由进程产生时，路由器必须将缺省路由通告到整个OSPF自治系统中。实现方法是在ASBR上手动通过命令进行配置，产生缺省路由。配置完成后，路由器会产生一个缺省ASE LSA（Type5 LSA），并且通告到整个OSPF自治系统中。</td>
</tr>
<tr>
<td>Stub区域</td>
<td>Stub区域不允许自治系统外部的路由（Type5 LSA）在区域内传播。区域内的路由器必须通过ABR学到自治系统外部的路由。实现方法是ABR会自动产生一条缺省的Summary LSA（Type3 LSA）通告到整个Stub区域内。这样，到达自治系统的外部路由就可以通过ABR到达。</td>
</tr>
<tr>
<td>Totally Stub区域</td>
<td>Totally Stub区域既不允许自治系统外部的路由（Type5 LSA）在区域内传播，也不允许区域间路由（Type3 LSA）在区域内传播。区域内的路由器必须通过ABR学到自治系统外部和其他区域的路由。实现方法是配置Totally Stub区域后，ABR会自动产生一条缺省的Summary LSA（Type3 LSA）通告到整个Stub区域内。这样，到达自治系统外部的路由和其他区域间的路由都可以通过ABR到达。</td>
</tr>
<tr>
<td>NSSA区域</td>
<td>NSSA区域允许引入通过本区域的ASBR到达的少量外部路由，但不允许其他区域的外部路由ASE LSA（Type5 LSA）在区域内传播。即到达自治系统外部的路由只能通过本区域的ASBR到达。只配置了NSSA区域是不会自动产生缺省路由的。此时，有两种选择：如果希望到达自治系统外部的路由通过该区域的ASBR到达，而其它外部路由通过其它区域出去。此时，ABR会产生一条Type7 LSA的缺省路由，通告到整个NSSA区域内。这样，除了某少部分路由通过NSSA的ASBR到达，其它路由都可以通过NSSA的ABR到达其它区域的ASBR出去。如果希望所有的外部路由只通过本区域NSSA的ASBR到达。则必须在ASBR上手动通过命令进行配置，使ASBR产生一条缺省的NSSA LSA（Type7 LSA），通告到整个NSSA区域内。这样，所有的外部路由就只能通过本区域NSSA的ASBR到达。上面两种情况的区别是：在ABR上无论路由表中是否存在缺省路由0.0.0.0，都会产生Type7 LSA的缺省路由。在ASBR上只有当路由表中存在缺省路由0.0.0.0时，才会产生Type7 LSA的缺省路由。因为缺省路由只是在本NSSA区域内泛洪，并没有泛洪到整个OSPF域中，所以本NSSA区域内的路由器在找不到路由之后可以从该NSSA的ASBR出去，但不能实现其他OSPF域的路由从这个出口出去。Type7 LSA缺省路由不会在ABR上转换成Type5 LSA缺省路由泛洪到整个OSPF域。</td>
</tr>
<tr>
<td>Totally NSSA区域</td>
<td>Totally NSSA区域既不允许其他区域的外部路由ASE LSA（Type5 LSA）在区域内传播，也不允许区域间路由（Type3 LSA）在区域内传播。区域内的路由器必须通过ABR学到其他区域的路由。实现方法是配置Totally NSSA区域后，ABR会自动产生一条缺省的Type3 LSA通告到整个NSSA区域内。这样，其他区域的外部路由和区域间路由都可以通过ABR在区域内传播。</td>
</tr>
</tbody></table>
<h4 id="6-2-1-9-OSPF-LSA类型"><a href="#6-2-1-9-OSPF-LSA类型" class="headerlink" title="6.2.1.9  OSPF LSA类型"></a>6.2.1.9  OSPF LSA类型</h4><p>OSPF网络中划分了不同的区域，每个区域都维护自己独立的LSDB，同时路由器也被定义成不同的类型。封装了路由描述信息的LSA根据路由器的类型也可以分门别类。</p>
<p><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112301">图6-23</a>是一个被划分区域的OSPF网络。R4上配置了静态路由，在R4上将静态路由引入到OSPF进程中。</p>
<p><strong>图6-23</strong>  划分区域的OSPF网络<br><img src="http://support.huawei.com/enterprise/product/images/df9cd1e3eebd4cf3bab313edfe215e0a" alt="img" loading="lazy"></p>
<p>R1、R2、R3、R4的Router ID及各接口的IP地址如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_feature_ospf_1123_mMcCpPsS_table_01">表6-7</a>所示。</p>
<p><strong>表6-7</strong>  数据规划</p>
<table>
<thead>
<tr>
<th>设备</th>
<th>Router ID</th>
<th>接口IP地址</th>
</tr>
</thead>
<tbody><tr>
<td>R1</td>
<td>10.1.1.1/32</td>
<td>GE0/0/1：192.168.12.1/24</td>
</tr>
<tr>
<td>R2</td>
<td>10.2.2.2/32</td>
<td>GE0/0/2：192.168.12.2/24GE0/0/1：192.168.23.1/24</td>
</tr>
<tr>
<td>R3</td>
<td>10.3.3.3/32</td>
<td>GE0/0/2：192.168.23.2/24GE0/0/1：192.168.34.1/24</td>
</tr>
<tr>
<td>R4</td>
<td>10.4.4.4/32</td>
<td>GE0/0/2：192.168.34.2/24</td>
</tr>
</tbody></table>
<p>下面结合<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112301">图6-23</a>所示的网络介绍各类LSA。</p>
<h5 id="Router-LSA"><a href="#Router-LSA" class="headerlink" title="Router-LSA"></a>Router-LSA</h5><p>Router-LSA是一种最基本的LSA，即Type1 LSA。</p>
<p>OSPF网络里的每一台路由设备都会发布Type1 LSA。这种类型的LSA用于描述设备的链路状态和开销，在路由器所属的区域内传播。以R2为例，如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112302">图6-24</a>所示，R2在Area 0、Area 1会分别发布Router-LSA。</p>
<p><strong>图6-24</strong>  Type1 Router-LSA<br><img src="http://support.huawei.com/enterprise/product/images/28e5b3f3f7cf42f08a7251f502003464" alt="img" loading="lazy"></p>
<p>以R2在接口GE0/0/1上泛洪的一条Router-LSA为例，该LSA中包含的信息如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112303">图6-25</a>所示。</p>
<p><strong>图6-25</strong>  Router-LSA信息<br><img src="http://support.huawei.com/enterprise/product/images/1d061332638f42679570e7bc3760cf21" alt="img" loading="lazy"></p>
<p>LSA报文包括LSA头部和LSA信息字段。所有类型的LSA报文，其LSA头部包含的字段都是一样的，唯一不同的是Link State ID字段含义。在LSA头部中，主要关注以下三个字段：</p>
<ul>
<li>Link-State Advertisement Type：LSA类型。</li>
<li>Link State ID：链路状态ID。在Router-LSA中代表始发该LSA的设备的Router ID，这里即是R2自己的Router ID。</li>
<li>Advertising Router：通告路由器。</li>
</ul>
<p>Router-LSA的信息字段有三个，用于将自己连接的所有链路的状况以及开销告诉该LSA泛洪区域的其他路由器。</p>
<p><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112303">图6-25</a>所示的LSA描述的信息为：链路类型（Type）为一个传送网络（Transit），DR接口的IP地址（ID）为192.168.23.2，和网络相连的通告路由器接口的IP地址是192.138.23.1（Data），到达该网络的开销（Metric）是1。收到该LSA报文的路由器根据这些链路状态的描生成拓扑。</p>
<p>其中，Link Type有四种类型，并且ID和Data的值会根据Link Type而有不同：</p>
<ul>
<li>1-P2P（点对点）：此时ID表示邻居路由设备的Router ID，Data表示和网络相连的通告路由器接口的IP地址。</li>
<li>2-Transit（传送网络）：此时ID表示DR接口的IP地址，Data表示和网络相连的通告路由器接口的IP地址。</li>
<li>3-Stub（末梢网络）：此时ID表示IP网络或子网地址，Data表示网络的IP地址或子网掩码。</li>
<li>4-Virtual Link（虚链路）：此时ID表示邻居路由设备的Router ID，Data表示通告路由器接口的MIB-II ifIndex值。</li>
</ul>
<h5 id="Network-LSA"><a href="#Network-LSA" class="headerlink" title="Network-LSA"></a>Network-LSA</h5><p>Network-LSA，也就是Type2 LSA，由DR（Designated Router）产生，描述本网段的链路状态，在所属的区域内传播。如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112304">图6-26</a>所示，R3向R2发送一条Network-LSA，列出了所有与DR形成完全邻接关系的路由器的Router ID。</p>
<p><strong>图6-26</strong>  Type2 Network-LSA<br><img src="http://support.huawei.com/enterprise/product/images/59d41ae5dd93492dbfe55f6279495191" alt="img" loading="lazy"></p>
<p>该Network-LSA中包含的信息如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112305">图6-27</a>所示。</p>
<p><strong>图6-27</strong>  Network-LSA信息<br><img src="http://support.huawei.com/enterprise/product/images/99d4c40766404752b80be71a36bb3686" alt="img" loading="lazy"></p>
<p>在Network-LSA中，Link State ID字段的含义是DR接口上的IP地址。</p>
<p>通过Router-LSA和Network-LSA在区域内洪泛，区域内每个路由器可以完成LSDB同步，这就解决了区域内部的通信问题。</p>
<h5 id="Network-summary-LSA"><a href="#Network-summary-LSA" class="headerlink" title="Network-summary-LSA"></a>Network-summary-LSA</h5><p>Network-summary-LSA，也叫Type3 LSA，由ABR发布，用来描述区域间的路由信息。ABR将Network-summary-LSA发布到一个区域，通告该区域到其他区域的目的地址。实际上，ABR是将区域内部的Type1和Type2的信息收集起来并汇总之后扩散出去，这就是Summay的含义。如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112306">图6-28</a>所示，R2作为ABR，将Area 0和Area 1中的路由信息分别发布对方区域。</p>
<p><strong>图6-28</strong>  Type3 Network-summary-LSA<br><img src="http://support.huawei.com/enterprise/product/images/74d4be3a0b9d4391b9909c9fd35d5bac" alt="img" loading="lazy"></p>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112307">图6-29</a>所示，是R2在接口GE0/0/1上发布的一条Network-summary-LSA。</p>
<p><strong>图6-29</strong>  Network-summary-LSA信息<br><img src="http://support.huawei.com/enterprise/product/images/5f0c3d095de84160bce2f64f02f2efdd" alt="img" loading="lazy"></p>
<p>在Network-summary-LSA中，Link State ID字段代表该LSA所描述网络的网络地址。从LSA的信息中可以看出，该LSA由R2发布（10.2.2.2），可以到达192.168.12.0，掩码为255.255.255.0的网络，代价为1。R2将Area 1中的网络地址在Area 0中发布，从而让Area 0中的路由器知道去该网络的路径，实现区域间的通信。</p>
<p>如果—台ABR在与它本身相连的区域内有多条路由可以到达目的地，那么它将只会始发单一的一条网络汇总LSA到骨干区域，而且这条网络汇总LSA是上述多条路由中代价最低的。</p>
<p>Network-summary-LSA不会通告给Totally Stub和Totally NSSA区域。</p>
<h5 id="ASBR-Summary-LSA"><a href="#ASBR-Summary-LSA" class="headerlink" title="ASBR-Summary-LSA"></a>ASBR-Summary-LSA</h5><p>ASBR-summary-LSA，也叫Type4 LSA，由ABR发布，描述到ASBR的路由信息，并通告给除ASBR所在区域的其他相关区域。如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112308">图6-30</a>所示，R3作为ABR通告ASBR-summary-LSA到Area 0中。</p>
<p><strong>图6-30</strong>  Type4 ASBR-summary-LSA<br><img src="http://support.huawei.com/enterprise/product/images/246e618ffa424079b829d9f6ffc358d8" alt="img" loading="lazy"></p>
<p>ASBR-summary-LSA信息如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112309">图6-31</a>所示。其中，Link State ID表示该LSA所描述的ASBR的Router ID（10.4.4.4），即R4，发布该LSA的路由设备是R3（10.3.3.3），R3到达R4的代价是1。</p>
<p><strong>图6-31</strong>  ASBR-summary-LSA信息<br><img src="http://support.huawei.com/enterprise/product/images/389bb0861b87491399c42e865cd34c10" alt="img" loading="lazy"></p>
<h5 id="AS-external-LSA"><a href="#AS-external-LSA" class="headerlink" title="AS-external-LSA"></a>AS-external-LSA</h5><p>AS-external-LSA，也叫Type5 LSA，由ASBR产生，描述到AS外部的路由，通告到除Stub区域和NSSA区域以外所有的区域。如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112310">图6-32</a>所示，R4作为ASBR发布了一条OSPF AS到外部目的网络的路由信息。</p>
<p><strong>图6-32</strong>  Type5 AS-external-LSA<br><img src="http://support.huawei.com/enterprise/product/images/9f0165e80290478fad395c1940ed17dc" alt="img" loading="lazy"></p>
<p>AS-external-LSA中包含的信息如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112311">图6-33</a>所示。其中，Link State ID代表外部网络目的IP地址，转发地址是指到达该外部网络的数据包应该被转发到的地址。此处的转发地址为0.0.0.0表示数据包将被转发到始发ASBR上。</p>
<p><strong>图6-33</strong>  AS-external-LSA信息<br><img src="http://support.huawei.com/enterprise/product/images/53e023b149c247c3bfb752f15bf49922" alt="img" loading="lazy"></p>
<h5 id="NSSA-LSA"><a href="#NSSA-LSA" class="headerlink" title="NSSA LSA"></a>NSSA LSA</h5><p>除了上述几种LSA之外，还有一种比较特殊的LSA，NSSA LSA，也叫Type7 LSA。NSSA LSA由ASBR产生，描述到AS外部的路由，仅在NSSA区域内传播。NSSA区域的ABR收到NSSA LSA时，会有选择地将其转化为Type5 LSA，以便将外部路由信息通告到OSPF网络的其它区域。</p>
<p>如果<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112301">图6-23</a>中的Area 2为NSSA区域，R4的接口GE0/0/2会始发一条NSSA LSA，如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112312">图6-34</a>所示。</p>
<p><strong>图6-34</strong>  NSSA LSA<br><img src="http://support.huawei.com/enterprise/product/images/b4f3577fa46a48e68fc3d29b4c0907d7" alt="img" loading="lazy"></p>
<p>NSSA LSA所有的字段与AS-external-LSA字段均相同，但这两种LSA泛洪的区域不同。AS-external-LSA是在整个AS泛洪，而NSSA LSA仅在NSSA区域中泛洪。</p>
<p>NSSA区域允许引入外部路由，但描述外部路由信息的NSSA LSA只能在本区域泛洪。为了使外部路由能被引入到除NSSA区域以外的其他区域，NSSA LSA在ABR（R3）上会转换成AS-external-LSA，并且泛洪到骨干区直至整个自治系统中。</p>
<ul>
<li>P-bit（Propagate bit）用于告知转化路由器该条Type7 LSA是否需要转化。</li>
<li>缺省情况下，转化路由器是NSSA区域中Router ID最大的ABR。</li>
<li>只有P-bit置位并且FA（Forwarding Address）不为0的NSSA LSA才能转化为AS-external-LSA。FA用来表示发送的某个目的地址的报文将被转发到FA所指定的地址。</li>
<li>区域边界路由器产生的NSSA LSA不会置位P-bit。</li>
</ul>
<h5 id="Opaque-LSA"><a href="#Opaque-LSA" class="headerlink" title="Opaque LSA"></a>Opaque LSA</h5><p>Opaque LSA包括Type9 LSA，Type10 LSA和Type11 LSA，用于OSPF的扩展通用机制。</p>
<ul>
<li>Type9 LSA仅在接口所在网段范围内传播。用于支持GR的Grace LSA就是Type9 LSA的一种。</li>
<li>Type10 LSA在区域内传播。用于支持TE的LSA就是Type10 LSA的一种。</li>
<li>Type11 LSA在自治系统内传播，目前还没有实际应用的例子。</li>
</ul>
<h4 id="6-2-1-10-OSPF快速收敛"><a href="#6-2-1-10-OSPF快速收敛" class="headerlink" title="6.2.1.10  OSPF快速收敛"></a>6.2.1.10  OSPF快速收敛</h4><p>OSPF快速收敛是为了提高路由的收敛速度而做的扩展特性。包括：</p>
<ul>
<li><p>OSPF按优先级收敛</p>
<p>OSPF按优先级收敛是指在大量路由情况下，能够让某些特定的路由优先收敛的一种技术。通过对不同的路由配置不同的收敛优先级，达到重要的路由先收敛的目的，提高网络的可靠性。因此，用户可以把和关键业务相关的路由配置成相对较高的优先级，使这些路由更快的收敛，从而使关键的业务受到的影响减小。</p>
</li>
<li><p>PRC（Partial Route Calculation）部分路由计算</p>
<p>当网络上路由发生变化的时候，只对发生变化的路由进行重新计算。</p>
</li>
<li><p>通过智能定时器控制LSA的生成与接收，达到对低频变化快速响应，又能对高频变化起到有效抑制的目的。</p>
<p>RFC2328通过如下两个规定来避免网络连接或者路由频繁动荡引起的过多占用设备资源：</p>
<ul>
<li>同一条LSA在1秒内不能再次生成，即LSA的更新时间间隔5秒。</li>
<li>LSA被接收的时间间隔为1秒。</li>
</ul>
<p>在网络相对稳定、对路由收敛时间要求较高的组网环境中，可以通过智能定时器指定LSA的更新、被接收的时间间隔为0，使得拓扑或者路由的变化可以通过LSA发布到网络中，或者立即被感知到，从而加快路由的收敛。</p>
</li>
<li><p>通过智能定时器控制路由计算</p>
<p>当网络发生变化时，OSPF需要重新进行路由计算，为避免频繁的网络变化对设备造成的冲击，标准RFC2328规定路由计算时要使用延迟定时器，定时器超时后才进行路由计算。但标准协议中，该定时器定时间隔固定，无法做到既能快速响应又能抑制震荡。</p>
<p>通过智能定时器来控制路由计算的延迟时间，达到对低频率变化快速响应，又能对高频率变化起到有效抑制的目的。</p>
</li>
<li><p><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_feature_ospf_0007">6.2.2.6 OSPF Smart-discover</a></p>
</li>
</ul>
<h4 id="6-2-1-11-OSPF虚连接"><a href="#6-2-1-11-OSPF虚连接" class="headerlink" title="6.2.1.11  OSPF虚连接"></a>6.2.1.11  OSPF虚连接</h4><p>虚连接（Virtual link）是指在两台ABR之间通过一个非骨干区域建立的一条逻辑上的连接通道。</p>
<p>根据RFC 2328，在部署OSPF时，要求所有的非骨干区域与骨干区域相连，否则会出现有的区域不可达的问题。但是在实际应用中，可能会因为各方面条件的限制，无法满足所有非骨干区域与骨干区域保持连通的要求，此时可以通过配置OSPF虚连接来解决这个问题。</p>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112401">图6-35</a>所示，Area 2没有连接到骨干区Area 0，所以RouterA不能作为ABR向Area 2生成Area 0中Network1的路由信息，所以RouterB上没有到达Network1的路由。此时可以考虑部署虚连接来解决这个问题。</p>
<p><strong>图6-35</strong>  OSPF非骨干区没有连接骨干区<br><img src="http://support.huawei.com/enterprise/product/images/b8056316558143ac8d378739dfd3fcaf" alt="img" loading="lazy"></p>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112402">图6-36</a>所示，通过虚连接，两台ABR之间直接传递OSPF报文信息，两者之间的OSPF设备只是起到一个转发报文的作用。由于OSPF协议报文的目的地址不是这些设备，所以这些报文对于两者而言是透明的，只是当作普通的IP报文来转发。</p>
<p><strong>图6-36</strong>  OSPF虚连接实现原理<br><img src="http://support.huawei.com/enterprise/product/images/bbff4c7b79b5472ab3ac45ac1a8afa35" alt="img" loading="lazy"></p>
<p>虚连接相当于在两个ABR之间形成了一个点到点的连接，因此，虚连接的两端和物理接口一样可以配置接口的各参数，如发送Hello报文间隔等。为虚连接两端提供一条非骨干区域内部路由的区域称为传输区域（Transit Area）。配置虚连接时，必须在两端同时配置方可生效。</p>
<p>然而，虚连接的存在增加了网络的复杂程度，而且使故障的排除更加困难。因此，在网络规划中应该尽量避免使用虚连接。虚连接仅是作为修复无法避免的网络拓扑问题的一种临时手段。虚链路可以看作是一个标明网络的某个部分是否需要重新规划设计的标志。</p>
<h4 id="6-2-1-12-OSPF路由聚合和路由过滤"><a href="#6-2-1-12-OSPF路由聚合和路由过滤" class="headerlink" title="6.2.1.12  OSPF路由聚合和路由过滤"></a>6.2.1.12  OSPF路由聚合和路由过滤</h4><h5 id="OSPF路由聚合"><a href="#OSPF路由聚合" class="headerlink" title="OSPF路由聚合"></a>OSPF路由聚合</h5><p>路由聚合是指ABR可以将具有相同前缀的路由信息聚合到一起，只发布一条路由到其它区域。</p>
<p>区域间通过路由聚合，可以减少路由信息，从而减小路由表的规模，提高设备的性能。</p>
<p>OSPF有两种路由聚合方式：</p>
<ul>
<li><p>ABR聚合</p>
<p>ABR向其它区域发送路由信息时，以网段为单位生成Type3 LSA。如果该区域中存在一些连续的网段，则可以通过命令将这些连续的网段聚合成一个网段。这样ABR只发送一条聚合后的LSA，所有属于命令指定的聚合网段范围的LSA将不会再被单独发送出去。</p>
</li>
<li><p>ASBR聚合</p>
<p>配置路由聚合后，如果本地设备是自治系统边界路由器ASBR，将对引入的聚合地址范围内的Type5 LSA进行聚合。当配置了NSSA区域时，还要对引入的聚合地址范围内的Type7 LSA进行聚合。</p>
<p>如果本地设备既是ASBR又是ABR，则对由Type7 LSA转化成的Type5 LSA进行聚合处理。</p>
</li>
</ul>
<h5 id="OSPF路由过滤"><a href="#OSPF路由过滤" class="headerlink" title="OSPF路由过滤"></a>OSPF路由过滤</h5><p>OSPF支持使用路由策略对路由信息进行过滤。缺省情况下，OSPF不进行路由过滤。</p>
<p>OSPF可以使用的路由策略包括route-policy、访问控制列表（access-list）和地址前缀列表（prefix-list）。</p>
<p>OSPF路由过滤可以应用于以下几个方面：</p>
<ul>
<li><p>路由引入</p>
<p>OSPF可以引入其它路由协议学习到的路由。在引入时可以通过配置路由策略来过滤路由，只引入满足条件的路由。</p>
</li>
<li><p>引入路由发布</p>
<p>OSPF引入了路由后会向其它邻居发布引入的路由信息。</p>
<p>可以通过配置过滤规则来过滤向邻居发布的路由信息。该过滤规则只在ASBR上配置才有效。</p>
</li>
<li><p>路由学习</p>
<p>通过配置过滤规则，可以设置OSPF对接收到的区域内、区域间和自治系统外部的路由进行过滤。</p>
<p>该过滤只作用于路由表项的添加与否，即只有通过过滤的路由才被添加到本地路由表中，但所有的路由仍可以在OSPF路由表中被发布出去。</p>
</li>
<li><p>区域间LSA学习</p>
<p>通过命令可以在ABR上配置对进入本区域的Summary LSA进行过滤。该配置只在ABR上有效（只有ABR才能发布Summary LSA）。</p>
<p>区域间LSA学习和路由学习之间的差异在于：区域间LSA学习直接对进入区域的LSA进行过滤；路由学习不是对LSA进行过滤而是对LSA计算出来的路由是否添加本地路由表进行过滤，学习到的LSA是完整的。</p>
</li>
<li><p>区域间LSA发布</p>
<p>通过命令可以在ABR上配置对本区域出方向的Summary LSA进行过滤。该配置只在ABR上配置有效。</p>
</li>
</ul>
<h4 id="6-2-1-13-OSPF多进程"><a href="#6-2-1-13-OSPF多进程" class="headerlink" title="6.2.1.13  OSPF多进程"></a>6.2.1.13  OSPF多进程</h4><p>OSPF支持多进程，在同一台路由器上可以运行多个不同的OSPF进程，它们之间互不影响，彼此独立。不同OSPF进程之间的路由交互相当于不同路由协议之间的路由交互。</p>
<p>路由器的一个接口只能属于某一个OSPF进程。</p>
<p>OSPF多进程的一个典型应用就是在VPN场景中PE和CE之间运行OSPF协议，同时VPN骨干网上的IGP也采用OSPF。在PE上，这两个OSPF进程互不影响。</p>
<h4 id="6-2-1-14-OSPF-RFC1583兼容"><a href="#6-2-1-14-OSPF-RFC1583兼容" class="headerlink" title="6.2.1.14  OSPF RFC1583兼容"></a>6.2.1.14  OSPF RFC1583兼容</h4><p>RFC1583是OSPFv2协议比较早的版本。</p>
<p>OSPF在计算外部路由时，由于RFC2328和RFC1583的路由计算规则不一致，可能会导致路由环路。为了避免路由环路的发生，RFC2328中提出了RFC1583兼容特性。</p>
<ul>
<li>使能RFC1583兼容后，OSPF采用RFC1583的路由计算规则。</li>
<li>不使能RFC1583兼容时，OSPF采用RFC2328的路由计算规则。</li>
</ul>
<p>OSPF是根据5类LSA来计算外部路由的。RFC1583兼容特性主要用于路由器收到5类LSA后：</p>
<ul>
<li>选择到达产生该LSA的ASBR或该LSA所描述的转发地址（Forwarding Address）的路径；</li>
<li>选择到达相同目的地的外部路径。</li>
</ul>
<p>缺省情况下，OSPF兼容RFC1583。</p>
<h3 id="6-2-2-OSPF增强功能"><a href="#6-2-2-OSPF增强功能" class="headerlink" title="6.2.2  OSPF增强功能"></a>6.2.2  OSPF增强功能</h3><h4 id="6-2-2-1-OSPF-VPN"><a href="#6-2-2-1-OSPF-VPN" class="headerlink" title="6.2.2.1  OSPF VPN"></a>6.2.2.1  OSPF VPN</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>OSPF VPN多实例特性是为了支持在VPN场景中PE（Provider Edge）和CE（Customer Edge）之间能够运行OSPF协议、使用OSPF进行路由的学习和发布而在OSPF基础协议上进行的扩展。</p>
<h5 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h5><p>OSPF是一种应用广泛的IGP协议，很多情况下，VPN用户内部网络运行OSPF。如果能够在PE-CE之间使用OSPF，PE通过OSPF向CE发布VPN路由，则在CE上就不需要配置PE-CE之间的其它路由协议，从而简化CE的管理和配置。</p>
<h5 id="PE-CE间运行OSPF"><a href="#PE-CE间运行OSPF" class="headerlink" title="PE-CE间运行OSPF"></a>PE-CE间运行OSPF</h5><p>BGP/MPLS VPN中，PE之间使用MP-BGP传递路由信息，而PE-CE间则广泛使用OSPF进行路由学习和传递。</p>
<p>PE-CE间使用OSPF有如下优势：</p>
<ul>
<li>通常在一个Site内部使用OSPF学习路由。如果PE-CE间也使用OSPF则可以减少CE设备所支持的协议种类，降低对CE设备的要求。</li>
<li>同样，Site内部和PE-CE间都使用OSPF可以降低网络管理人员的工作复杂度，不必要求管理人员对多种协议熟练掌握。</li>
<li>PE-CE间使用OSPF可以方便从一个非VPN的骨干网转化为一个BGP/MPLS VPN网络。</li>
</ul>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_000801">图6-37</a>所示，CE1、CE3和CE4都属于VPN1，图中OSPF之后的数字表示PE设备上运行的OSPF多实例进程号。</p>
<p><strong>图6-37</strong>  PE-CE间运行OSPF<br><img src="http://support.huawei.com/enterprise/product/images/f6c057db138649938b3eccabf52f50e1" alt="img" loading="lazy"></p>
<p>CE1上的路由发布给CE3和CE4过程可以描述为：</p>
<ol>
<li>PE1将CE1上的OSPF路由引入到BGP中，形成BGP VPNv4路由。</li>
<li>PE1通过MP-BGP将这些BGP VPNv4路由发布给PE2。</li>
<li>PE2将BGP VPNv4路由引入到OSPF，再发布给CE3和CE4。</li>
</ol>
<p>同理，CE4和CE3上的路由发布给CE1的过程类似。</p>
<h5 id="PE-CE间OSPF区域配置"><a href="#PE-CE间OSPF区域配置" class="headerlink" title="PE-CE间OSPF区域配置"></a>PE-CE间OSPF区域配置</h5><p>PE与CE之间的OSPF区域可以是非骨干区域，也可以是骨干区域（区域0），并且PE永远是ABR（Area Border Router）。</p>
<p>在OSPF VPN扩展应用中，MPLS VPN骨干网被看作是Area0。由于OSPF要求Area 0连续，因此，所有VPN Site的Area0必须与MPLS VPN骨干网相连。如果VPN Site中存在OSPF Area0，则CE接入的PE必须通过Area0与这个VPN Site的骨干区域相连（可以通过Virtual-link实现逻辑连通），如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_000802">图6-38</a>所示。</p>
<p><strong>图6-38</strong>  PE-CE间OSPF区域配置<br><img src="http://support.huawei.com/enterprise/product/images/18e63c141f204672ac34b1ddbab2387b" alt="img" loading="lazy"></p>
<p>PE-CE间配置为非骨干区域1，而Site1内配置了骨干区域0，此时Site1的骨干区域就与VPN骨干区域分离了，所以在CE1与PE1间配置虚连接（Virtual link）来保持骨干区域连续。</p>
<h5 id="OSPF-Domain-ID"><a href="#OSPF-Domain-ID" class="headerlink" title="OSPF Domain ID"></a>OSPF Domain ID</h5><p>本地OSPF区域和VPN远端的OSPF区域间如果相互发布区域间路由（Inter-area routes），则认为这些区域属于同一个OSPF域（OSPF Domain）。</p>
<ul>
<li>域标识符（Domain ID）用来标识和区分不同的域。</li>
<li>每一个OSPF域都有一个或多个域标识符，其中有一个是主标识符，其它为从标识符。</li>
<li>如果OSPF实例没有明确域标识符，则认为它的标识符为NULL。</li>
</ul>
<p>PE把从远端PE学来的BGP路由向CE发布时，需要根据域标识符的情况选择向CE发布Type3、Type5或Type7的OSPF路由。</p>
<ul>
<li>如果本地的域标识符与BGP路由信息中携带的远端域标识符相等或相互兼容，则发布3类路由；</li>
<li>否则，发布Type5或Type7路由。</li>
</ul>
<p><strong>表6-8</strong>  Domain ID</p>
<table>
<thead>
<tr>
<th>本地和远端域标识符</th>
<th>本地和远端域标识符是否相等</th>
<th>发布的路由类型</th>
</tr>
</thead>
<tbody><tr>
<td>本地和远端域标识符都为NULL</td>
<td>相等</td>
<td>Inter-area路由。</td>
</tr>
<tr>
<td>远端域标识符=本地主域标识符，或者远端域标识符=本地从域标识符中的一个</td>
<td>相等</td>
<td>Inter-area路由。</td>
</tr>
<tr>
<td>远端标识符≠本地主从标识符，并且远端标识符≠本地从域标识符中的任何一个</td>
<td>不相等</td>
<td>如果本地是非NSSA（Not So Stubby Area）区域，生成External路由。如果是NSSA区域，生成NSSA路由。</td>
</tr>
</tbody></table>
<h5 id="路由环路预防"><a href="#路由环路预防" class="headerlink" title="路由环路预防"></a>路由环路预防</h5><p>PE和CE之间，如果OSPF与BGP的路由相互学习，则有可能导致路由环路问题。</p>
<p><strong>图6-39</strong>  OSPF VPN路由环路<br><img src="http://support.huawei.com/enterprise/product/images/227a2a099c884a5a8ae5810fdb2601ab" alt="img" loading="lazy"></p>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_000805">图6-39</a>所示，PE1上OSPF引入了目的地址为10.1.1.1/32的BGP路由，产生5类或7类LSA发布给CE1，CE1上学到一条目的地址为10.1.1.1/32，下一跳为PE1的OSPF路由，并发布给PE2，这样PE2上就学到一条目的地址为10.1.1.1/32，下一跳为CE1的OSPF路由。</p>
<p>同理，CE1上也会学到一条目的地址为10.1.1.1/32，下一跳为PE2的OSPF路由，PE1上学到一条目的地址为10.1.1.1/32，下一跳为CE1的OSPF路由。</p>
<p>此时，CE1上存在两条等价路由，分别指向PE1和PE2，而PE1和PE2上到10.1.1.1/32的下一跳也都指向CE1，环路就产生了。</p>
<p>同时，由于OSPF路由的优先级高于BGP路由，PE1和PE2上到10.1.1.1/32的BGP路由被OSPF路由所替代，也就是说，PE1和PE2的路由表中活跃的是到10.1.1.1/32，下一跳为CE1的OSPF路由。</p>
<p>既然BGP路由转为不活跃状态，之前OSPF引入这条BGP路由时所产生的LSA就会被删除，而这样又会导致OSPF路由被撤消。路由表中没有了OSPF路由，BGP路由又变为活跃状态，继续重复之前的循环，导致路由振荡。</p>
<p>OSPF VPN特性专门针对这种情况提供了解决方案，如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#tab_dc_feature_ospf_000802">表6-9</a>所列。</p>
<p><strong>表6-9</strong>  路由环路预防</p>
<table>
<thead>
<tr>
<th>特性名</th>
<th>定义</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>DN-bit</td>
<td>为了防止路由环路，OSPF多实例进程使用一个bit位作为标志位，称为DN位。</td>
<td>PE在生成Type3、Type5或Type7 LSA发布给CE时，都将DN位置位（值为1），其他类型LSA的DN位不置位（值为0）。PE的OSPF多实例进程在进行计算时，忽略DN置位的LSA。这样就防止了PE又从CE学到发出的LSA而引起的环路。</td>
</tr>
<tr>
<td>VPN Route Tag</td>
<td>VPN路由标记（VPN Route Tag），PE根据收到的BGP的私网路由产生的5/7类LSA中必须包含这个参数。VPN路由标记不在BGP的扩展团体属性中传递，只是本地概念，只在收到BGP路由并且产生OSPF LSA的PE上有意义。</td>
<td>当PE发现LSA的VPN路由标记（LSA的Tag值）和自己的一样，就会忽略这条LSA，因此避免了环路。</td>
</tr>
<tr>
<td>缺省路由</td>
<td>目的地址和掩码全为0的路由。</td>
<td>缺省路由用于转发源自CE和CE所在Site的流量。</td>
</tr>
</tbody></table>
<h5 id="解除路由环路预防"><a href="#解除路由环路预防" class="headerlink" title="解除路由环路预防"></a>解除路由环路预防</h5><p><img src="http://support.huawei.com/enterprise/product/images/5bf7fc7c2b06498782a61a01fdd10e10" alt="img" loading="lazy"> 注意：</p>
<p>解除路由环路预防可能导致路由环路，进行该操作时应谨慎。</p>
<p>在BGP/OSPF路由进行交互的过程中，路由环路预防功能能够防止OSPF路由在VPN站点内的路由环路。</p>
<p>但在跨域VPN-OptionA方式场景下，当ASBR之间运行OSPF协议来发送VPN路由信息时，由于系统路由环路预防机制，将导致对端ASBR不能学习到本端ASBR发送的OSPF路由。</p>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_000803">图6-40</a>所示，采用OptionA方式实现跨域VPN。以CE1发送VPN路由到CE2为例说明（PE1与CE1之间运行OSPF协议为例）:</p>
<p><strong>图6-40</strong>  跨域VPN-OptionA组网图<br><img src="http://support.huawei.com/enterprise/product/images/e465d3869b7a48b59059d7236a1b5917" alt="img" loading="lazy"></p>
<ol>
<li>PE1通过私网OSPF进程学习到了去往CE1站点的路由，并将这些路由引入到MP-BGP中，发送给ASBR1。</li>
<li>ASBR1收到MP-BGP路由后，会将这些路由引入到私网OSPF进程中，在生成Type3、Type5或Type7 LSA时，会将DN位置为1。</li>
<li>ASBR2通过OSPF协议学习到这些LSA时，会对LSA中的DN位进行检查。发现这些LSA的DN位为1，将忽略这些路由。</li>
</ol>
<p>综上，由于系统的路由环路预防机制，导致ASBR2上学习不到对端ASBR1发来的OSPF路由，导致了CE1与CE3之间不能互通。</p>
<p>为解决上面的问题，有以下的解决方法：</p>
<ul>
<li>不对DN位置位：在将BGP路由引入到OSPF过程中，不对LSA的DN位置位。例如ASBR1在将MP-BGP路由引入到OSPF中时，不对DN位置位，ASBR2收到这些路由时，检查DN位为0，可以参加选路。</li>
<li>不对DN位检查：在收到LSA后，不检查DN位。例如ASBR1在将MP-BGP路由引入到OSPF中时，对DN位置位，ASBR2收到这些路由时，不进行DN位检查。</li>
</ul>
<p>为增加上述方式使用的灵活性，可以只针对特定Type类型的LSA应用。对于Type3 LSA，还可以根据生成LSA设备的OSPF的router-id决定是否进行DN位置位或者检查。</p>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_000804">图6-41</a>所示，跨域VPN-OptionA方式，下ASBR之间为全连接，且都运行OSPF协议。对于ASBR2而言，可能会收到ASBR4上产生的Type3、Type5或Type7 LSA，如果在ASBR2上设置不对DN位检查，Type3 LSA会被接收，按照<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_000804">图6-41</a>中的描述，会引起路由的环路。而对于Type5或Type7 LSA，因为LSA中携带的Route Tag与ASBR2上OSPF进程默认的VPN Route Tag一致，ASBR2上会忽略这些LSA。</p>
<p>针对Type 3类型的LSA容易引起路由环路的问题，可以在ASBR2上设置只针对OSPF Router ID为10.1.1.1和10.3.3.3的Type 3类型的LSA不进行DN位检查。设置后，当ASBR2再收到ASBR4产生的Type3 LSA时，因为该LSA的OSPF Router ID为10.4.4.4，ASBR2会进行DN位的检查，发现DN位已置位，从而忽略这些LSA。</p>
<p><strong>图6-41</strong>  跨域VPN-OptionA ASBR全连接组网图<br><img src="http://support.huawei.com/enterprise/product/images/d08ba32e6dd440c1a29985222cf8cdbb" alt="img" loading="lazy"></p>
<h5 id="Multi-VPN-Instance-CE"><a href="#Multi-VPN-Instance-CE" class="headerlink" title="Multi-VPN-Instance CE"></a>Multi-VPN-Instance CE</h5><p>OSPF多实例通常运行在PE上，在用户局域网内部运行OSPF多实例的设备称为Multi-VPN-Instance CE（MCE），即多实例CE。</p>
<p>与PE上的OSPF多实例相比：</p>
<ul>
<li>Multi-VPN-Instance CE不需要支持BGP/OSPF互相引入功能。</li>
<li>Multi-VPN-Instance CE通过为不同的业务建立各自的OSPF实例，相当于不同的业务使用不同的虚拟CE，从而以较低的成本解决局域网的安全问题。</li>
<li>Multi-VPN-Instance CE在同一台CE上实现不同的OSPF多实例。其实现的关键在于禁止路由环路的检查，直接进行路由计算。也就是说，MCE收到了带有DN-bit的LSA也会用于路由计算。</li>
</ul>
<h4 id="6-2-2-2-OSPF-TE"><a href="#6-2-2-2-OSPF-TE" class="headerlink" title="6.2.2.2  OSPF TE"></a>6.2.2.2  OSPF TE</h4><p>OSPF TE（OSPF Traffic Engineering，即OSPF流量工程）是为了支持MPLS流量工程（MPLS TE），支持建立和维护TE的标签交换路径LSP（Label Switch Path）而在OSPF协议基础上扩展的新特性。在MPLS TE架构中OSPF扮演了信息发布组件的角色，负责收集扩散MPLS流量工程信息。</p>
<p>除了网络的拓扑信息外，流量工程还需要知道网络的约束信息（包括带宽、TE度量值、管理组和亲和属性等）。但OSPF现有的功能不足以满足这些要求。因此需要对现有的OSPF进行扩展，通过引入新类型的LSA来发布这些信息，CSPF（Constrained Shortest Path First）算法利用这些信息就可以计算出满足各种约束条件的路径。</p>
<p><strong>图6-42</strong>  OSPF在MPLS-TE体系中的作用<br><img src="http://support.huawei.com/enterprise/product/images/a9ecd4b1af4b43f7ad078a5d3d58184a" alt="img" loading="lazy"></p>
<h5 id="OSPF在MPLS-TE中的作用"><a href="#OSPF在MPLS-TE中的作用" class="headerlink" title="OSPF在MPLS-TE中的作用"></a>OSPF在MPLS-TE中的作用</h5><p>在MPLS-TE体系结构中OSPF起到了信息发布组件的作用：</p>
<ul>
<li>收集TE相关信息。</li>
<li>在同一个区域中的各设备间扩散TE信息。</li>
<li>把同步收集到的TE信息组成流量工程数据库TEDB（TE DataBase）提供给CSPF计算。</li>
</ul>
<p>除此之外，OSPF并不关心信息具体是什么以及MPLS如何使用这些信息。</p>
<h5 id="TE-LSA"><a href="#TE-LSA" class="headerlink" title="TE-LSA"></a>TE-LSA</h5><p>OSPF通过新增Type10 Opaque LSA来实现收集和发布流量工程信息的目的。这种LSA中包含了流量工程所需要的链路状态信息，包括最大链路带宽、最大可预留带宽、当前预留带宽、链路颜色等信息。Type10 Opaque LSA利用OSPF泛洪机制在一个区域内的设备间同步这些信息，最终形成统一的TEDB，为路径计算做好准备。</p>
<h5 id="OSPF-TE与CSPF交互"><a href="#OSPF-TE与CSPF交互" class="headerlink" title="OSPF TE与CSPF交互"></a>OSPF TE与CSPF交互</h5><p>OSPF通过Type10-LSA收集区域内的TE信息，包括带宽、优先级、链路开销（Metric）等，经过处理后，把这些信息提供给CSPF进行路径计算。</p>
<h5 id="IGP-Shortcut和转发邻接"><a href="#IGP-Shortcut和转发邻接" class="headerlink" title="IGP Shortcut和转发邻接"></a>IGP Shortcut和转发邻接</h5><p>OSPF支持IGP Shortcut和转发邻接（Forwarding Adjacency）特性，这两个特性允许OSPF使用隧道接口（Tunnel接口）作为到达某个目的地址的出接口。</p>
<p>IGP Shortcut和转发邻接的区别在于：</p>
<ul>
<li>使能IGP Shortcut特性的设备使用隧道接口作为出接口，但不将这个隧道接口链路发布给邻居，因此，其他设备不能使用此隧道。</li>
<li>使能转发邻接特性的设备在使用隧道接口作为出接口的同时，也将这个隧道接口发布给邻居，因此，其他设备能够使用此隧道。</li>
<li>IGP Shortcut是单向的，只需要在使用该特性的设备上配置即可。</li>
</ul>
<h5 id="OSPF-DS-TE"><a href="#OSPF-DS-TE" class="headerlink" title="OSPF DS-TE"></a>OSPF DS-TE</h5><p>DS-TE（DiffSer Aware Traffic Engineering）综合了MPLS TE和差分服务模型Diff-Ser（Differentiated Services）的优点，在精确控制流量流经的路径的基础上，可以根据业务的不同服务等级，有差别地进行流量的控制和转发，从而支持在有效利用网络资源的同时，为不同的业务流预留所需的资源。</p>
<p>为了支持MPLS中DS-TE的应用，OSPF支持在TE-LSA中携带子TLV（Local Overbooking Multiplier Type-Length-Value）和带宽约束BC（Bandwidth Constraint）TLV，用于发布和收集链路上各优先级的每个CT（Class Type，一条或一组LSP的相同服务等级的带宽集合）的可预留带宽。</p>
<h5 id="OSPF-SRLG"><a href="#OSPF-SRLG" class="headerlink" title="OSPF SRLG"></a>OSPF SRLG</h5><p>OSPF通过获取在同一个区域的各设备间扩散TE的共享风险链路组（Shared Risk Link Group，SRLG）信息来支持MPLS中SRLG的应用。</p>
<h4 id="6-2-2-3-OSPF安全"><a href="#6-2-2-3-OSPF安全" class="headerlink" title="6.2.2.3  OSPF安全"></a>6.2.2.3  OSPF安全</h4><h5 id="OSPF-GTSM"><a href="#OSPF-GTSM" class="headerlink" title="OSPF GTSM"></a>OSPF GTSM</h5><p>GTSM（Generalized TTL Security Mechanism），即通用TTL安全保护机制，通过检查IP报文头中的TTL值是否在一个预先定义好的范围内来对IP层以上业务进行保护，从而达到防止攻击的目的。如果攻击者模拟真实的OSPF协议单播报文，对一台交换机不断地发送报文，交换机收到这些报文后，发现是本机报文，则直接上送控制层面的OSPF协议处理，而不加辨别其“合法性”，这样导致交换机控制层面因为处理这些“合法”报文，系统异常繁忙，CPU占用率高。</p>
<p>在实际应用中，GTSM特性主要用于保护建立在TCP/IP基础上的控制层面（路由协议等）免受CPU利用（CPU-utilization）类型的攻击，如CPU过载（CPU overload）。</p>
<p>使能了GTSM特性和策略的设备会对收到的所有报文进行策略检查。对于没有通过策略的报文丢弃或者上送控制平面，从而达到防止攻击的目的。策略内容包括：</p>
<ul>
<li>发送给本机IP报文的源地址。</li>
<li>报文所属的VPN实例。</li>
<li>IP报文的协议号（OSPF是89，BGP是6）。</li>
<li>TCP/UDP之上协议的协议源端口号、目的端口号。</li>
<li>有效TTL范围。</li>
</ul>
<p>GTSM的实现手段如下：</p>
<ul>
<li>对于直连的协议邻居：将需要发出的单播协议报文的TTL值设定为255。</li>
<li>对于多跳的邻居：可以定义一个合理的TTL范围。</li>
</ul>
<p>GTSM的应用范围是：</p>
<ul>
<li>GTSM对单播报文有效，对组播报文无效。这是因为组播报文本身具有TTL值为255的限制，不需要使用GTSM进行保护。</li>
<li>GTSM不支持基于Tunnel的邻居。</li>
</ul>
<h5 id="OSPF报文认证"><a href="#OSPF报文认证" class="headerlink" title="OSPF报文认证"></a>OSPF报文认证</h5><p>OSPF支持报文验证功能，只有通过验证的OSPF报文才能接收，否则将不能正常建立邻居。</p>
<p>路由器支持两种验证方式：</p>
<ul>
<li>区域验证方式</li>
<li>接口验证方式</li>
</ul>
<p>当两种验证方式都存在时，优先使用接口验证方式。</p>
<h4 id="6-2-2-4-OSPF-GR"><a href="#6-2-2-4-OSPF-GR" class="headerlink" title="6.2.2.4  OSPF GR"></a>6.2.2.4  OSPF GR</h4><p>随着路由设备普遍采用了控制和转发分离的技术，在网络拓扑保持稳定的情况下，控制层面的重启并不会影响转发层面，转发层面仍然可以很好地完成数据转发任务，从而保证业务不受影响。</p>
<p>GR技术保证了在重启过程中转发层面能够继续指导数据的转发，同时控制层面邻居关系的重建以及路由计算等动作不会影响转发层面的功能，从而避免了路由震荡引发的业务中断，提高了整网的可靠性。</p>
<h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><p>GR是Graceful Restart的简称，又被称为平滑重启，是一种用于保证当路由协议重启时数据正常转发并且不影响关键业务的技术。</p>
<p>如果没有特殊说明，以下所说GR均表示RFC3623所规定的GR技术。</p>
<p>GR技术是属于高可靠性（HA，High Availability）技术的一种。HA是一整套综合技术，主要包括冗余容错、链路保证、节点故障修复及流量工程。GR是一种冗余容错技术，目前已经被广泛的使用在主备切换和系统升级方面，以保证关键业务的不间断转发。</p>
<p>和GR相关的概念如下：</p>
<ul>
<li><p>Grace-LSA</p>
<p>OSPF通过新增Grace-LSA来支持GR功能。这种LSA用于在开始GR和退出GR时向邻居通告GR的时间、原因以及接口地址等内容。</p>
</li>
<li><p>交换机在GR中的角色</p>
<ul>
<li>Restarter：重启交换机。可以通过配置支持完全GR或者部分GR。</li>
<li>Helper：协助重启交换机。可以通过配置支持有计划GR、无计划GR或者通过策略有选择支持GR。</li>
</ul>
</li>
<li><p>GR的原因</p>
<ul>
<li>Unknown：未知原因导致的GR操作。</li>
<li>Software restart：通过命令行主动触发的GR操作。</li>
<li>Software reload/upgrade：软件重启或升级导致的GR操作。</li>
<li>Switch to redundant control processor：异常主备倒换导致的GR操作。</li>
</ul>
</li>
<li><p>GR的持续时间</p>
<p>GR持续时间最长不超过1800秒。GR成功或失败都可以提前退出，不必等到超时才退出。</p>
</li>
</ul>
<h5 id="GR的分类"><a href="#GR的分类" class="headerlink" title="GR的分类"></a>GR的分类</h5><ul>
<li>完全GR（Totally GR）：指当有一个邻居不支持GR功能时，整个交换机退出GR状态。</li>
<li>部分GR（Partly GR）：指当有一个邻居不支持GR时，仅该邻居所关联的接口退出GR，其它接口正常进行GR过程。</li>
<li>有计划GR（Planned GR）：指手动通过命令使交换机执行重启或主备倒换。在进行重启或主备倒换前Restarter会先发送Grace-LSA。</li>
<li>非计划GR（UnPlanned GR）：与Planned GR的区别在于，交换机是由于故障等原因进行重启或主备倒换，并且在主备倒换前不会事先发送Grace-LSA，而是直接开始主备倒换，在备板正常Up后才进入GR过程。以下的步骤同Planned GR。</li>
</ul>
<h5 id="GR的过程"><a href="#GR的过程" class="headerlink" title="GR的过程"></a>GR的过程</h5><p>OSPF GR分为开始、进行中和退出三个过程，如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_001701">图6-43</a>所示。</p>
<p><strong>图6-43</strong>  OSPF GR过程<br><img src="http://support.huawei.com/enterprise/product/images/f54579d8161e40febf1619520cf29708" alt="img" loading="lazy"></p>
<ol>
<li><p>OSPF GR开始</p>
<ol>
<li>交换机执行主备倒换后，Restarter首先向每个邻居发送一个Grace-LSA，通知邻居GR的开始以及GR的周期、原因等。</li>
</ol>
</li>
</ol>
<pre><code>   说明：

  如果是Planned-GR，Restarter会向每个邻居发送Grace-LSA，而如果是Unplanned-GR，Restarter则不发送Grace-LSA。</code></pre>
<ol start="2">
<li><p>Restarter进入GR状态前会发送一个Grace-LSA，以维持OSPF邻居关系。</p>
</li>
<li><p>当备板状态为Up后，交换机立即发送一个Grace-LSA，通知邻居自己进入GR，包括GR的周期、原因等，然后会再向每个邻居连续发送五个Grace-LSA。</p>
</li>
</ol>
<pre><code>   说明：

  连续发送五个Grace-LSA是为了确保邻居收到该Grace-LSA，此规定为各厂商的实现方案，非协议规定。</code></pre>
<p>   此时，发送的Grace-LSA是为了告知邻居自己进入GR状态，邻居会在GR期间保持与Restarter的邻居关系，让其它交换机感知不到Restarter的倒换。</p>
<ol start="2">
<li><p>OSPF GR进行中</p>
<ol>
<li>在Restarter和Helper之间建立OSPF邻接关系。</li>
<li>Helper检测会话对端Restarter的状态，如果发现Restarter的状态为Down，Helper则会认为Restarter能在设定的GR时间内恢复业务。在GR时间超时之前，Helper既不结束对话也不删除Restarter的拓扑或路由信息。</li>
<li>Restarter恢复后，会向每个邻居发送信号，并在收到响应后重新建立邻居关系列表。</li>
<li>Restarter通过与所有邻居建立会话可获得拓扑或路由信息，根据收到的拓扑或路由信息计算自己的路由表。</li>
</ol>
<p>管理员或故障都可触发GR Restarter倒换和GR重启。GR Restarter在发生故障倒换时既不删除路由表/转发表中的路由信息也不复位接口板，因此整个系统可以不间断地转发IP报文。</p>
</li>
<li><p>GR退出</p>
<ul>
<li><p>如果GR成功，则Restarter在GR超时前与主备倒换前的所有邻居都重新建立好邻居关系，Helper收到Restarter发送的Age为3600秒的Grace-LSA时与Restarter的邻居关系为Full状态。</p>
</li>
<li><p>如果GR失败，则Restarter端的表现为：</p>
<ul>
<li>GR超时并且邻居关系尚未完全恢复。</li>
<li>Helper发送的Router-LSA或Network-LSA导致Restarter端进行双向检查时失败。</li>
<li>Restarter接口状态变化。</li>
<li>Restarter收到Helper发送的1-way Hello报文。</li>
<li>Restarter收到同一网段上另一台交换机产生的Grace-LSA。同一网段同一时间只能有一台交换机做GR。</li>
<li>Restarter同一个网段的邻居之间存在DR/BDR不一致的情况（拓扑变化）。</li>
</ul>
<p>Helper端的表现为：</p>
<ul>
<li>在邻居关系超时前没有收到Restarter发送的Grace-LSA。</li>
<li>Helper接口状态发生变化。</li>
<li>收到其它交换机发送的与Helper本地数据库不一致的LSA。（可以通过配置不进行严格LSA检查排除这种情况。）</li>
<li>同一网段上同一时间收到两台交换机发送的Grace-LSA。</li>
<li>与其它交换机邻居关系变化。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h5 id="有无GR技术的比较"><a href="#有无GR技术的比较" class="headerlink" title="有无GR技术的比较"></a>有无GR技术的比较</h5><p><strong>表6-10</strong>  有无GR技术的比较</p>
<table>
<thead>
<tr>
<th>无GR技术的主备倒换</th>
<th>有GR技术的主备倒换</th>
</tr>
</thead>
<tbody><tr>
<td>OSPF邻居重建路由重新计算转发表变化整网感知路由变化，路由短时震荡转发流量丢失，业务中断</td>
<td>OSPF邻居重建路由重新计算转发表保持不变除主备倒换设备的邻居外的其他交换机感知不到路由变化转发流量零丢失，业务不受影响</td>
</tr>
</tbody></table>
<h4 id="6-2-2-5-OSPF邻居震荡抑制"><a href="#6-2-2-5-OSPF邻居震荡抑制" class="headerlink" title="6.2.2.5  OSPF邻居震荡抑制"></a>6.2.2.5  OSPF邻居震荡抑制</h4><p>OSPF邻居震荡抑制功能是一种震荡抑制方式，通过延迟邻居建立或调整链路开销为最大值的方法达到抑制震荡的目的。</p>
<h5 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h5><p>如果承载OSPF业务的接口状态在Up和Down之间切换，就会引起邻居状态的频繁震荡。此时，OSPF会快速发送Hello报文重新建立邻居，同步数据库LSDB，触发路由计算，会造成大量报文交互，影响现有邻居的稳定性，对OSPF业务造成较大影响，同时也会影响依赖OSPF的其他业务（如：LDP、BGP）的正常运行。为了解决这个问题，OSPF实现了邻居震荡抑制功能，即在邻居频繁震荡时，启动震荡抑制，实现邻居延迟建立，或实现业务流量延迟经过频繁震荡的链路，达到抑制震荡的目的。</p>
<h5 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h5><p><strong>flapping_event</strong>：震荡事件，接口上最后一次邻居状态由Full切换为非Full，称之为flapping_event。flapping_event作为震荡源输入，用来触发震荡检测机制启动工作。</p>
<p><strong>flapping_count</strong>：当前震荡次数。</p>
<p><strong>detect-interval</strong>：震荡检测间隔，用于判断是否触发一次有效震荡事件。</p>
<p><strong>threshold</strong>：震荡抑制阈值，有效震荡事件触发累计大于等于该值时，进入震荡抑制阶段。</p>
<p><strong>resume-interval</strong>：恢复间隔，连续两次有效震荡时间间隔超过该值时，退出震荡抑制阶段。</p>
<h5 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h5><p>震荡检测</p>
<p>OSPF接口启动一个flapping_count计数器，相邻两次flapping_event产生时间的间隔在detect-interval之内，记为一次有效震荡事件。flapping_count计数加1，当flapping_count计数大于threshold时，系统判定震荡发生，需要进入震荡抑制阶段。进入震荡抑制阶段后，flapping_count清0。在flapping_count大于threshold之前，如果两次flapping_event的间隔大于resume-interval，则flapping_count清0。邻居震荡抑制从最后一次邻居状态变为ExStart或Down开始计时。</p>
<p>用户可以通过命令行配置detect-interval，threshold，resume-interval三个震荡检测的关键参数。</p>
<p>震荡抑制</p>
<p>震荡抑制分为Hold-down和Hold-max-cost两种模式：</p>
<ul>
<li>Hold-down模式：针对邻居建立过程中的频繁泛洪和拓扑变化的问题，在一段时间内禁止该邻居重新建立，避免频繁的数据库同步和大量的报文交互。</li>
<li>Hold-max-cost模式：针对用户业务流量频繁切换的问题，在一段时间内将链路开销值设置为最大值Max-cost（65535），避免用户的业务流量经过频繁震荡的链路。</li>
</ul>
<p>Hold-down模式和Hold-max-cost模式可以叠加使用，同时生效时，先进入Hold-down模式，待Hold-down模式退出后，再进入Hold-max-cost模式。</p>
<p>缺省情况下，OSPF使能Hold-max-cost模式，用户可以通过命令行修改震荡抑制方案和震荡抑制周期。</p>
<p> 说明：</p>
<p>接口进入震荡抑制阶段后，接口下的全部邻居都会进入震荡抑制阶段。</p>
<p>退出震荡抑制</p>
<p>退出震荡抑制有以下几种方式：</p>
<ul>
<li>抑制定时器超时。</li>
<li>复位OSPF进程。</li>
<li>用户通过命令行强制退出震荡抑制状态。</li>
</ul>
<h5 id="典型场景"><a href="#典型场景" class="headerlink" title="典型场景"></a>典型场景</h5><p>基本场景</p>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_111401">图6-44</a>所示，正常的业务流量路径是Switch A-&gt;Switch B-&gt;Switch C-&gt;Switch E。链路故障时，业务流量路径切换为Switch A-&gt;Switch B-&gt;Switch D-&gt;Switch E。在主备路径切换初期，Switch B和Switch C之间很可能会发生邻居状态频繁震荡，导致Switch A到Switch E的用户流量在两条路径不断切换，并且每次故障引发的切换都会导致用户流量部分丢失，影响网络稳定性。此时，如果Switch B和Switch C之间邻居震荡满足抑制条件时，设备就会启动震荡抑制功能。</p>
<ul>
<li>采用Hold-down模式：在一段时间内禁止Switch B和Switch C建立邻居关系，达到将业务流量切换到Switch A-&gt;Switch B-&gt;Switch D-&gt;Switch E路径的目的。</li>
<li>采用Hold-max-cost模式：在一段时间内将Switch B和Switch C之间的链路开销值设置为最大值Max-cost（65535），达到将业务流量切换到Switch A-&gt;Switch B-&gt;Switch D-&gt;Switch E路径的目的。</li>
</ul>
<p><strong>图6-44</strong>  基本场景的邻居震荡抑制<br><img src="http://support.huawei.com/enterprise/product/images/50c4863a207b415ca7a19cb852646619" alt="img" loading="lazy"></p>
<p>关键路径场景</p>
<p>网络中只有唯一的流量转发路径，转发路径上的任何邻居断开都会导致用户流量中断。如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_111402">图6-45</a>所示，唯一的业务流量路径是Switch A-&gt;Switch B-&gt;Switch C-&gt;Switch E，如果Switch B和Switch C之间发生邻居震荡，满足抑制条件，进入震荡抑制阶段。但是，Switch B和Switch C之间的链路是组网中的关键链路，一旦断开，整个网络将被分割为互不连通的两个网络。因此，关键路径场景不建议采用Hold-down模式断开邻居关系，推荐采用Hold-max-cost模式抑制震荡，在一段时间内将Switch B和Switch C间的链路开销值设置为最大值Max-cost（65535），进行震荡抑制。待网络稳定后，抑制定时器超时，自动退出抑制状态，迅速恢复业务链路。</p>
<p> 说明：</p>
<p>缺省情况下，OSPF使能Hold-max-cost模式。</p>
<p><strong>图6-45</strong>  关键路径场景的邻居震荡抑制<br><img src="http://support.huawei.com/enterprise/product/images/9d04f2a7f407457cab4fee4b4b962fef" alt="img" loading="lazy"></p>
<p>广播网场景</p>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_111403">图6-46</a>所示，四台设备分别通过交换机接入到同一个广播网中，相互之间建立广播网邻居。此时，如果Switch C因为链路原因一直处于震荡状态，并且Switch A和Switch B接入网络的时间不一致（例如，Switch A更早一点），或者Switch A和Switch B的震荡检测参数配置不一致，导致的结果是，Switch A先检测到Switch C处于震荡状态，抑制了Switch C，在Switch A发布的Hello报文中就不会携带Switch C的Switch ID，但是，Switch B无法检测到Switch C处于震荡状态，仍然认为Switch C为合法节点。在DR选举时，Switch A识别到的参与DR选举的设备集合包括Switch B和Switch D，Switch B识别到的参与DR选举的设备集合包括Switch A、Switch C和Switch D。两者备选集合不相同，选举结果也会不一致，这样就会导致广播网中的设备对网络理解的差异，造成路由计算错误。因此，在广播网或P2MP、NBMA等一个接口下存在多个邻居的场景中，不能单独抑制某个邻居，需要对接口下的全部邻居都进行抑制，震荡检测也不能以某个邻居为单位进行检测，需要检测接口上最后一个邻居状态为ExStart或Down的震荡事件。也就是说，如果Switch C震荡，广播网中的Switch A、Switch B和Switch D都会被抑制，待网络稳定后，抑制定时器超时，自动退出抑制状态，Switch A、Switch B和Switch D都会恢复到正常业务状态。</p>
<p><strong>图6-46</strong>  广播网场景的邻居震荡抑制<br><img src="http://support.huawei.com/enterprise/product/images/14f206dabba3413f831e92a666aa27ef" alt="img" loading="lazy"></p>
<p>多区域组网场景</p>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_111404">图6-47</a>所示，Switch A、Switch B、Switch C、Switch E和Switch F通过Area 1连接，Switch B、Switch D和Switch E通过骨干区域Area 0连接。Switch A到Switch F的正常的业务流量优先选取区域内路由，路径是Switch A-&gt;Switch B-&gt;Switch C-&gt;Switch E-&gt;Switch F。当Switch B和Switch C之间发生邻居震荡，满足抑制条件，进入震荡抑制阶段时，缺省情况采用Hold-max-cost模式。但是，根据OSPF路由优选规则，区域内路由和区域间路由相互不会比较链路的开销值，区域内路由优先级大于区域间路由，也就是说，发生邻居震荡后，Switch A到Switch F的业务流量路径仍然是Switch A-&gt;Switch B-&gt;Switch C-&gt;Switch E-&gt;Switch F，Hold-max-cost模式在此时无法达到抑制流量路径切换的目的。因此，多区域组网场景的邻居震荡抑制只能采用Hold-down模式，即在一段时间内禁止Switch B和Switch C建立邻居关系，达到将业务流量切换到Switch A-&gt;Switch B-&gt;Switch D-&gt;Switch E-&gt;Switch F路径的目的。</p>
<p> 说明：</p>
<p>缺省情况下，OSPF使能Hold-max-cost模式，用户可以通过命令行修改为Hold-down模式。</p>
<p><strong>图6-47</strong>  多区域组网场景的邻居震荡抑制<br><img src="http://support.huawei.com/enterprise/product/images/26ed5d6cc3ca49e7b7f41ff8a216fbc0" alt="img" loading="lazy"></p>
<p>IGP-LDP联动和邻居震荡抑制同时部署的场景</p>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_111405">图6-48</a>所示，PE1和P1之间链路发生故障时，LDP快速回切，导致新的LSP还没有完全建立时老的LSP就已经被拆除，为了避免引起业务中断，需要部署IGP-LDP联动。部署IGP-LDP联动特性后，设置新建立的邻居发布的链路开销值为最大值Max-cost（65535），避免IGP路由回切，等新的LSP建立完成后，再修改链路开销值为配置值，触发IGP路由回切，删除老的LSP，LDP业务流量切换到新建立的路径上。</p>
<p>IGP-LDP联动分为Hold-down模式和Hold-max-cost模式两种，邻居震荡抑制也分为Hold-down模式和Hold-max-cost模式两种。同时部署邻居震荡抑制和IGP-LDP联动时，优先生效Hold-down模式，次优生效Hold-max-cost模式，最后生效链路上配置的开销值。优先生效原则不以业务类型为条件，以最终生效的状态（Hold-down、Hold-max-cost、退出）为条件，详细情况请参考<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#tab_dc_feature_ospf_111401">表6-11</a>。</p>
<p><strong>表6-11</strong>  震荡抑制模式优先生效原则</p>
<table>
<thead>
<tr>
<th>IGP-LDP联动抑制模式/邻居震荡抑制模式</th>
<th>IGP-LDP联动抑制Hold-down模式</th>
<th>IGP-LDP联动抑制Hold-max-cost模式</th>
<th>退出IGP-LDP联动抑制</th>
</tr>
</thead>
<tbody><tr>
<td>邻居震荡抑制Hold-down模式</td>
<td>Hold-down模式</td>
<td>Hold-down模式</td>
<td>Hold-down模式</td>
</tr>
<tr>
<td>邻居震荡抑制Hold-max-cost模式</td>
<td>Hold-down模式</td>
<td>Hold-max-cost模式</td>
<td>Hold-max-cost模式</td>
</tr>
<tr>
<td>退出邻居震荡抑制</td>
<td>Hold-down模式</td>
<td>Hold-max-cost模式</td>
<td>退出IGP-LDP联动和邻居震荡抑制</td>
</tr>
</tbody></table>
<p>例如，如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_111405">图6-48</a>所示，PE1和P1之间发生频繁震荡。同时部署邻居震荡抑制和IGP-LDP联动，通过震荡抑制模式优先生效原则选取抑制模式，即在一段时间内禁止PE1和P1建立邻居关系或将PE1和P1之间的链路开销值设置为最大值Max-cost（65535），达到将业务流量切换到PE1-&gt;P4-&gt;P3-&gt;PE2路径的目的。</p>
<p><strong>图6-48</strong>  IGP-LDP联动和邻居震荡抑制同时部署的场景<br><img src="http://support.huawei.com/enterprise/product/images/1717dffcdd0d4af69959cefeda101cf3" alt="img" loading="lazy"></p>
<p>误码倒换和邻居震荡抑制同时部署的场景</p>
<p>误码倒换特性用于保护链路质量，当链路质量检测发现链路质量差，误码率高，就会上报误码事件，误码率高的链路上承载的用户业务会受到较大的影响，可能影响用户正常使用，因此需要将用户流量尽量调整到其他链路上。OSPF业务在收到误码事件后，会调整接口开销值为最大值Max-cost（65535），路由随即重新计算，重新选路，将业务流量切换到备选链路。误码倒换和邻居震荡抑制同时部署时，两种震荡抑制方式同时生效，优先生效Hold-down模式，次优生效Hold-max-cost模式，最后生效链路上配置的开销值。</p>
<h4 id="6-2-2-6-OSPF-Smart-discover"><a href="#6-2-2-6-OSPF-Smart-discover" class="headerlink" title="6.2.2.6  OSPF Smart-discover"></a>6.2.2.6  OSPF Smart-discover</h4><h5 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h5><p>通常情况下，路由器会周期性地从运行OSPF协议的接口上发送Hello报文。这个周期被称为Hello Interval，通过一个Hello Timer定时器控制Hello报文的发送。这种按固定周期发送报文的方式减缓了OSPF邻居关系的建立。</p>
<p>通过使能Smart-discover特性，可以在特定场景下加快OSPF邻居的建立。</p>
<p><strong>表6-12</strong>  OSPF Smart-discover</p>
<table>
<thead>
<tr>
<th>接口是否配置Smart-discover</th>
<th>处理</th>
</tr>
</thead>
<tbody><tr>
<td>接口没有配置Smart-discover</td>
<td>必须等待Hello Timer到时才能发送Hello报文；两次报文发送间隔为Hello Interval；在这期间邻居一直在等待接收报文。</td>
</tr>
<tr>
<td>接口上配置Smart-discover</td>
<td>直接发送Hello报文，不需要等待Hello Timer超时；邻居可以很快收到报文迅速进行状态迁移。</td>
</tr>
</tbody></table>
<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>在以下场景中，使能了Smart-discover特性的接口不需要等待Hello Timer到时，可以主动向邻居发送Hello报文：</p>
<ul>
<li>当邻居状态首次到达2-way状态。</li>
<li>当邻居状态从2-way或更高状态迁移到Init状态。</li>
</ul>
<h4 id="6-2-2-7-OSPF-Database-Overflow"><a href="#6-2-2-7-OSPF-Database-Overflow" class="headerlink" title="6.2.2.7  OSPF Database Overflow"></a>6.2.2.7  OSPF Database Overflow</h4><h5 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h5><p>OSPF协议要求同一个区域中的路由器保存相同的链路状态数据库LSDB（Link-State Database）。</p>
<p>随着网络上路由数量不断增加，一些路由器由于系统资源有限，不能再承载如此多的路由信息，这种状态就被称为数据库超限（OSPF Database Overflow）。</p>
<h5 id="目的-2"><a href="#目的-2" class="headerlink" title="目的"></a>目的</h5><p>对于路由信息不断增加导致路由器系统资源耗尽而失效的问题，可以通过配置Stub或NSSA区域来解决，但Stub或NSSA区域的方案不能解决动态路由增长导致的数据库超限问题。为了解决数据库超限引发的问题，通过设置LSDB中External LSA的最大条目数，可以动态限制链路数据库的规模。</p>
<h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><p>通过设置路由器上非缺省外部路由数量的上限，来避免数据库超限。</p>
<p>OSPF网络中所有路由器都必须配置相同的上限值。这样，只要路由器上外部路由的数量达到该上限，路由器就进入Overflow状态，并同时启动超限状态定时器（默认超时时间为5秒），路由器在定时器超过5秒后自动退出超限状态。</p>
<p><strong>表6-13</strong>  OSPF Database Overflow</p>
<table>
<thead>
<tr>
<th>Overflow状态阶段</th>
<th>OSPF处理流程</th>
</tr>
</thead>
<tbody><tr>
<td>进入Overflow状态时</td>
<td>路由器删除所有自己产生的非缺省外部路由。</td>
</tr>
<tr>
<td>处于Overflow状态中</td>
<td>不产生非缺省外部路由。丢弃新收到的非缺省外部路由，不回复确认报文。当超限状态定时器超时，检查外部路由数量是否仍然超过上限。N=&gt;退出超限状态。Y=&gt;重启定时器。</td>
</tr>
<tr>
<td>退出Overflow状态时</td>
<td>删除超限状态定时器。产生非缺省外部路由。接收新收到的非缺省外部路由，回复确认报文。准备下一次进入超限状态。</td>
</tr>
</tbody></table>
<h4 id="6-2-2-8-OSPF-Mesh-Group"><a href="#6-2-2-8-OSPF-Mesh-Group" class="headerlink" title="6.2.2.8  OSPF Mesh-Group"></a>6.2.2.8  OSPF Mesh-Group</h4><h5 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h5><p>OSPF Mesh-Group是将并行链路场景中的链路分组，从而洪泛时从群组中选取代表链路进行洪泛，避免重复洪泛而造成不必要的系统压力。</p>
<p>缺省情况下，不使能Mesh-Group功能。</p>
<h5 id="目的-3"><a href="#目的-3" class="headerlink" title="目的"></a>目的</h5><p>当OSPF进程收到一个LSA或者新产生一个LSA时，会进行洪泛操作。并行链路场景下，OSPF会对每一条链路洪泛LSA，发送Update报文。</p>
<p>这样，如果有2000条并行链路，则每个LSA洪泛都要发送2000次，然而只有一次洪泛是有效的，其他1999次洪泛为重复洪泛。</p>
<p>为了避免这种重复洪泛而造成的系统压力，使能Mesh Group特性，可以将并行链路进行归组，选取代表链路进行洪泛。</p>
<h5 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h5><p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_002001">图6-49</a>所示，RouterA和RouterB建立OSPF邻居关系，通过3条链路相连。当RouterA从接口4接收到新的LSA后，会将该LSA通过1、2、3接口洪泛到RouterB。</p>
<p>这种洪泛方式会造成并行链路的压力，因为对于存在多条并行链路的邻居来说，只需要选取一条主链路进行洪泛LSA即可。</p>
<p><strong>图6-49</strong>  没有使能OSPF Mesh-Group特性时LSA的洪泛情况<br><img src="http://support.huawei.com/enterprise/product/images/85a9e2ea85a444c69528313584ba50af" alt="img" loading="lazy"></p>
<p>使能了OSPF Mesh-Group特性的设备和邻居存在多条并行链路时，当其收到LSA后，会选取一条主链路进行泛洪，如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_002002">图6-50</a>所示。</p>
<p>当主链路上接口状态低于Exchange时，OSPF会在并行链路中重新选取主链路，并继续洪泛LSA，这是因为，OSPF规定，只有当邻居状态达到Exchange时，才能洪泛LSA。并且，当RouterB从链路1收到来自RouterA洪泛的LSA后，不会再将该LSA从链路2、3反向洪泛给RouterA。</p>
<p><strong>图6-50</strong>  使能OSPF Mesh-Group特性时LSA的洪泛情况<br><img src="http://support.huawei.com/enterprise/product/images/affeb831396b4afcb3c99e7f929bbae2" alt="img" loading="lazy"></p>
<p>Mesh-Group以邻居的Router ID唯一标识一个群组，接口状态大于Exchange且与同一个邻居相连的接口属于同一个Mesh-Group。</p>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_002003">图6-51</a>所示，RouterA在区域0中有一个群组，分别是接口1和接口2所在的链路。由于接口3所在的链路为广播链路，有超过一个邻居，所以不能加入到群组中。</p>
<p><strong>图6-51</strong>  接口不能加入到群组中的情况<br><img src="http://support.huawei.com/enterprise/product/images/4783d38322d5480ba88f1376e22d5d29" alt="img" loading="lazy"></p>
<p> 说明：</p>
<p>另外，路由器使能Mesh-Group后，若其直连的邻居路由器Router ID配置重复，会引起全网LSDB不同步、路由计算不正确的情况，需要重新配置邻居路由器的Router ID（注：配置重复Router ID属于错误配置）。</p>
<h3 id="6-2-3-OSPF与其它协议联动"><a href="#6-2-3-OSPF与其它协议联动" class="headerlink" title="6.2.3  OSPF与其它协议联动"></a>6.2.3  OSPF与其它协议联动</h3><h4 id="OSPF与BFD联动"><a href="#OSPF与BFD联动" class="headerlink" title="OSPF与BFD联动"></a>OSPF与BFD联动</h4><p>双向转发检测BFD（Bidirectional Forwarding Detection）是一种用于检测转发引擎之间通信故障的检测机制。</p>
<p>BFD对两个系统间的、同一路径上的同一种数据协议的连通性进行检测，这条路径可以是物理链路或逻辑链路，包括隧道。</p>
<p>OSPF与BFD联动就是将BFD和OSPF协议关联起来，将BFD对链路故障的快速感应通知OSPF协议，从而加快OSPF协议对于网络拓扑变化的响应。</p>
<p>网络上的链路故障或拓扑变化都会导致设备重新进行路由计算，所以缩短路由协议的收敛时间对于提高网络的性能是非常重要的。</p>
<p>由于链路故障是无法完全避免的，因此，加快故障感知速度并将故障快速通告给路由协议是一种可行的方案。BFD和OSPF相关联，一旦与邻居之间的链路出现故障，BFD的快速性能够加快OSPF的收敛速度。</p>
<p><strong>表6-14</strong>  有无OSPF与BFD联动功能对比</p>
<table>
<thead>
<tr>
<th>有无BFD</th>
<th>链路故障检测机制</th>
<th>收敛速度</th>
</tr>
</thead>
<tbody><tr>
<td>无BFD</td>
<td>OSPF Dead定时器超时（默认配置40s）</td>
<td>秒级</td>
</tr>
<tr>
<td>有BFD</td>
<td>BFD会话状态为Down</td>
<td>毫秒级</td>
</tr>
</tbody></table>
<p>OSPF与BFD联动的原理如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112901">图6-52</a>所示。</p>
<p><strong>图6-52</strong>  OSPF与BFD联动<br><img src="http://support.huawei.com/enterprise/product/images/c29e59e493ca402dbe3638b906176d00" alt="img" loading="lazy"></p>
<ol>
<li>SwitchA、SwitchB、SwitchC之间建立OSPF邻居关系。</li>
<li>邻居状态到达Full状态时通知BFD建立BFD会话。</li>
<li>SwitchA到SwitchB的路由出接口为GE0/0/2，当这两台设备间的链路出现故障后，BFD首先感知到并通知SwitchA。</li>
<li>SwitchA处理邻居Down事件，重新进行路由计算，新的路由出接口为GE0/0/1，经过SwitchC到达SwitchB。</li>
</ol>
<h4 id="OSPF与BGP联动"><a href="#OSPF与BGP联动" class="headerlink" title="OSPF与BGP联动"></a>OSPF与BGP联动</h4><p>当有新的设备加入到网络中，或者设备重启时，可能会出现在BGP收敛期间内网络流量丢失的现象。这是由于IGP收敛速度比BGP快而造成的。</p>
<p>通过使能OSPF与BGP联动特性可以解决这个问题。</p>
<p>在存在备份链路的情况下，BGP在链路回切时，由于路由收敛速度滞后于OSPF路由收敛速度，从而造成流量丢失。</p>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112902">图6-53</a>所示，四台设备SwitchA、SwitchB、SwitchC、SwitchD之间运行OSPF协议，并建立IBGP连接。SwitchC为SwitchB的备份设备。当网络环境稳定时，BGP与OSPF在设备上是完全收敛的。</p>
<p>正常情况下，从SwitchA到10.3.1.0/30的流量会途经SwitchB。当SwitchB发生故障后，流量切换到SwitchC。SwitchB故障恢复以后，流量回切到SwitchB，此时会有流量丢失。</p>
<p>这是因为，在流量回切到SwitchB的过程中，IGP收敛速度比BGP快，因此OSPF先收敛，BGP还没有完成收敛，导致SwitchB不知如何到达10.3.1.0/30。</p>
<p>这样，当从SwitchA去往10.3.1.0/30的流量被发送给SwitchB时，由于没有必要的路由选择信息，这些流量就会被丢弃。</p>
<p><strong>图6-53</strong>  OSPF与BGP联动<br><img src="http://support.huawei.com/enterprise/product/images/148aa1440b9f4feeb23e04e38ac34a7d" alt="img" loading="lazy"></p>
<p>使能了OSPF与BGP联动特性的设备会在设定的联动时间内保持为Stub路由器，也就是说，该设备发布的LSA中的链路度量值为最大值（65535），从而告知其它OSPF设备不要使用这个路由器来转发数据。</p>
<p><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112902">图6-53</a>中，在RoutetB上使能BGP联动，这样，在BGP收敛完成前，SwitchA不把流量转发到SwitchB上，而是继续使用备份设备SwitchC转发流量，直到SwitchB上的BGP路由完成收敛。</p>
<h4 id="OSPF-LDP联动"><a href="#OSPF-LDP联动" class="headerlink" title="OSPF-LDP联动"></a>OSPF-LDP联动</h4><p>在存在主备链路的网络中，当主链路故障恢复后，流量会从备份链路切换到主链路。</p>
<p>由于IGP的收敛在LDP会话建立之前完成，导致旧的LSP已经删除，新的LSP还没有建立，因此LSP流量中断。</p>
<p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_112903">图6-54</a>所示，PE1-P1-P2-P3-PE2为主链路，PE1-P1-P4-P3-PE2为备份链路。</p>
<p>主链路发生故障，流量从主链路切换到备份链路。主链路故障恢复，流量从备份链路回切到主链路，此时流量会有较长时间的中断。</p>
<p><strong>图6-54</strong>  OSPF-LDP联动<br><img src="http://support.huawei.com/enterprise/product/images/d3f18cc658c9446988f147136a6363bf" alt="img" loading="lazy"></p>
<p>通过在P1和P2上配置标签分发协议LDP（Label Distribution Protocol）和IGP同步功能，能够缩短流量从备份链路切换到主链路时的中断时间。</p>
<p><strong>表6-15</strong>  OSPF-LDP联动</p>
<table>
<thead>
<tr>
<th>是否使能OSPF-LDP联动特性</th>
<th>流量中断时间</th>
</tr>
</thead>
<tbody><tr>
<td>不使能OSPF-LDP联动特性</td>
<td>秒级</td>
</tr>
<tr>
<td>使能OSPF-LDP联动特性</td>
<td>毫秒级</td>
</tr>
</tbody></table>
<p>LDP和IGP同步的基本原理是：通过抑制IGP建立邻居关系来推迟路由的回切，直至LDP完成收敛。也就是在主链路的LSP建立之前，先保留备份链路，让流量继续从备份链路转发，直至主链路的LSP建立成功，再删除备份链路。</p>
<p>LDP和IGP同步包括三个定时器：</p>
<ul>
<li>Hold-down</li>
<li>Hold-max-cost</li>
<li>Delay</li>
</ul>
<p>当主链路故障恢复后，路由器进行以下操作：</p>
<ol>
<li>启动Hold-down定时器，IGP接口先不建立IGP邻居，等待LDP会话的建立。</li>
<li>Hold-down定时器超时后，启动Hold-max-cost定时器。IGP在本地路由器的链路状态通告中，向主链路通告接口链路的最大metric值。</li>
<li>故障链路的LDP会话重新建立以后，启动Delay定时器等待LSP的建立。</li>
<li>Delay定时器超时以后，无论IGP的状态如何，LDP都通知IGP同步流程结束。</li>
</ol>
<h2 id="6-3-应用"><a href="#6-3-应用" class="headerlink" title="6.3  应用"></a>6.3  应用</h2><p>介绍OSPF的应用。</p>
<h3 id="6-3-1-OSPF-GR"><a href="#6-3-1-OSPF-GR" class="headerlink" title="6.3.1  OSPF GR"></a>6.3.1  OSPF GR</h3><p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_002201">图6-55</a>所示，RouterA、RouterB、RouterC和RouterD运行OSPF协议实现网络互通，RouterA和RouterB使能了GR功能。当RouterA重启时，RouterB协助RouterA完成平滑重启，但并不通告给其它邻居，网络流量并不中断。</p>
<p><strong>图6-55</strong>  OSPF GR<br><img src="http://support.huawei.com/enterprise/product/images/1be62ec2e84748168adcf46cc4827a6c" alt="img" loading="lazy"></p>
<h3 id="6-3-2-OSPF-GTSM"><a href="#6-3-2-OSPF-GTSM" class="headerlink" title="6.3.2  OSPF GTSM"></a>6.3.2  OSPF GTSM</h3><p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_002301">图6-56</a>所示，各路由器间运行OSPF协议，在RouterC上启用GTSM保护功能。各路由器发往RouterC的报文有效TTL范围如下：</p>
<ul>
<li>RouterA和RouterE是RouterC的相邻路由器，报文有效TTL范围是255－hops+1到255。</li>
<li>RouterB、RouterD、RouterF发往RouterC的报文有效TTL范围分别是254到255、253到255、252到255。</li>
</ul>
<p><strong>图6-56</strong>  OSPF GTSM<br><img src="http://support.huawei.com/enterprise/product/images/d3e5c409c021434ca486645a7623bc6f" alt="img" loading="lazy"></p>
<h2 id="6-4-OSPF部署指南"><a href="#6-4-OSPF部署指南" class="headerlink" title="6.4  OSPF部署指南"></a>6.4  OSPF部署指南</h2><h3 id="6-4-1-OSPF网络规划设计原则"><a href="#6-4-1-OSPF网络规划设计原则" class="headerlink" title="6.4.1  OSPF网络规划设计原则"></a>6.4.1  OSPF网络规划设计原则</h3><h4 id="保持OSPF网络的稳定性：Router-ID的规划"><a href="#保持OSPF网络的稳定性：Router-ID的规划" class="headerlink" title="保持OSPF网络的稳定性：Router ID的规划"></a>保持OSPF网络的稳定性：Router ID的规划</h4><p>在OSPF网络设计和实施中需要考虑的第一点就是Router ID的选择。</p>
<p>OSPF作为一种链路状态路由协议其计算路由的依据是LSA。每台运行OSPF的路由器都会发送并泛洪LSA报文到整个网络，这样网络中每台运行OSPF的路由器都会收集到其他设备发送过来的LSA并且放入LSDB，然后根据SPF算法计算出一棵以自己为根的到其他网络的无环树。由此可以看出保持每台路由器的LSDB的稳定性是保证OSPF网络稳定的前提。在LSDB中，不同OSPF路由器发送来的LSA是通过Router ID进行区分的。如果一台路由器的Router ID发生变化，那么此路由器会重新进行LSA泛洪，从而导致全网OSPF路由器都会更新其LSDB并且重新进行SPF计算，使得OSPF网络发生振荡。因此选择一个稳定的Router ID是OSPF网络设计的首要工作。</p>
<p>路由器的Router ID可以手工配置，如果没有通过命令指定Router ID，系统会从当前接口的IP地址中自动选取一个作为路由器的Router ID。其选择规则如下：</p>
<ol>
<li>优先从Loopback地址中选择最大的IP地址作为路由器的Router ID。</li>
<li>如果没有配置Loopback接口，则在接口地址中选取最大的IP地址作为路由器的Router ID。</li>
<li>只有当被选举为Router ID的接口IP地址被删除或修改后，才会进行Router ID的重新选举。</li>
</ol>
<p>在实际工程中，推荐手工指定OSPF路由设备的Router ID。首先规划出一个私有网段用于OSPF的Router ID选择，例如：192.168.1.0/24。在启用OSPF进程前在每个OSPF路由器上建立一个Loopback接口，使用一个32位掩码的私有地址作为其IP地址，这个32位的私有地址即作为该路由设备的Router ID。如果没有特殊要求，这个Loopback接口地址可以不发布在OSPF网络中。</p>
<h4 id="层次化的网络设计：OSPF区域的规划"><a href="#层次化的网络设计：OSPF区域的规划" class="headerlink" title="层次化的网络设计：OSPF区域的规划"></a>层次化的网络设计：OSPF区域的规划</h4><p>OSPF是一个需要层次化设计的网络协议。在OSPF网络中使用了区域的概念，从层次化的角度来看区域被分为两种：骨干区域和非骨干区域。骨干区域的编号为0，非骨干区域的编号从1到4294967295。处于骨干区域和非骨干区域边界的OSPF路由器被称为ABR。</p>
<p>实际上OSPF区域的规划也就是把网络中的OSPF路由器归类的过程。在设计OSPF区域时，需要考虑的第一点是网络的规模。对于小型的网络，例如只有几台路由设备作为核心层和汇聚层设备的网络可以考虑仅规划一个骨干区域。但是在大型的OSPF网络中，网络的层次化设计是必须要考虑的。</p>
<p>对于大型的OSPF网络，在规划上会遵循核心、汇聚、接入的分层原则，且OSPF骨干路由器的选择一般包含出口路由器和核心交换机。这些设备通常都是高端路由设备，例如华为NE系列高端路由器、华为S系列框式交换机。非骨干区域的设计则是根据地理位置和设备性能而定。如果在单个非骨干区域中使用了较多的低端三层交换产品，由于其产品定位和性能的限制，应该尽量减少其路由条目数量，把区域规划得更小一些或者使用特殊区域。</p>
<p>实际工程中对于非骨干区域的Area编号的规划也是有讲究的，尽量不要使用类似Area 1、2、3这种连续的编号，推荐使用Area 10、20、30这种递增方式，以便在后期网络扩容的时候用户增加区域编号。</p>
<h4 id="非骨干区域的路由表项优化：特殊区域的使用"><a href="#非骨干区域的路由表项优化：特殊区域的使用" class="headerlink" title="非骨干区域的路由表项优化：特殊区域的使用"></a>非骨干区域的路由表项优化：特殊区域的使用</h4><p>特殊区域的使用可以达到优化非骨干区域的路由表项的目的。实际上对于非骨干区域，一般可能存在如下两种情况需要减少路由表项的规模：</p>
<ul>
<li>非骨干区域仅有一个ABR做出口，任何访问区域外的流量都要经过这个出口设备。此时该非骨干区域内的路由器不需要了解外部网络的细节，仅需要有个出口能够出去即可。</li>
<li>非骨干区域的设备使用了一些低端的三层交换机，设备性能使得其不可能承受过多的路由条目。为了精简设备上的路由条目数量，可以采用配置特殊区域的方法进行路由表项的优化。</li>
</ul>
<p>交换机支持OSPF协议中定义四种特殊区域类型：Stub区域，Totally Stub区域，NSSA区域，Totally NSSA区域。</p>
<p>在绝大部分的情况下，典型OSPF网络的非骨干区域中都只需要知道缺省路由出口在哪里，因此建议把非骨干区域统一规划成Totally NSSA区域，这样极大地减少了非骨干区域内部路由器的路由条目数量和区域内部OSPF交互的报文数量。对于少数存在特殊需求的网络，可根据实际情况灵活使用几种区域类型。</p>
<h4 id="骨干区域的路由表项优化：非骨干区域IP子网规划和路由汇聚"><a href="#骨干区域的路由表项优化：非骨干区域IP子网规划和路由汇聚" class="headerlink" title="骨干区域的路由表项优化：非骨干区域IP子网规划和路由汇聚"></a>骨干区域的路由表项优化：非骨干区域IP子网规划和路由汇聚</h4><p>由于OSPF骨干区域需要负责区域之间的路由交互，所以骨干区域路由器的路由表规模会比较大。通过对非骨干区域使用的IP网段作出合理规划、聚合区域边界的路由，可以优化OSPF骨干区域的路由器的路由表项。</p>
<p>建议新建OSPF网络时设计利于路由汇总的IP网络，对于扩建的网络尽量进行IP地址的重新规划，通过路由汇聚能精简骨干区域路由器的路由表，减少骨干区域内OSPF交互的报文数量。同时，路由汇总以后，单点的链路故障或者网络震荡不至于影响整个网络的路由更新，因此路由汇聚还可以提高网络的稳定性。</p>
<h4 id="上行流量的引导：OSPF缺省路由的引入和选路优化"><a href="#上行流量的引导：OSPF缺省路由的引入和选路优化" class="headerlink" title="上行流量的引导：OSPF缺省路由的引入和选路优化"></a>上行流量的引导：OSPF缺省路由的引入和选路优化</h4><p>对于一个大型OSPF网络来说，大部分的业务流量并不在网络内部，而是通往Internet出口，因此缺省路由的设计是OSPF网络设计要点。</p>
<p>在实际工程中，OSPF网络的出口有可能不止一个，如何有效地将出口流量分担到多条链路上就成为了OSPF设计中的一个难点。虽然有很多种手段能够达到分担流量的目的，但是最简单、最安全的方法是使用OSPF内在的选路机制。OSPF路由器对一条路由的优劣衡量是通过计算其cost值来实现的，cost值小的路由会被路由器优先放入路由表。因此，通过调整OSPF接口的cost值可以使得路由器选择不同的链路出口来达到负载分担的目的。</p>
<p>OSPFv2出现的时间较早，没有考虑到带宽的飞速发展，因此缺省情况下，OSPF计算cost值使用的参考带宽为100Mbit/s。也就是说，缺省情况下，OSPF认为100Mbit/s带宽以上的端口其cost是1。在网络骨干带宽迈向10Tbit/s的今天已经显得非常不合时宜。交换机提供了更改参考带宽的功能，使用<strong>bandwidth-reference</strong>命令选择一个合适的参考带宽成为OSPF网络建设中必要的一项工作。对于OSPF网络的选路优化，推荐首先选择合适的参考带宽，然后通过调整OSPF接口cost值来实现。</p>
<h4 id="路由汇总场景下的防环设计：黑洞路由的使用"><a href="#路由汇总场景下的防环设计：黑洞路由的使用" class="headerlink" title="路由汇总场景下的防环设计：黑洞路由的使用"></a>路由汇总场景下的防环设计：黑洞路由的使用</h4><p>在很多场景下路由聚合确实能够做到精简路由，提高网络稳定性的作用，但路由聚合容易产生路由环路，而黑洞路由可以用来弥补这种缺陷。在路由器上，命中黑洞路由的报文会被丢弃，而且路由器不向报文发送者反馈任何差错信息。所以OSPF网络设计中，路由聚合和黑洞路由经常配合使用。</p>
<h4 id="OSPF网络基本安全：OSPF静默接口的使用"><a href="#OSPF网络基本安全：OSPF静默接口的使用" class="headerlink" title="OSPF网络基本安全：OSPF静默接口的使用"></a>OSPF网络基本安全：OSPF静默接口的使用</h4><p>对于一个大型OSPF网络来说，安全性是必须要考虑到的问题。在OSPF网络设计中，通常会禁止将OSPF报文发往用户端，这是为了防止终端用户窥探OSPF报文信息。如果用户能截获OSPF报文，就可能知道如何加入此OSPF网络，此时OSPF网络容易被攻击或破坏。例如，接入一台路由器到OSPF网络中并且使该路由器的OSPF进程处于不稳定的状态中，就会导致OSPF网络发生振荡甚至瘫痪。</p>
<p>在实际工程中，为了保证OSPF网络的安全与稳定，推荐在OSPF网络的边缘设备上使用静默接口的方式来阻止通往用户侧的OSPF报文。这样，该接口就被禁止接收和发送OSPF报文，该接口的直连路由仍可以发布出去，但接口的Hello报文将被阻塞，接口上无法建立邻居关系。</p>
<h3 id="6-4-2-OSPF网络设计部署案例"><a href="#6-4-2-OSPF网络设计部署案例" class="headerlink" title="6.4.2  OSPF网络设计部署案例"></a>6.4.2  OSPF网络设计部署案例</h3><p><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_113201">图6-57</a>是一个典型园区网的拓扑图，可以看到这是一个大型园区网络，核心、汇聚、接入三层分明，有多出口到Internet，网络内部存在双链路冗余，核心、汇聚交换机部署集群保护等。这种大型园区网络，园区出口设备一般选用华为NE系列高端路由器，核心交换机和汇聚层交换机选用华为园区框式交换机集群。用户网关部署在汇聚层上，汇聚层作为二层和三层的分界点。</p>
<p><strong>图6-57</strong>  典型园区网络拓扑图<br><img src="http://support.huawei.com/enterprise/product/images/42db71da25894242b3c5af3371386223" alt="img" loading="lazy"></p>
<p>由于上述典型园区网络中核心交换机和汇聚交换机都属于集群系统，因此它们在逻辑上相当于一台设备，多链路捆绑在逻辑上也属于一条链路。为了简化问题的描述，这里把上述网络拓扑经过抽象形成<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_113202">图6-58</a>所示的逻辑拓扑图，园区网中可能存在很多栋楼，这里以3栋为例进行描述。</p>
<p><strong>图6-58</strong>  典型园区网络的逻辑拓扑图<br><img src="http://support.huawei.com/enterprise/product/images/ab53c9a2427640e8bafd9f4d93ab2c8d" alt="img" loading="lazy"></p>
<h4 id="保持OSPF网络的稳定性：Router-ID的规划-1"><a href="#保持OSPF网络的稳定性：Router-ID的规划-1" class="headerlink" title="保持OSPF网络的稳定性：Router ID的规划"></a>保持OSPF网络的稳定性：Router ID的规划</h4><p>部署OSPF的首要工作就是设计和部署Router ID。一般情况下，使用一个合适的私有IP地址段即可。本例选用的Router ID地址段为10.0.0.0/24。</p>
<p>选取完Router ID地址段后，接下来需要做的工作是在每个OSPF设备上创建相应的Loopback接口并配置接口IP为10.0.0.X/32。</p>
<p>Router ID的配置以核心层交换机框式交换机集群为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[HUAWEI] interface LoopBack 0</span><br><span class="line">[HUAWEI-LoopBack0] ip address 10.0.0.3 32  &#x2F;&#x2F;为环回接口0配置32位掩码的IP地址</span><br><span class="line">[HUAWEI-LoopBack0] quit</span><br><span class="line">[HUAWEI] ospf 1 router-id 10.0.0.3  &#x2F;&#x2F;创建OSPF进程1并设置Router ID为10.0.0.3</span><br></pre></td></tr></table></figure>



<p> 说明：</p>
<p>如无特殊要求，建议不要在OSPF进程中发布Loopback0的接口地址，以减少无用的OSPF信息交互报文。</p>
<p>规划Router ID后的网络拓扑图如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_113203">图6-59</a>所示。</p>
<p><strong>图6-59</strong>  规划Router ID后的网络拓扑图<br><img src="http://support.huawei.com/enterprise/product/images/0d78a236994a4260864b8dd26df155a7" alt="img" loading="lazy"></p>
<h4 id="层次化的网络设计：OSPF区域的规划-1"><a href="#层次化的网络设计：OSPF区域的规划-1" class="headerlink" title="层次化的网络设计：OSPF区域的规划"></a>层次化的网络设计：OSPF区域的规划</h4><p>在分配完Router ID后，需要对整个OSPF网络进行区域划分。对于层次分明的网络，划分OSPF区域时，可以直接把出口路由器和核心交换机包含到Area 0，再按照地理位置来区分非骨干区域。规划非骨干区域Area编号时需要注意编号之间的差值，方便后续网络扩容时添加新的区域。本例中按照地理位置，把出口路由器和核心交换机划分到骨干区域，把每栋楼的汇聚交换机划分为一个非骨干区域。<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_113204">图6-60</a>是划分区域后的OSPF网络拓扑图。</p>
<p><strong>图6-60</strong>  规划区域后的OSPF网络拓扑图<br><img src="http://support.huawei.com/enterprise/product/images/159689dba7de441db3f92d31373fd7a3" alt="img" loading="lazy"></p>
<p>区域划分的配置以核心层交换机集群的Area 0和Area 10的配置为例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[HUAWEI] ospf 1  &#x2F;&#x2F;进入OSPF进程视图</span><br><span class="line">[HUAWEI-ospf-1] area 0  &#x2F;&#x2F;进入Area 0区域视图</span><br><span class="line">[HUAWEI-ospf-1-area-0.0.0.0] network 10.200.10.0 0.0.0.3  &#x2F;&#x2F;将上行口的网段发布进Area 0</span><br><span class="line">[HUAWEI-ospf-1-area-0.0.0.0] network 10.200.20.0 0.0.0.3  &#x2F;&#x2F;将上行口的网段发布进Area 0</span><br><span class="line">[HUAWEI-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[HUAWEI-ospf-1] area 10  &#x2F;&#x2F;进入Area 10区域视图</span><br><span class="line">[HUAWEI-ospf-1-area-0.0.0.10] network 10.100.10.0 0.0.0.3  &#x2F;&#x2F;将下行口的网段发布进Area 10</span><br><span class="line">[HUAWEI-ospf-1-area-0.0.0.10] quit</span><br></pre></td></tr></table></figure>

<p>从配置命令中可以看到OSPF区域是以OSPF设备为边界的，例如此拓扑中核心层交换机集群上行接口属于Area 0，下行接口属于Area 10，也就是说此交换机集群跨越了两个区域，是ABR。</p>
<p> 说明：</p>
<p>在单个区域包含过多的低端路由器或者三层交换机是一种不好的设计，如果出现这种情况应该考虑缩小区域范围。</p>
<h4 id="非骨干区域的路由表项优化：特殊区域的使用-1"><a href="#非骨干区域的路由表项优化：特殊区域的使用-1" class="headerlink" title="非骨干区域的路由表项优化：特殊区域的使用"></a>非骨干区域的路由表项优化：特殊区域的使用</h4><p>划分完OSPF网络区域后可以看到非骨干区域的路由表项的规模相对较大。如果非骨干区域的设备性能较低且用户不希望路由表项规模过大，此时可以考虑运用特殊区域。本例中非骨干区域一律采用Totally NSSA区域，具体拓扑如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_113205">图6-61</a>所示。</p>
<p><strong>图6-61</strong>  非骨干区域划分特殊区域后的网络拓扑图<br><img src="http://support.huawei.com/enterprise/product/images/e78eca4d41394439886ab90a62ad9a12" alt="img" loading="lazy"></p>
<p>Totally NSSA区域的配置以Area 10中的核心层交换机集群和汇聚层交换机集群为例。</p>
<p>核心层交换机集群的配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[HUAWEI] ospf 1  &#x2F;&#x2F;进入OSPF进程视图</span><br><span class="line">[HUAWEI-ospf-1] area 10  &#x2F;&#x2F;进入Area 10区域视图</span><br><span class="line">[HUAWEI-ospf-1-area-0.0.0.10] nssa no-summary  &#x2F;&#x2F;ABR需要配置nssa no-summary</span><br><span class="line">[HUAWEI-ospf-1-area-0.0.0.10] quit</span><br></pre></td></tr></table></figure>

<p>汇聚层交换机集群的配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[HUAWEI] ospf 1  &#x2F;&#x2F;进入OSPF进程视图</span><br><span class="line">[HUAWEI-ospf-1] area 10  &#x2F;&#x2F;进入Area 10区域视图</span><br><span class="line">[HUAWEI-ospf-1-area-0.0.0.10] nssa  &#x2F;&#x2F;非ABR设备配置nssa</span><br><span class="line">[HUAWEI-ospf-1-area-0.0.0.10] quit</span><br></pre></td></tr></table></figure>

<p>配置Totally NSSA区域前，汇聚层交换机集群上的非骨干区域路由表项如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HUAWEI&gt; display ip routing-table</span><br><span class="line">Route Flags: R - relay, D - download to fib</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">Routing Tables: Public</span><br><span class="line">         Destinations : 21        Routes : 21        </span><br><span class="line"></span><br><span class="line">Destination&#x2F;Mask    Proto   Pre  Cost      Flags NextHop         Interface</span><br><span class="line"></span><br><span class="line">      10.0.0.4&#x2F;32   Direct  0    0           D   127.0.0.1       LoopBack0</span><br><span class="line">     10.10.1.0&#x2F;24   Direct  0    0           D   10.10.1.1       Vlanif100</span><br><span class="line">     10.10.1.1&#x2F;32   Direct  0    0           D   127.0.0.1       Vlanif100</span><br><span class="line">     10.10.2.0&#x2F;24   Direct  0    0           D   10.10.2.1       Vlanif200</span><br><span class="line">     10.10.2.1&#x2F;32   Direct  0    0           D   127.0.0.1       Vlanif200</span><br><span class="line">     10.10.3.0&#x2F;24   Direct  0    0           D   10.10.3.1       Vlanif300</span><br><span class="line">     10.10.3.1&#x2F;32   Direct  0    0           D   127.0.0.1       Vlanif300</span><br><span class="line">     10.20.1.0&#x2F;24   OSPF    10   3           D   10.100.10.1     Vlanif10</span><br><span class="line">     10.20.2.0&#x2F;24   OSPF    10   3           D   10.100.10.1     Vlanif10</span><br><span class="line">     10.20.3.0&#x2F;24   OSPF    10   3           D   10.100.10.1     Vlanif10</span><br><span class="line">     10.30.1.0&#x2F;24   OSPF    10   3           D   10.100.10.1     Vlanif10</span><br><span class="line">     10.30.2.0&#x2F;24   OSPF    10   3           D   10.100.10.1     Vlanif10</span><br><span class="line">     10.30.3.0&#x2F;24   OSPF    10   3           D   10.100.10.1     Vlanif10</span><br><span class="line">   10.100.10.0&#x2F;30   Direct  0    0           D   10.100.10.2     Vlanif10</span><br><span class="line">   10.100.10.2&#x2F;32   Direct  0    0           D   127.0.0.1       Vlanif10</span><br><span class="line">   10.100.20.0&#x2F;30   OSPF    10   2           D   10.100.10.1     Vlanif10</span><br><span class="line">   10.100.30.0&#x2F;30   OSPF    10   2           D   10.100.10.1     Vlanif10</span><br><span class="line">   10.200.10.0&#x2F;30   OSPF    10   2           D   10.100.10.1     Vlanif10</span><br><span class="line">   10.200.20.0&#x2F;30   OSPF    10   2           D   10.100.10.1     Vlanif10</span><br><span class="line">      127.0.0.0&#x2F;8   Direct  0    0           D   127.0.0.1       InLoopBack0</span><br><span class="line">      127.0.0.1&#x2F;32  Direct  0    0           D   127.0.0.1       InLoopBack0</span><br></pre></td></tr></table></figure>

<p>配置Totally NSSA区域后，汇聚层交换机集群上的非骨干区域路由表项如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HUAWEI&gt; display ip routing-table</span><br><span class="line">Route Flags: R - relay, D - download to fib</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">Routing Tables: Public</span><br><span class="line">         Destinations : 12        Routes : 12        </span><br><span class="line"></span><br><span class="line">Destination&#x2F;Mask    Proto   Pre  Cost      Flags NextHop         Interface</span><br><span class="line"></span><br><span class="line">       0.0.0.0&#x2F;0    OSPF    10   2           D   10.100.10.1     Vlanif10</span><br><span class="line">      10.0.0.4&#x2F;32   Direct  0    0           D   127.0.0.1       LoopBack0</span><br><span class="line">     10.10.1.0&#x2F;24   Direct  0    0           D   10.10.1.1       Vlanif100</span><br><span class="line">     10.10.1.1&#x2F;32   Direct  0    0           D   127.0.0.1       Vlanif100</span><br><span class="line">     10.10.2.0&#x2F;24   Direct  0    0           D   10.10.2.1       Vlanif200</span><br><span class="line">     10.10.2.1&#x2F;32   Direct  0    0           D   127.0.0.1       Vlanif200</span><br><span class="line">     10.10.3.0&#x2F;24   Direct  0    0           D   10.10.3.1       Vlanif300</span><br><span class="line">     10.10.3.1&#x2F;32   Direct  0    0           D   127.0.0.1       Vlanif300</span><br><span class="line">   10.100.10.0&#x2F;30   Direct  0    0           D   10.100.10.2     Vlanif10</span><br><span class="line">   10.100.10.2&#x2F;32   Direct  0    0           D   127.0.0.1       Vlanif10</span><br><span class="line">      127.0.0.0&#x2F;8   Direct  0    0           D   127.0.0.1       InLoopBack0</span><br><span class="line">      127.0.0.1&#x2F;32  Direct  0    0           D   127.0.0.1       InLoopBack0</span><br></pre></td></tr></table></figure>

<p>可以明显看出，配置Totally NSSA区域以后，Area 10的路由表的规模明显减小，说明在非骨区域通过配置Totally NSSA区域可以达到降低路由表项规模的作用。</p>
<h4 id="骨干区域的路由表项优化：非骨干区域IP子网规划和路由汇聚-1"><a href="#骨干区域的路由表项优化：非骨干区域IP子网规划和路由汇聚-1" class="headerlink" title="骨干区域的路由表项优化：非骨干区域IP子网规划和路由汇聚"></a>骨干区域的路由表项优化：非骨干区域IP子网规划和路由汇聚</h4><p>在非骨区域通过配置Totally NSSA区域后，非骨干区域内部路由器的路由表得到极大的精简并且减少了区域内部OSPF路由器之间的信息交互量。在骨干区域也需要作出适当的操作来达到同样的目的，这就要对非骨干区域使用的IP子网作出合理规划并在ABR进行汇总。</p>
<p><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_113206">图6-62</a>显示了Area 10作出合理的IP规划后往Area 0通告的路由汇总表项。</p>
<p><strong>图6-62</strong>  通过路由汇总实现骨干区域的路由表项优化<br><img src="http://support.huawei.com/enterprise/product/images/4c4b01155c2c4fbf9c732349e2a61ba0" alt="img" loading="lazy"></p>
<p>区域路由汇总会抑制明细路由条目的通告，这样Area 10的ABR就只会向Area 0内注入一条汇总路由10.10.0.0/16，这样可以精简骨干路由器路由表项，减少Area 0的OSPF报文交互量和保证其路由表的稳定。建议在设计OSPF网络时合理规划IP地址，以方便进行路由汇总。</p>
<p>路由汇总的配置以Area 10中的ABR（核心层交换机集群）为例，配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[HUAWEI] ospf 1  &#x2F;&#x2F;进入OSPF进程视图</span><br><span class="line">[HUAWEI-ospf-1] area 10  &#x2F;&#x2F;进入Area 10区域视图</span><br><span class="line">[HUAWEI-ospf-1-area-0.0.0.10] abr-summary 10.10.0.0 255.255.0.0  &#x2F;&#x2F;ABR进行路由汇总</span><br><span class="line">[HUAWEI-ospf-1-area-0.0.0.10] quit</span><br></pre></td></tr></table></figure>



<p> 说明：</p>
<p><strong>abr-summary</strong>命令只能在ABR上配置，区域内部路由器上不要使用此条命令，否则会造成路由表项错误。</p>
<p>路由汇总前，NE40E-1上的路由表项如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;NE40E-1&gt; display ip routing-table</span><br><span class="line">Route Flags: R - relay, D - download to fib</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">Routing Tables: Public</span><br><span class="line">         Destinations : 12        Routes : 12        </span><br><span class="line"></span><br><span class="line">Destination&#x2F;Mask    Proto   Pre  Cost      Flags NextHop         Interface</span><br><span class="line"></span><br><span class="line">      10.0.0.1&#x2F;32   Direct  0    0           D   127.0.0.1       LoopBack0</span><br><span class="line">     10.10.1.0&#x2F;24   OSPF    10   3           D   10.200.10.2     GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line">     10.10.2.0&#x2F;24   OSPF    10   3           D   10.200.10.2     GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line">     10.10.3.0&#x2F;24   OSPF    10   3           D   10.200.10.2     GigabitEthernet0&#x2F;0&#x2F;1</span><br></pre></td></tr></table></figure>

<p>路由汇总后，NE40E-1上的路由表项如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;NE40E-1&gt; display ip routing-table</span><br><span class="line">Route Flags: R - relay, D - download to fib</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">Routing Tables: Public</span><br><span class="line">         Destinations : 12        Routes : 12        </span><br><span class="line"></span><br><span class="line">Destination&#x2F;Mask    Proto   Pre  Cost      Flags NextHop         Interface</span><br><span class="line"></span><br><span class="line">      10.0.0.1&#x2F;32   Direct  0    0           D   127.0.0.1       LoopBack0</span><br><span class="line">     10.10.0.0&#x2F;16   OSPF    10   3           D   10.200.10.2     GigabitEthernet0&#x2F;0&#x2F;1</span><br></pre></td></tr></table></figure>

<p>可以看出，路由汇总之前骨干区域内有用户网段的明细路由。在ABR上配置路由汇总后，骨干区域的NE40E-1上只有一条16位掩码的汇总的用户网段路由。这样，在有很多用户网段的情况下，通过汇可以在很大程度上精简骨干区域的路由，减少骨干区域和非骨干区域的LSA交互数量，提高网络的稳定性。</p>
<h4 id="上行流量的引导：OSPF缺省路由的引入和选路优化-1"><a href="#上行流量的引导：OSPF缺省路由的引入和选路优化-1" class="headerlink" title="上行流量的引导：OSPF缺省路由的引入和选路优化"></a>上行流量的引导：OSPF缺省路由的引入和选路优化</h4><p>对于一个园区网络，很大一部分流量是流向Internet的，因此对于这种多出口的网络拓扑，引入缺省路由和多出口流量分担是必须要考虑的问题。</p>
<p>引入缺省路由的方式有多种，建议的做法是在ABR上通过OSPF“非强制”下发缺省路由来实现。OSPF“非强制”下发缺省路由，是指只有ABR自身的IP路由表中存在缺省路由的时候才能发布缺省路由，否则就不能发布。这样可以防止在特殊场景下产生环路或者次优路由。</p>
<p>在本例中两台ABR发布缺省路由后，核心层交换机集群会收到两条缺省路由，下一跳分别指向两个出口路由器。此时核心层交换机集群可以选择其中一条链路作为上行，也可以选择两条上行链路负载分担。具体如何分配流量，可以根据实际的网络情况灵活配置。核心层交换机集群的缺省路由和流量的走向如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_113207">图6-63</a>所示。</p>
<p><strong>图6-63</strong>  通过缺省路由引导核心层交换机集群的上行流量<br><img src="http://support.huawei.com/enterprise/product/images/fb1e65e32c534fff8faea1de9ef9ad00" alt="img" loading="lazy"></p>
<p>NE40E-1上发布缺省路由的配置如下，NE40E-2上的配置类似，不再赘述。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[NE40E-1] ip route-static 0.0.0.0 0.0.0.0 202.10.10.1  &#x2F;&#x2F;在NE40E-1上手工配置一条下一跳指向电信运营商的公网地址的缺省路由</span><br><span class="line">[NE40E-1] ospf 1  &#x2F;&#x2F;进入OSPF进程视图</span><br><span class="line">[NE40E-1-ospf-1] default-route-advertise  &#x2F;&#x2F;发布缺省路由，不携带always参数，即非强制下发缺省路由</span><br></pre></td></tr></table></figure>

<p>完成上述配置后，核心层交换机集群会学习到两条等价的缺省路由，如下所示。此时核心层交换机集群的上行流量将会采取负载分担的方式进行转发。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HUAWEI&gt; display ip routing-table</span><br><span class="line">Route Flags: R - relay, D - download to fib</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">Routing Tables: Public</span><br><span class="line">         Destinations : 23        Routes : 24        </span><br><span class="line"></span><br><span class="line">Destination&#x2F;Mask    Proto   Pre  Cost      Flags NextHop         Interface</span><br><span class="line"></span><br><span class="line">      10.0.0.1&#x2F;32   O_ASE   150  1           D   10.200.10.1     Vlanif40</span><br><span class="line">                    O_ASE   150  1           D   10.200.10.1     Vlanif50</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>如果用户想让核心层交换机集群上行的两条链路采取主备份的形式，正常情况下上行流量发送到NE40E-1，当NE40E-1发生故障时流量自动切换到NE40E-2，最简单直接的方法就是使用OSPF自身的选路机制，通过修改cost值来影响选路。</p>
<p>为了实现路由的主备份，可以修改核心层交换机集群到达NE40-2这条链路的cost，使得核心层交换机集群到达NE40-2这条链路的cost值大于核心层交换机集群到达NE40-1这条链路。</p>
<p>核心层交换机集群的配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[HUAWEI] interface vlanif 50  &#x2F;&#x2F;进入OSPF接口视图</span><br><span class="line">[HUAWEI-Vlanif50] ospf cost 10  &#x2F;&#x2F;修改该接口的OSPF cost值为10</span><br></pre></td></tr></table></figure>

<p>NE40E-2的配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[NE40E-2] interface gigabitethernet 0&#x2F;0&#x2F;1  &#x2F;&#x2F;进入OSPF接口视图</span><br><span class="line">[NE40E-2-GigabitEthernet0&#x2F;0&#x2F;1] ospf cost 10  &#x2F;&#x2F;修改该接口的OSPF cost值为10</span><br></pre></td></tr></table></figure>



<p> 说明：</p>
<p>如果需要调整cost值来影响OSPF的选路，则需要在链路两侧的设备上都调整cost值，否则会形成不对称路由，引起网络故障。</p>
<p>缺省情况下百兆带宽以上的链路OSPF的cost为1，将核心层交换机集群到NE40E-2之间的链路的OSPF cost值修改为10以后，核心层交换机集群将优选到NE40E-1的链路作为上行流量的出口。此时核心层交换机集群的IP路由表中将会仅存在一条指向NE40E-1的缺省路由，如下所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HUAWEI&gt; display ip routing-table</span><br><span class="line">Route Flags: R - relay, D - download to fib</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">Routing Tables: Public</span><br><span class="line">         Destinations : 23        Routes : 23        </span><br><span class="line"></span><br><span class="line">Destination&#x2F;Mask    Proto   Pre  Cost      Flags NextHop         Interface</span><br><span class="line"></span><br><span class="line">      10.0.0.1&#x2F;32   O_ASE   150  1           D   10.200.10.1     Vlanif40</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<h4 id="路由汇总场景下的防环设计：黑洞路由的使用-1"><a href="#路由汇总场景下的防环设计：黑洞路由的使用-1" class="headerlink" title="路由汇总场景下的防环设计：黑洞路由的使用"></a>路由汇总场景下的防环设计：黑洞路由的使用</h4><p>经过上述规划与部署，该网络已经具备基本的OSPF功能，路由表项也得到了优化。但是，该网络当前存在产生环路的风险，原因是路由汇总通常容易产生环路。</p>
<p>对于园区网来说，来自内部的网络攻击是很常见的。假设1号楼内的某台主机受到病毒攻击，这种攻击会导致主机遍历并访问10.0.0.0网段的IP地址。此时就有很大的风险产生环路。</p>
<p>假设主机访问10.10.50.1这个地址（1号楼实际上不存在这个地址）。环路产生的过程如下：</p>
<ol>
<li>主机发送数据包时，数据包会不发送至主机的网关，即1号楼的汇聚层交换机集群1。</li>
<li>汇聚层交换机集群1上不存在这个目的地址的明细路由，所以会匹配默认路由发送至核心层交换机集群。</li>
<li>由于10.10.50.1这个地址在整个园区网中根本不存在，所以数据包到达核心层交换机集群后只能匹配缺省路由，发送至NE40E-1。</li>
<li>NE40E-1上学习到的路由是核心层交换机集群通过路由汇总发布出去的，所以会匹配到10.10.0.0/16这条路由，所以数据包又重新发回核心层交换机集群。</li>
</ol>
<p>这样，核心层交换机集群和NE40E-1之间就形成了路由环路，如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_113208">图6-64</a>所示。一旦形成路由环路，将会严重影响网络的运行，甚至导致整网的瘫痪。所以做路由汇总的场景下，必须考虑如何防止路由环路。</p>
<p><strong>图6-64</strong>  路由环路<br><img src="http://support.huawei.com/enterprise/product/images/3ef4f0987d274d6c9acced469f57e57c" alt="img" loading="lazy"></p>
<p>形成路由环路的主要原因是在核心层交换机集群上把目的地址为一个园区网内不存在的地址的数据包匹配默认路由发送给和骨干区域，同时骨干区域又通过汇总的回程路由回送回来。</p>
<p>解决这个路由环路的方法就是在核心层交换机集群上阻断目的地址为一个园区网内不存在的地址的数据包，推荐使用的方法就是配置黑洞路由。配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[HUAWEI] ip route-static 10.10.0.0 255.255.0.0 NULL0</span><br></pre></td></tr></table></figure>

<p>配置黑洞路由后，回程到10.10.0.0这个网段的数据包都会由明细路由引导回到用户网段。如果找不到这个明细路由，则证明园区网内不存在这个主机地址。此时数据包就会匹配这条黑洞路由而被丢弃，从而防止产生路由环路。其他区域中也需要在配置路由汇总的同时配置黑洞路由用来防止路由环路的产生。</p>
<h4 id="OSPF网络基本安全：OSPF静默接口的使用-1"><a href="#OSPF网络基本安全：OSPF静默接口的使用-1" class="headerlink" title="OSPF网络基本安全：OSPF静默接口的使用"></a>OSPF网络基本安全：OSPF静默接口的使用</h4><p>完成上述部署后，整个OSPF网络已经能够正常的运行。但是这个网络存在一个较大的安全漏洞，即用户侧能够接收到OSPF的Hello报文，使用网络嗅探工具可以很轻易地获得基本的网络信息，并作出下一步的攻击行为。</p>
<p>为了实现OSPF网络的基本安全，推荐使用静默接口的方式来阻止发往用户的OSPF报文，如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_feature_ospf_113209">图6-65</a>所示。</p>
<p><strong>图6-65</strong>  使用静默接口阻止发往用户的OSPF报文<br><img src="http://support.huawei.com/enterprise/product/images/4e58271662bb4091ab3657d6bef4b9b8" alt="img" loading="lazy"></p>
<p>以Area 10中的汇聚层交换机集群1为例，静默接口的配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[HUAWEI] ospf 1</span><br><span class="line">[HUAWEI-ospf-1] silent-interface vlanif100</span><br><span class="line">[HUAWEI-ospf-1] silent-interface vlanif200</span><br><span class="line">[HUAWEI-ospf-1] silent-interface vlanif300</span><br></pre></td></tr></table></figure>



<p> 说明：</p>
<p><strong>silent-interface</strong>命令会禁止接口接收和发送OSPF报文，一般只用于用户侧接口上。应用于OSPF路由器之间的链路会导致OSPF邻居无法建立。</p>
<h2 id="6-5-配置任务概览"><a href="#6-5-配置任务概览" class="headerlink" title="6.5  配置任务概览"></a>6.5  配置任务概览</h2><p>完成配置OSPF的基本功能后，即可以实现通过OSPF协议构建三层网络。如果还需要OSPF的其他功能，还需要根据相应章节进行配置。</p>
<p>OSPF的配置任务如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ripng_1000_1_mMcCpPsS_tab_01">表6-16</a>所示。</p>
<p><strong>表6-16</strong>  OSPF配置任务概览</p>
<table>
<thead>
<tr>
<th>场景</th>
<th>描述</th>
<th>对应任务</th>
</tr>
</thead>
<tbody><tr>
<td>配置OSPF的基本功能</td>
<td>配置OSPF的基本功能是能够使用OSPF特性的前提。</td>
<td><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0004">6.8 配置OSPF的基本功能</a><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0009">6.9 配置OSPF邻居或邻接的会话参数</a><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0013">6.10 配置OSPF在不同网络类型中的属性</a></td>
</tr>
<tr>
<td>配置OSPF区域</td>
<td>STUB区域是一些特定的区域，STUB区域的ABR不传播它们接收到的自治系统外部路由，在这些区域中设备的路由表规模以及路由信息传递的数量都会大大减少。OSPF NSSA（Not-So-Stubby Area）区域是OSPF特殊的区域类型。NSSA区域与STUB区域有许多相似的地方，两者都不传播来自OSPF网络其它区域的外部路由。差别在于STUB区域不能引入外部路由，NSSA区域能够将自治域外部路由引入并传播到整个OSPF自治域中。</td>
<td><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0020">6.11 配置OSPF的Stub区域</a><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0024">6.12 配置OSPF的NSSA区域</a></td>
</tr>
<tr>
<td>调整OSPF的选路</td>
<td>为了在现网中更灵活的应用OSPF，满足用户的各种需求，可以通过配置不同的参数，实现对OSPF路由的控制。</td>
<td><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0025">6.13 调整OSPF的选路</a></td>
</tr>
<tr>
<td>控制OSPF的路由信息</td>
<td>在实际应用中，可以通过配置不同的参数，实现对OSPF路由信息的发布和接收进行更为精确的控制，以满足网络需要。</td>
<td><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0031">6.14 控制OSPF的路由信息</a></td>
</tr>
<tr>
<td>配置OSPF网络的快速收敛</td>
<td>当需要OSPF快速感知网络中的变化时，可以配置加快OSPF网络的收敛速度。当需要减少防止路由震荡对网络的影响、减轻设备负担时，可以配置减慢OSPF网络的收敛速度。</td>
<td><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0050">6.17 配置OSPF网络的快速收敛</a></td>
</tr>
<tr>
<td>提高OSPF网络可靠性</td>
<td>配置指定进程或指定接口的BDF for OSPF特性，可以快速检测链路的状态，故障检测时间可以达到毫秒级，提高链路状态变化时OSPF的收敛速度。配置OSPF GR可以避免流量中断和主备板切换带来的路由震荡。</td>
<td><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0044">6.15 配置OSPF与BFD联动</a><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_vrp_cfg_016259">6.18 配置OSPF GR</a></td>
</tr>
<tr>
<td>提高OSPF网络的稳定性</td>
<td>在实际应用中，可以通过提高OSPF网络的稳定性来使得OSPF网络路由振荡少，并且让设备常时间工作在正常的环境下。</td>
<td><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0063">6.19 提高OSPF网络的稳定性</a></td>
</tr>
<tr>
<td>提高OSPF网络的安全性</td>
<td>如果将OSPF部署在安全性较高的网络中，可以通过配置OSPF认证特性和GTSM机制来提高OSPF网络的安全性。</td>
<td><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0071">6.20 提高OSPF网络的安全性</a></td>
</tr>
</tbody></table>
<h2 id="6-6-配置注意事项"><a href="#6-6-配置注意事项" class="headerlink" title="6.6  配置注意事项"></a>6.6  配置注意事项</h2><p>介绍OSPF的配置注意事项。</p>
<h3 id="涉及网元"><a href="#涉及网元" class="headerlink" title="涉及网元"></a>涉及网元</h3><p>需要其他网元支持OSPF协议。</p>
<h3 id="License支持"><a href="#License支持" class="headerlink" title="License支持"></a>License支持</h3><p>本特性是交换机的基本特性，无需获得License许可即可应用此功能。</p>
<h3 id="版本支持"><a href="#版本支持" class="headerlink" title="版本支持"></a>版本支持</h3><p><strong>表6-17</strong>  产品形态和软件版本支持情况</p>
<table>
<thead>
<tr>
<th>系列</th>
<th>产品</th>
<th>支持版本</th>
</tr>
</thead>
<tbody><tr>
<td>S1700</td>
<td>S1720GFR</td>
<td>不支持</td>
</tr>
<tr>
<td>S1720GW-E、S1720GWR-E</td>
<td>V200R010C00、V200R011C00、V200R011C10</td>
<td></td>
</tr>
<tr>
<td>S1720X-E</td>
<td>V200R011C00、V200R011C10</td>
<td></td>
</tr>
<tr>
<td>S2700</td>
<td>S2700SI</td>
<td>不支持</td>
</tr>
<tr>
<td>S2700EI</td>
<td>不支持</td>
<td></td>
</tr>
<tr>
<td>S2710SI</td>
<td>不支持</td>
<td></td>
</tr>
<tr>
<td>S2720EI</td>
<td>V200R011C10</td>
<td></td>
</tr>
<tr>
<td>S2750EI</td>
<td>不支持</td>
<td></td>
</tr>
<tr>
<td>S3700</td>
<td>S3700SI</td>
<td>不支持</td>
</tr>
<tr>
<td>S3700EI</td>
<td>V100R005C01、V100R006（C00&amp;C01&amp;C03&amp;C05）</td>
<td></td>
</tr>
<tr>
<td>S3700HI</td>
<td>V100R006C01、V200R001C00</td>
<td></td>
</tr>
<tr>
<td>S5700</td>
<td>S5700LI/S5700S-LI</td>
<td>不支持</td>
</tr>
<tr>
<td>S5710-C-LI</td>
<td>不支持</td>
<td></td>
</tr>
<tr>
<td>S5710-X-LI</td>
<td>不支持</td>
<td></td>
</tr>
<tr>
<td>S5700SI</td>
<td>不支持</td>
<td></td>
</tr>
<tr>
<td>S5700EI</td>
<td>V100R005C01、V100R006（C00&amp;C01）、V200R001（C00&amp;C01）、V200R002C00、V200R003C00、V200R005（C00&amp;C01&amp;C02&amp;C03）</td>
<td></td>
</tr>
<tr>
<td>S5710EI</td>
<td>V200R001C00、V200R002C00、V200R003C00、V200R005（C00&amp;C02）</td>
<td></td>
</tr>
<tr>
<td>S5720EI</td>
<td>V200R007C00、V200R008C00、V200R009C00、V200R010C00、V200R011C00、V200R011C10</td>
<td></td>
</tr>
<tr>
<td>S5720LI/S5720S-LI</td>
<td>V200R010C00、V200R011C00、V200R011C10</td>
<td></td>
</tr>
<tr>
<td>S5720SI/S5720S-SI</td>
<td>V200R008C00、V200R009C00、V200R010C00、V200R011C00、V200R011C10</td>
<td></td>
</tr>
<tr>
<td>S5730SI</td>
<td>V200R011C10</td>
<td></td>
</tr>
<tr>
<td>S5730S-EI</td>
<td>V200R011C10</td>
<td></td>
</tr>
<tr>
<td>S5700HI</td>
<td>V100R006C01、V200R001（C00&amp;C01）、V200R002C00、V200R003C00、V200R005（C00SPC500&amp;C01&amp;C02）</td>
<td></td>
</tr>
<tr>
<td>S5710HI</td>
<td>V200R003C00、V200R005（C00&amp;C02&amp;C03）</td>
<td></td>
</tr>
<tr>
<td>S5720HI</td>
<td>V200R006C00、V200R007（C00&amp;C10）、V200R008C00、V200R009C00、V200R010C00、V200R011C00、V200R011C10</td>
<td></td>
</tr>
<tr>
<td>S6700</td>
<td>S6700EI</td>
<td>V100R006C00、V200R001（C00&amp;C01）、V200R002C00、V200R003C00、V200R005（C00&amp;C01&amp;C02）</td>
</tr>
<tr>
<td>S6720EI</td>
<td>V200R008C00、V200R009C00、V200R010C00、V200R011C00、V200R011C10</td>
<td></td>
</tr>
<tr>
<td>S6720S-EI</td>
<td>V200R009C00、V200R010C00、V200R011C00、V200R011C10</td>
<td></td>
</tr>
<tr>
<td>S6720SI、S6720S-SI</td>
<td>V200R011C00、V200R011C10</td>
<td></td>
</tr>
<tr>
<td>S6720LI、S6720S-LI</td>
<td>V200R011C00、V200R011C10</td>
<td></td>
</tr>
</tbody></table>
<p> 说明：</p>
<p>如需了解交换机软件配套详细信息，请参见<a href="http://support.huawei.com/onlinetoolsweb/select-x7/cn/x7/index_version_search.html">华为交换机版本配套速查</a>。</p>
<h3 id="特性依赖和限制"><a href="#特性依赖和限制" class="headerlink" title="特性依赖和限制"></a>特性依赖和限制</h3><p>无</p>
<h2 id="6-7-缺省配置"><a href="#6-7-缺省配置" class="headerlink" title="6.7  缺省配置"></a>6.7  缺省配置</h2><p>介绍OSPF的缺省配置，实际应用的配置可以基于缺省配置进行修改。</p>
<p>OSPF的缺省配置如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#tab_dc_cfg_ospf_000301">表6-18</a>所示。</p>
<p><strong>表6-18</strong>  OSPF缺省配置</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>缺省值</th>
</tr>
</thead>
<tbody><tr>
<td>OSPF特性</td>
<td>不使能</td>
</tr>
<tr>
<td>Hello报文发送间隔</td>
<td>P2P、Broadcast类型接口为10秒；P2MP、NBMA类型接口为30秒</td>
</tr>
<tr>
<td>邻居失效时间</td>
<td>P2P、Broadcast类型接口为40秒；P2MP、NBMA类型接口为120秒</td>
</tr>
<tr>
<td>Stub router保持时间</td>
<td>500秒</td>
</tr>
<tr>
<td>计算接口开销的带宽参考值</td>
<td>100Mbit/s</td>
</tr>
</tbody></table>
<h2 id="6-8-配置OSPF的基本功能"><a href="#6-8-配置OSPF的基本功能" class="headerlink" title="6.8  配置OSPF的基本功能"></a>6.8  配置OSPF的基本功能</h2><p>配置完OSPF的基本功能，就可以组建起最基本的OSPF网络。</p>
<h3 id="应用环境"><a href="#应用环境" class="headerlink" title="应用环境"></a>应用环境</h3><p>在同一区域内配置多台交换机时，大多数的配置数据（如定时器、过滤、聚合等）都应该以区域为单位进行统一规划。错误的配置可能会导致相邻交换机之间无法相互传递信息，甚至导致路由信息的阻塞或者自环。</p>
<p>在接口视图下配置的OSPF命令不受OSPF是否使能的限制。在关闭OSPF后，原来在接口下配置的相关命令仍然存在。</p>
<h3 id="前置任务"><a href="#前置任务" class="headerlink" title="前置任务"></a>前置任务</h3><p>在配置OSPF的基本功能之前，需完成以下任务：</p>
<ul>
<li>配置接口的网络层地址，使各相邻节点网络层可达。</li>
</ul>
<h3 id="6-8-1-创建OSPF进程"><a href="#6-8-1-创建OSPF进程" class="headerlink" title="6.8.1  创建OSPF进程"></a>6.8.1  创建OSPF进程</h3><h4 id="背景信息"><a href="#背景信息" class="headerlink" title="背景信息"></a>背景信息</h4><p>一台交换机如果要运行OSPF协议，必须存在Router ID。交换机的Router ID是一个32比特无符号整数，是一台交换机在自治系统中的唯一标识。为保证OSPF运行的稳定性，在进行网络规划时应该确定Router ID的划分并手工配置。</p>
<h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> | <strong>router-id</strong> <em>router-id</em> | <strong>vpn-instance</strong> <em>vpn-instance-name</em> ] *，启动OSPF进程，进入OSPF视图。</p>
</li>
</ol>
<ul>
<li><p><em>process-id</em>为进程号，缺省值为1。</p>
<p>交换机支持OSPF多进程，可以根据业务类型划分不同的进程。进程号是本地概念，不影响与其它交换机之间的报文交换。因此，不同的交换机之间，即使进程号不同也可以进行报文交换。</p>
</li>
<li><p><strong>router-id</strong> <em>router-id</em>为交换机的ID号。</p>
<p>缺省情况下，交换机系统会从当前接口的IP地址中自动选取一个最大值作为Router ID。手动配置Router ID时，必须保证自治系统中任意两台Router ID都不相同。通常的做法是将Router ID配置为与该设备某个接口的IP地址一致。</p>
</li>
</ul>
<pre><code>  说明：

 每个OSPF进程的Router ID要保证在OSPF网络中唯一，否则会导致邻居不能正常建立、路由信息不正确的问题。建议在OSPF设备上单独为每个OSPF进程配置全网唯一的Router ID。</code></pre>
<ul>
<li><p><strong>vpn-instance</strong> <em>vpn-instance-name</em>表示VPN实例。</p>
<p>如果指定了VPN实例，那么此OSPF进程属于指定的VPN实例，如果未指定则属于公网实例。</p>
</li>
</ul>
<h3 id="6-8-2-创建OSPF区域"><a href="#6-8-2-创建OSPF区域" class="headerlink" title="6.8.2  创建OSPF区域"></a>6.8.2  创建OSPF区域</h3><h4 id="背景信息-1"><a href="#背景信息-1" class="headerlink" title="背景信息"></a>背景信息</h4><p>随着网络规模日益扩大，设备数量的增多会导致LSDB非常庞大，导致设备负担很重。OSPF协议通过将自治系统划分成不同的区域（Area）来解决上述问题。区域是从逻辑上将设备划分为不同的组，每个组用区域号（Area ID）来标识。区域的边界是设备，而不是链路。一个网段（链路）只能属于一个区域，或者说每个运行OSPF的接口必须指明属于哪一个区域。</p>
<h4 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> | <strong>router-id</strong> <em>router-id</em> | <strong>vpn-instance</strong> <em>vpn-instance-name</em> ] *，启动OSPF进程，进入OSPF视图。</p>
</li>
<li><p>执行命令<strong>area</strong> <em>area-id</em>，创建并进入OSPF区域视图。</p>
</li>
</ol>
<p>   并非所有的区域都是平等的关系。其中区域号（Area ID）是0的称为骨干区域。骨干区域负责区域之间的路由，非骨干区域之间的路由信息必须通过骨干区域来转发。</p>
<h3 id="6-8-3-使能OSPF"><a href="#6-8-3-使能OSPF" class="headerlink" title="6.8.3  使能OSPF"></a>6.8.3  使能OSPF</h3><h4 id="背景信息-2"><a href="#背景信息-2" class="headerlink" title="背景信息"></a>背景信息</h4><p>创建OSPF进程后，还需要配置区域所包含的网段。一个网段只能属于一个区域，或者说每个运行OSPF协议的接口必须指明属于某一个特定的区域。该处的网段是指运行OSPF协议接口的IP地址所在的网段。</p>
<p>OSPF需要对接收到的Hello报文做网络掩码检查，当接收到的Hello报文中携带的网络掩码和本设备不一致时，则丢弃这个Hello报文，即不能建立邻居关系。</p>
<h4 id="操作步骤-2"><a href="#操作步骤-2" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>area</strong> <em>area-id</em>，进入OSPF区域视图。</p>
</li>
</ol>
<p>   可以在OSPF区域和指定接口中使能OSPF。</p>
<ul>
<li>在OSPF区域中使能OSPF。</li>
</ul>
<ol>
<li>执行命令<strong>network</strong> <em>ip-address</em> <em>wildcard-mask</em>，配置区域所包含的网段。</li>
</ol>
<pre><code>  满足下面两个条件，接口上才能正常运行OSPF协议：

  - 接口的IP地址掩码长度≥**network**命令指定的掩码长度。
  - 接口的主IP地址必须在**network**命令指定的网段范围内。

  缺省情况下，OSPF以32位主机路由的方式对外发布Loopback接口的IP地址，与Loopback接口上配置的掩码长度无关。如果要发布Loopback接口的网段路由，需要在接口下配置网络类型为NBMA或广播型。请参考[配置接口的网络类型](http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&amp;partNo=10092#dc_cfg_ospf_0014)。</code></pre>
<ul>
<li>在指定接口中使能OSPF。</li>
</ul>
<ol>
<li><p>在系统视图中执行命令<strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，进入接口视图。</p>
</li>
<li><p>（可选）对于以太网接口，执行命令<strong>undo portswitch</strong>，配置接口切换到三层模式。</p>
<p>缺省情况下，以太网接口处于二层模式。</p>
</li>
</ol>
<pre><code>   说明：

  仅S5720HI、S5720EI、S6720EI和S6720S-EI支持二层模式与三层模式切换。</code></pre>
<ol start="3">
<li>执行命令<strong>ospf enable</strong> [ <em>process-id</em> ] <strong>area</strong> <em>area-id</em>，在接口上使能OSPF。</li>
</ol>
<pre><code>  区域ID可以采用十进制整数或IPv4地址形式输入，但显示时使用IPv4地址形式。</code></pre>
<h3 id="6-8-4-（可选）创建虚连接"><a href="#6-8-4-（可选）创建虚连接" class="headerlink" title="6.8.4  （可选）创建虚连接"></a>6.8.4  （可选）创建虚连接</h3><h4 id="背景信息-3"><a href="#背景信息-3" class="headerlink" title="背景信息"></a>背景信息</h4><p>在划分OSPF区域之后，非骨干区域之间的OSPF路由更新是通过骨干区域来交换完成的。因此，OSPF要求所有非骨干区域必须与骨干区域保持连通，并且骨干区域之间也要保持连通。但在实际应用中，因为各方面条件的限制，可能无法满足这个要求，这时可以通过配置OSPF虚连接解决。</p>
<p>请在运行OSPF协议的设备上进行以下配置。</p>
<h4 id="操作步骤-3"><a href="#操作步骤-3" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>area</strong> <em>area-id</em>，进入OSPF区域视图。</p>
</li>
<li><p>执行命令<strong>vlink-peer</strong> <em>router-id</em> [ <strong>smart-discover</strong> | <strong>hello</strong> <em>hello-interval</em> | <strong>retransmit</strong> <em>retransmit-interval</em> | <strong>trans-delay</strong> <em>trans-delay-interval</em> | <strong>dead</strong> <em>dead-interval</em> | [ <strong>simple</strong> [ <strong>plain</strong> <em>plain-text</em> | [ <strong>cipher</strong> ] <em>cipher-text</em> ] | { <strong>md5</strong> | <strong>hmac-md5</strong> | <strong>hmac-sha256</strong> } [ <em>key-id</em> { <strong>plain</strong> <em>plain-text</em> | [ <strong>cipher</strong> ] <em>cipher-text</em> } ] | <strong>authentication-null</strong> | <strong>keychain</strong> <em>keychain-name</em> ] ] *，创建并配置虚连接。</p>
</li>
</ol>
<p>   在虚连接的另一端也需要配置此命令。</p>
<p>   <img src="http://support.huawei.com/enterprise/product/images/5bf7fc7c2b06498782a61a01fdd10e10" alt="img" loading="lazy"> 注意：</p>
<p>   如果使用<strong>plain</strong>选项，密码将以明文形式保存在配置文件中，存在安全隐患。建议使用<strong>cipher</strong>选项，将密码加密保存。</p>
<p>   MD5和HMAC-MD5认证模式存在风险，推荐使用HMAC-SHA256认证模式。</p>
<pre><code>说明：</code></pre>
<p>   仅S6720EI、S6720S-EI、S5720HI和S5720EI支持<strong>keychain</strong> <em>keychain-name</em>参数。</p>
<h4 id="后续处理"><a href="#后续处理" class="headerlink" title="后续处理"></a>后续处理</h4><p>建立虚连接后，不同的设备制造商可能会使用不同的MTU（maximum transmission unit）缺省设置。为了保证一致，应该设置接口发送DD报文时MTU值为缺省值0。参见<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0011">使能在DD报文中填充接口的实际MTU</a>。</p>
<h3 id="6-8-5-（可选）配置对OSPF更新LSA的泛洪限制"><a href="#6-8-5-（可选）配置对OSPF更新LSA的泛洪限制" class="headerlink" title="6.8.5  （可选）配置对OSPF更新LSA的泛洪限制"></a>6.8.5  （可选）配置对OSPF更新LSA的泛洪限制</h3><h4 id="背景信息-4"><a href="#背景信息-4" class="headerlink" title="背景信息"></a>背景信息</h4><p>当邻居数量或者需要泛洪的LSA报文数量较多时，邻居路由器会在短时间内收到大量的更新报文。如果邻居路由器不能及时处理这些突发的大量报文，则有可能因为忙于处理更新报文而丢弃了维护邻居关系的Hello报文，造成邻居断开。而重建邻居时，需要交互的报文数量将会更大，由此导致报文数量过大的情况进一步恶化。通过对OSPF更新LSA的泛洪限制可以有效避免以上情况的发生，起到了维护邻居关系的目的。</p>
<p>请在运行OSPF协议的交换机上进行以下配置。</p>
<h4 id="操作步骤-4"><a href="#操作步骤-4" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>flooding-control</strong> [ <strong>number</strong> <em>transmit-number</em> | <strong>timer-interval</strong> <em>transmit-interval</em> ] *，配置对OSPF更新LSA的泛洪限制。</p>
</li>
</ol>
<p>   缺省情况下，每次泛洪更新LSA的数量的缺省值是50，泛洪更新LSA的时间间隔是30秒。</p>
<p>   配置<strong>flooding-control</strong>命令后，控制对OSPF更新LSA的泛洪的这个功能立刻生效。</p>
<p>   若没有配置<strong>flooding-control</strong>命令，当邻居数量超过256个时自动使能该功能。</p>
<h3 id="6-8-6-检查配置结果"><a href="#6-8-6-检查配置结果" class="headerlink" title="6.8.6  检查配置结果"></a>6.8.6  检查配置结果</h3><h4 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h4><p>已经完成OSPF基本功能的所有配置。</p>
<h4 id="操作步骤-5"><a href="#操作步骤-5" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li>在任意视图下执行<strong>display ospf</strong> [ <em>process-id</em> ] <strong>peer</strong>命令，查看OSPF邻居的信息。</li>
<li>在任意视图下执行<strong>display ospf</strong> [ <em>process-id</em> ] <strong>interface</strong>命令，查看OSPF接口的信息。</li>
<li>在任意视图下执行<strong>display ospf</strong> [ <em>process-id</em> ] <strong>routing</strong>命令，查看OSPF路由表的信息。</li>
<li>在任意视图下执行<strong>display ospf</strong> [ <em>process-id</em> ] <strong>lsdb</strong>命令，查看OSPF的LSDB信息。</li>
</ul>
<h2 id="6-9-配置OSPF邻居或邻接的会话参数"><a href="#6-9-配置OSPF邻居或邻接的会话参数" class="headerlink" title="6.9  配置OSPF邻居或邻接的会话参数"></a>6.9  配置OSPF邻居或邻接的会话参数</h2><p>OSPF网络中，所有链路状态信息都在邻居或邻接中传递、交换。配置合理的OSPF邻居或邻接关系的会话参数，对整网的稳定性起着重要作用。</p>
<h3 id="前置任务-1"><a href="#前置任务-1" class="headerlink" title="前置任务"></a>前置任务</h3><p>在配置OSPF邻居或邻接关系的会话参数之前，需完成以下任务：</p>
<ul>
<li>配置链路层协议。</li>
<li>配置接口的网络层地址，使各相邻节点网络层可达。</li>
<li><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0004">6.8 配置OSPF的基本功能</a>。</li>
</ul>
<h3 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h3><p>以下配置任务（不含检查配置结果），根据应用环境选择其中一项或几项进行配置。</p>
<h3 id="6-9-1-配置OSPF报文重传限制"><a href="#6-9-1-配置OSPF报文重传限制" class="headerlink" title="6.9.1  配置OSPF报文重传限制"></a>6.9.1  配置OSPF报文重传限制</h3><h4 id="背景信息-5"><a href="#背景信息-5" class="headerlink" title="背景信息"></a>背景信息</h4><p>OSPF</p>
<p>交换机</p>
<p>发送完以下这三种报文后，若没有在规定时间内收到相应的LSAck报文，会再次重传。当达到限定报文重传次数后，本端就断开和对方的邻接关系。</p>
<ul>
<li>DD报文</li>
<li>LSU报文</li>
<li>LSR报文</li>
</ul>
<h4 id="操作步骤-6"><a href="#操作步骤-6" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>retransmission-limit</strong> [ <em>max-number</em> ]，配置OSPF重传限制功能。</p>
</li>
</ol>
<p>   缺省情况下，不使能此功能。最大重传限制数的缺省值是30。</p>
<h3 id="6-9-2-使能在DD报文中填充接口的实际MTU"><a href="#6-9-2-使能在DD报文中填充接口的实际MTU" class="headerlink" title="6.9.2  使能在DD报文中填充接口的实际MTU"></a>6.9.2  使能在DD报文中填充接口的实际MTU</h3><h4 id="背景信息-6"><a href="#背景信息-6" class="headerlink" title="背景信息"></a>背景信息</h4><p>建立虚连接后，不同的设备制造商可能会使用不同的MTU缺省设置。为了保证一致，应该设置接口发送DD报文时MTU值为缺省值0。</p>
<h4 id="操作步骤-7"><a href="#操作步骤-7" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，进入运行OSPF协议的接口视图。</p>
</li>
<li><p>（可选）对于以太网接口，执行命令<strong>undo portswitch</strong>，配置接口切换到三层模式。</p>
</li>
</ol>
<p>   缺省情况下，以太网接口处于二层模式。</p>
<pre><code>说明：</code></pre>
<p>   仅S5720HI、S5720EI、S6720EI和S6720S-EI支持二层模式与三层模式切换。</p>
<ol start="4">
<li>执行命令<strong>ospf mtu-enable</strong>，使能接口发送DD报文时填充MTU值，同时还会检查邻居DD报文所携带的MTU是否超过本端的MTU值。</li>
</ol>
<p>   缺省情况下，接口发送DD报文的MTU值为0。</p>
<p>   <img src="http://support.huawei.com/enterprise/product/images/5bf7fc7c2b06498782a61a01fdd10e10" alt="img" loading="lazy"> 注意：</p>
<p>   当配置DD报文MTU值后，会引起邻居关系重新建立。</p>
<h3 id="6-9-3-检查配置结果"><a href="#6-9-3-检查配置结果" class="headerlink" title="6.9.3  检查配置结果"></a>6.9.3  检查配置结果</h3><h4 id="前提条件-1"><a href="#前提条件-1" class="headerlink" title="前提条件"></a>前提条件</h4><p>已经完成配置OSPF邻居或邻接的会话参数的所有配置。</p>
<h4 id="操作步骤-8"><a href="#操作步骤-8" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>peer</strong>命令查看OSPF邻居的信息。</li>
<li>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>brief</strong>命令查看OSPF的概要信息。</li>
<li>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>retrans-queue</strong> [ <em>interface-type</em> <em>interface-number</em> ] [ <em>neighbor-id</em> ] [ <strong>low-level-of-retrans-times-range</strong> <em>min-time</em> ] [ <strong>high-level-of-retrans-times-range</strong> <em>max-time</em> ]命令查看OSPF重传列表。</li>
</ul>
<h2 id="6-10-配置OSPF在不同网络类型中的属性"><a href="#6-10-配置OSPF在不同网络类型中的属性" class="headerlink" title="6.10  配置OSPF在不同网络类型中的属性"></a>6.10  配置OSPF在不同网络类型中的属性</h2><p>通过配置OSPF接口的网络类型和调整属性，可以灵活组建OSPF网络。</p>
<h3 id="应用环境-1"><a href="#应用环境-1" class="headerlink" title="应用环境"></a>应用环境</h3><p>OSPF根据链路层协议类型将网络分为四种不同的类型。如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#tab_dc_vrp_cfg_01621601">表6-19</a>所示。</p>
<p><strong>表6-19</strong>  OSPF的网络类型和特点</p>
<table>
<thead>
<tr>
<th>网络类型</th>
<th>特点</th>
<th>缺省选择</th>
</tr>
</thead>
<tbody><tr>
<td>广播类型（Broadcast）</td>
<td>在该类型的网络中，通常以组播形式发送Hello报文、LSU报文和LSAck报文，以单播形式发送DD报文和LSR报文。</td>
<td>当链路层协议是Ethernet、FDDI时，缺省情况下，OSPF认为网络类型是Broadcast。</td>
</tr>
<tr>
<td>NBMA类型（Non-broadcast multiple access）</td>
<td>在该类型的网络中，以单播形式发送Hello报文、DD报文、LSR报文、LSU报文、LSAck报文。NBMA网络必须是全连通的，即网络中任意两台交换机之间都必须直接可达。</td>
<td>当链路层协议是ATM时，缺省情况下，OSPF认为网络类型是NBMA。</td>
</tr>
<tr>
<td>点到点P2P类型（point-to-point）</td>
<td>在该类型的网络中，以组播形式发送Hello报文、DD报文、LSR报文、LSU报文、LSAck报文。</td>
<td>当链路层协议是PPP、HDLC和LAPB时，缺省情况下，OSPF认为网络类型是P2P。</td>
</tr>
<tr>
<td>点到多点P2MP类型（Point-to-Multipoint）</td>
<td>在该类型的网络中：以组播形式发送Hello报文，以单播形式发送DD报文、LSR报文、LSU报文、LSAck报文。</td>
<td>没有一种链路层协议会被缺省的认为是P2MP类型，P2MP必须是由其他的网络类型强制更改的。</td>
</tr>
</tbody></table>
<p>由<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#tab_dc_vrp_cfg_01621601">表6-19</a>可以看出，OSPF协议在上述四种网络类型中的差异主要集中在发送报文形式不同，因此，在四种网络类型中配置的OSPF协议，配置差异主要体现在协议报文的发送形式的配置。</p>
<h3 id="前置任务-2"><a href="#前置任务-2" class="headerlink" title="前置任务"></a>前置任务</h3><p>在配置OSPF在不同网络类型中的属性之前，需完成以下任务：</p>
<ul>
<li>配置接口的网络层地址，使各相邻节点网络层可达。</li>
<li><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0004">6.8 配置OSPF的基本功能</a>。</li>
</ul>
<h3 id="配置流程-1"><a href="#配置流程-1" class="headerlink" title="配置流程"></a>配置流程</h3><p>配置接口的网络类型是配置P2MP和NBMA网络属性的前置任务。</p>
<h3 id="6-10-1-配置接口的网络类型"><a href="#6-10-1-配置接口的网络类型" class="headerlink" title="6.10.1  配置接口的网络类型"></a>6.10.1  配置接口的网络类型</h3><h4 id="背景信息-7"><a href="#背景信息-7" class="headerlink" title="背景信息"></a>背景信息</h4><p>下面三种情况是配置接口网络类型的最常见情况：</p>
<ul>
<li>P2MP网络类型：由于P2MP不存在于链路层协议中，所以P2MP都是由其他网络类型强制更改的。</li>
<li>NBMA网络类型：由于NBMA网络必须是全连通的，所以网络中任意两台交换机之间都必须直接可达。但在很多情况下，这个要求无法满足，这时就需要通过命令强制改变网络的类型。</li>
<li>广播网络类型：为了提高建立邻居速度，可以将广播类型网络更改为P2P网络。</li>
</ul>
<h4 id="操作步骤-9"><a href="#操作步骤-9" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，进入运行OSPF的接口视图。</p>
</li>
<li><p>（可选）对于以太网接口，执行命令<strong>undo portswitch</strong>，配置接口切换到三层模式。</p>
</li>
</ol>
<p>   缺省情况下，以太网接口处于二层模式。</p>
<pre><code>说明：</code></pre>
<p>   仅S5720HI、S5720EI、S6720EI和S6720S-EI支持二层模式与三层模式切换。</p>
<ol start="4">
<li>执行命令<strong>ospf network-type</strong> { <strong>broadcast</strong> | <strong>nbma</strong> | <strong>p2mp</strong> | <strong>p2p</strong> [ <strong>peer-ip-ignore</strong> ] }，配置OSPF接口的网络类型。</li>
</ol>
<p>   缺省情况下，接口的网络类型根据物理接口而定。以太网接口的网络类型为广播。</p>
<p>   当用户为接口配置了新的网络类型后，原接口的网络类型将被替换。</p>
<p>   根据实际情况配置接口的网络类型，例如：</p>
<ul>
<li>如果接口的网络类型是广播，但在广播网络上有不支持组播地址的交换机，可以将接口的网络类型改为NBMA网络。</li>
<li>如果接口的网络类型是NBMA，且网络是全连通的，即任意两台交换机都直接可达。此时，可以将接口类型改为广播网络，并且不必再配置邻居路由器。</li>
<li>如果接口的网络类型是NBMA，但网络不是全连通的，必须将接口的网络类型改为P2MP。这样，两台不能直接可达的交换机就可以通过一台与两者都直接可达的交换机来交换路由信息。接口的网络类型改为P2MP网络后，不必再配置邻居交换机。</li>
<li>如果同一网段内只有两台交换机运行OSPF协议，建议将接口的网络类型改为P2P网络。</li>
</ul>
<pre><code>说明：</code></pre>
<p>   OSPF协议不支持NULL接口的配置。</p>
<h3 id="6-10-2-配置P2MP网络属性"><a href="#6-10-2-配置P2MP网络属性" class="headerlink" title="6.10.2  配置P2MP网络属性"></a>6.10.2  配置P2MP网络属性</h3><h4 id="操作步骤-10"><a href="#操作步骤-10" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>配置忽略对网络掩码的检查。</p>
<ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，进入接口视图。</p>
</li>
<li><p>（可选）对于以太网接口，执行命令<strong>undo portswitch</strong>，配置接口切换到三层模式。</p>
<p>缺省情况下，以太网接口处于二层模式。</p>
</li>
</ol>
</li>
</ol>
<pre><code>   说明：

  仅S5720HI、S5720EI、S6720EI和S6720S-EI支持二层模式与三层模式切换。</code></pre>
<ol start="4">
<li>执行命令<strong>ospf network-type</strong> <strong>p2mp</strong>，配置OSPF接口的网络类型。</li>
</ol>
<pre><code>  P2MP网络类型必须是由其他的网络类型强制更改的。详细描述参见[配置接口的网络类型](http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&amp;partNo=10092#dc_cfg_ospf_0014)。</code></pre>
<ol start="5">
<li><p>执行命令<strong>ospf p2mp-mask-ignore</strong>命令，配置在P2MP网络上忽略对网络掩码的检查。</p>
</li>
<li><p>执行命令<strong>quit</strong>，退出接口视图。</p>
</li>
</ol>
<ol start="2">
<li>（可选）配置P2MP网络上到指定邻居所需的开销值。</li>
</ol>
<p>   缺省情况下，P2MP网络上到指定邻居所需的开销值等于接口的开销值，当需要修改此开销值时，可以通过<strong>p2mp-peer</strong>命令进行配置。</p>
<ol>
<li>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</li>
<li>执行命令<strong>p2mp-peer</strong> <em>ip-address</em> <strong>cost</strong> <em>cost</em>，配置P2MP网络上到指定邻居所需的开销值。</li>
</ol>
<ol start="3">
<li>配置对发送的LSA进行过滤。</li>
</ol>
<p>   当两台交换机之间存在多条链路时，通过对出方向的LSA进行过滤可以在某些链路上过滤LSA的传送，减少不必要的重传，节省带宽资源。</p>
<ol>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>filter-lsa-out peer</strong> <em>ip-address</em> { <strong>all</strong> | { <strong>summary</strong> [ <strong>acl</strong> { <em>acl-number</em> | <em>acl-name</em> } ] | <strong>ase</strong> [ <strong>acl</strong> { <em>acl-number</em> | <em>acl-name</em> } ] | <strong>nssa</strong> [ <strong>acl</strong> { <em>acl-number</em> | <em>acl-name</em> } ] } * }，配置在P2MP网络中对发送的LSA进行过滤。</p>
</li>
</ol>
<pre><code>  缺省情况下，不对LSA进行过滤。</code></pre>
<h3 id="6-10-3-配置NBMA网络属性"><a href="#6-10-3-配置NBMA网络属性" class="headerlink" title="6.10.3  配置NBMA网络属性"></a>6.10.3  配置NBMA网络属性</h3><h4 id="操作步骤-11"><a href="#操作步骤-11" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>（可选）配置NBMA网络类型。</li>
</ol>
<p>   由于NBMA网络必须是全连通的，所以网络中任意两台交换机之间都必须直接可达。但在很多情况下，这个要求无法满足，此时必须通过命令强制改变网络的类型为P2MP。详细描述参见<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0014">配置接口的网络类型</a>。</p>
<ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，进入接口视图。</p>
</li>
<li><p>（可选）对于以太网接口，执行命令<strong>undo portswitch</strong>，配置接口切换到三层模式。</p>
<p>缺省情况下，以太网接口处于二层模式。</p>
</li>
</ol>
<pre><code>   说明：

  仅S5720HI、S5720EI、S6720EI和S6720S-EI支持二层模式与三层模式切换。</code></pre>
<ol start="4">
<li>执行命令<strong>ospf network-type</strong> <strong>nbma</strong>，配置OSPF接口的网络类型为NBMA。</li>
</ol>
<ol start="2">
<li>（可选）配置NBMA网络发送轮询报文的时间间隔。</li>
</ol>
<p>   在NBMA网络上，当邻居失效后，交换机将按设置的轮询时间间隔定期地发送Hello报文。</p>
<ol>
<li>执行命令<strong>ospf timer poll</strong> <em>interval</em>，在NBMA接口上配置发送轮询报文的时间间隔。</li>
</ol>
<pre><code>  缺省情况下，时间间隔*interval*为120秒。</code></pre>
<ol start="3">
<li>配置NBMA网络的邻居。</li>
</ol>
<p>   网络类型为NBMA的接口，无法通过广播Hello报文的形式发现邻居交换机，必须在接口上手工配置邻居交换机的IP地址和邻居交换机是否有选举权。</p>
<ol>
<li>执行命令<strong>quit</strong>，退出接口视图。</li>
<li>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</li>
<li>执行命令<strong>peer</strong> <em>ip-address</em> [ <strong>dr-priority</strong> <em>priority</em> ]，配置NBMA网络的邻居。</li>
</ol>
<h3 id="6-10-4-检查配置结果"><a href="#6-10-4-检查配置结果" class="headerlink" title="6.10.4  检查配置结果"></a>6.10.4  检查配置结果</h3><h4 id="前提条件-2"><a href="#前提条件-2" class="headerlink" title="前提条件"></a>前提条件</h4><p>已经完成OSPF在NBMA网络和P2MP网络中的属性的所有配置。</p>
<h4 id="操作步骤-12"><a href="#操作步骤-12" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li>使用以下命令查看OSPF的LSDB信息：</li>
</ul>
<ul>
<li><strong>display ospf</strong> [ <em>process-id</em> ] <strong>lsdb</strong> [ <strong>brief</strong> ]</li>
<li><strong>display ospf</strong> [ <em>process-id</em> ] <strong>lsdb</strong> [ { <strong>router</strong> | <strong>network</strong> | <strong>summary</strong> | <strong>asbr</strong> | <strong>ase</strong> | <strong>nssa</strong> | <strong>opaque-link</strong> | <strong>opaque-area</strong> | <strong>opaque-as</strong> } [ <em>link-state-id</em> ] ] [ <strong>originate</strong>-<strong>router</strong> [ <em>advertising-router-id</em> ] | <strong>self</strong>-<strong>originate</strong> ] [ <strong>age</strong> { <strong>min-value</strong> <em>min-age-value</em> | <strong>max-value</strong> <em>max-age-value</em> } * ]</li>
</ul>
<ul>
<li><p>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>peer</strong> [ [ <em>interface-type</em> <em>interface-number</em> ] <em>neighbor-id</em> | <strong>brief</strong> | <strong>last-nbr-down</strong> ]命令查看OSPF邻居的信息。</p>
</li>
<li><p>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>nexthop</strong>查看OSPF的下一跳信息。</p>
</li>
<li><p>使用以下命令查看OSPF的路由表信息：</p>
</li>
</ul>
<ul>
<li><strong>display ospf</strong> [ <em>process-id</em> ] <strong>routing</strong> [ <em>ip-address</em> [ <em>mask</em> | <em>mask-length</em> ] ] [ <strong>interface</strong> <em>interface-type</em> <em>interface-number</em> ] [ <strong>nexthop</strong> <em>nexthop-address</em> ]</li>
<li><strong>display ospf</strong> [ <em>process-id</em> ] <strong>routing</strong> <strong>router-id</strong> [ <em>router-id</em> ]</li>
</ul>
<ul>
<li>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>interface</strong> [ <strong>all</strong> | <em>interface-type</em> <em>interface-number</em> ] [ <strong>verbose</strong> ]查看OSPF的接口信息。</li>
</ul>
<h2 id="6-11-配置OSPF的Stub区域"><a href="#6-11-配置OSPF的Stub区域" class="headerlink" title="6.11  配置OSPF的Stub区域"></a>6.11  配置OSPF的Stub区域</h2><p>通过将位于AS边缘的一些非骨干区域配置成Stub，可以缩减LSDB和路由表规模，减少需要传递的路由信息数量。</p>
<h3 id="应用环境-2"><a href="#应用环境-2" class="headerlink" title="应用环境"></a>应用环境</h3><p>OSPF划分区域可以减少网络中LSA的数量。对于位于自治系统边界的非骨干区域，为了更多的缩减其路由表规模和降低LSA的数量，可以将它们配置为STUB区域。</p>
<p>STUB区域是一种可选的配置属性。</p>
<p>配置STUB区域时需要注意以下几点：</p>
<ul>
<li>骨干区域（Area0）不能配置成STUB区域。</li>
<li>如果要将一个区域配置成STUB区域，则该区域中的所有路由器都要配置STUB区域属性。</li>
<li>STUB区域内不能存在ASBR，即自治系统外部的路由不能在STUB区域内传播。</li>
<li>STUB区域内不能存在虚连接。</li>
</ul>
<h3 id="前置任务-3"><a href="#前置任务-3" class="headerlink" title="前置任务"></a>前置任务</h3><p>在配置OSPF的Stub区域前，需完成以下任务：</p>
<ul>
<li>配置接口的网络层地址，使各相邻节点网络层可达。</li>
<li><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0004">6.8 配置OSPF的基本功能</a>。</li>
</ul>
<h3 id="配置流程-2"><a href="#配置流程-2" class="headerlink" title="配置流程"></a>配置流程</h3><p><strong>图6-66</strong>  OSPF的Stub区域配置流程图<br><img src="http://support.huawei.com/enterprise/product/images/02e1c47ef46e4fd080b6ebdb038d065d" alt="img" loading="lazy"></p>
<h3 id="6-11-1-配置当前区域为Stub区域"><a href="#6-11-1-配置当前区域为Stub区域" class="headerlink" title="6.11.1  配置当前区域为Stub区域"></a>6.11.1  配置当前区域为Stub区域</h3><h4 id="操作步骤-13"><a href="#操作步骤-13" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>area</strong> <em>area-id</em>，进入OSPF区域视图。</p>
</li>
<li><p>执行命令<strong>stub</strong> [ <strong>no-summary</strong> | <strong>default-route-advertise</strong> <strong>backbone-peer-ignore</strong> ] *，配置当前区域为STUB区域。</p>
</li>
</ol>
<p>   <strong>no-summary</strong>用来禁止ABR向Stub区域内发送Type-3 LSA（Summary LSA）。</p>
<p>   <strong>default-route-advertise</strong>用来在ABR上配置产生缺省的Type-3 LSA到Stub区域。</p>
<p>   <strong>backbone-peer-ignore</strong>用来忽略检查骨干区域的邻居状态。即骨干区域中只要存在Up状态的接口，无论是否存在Full状态的邻居，ABR都会产生缺省的Type-3 LSA到Stub区域。</p>
<pre><code>说明：</code></pre>
<ul>
<li>所有连接到STUB区域的交换机必须使用<strong>stub</strong>命令将该区域配置成STUB区域属性。</li>
<li>配置或取消STUB属性，会触发区域更新。只有在上一次区域更新完成后，才能进行再次配置或取消配置操作。</li>
</ul>
<h3 id="6-11-2-（可选）配置发送到Stub区域缺省路由的开销"><a href="#6-11-2-（可选）配置发送到Stub区域缺省路由的开销" class="headerlink" title="6.11.2  （可选）配置发送到Stub区域缺省路由的开销"></a>6.11.2  （可选）配置发送到Stub区域缺省路由的开销</h3><h4 id="操作步骤-14"><a href="#操作步骤-14" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>area</strong> <em>area-id</em>，进入OSPF区域视图。</p>
</li>
<li><p>执行命令<strong>stub</strong> [ <strong>no-summary</strong> | <strong>default-route-advertise</strong> <strong>backbone-peer-ignore</strong> ] *，配置当前区域为STUB区域。</p>
</li>
</ol>
<p>   <strong>no-summary</strong>用来禁止ABR向Stub区域内发送Type-3 LSA（Summary LSA）。</p>
<p>   <strong>default-route-advertise</strong>用来在ABR上配置产生缺省的Type-3 LSA到Stub区域。</p>
<p>   <strong>backbone-peer-ignore</strong>用来忽略检查骨干区域的邻居状态。即骨干区域中只要存在Up状态的接口，无论是否存在Full状态的邻居，ABR都会产生缺省的Type-3 LSA到Stub区域。</p>
<pre><code>说明：</code></pre>
<ul>
<li>所有连接到STUB区域的交换机必须使用<strong>stub</strong>命令将该区域配置成STUB区域属性。</li>
<li>配置或取消STUB属性，会触发区域更新。只有在上一次区域更新完成后，才能进行再次配置或取消配置操作。</li>
</ul>
<ol start="5">
<li>执行命令<strong>default-cost</strong> <em>cost</em>，配置发送到Stub区域缺省路由的开销。</li>
</ol>
<p>   <em>cost</em>为发送到Stub区域的Type3缺省路由的开销，缺省值为1。</p>
<p>   当区域配置为STUB区域后，为保证到自治系统外的路由可达，STUB区域的ABR将生成一条缺省路由，并发布给STUB区域中的其他交换机。</p>
<h3 id="6-11-3-检查配置结果"><a href="#6-11-3-检查配置结果" class="headerlink" title="6.11.3  检查配置结果"></a>6.11.3  检查配置结果</h3><h4 id="操作步骤-15"><a href="#操作步骤-15" class="headerlink" title="操作步骤"></a>操作步骤</h4><p>使用以下命令查看OSPF的LSDB信息：</p>
<ul>
<li><strong>display ospf</strong> [ <em>process-id</em> ] <strong>lsdb</strong> [ <strong>brief</strong> ]</li>
<li><strong>display ospf</strong> [ <em>process-id</em> ] <strong>lsdb</strong> [ { <strong>router</strong> | <strong>network</strong> | <strong>summary</strong> | <strong>asbr</strong> | <strong>ase</strong> | <strong>nssa</strong> | <strong>opaque-link</strong> | <strong>opaque-area</strong> | <strong>opaque-as</strong> } [ <em>link-state-id</em> ] ] [ <strong>originate</strong>-<strong>router</strong> [ <em>advertising-router-id</em> ] | <strong>self</strong>-<strong>originate</strong> ] [ <strong>age</strong> { <strong>min-value</strong> <em>min-age-value</em> | <strong>max-value</strong> <em>max-age-value</em> } *]</li>
</ul>
<p>使用以下命令查看OSPF路由表的信息：</p>
<ul>
<li><strong>display ospf</strong> [ <em>process-id</em> ] <strong>routing</strong> [ <em>ip-address</em> [ <em>mask</em> | <em>mask-length</em> ] ] [ <strong>interface</strong> <em>interface-type</em> <em>interface-number</em> ] [ <strong>nexthop</strong> <em>nexthop-address</em> ]</li>
<li><strong>display ospf</strong> [ <em>process-id</em> ] <strong>routing</strong> <strong>router-id</strong> [ <em>router-id</em> ]</li>
</ul>
<p>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>abr-asbr</strong> [ <em>router-id</em> ]命令查看OSPF ABR及ASBR信息。</p>
<h2 id="6-12-配置OSPF的NSSA区域"><a href="#6-12-配置OSPF的NSSA区域" class="headerlink" title="6.12  配置OSPF的NSSA区域"></a>6.12  配置OSPF的NSSA区域</h2><p>通过将位于自治系统边缘的非骨干区域配置成NSSA区域，可以缩减其路由表规模，减少需要传递的路由信息数量。</p>
<h3 id="应用环境-3"><a href="#应用环境-3" class="headerlink" title="应用环境"></a>应用环境</h3><p>NSSA区域适用于既需要引入外部路由又要避免外部路由带来的资源消耗的场景。</p>
<p>OSPF NSSA（Not-So-Stubby Area）区域是OSPF特殊的区域类型。NSSA区域与STUB区域有许多相似的地方，两者都不传播来自OSPF网络其它区域的外部路由。差别在于STUB区域是不能引入外部路由，NSSA区域能够将自治域外部路由引入并传播到整个OSPF自治域中。</p>
<p>在NSSA区域中使用Type7 LSA描述引入的外部路由信息。Type7 LSA由NSSA区域的自治域边界路由器（ASBR）产生，其扩散范围仅限于边界路由器所在的NSSA区域。NSSA区域的区域边界路由器（ABR）收到Type7 LSA时，会有选择地将其转化为Type5 LSA，以便将外部路由信息通告到OSPF网络的其它区域。</p>
<h3 id="前置任务-4"><a href="#前置任务-4" class="headerlink" title="前置任务"></a>前置任务</h3><p>在配置OSPF的NSSA区域之前，需完成以下任务：</p>
<ul>
<li>配置接口的网络层地址，使相邻节点之间网络层可达。</li>
<li><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0004">6.8 配置OSPF的基本功能</a>。</li>
</ul>
<h4 id="操作步骤-16"><a href="#操作步骤-16" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>area</strong> <em>area-id</em>，进入OSPF区域视图。</p>
</li>
<li><p>执行命令<strong>nssa</strong> [ { <strong>default-route-advertise</strong> [ <strong>backbone-peer-ignore</strong> ] | <strong>suppress-default-route</strong> } | <strong>flush-waiting-timer</strong> <em>interval-value</em> | <strong>no-import-route</strong> | <strong>no-summary</strong> | <strong>set-n-bit</strong> | <strong>suppress-forwarding-address</strong> | <strong>translator-always</strong> | <strong>translator-interval</strong> <em>interval-value</em> | <strong>zero-address-forwarding</strong> | <strong>translator-strict</strong> ]*，配置当前区域为NSSA区域。</p>
</li>
</ol>
<pre><code>说明：</code></pre>
<ul>
<li><p>所有连接到NSSA区域的设备必须使用<strong>nssa</strong>命令将该区域配置成NSSA属性。</p>
</li>
<li><p>配置或取消NSSA属性，会触发区域更新，邻居中断。只有在上一次区域更新完成后，才能进行再次配置或取消配置操作。</p>
<p>nssa</p>
<p>命令参数的使用场景如下：</p>
</li>
<li><p><strong>default-route-advertise</strong>用来在ASBR上配置产生缺省的Type7 LSA到NSSA区域。</p>
<p>在ABR上无论路由表中是否存在缺省路由0.0.0.0/0，都会产生Type7 LSA缺省路由。在ASBR上只有当路由表中存在缺省路由0.0.0.0/0，才会产生Type7 LSA缺省路由。</p>
</li>
<li><p>当ASBR所在的区域被配置成NSSA时，在LSA洪泛区域中的其他交换机上仍会保留已经没用的Type5 LSA，这些LSA必须等到老化时间到达3600秒后才会被删除。由于大量的LSA会占用交换机内存，所以对设备的性能造成了一定影响。此时，通过配置<strong>flush-waiting-timer</strong>参数产生老化时间被置为最大值（3600秒）的Type5 LSA，及时清除其他交换机上已经没用的Type5 LSA。</p>
</li>
</ul>
<pre><code>  说明：

 - 当LSA报文头部的LS age（老化时间）达到3600秒时，该LSA会被删除。
 - 当ASBR同时还是ABR时，**flush-waiting-timer**功能不会生效，防止删除非NSSA区域的Type5 LSA。</code></pre>
<ul>
<li><p>当ASBR同时还是ABR时，通过配置<strong>no-import-route</strong>参数使OSPF通过<strong>import-route</strong>命令引入的外部路由不被通告到NSSA区域。</p>
</li>
<li><p>为了继续减少发送到NSSA区域的LSA的数量，可以配置ABR的</p>
<p>no-summary</p>
<p>属性，禁止ABR向NSSA区域内发送Summary LSA（Type3 LSA）。</p>
</li>
</ul>
<pre><code>  说明：

 配置**nssa** **default-route-advertise** **backbone-peer-ignore** **no-summary**命令后，骨干区域中只要存在Up状态的接口，无论是否存在Full状态的邻居，ABR会同时产生缺省的Type-7 LSA和缺省的Type-3 LSA，且缺省的Type-3 LSA优先生效。</code></pre>
<ul>
<li><p>设置了<strong>set-n-bit</strong>关键字后，交换机会与邻居交换机同步时在DD报文中设置N-bit位的标志。</p>
</li>
<li><p>当NSSA区域中有多个ABR时，系统会根据规则自动选择一个ABR作为转换器（通常情况下NSSA区域选择Router ID最大的设备），将Type7 LSA转换为Type5 LSA。通过在ABR上配置<strong>translator-always</strong>参数，可以将某一个ABR指定为转换器。如果需要指定某两个ABR进行负载分担，可以通过配置<strong>translator-always</strong>来指定两个转换器同时工作。如果需要某一个固定的转换器，防止由于转换器变动引起的LSA重新泛洪，可以预先使用此命令指定。</p>
</li>
<li><p><strong>translator-interval</strong>参数主要用于转换器切换过程，保障切换平滑进行。所以<em>interval-value</em>参数的缺省间隔要大于泛洪的时间。</p>
</li>
</ul>
<ol start="5">
<li>（可选）执行命令<strong>default-cost</strong> <em>cost</em>，配置ABR发送到NSSA区域的Type3 LSA的缺省路由的开销。</li>
</ol>
<p>   当区域配置为NSSA区域后，为保证到自治系统外的路由可达，NSSA区域的ABR将生成一条缺省路由，并发布给NSSA区域中的其他交换机。配置NSSA区域的缺省路由的开销，调整缺省路由的选路。</p>
<p>   缺省路由也可以通过Type7 LSA来表示，用于指导流量流向其它自治域。</p>
<p>   在NSSA区域中，可能同时存在多个边界路由器。为了防止路由环路产生，边界路由器之间不计算对方发布的缺省路由。</p>
<p>   缺省情况下，ABR发送到NSSA区域的缺省路由的开销为1。</p>
<h3 id="检查配置结果"><a href="#检查配置结果" class="headerlink" title="检查配置结果"></a>检查配置结果</h3><p>使用以下命令查看OSPF的LSDB信息：</p>
<ul>
<li><strong>display ospf</strong> [ <em>process-id</em> ] <strong>lsdb</strong> [ <strong>brief</strong> ]</li>
<li><strong>display ospf</strong> [ <em>process-id</em> ] <strong>lsdb</strong> [ { <strong>router</strong> | <strong>network</strong> | <strong>summary</strong> | <strong>asbr</strong> | <strong>ase</strong> | <strong>nssa</strong> | <strong>opaque-link</strong> | <strong>opaque-area</strong> | <strong>opaque-as</strong> } [ <em>link-state-id</em> ] ] [ <strong>originate</strong>-<strong>router</strong> [ <em>advertising-router-id</em> ] | <strong>self</strong>-<strong>originate</strong> ] [ <strong>age</strong> { <strong>min-value</strong> <em>min-age-value</em> | <strong>max-value</strong> <em>max-age-value</em> } *]</li>
</ul>
<p>使用以下命令查看OSPF的路由表信息：</p>
<ul>
<li><strong>display ospf</strong> [ <em>process-id</em> ] <strong>routing</strong> [ <em>ip-address</em> [ <em>mask</em> | <em>mask-length</em> ] ] [ <strong>interface</strong> <em>interface-type</em> <em>interface-number</em> ] [ <strong>nexthop</strong> <em>nexthop-address</em> ]</li>
<li><strong>display ospf</strong> [ <em>process-id</em> ] <strong>routing</strong> <strong>router-id</strong> [ <em>router-id</em> ]</li>
</ul>
<p>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>interface</strong> [ <strong>all</strong> | <em>interface-type</em> <em>interface-number</em> ] [ <strong>verbose</strong> ]命令查看OSPF的接口信息。</p>
<h2 id="6-13-调整OSPF的选路"><a href="#6-13-调整OSPF的选路" class="headerlink" title="6.13  调整OSPF的选路"></a>6.13  调整OSPF的选路</h2><p>通过调整OSPF选路，使得网络以满足复杂环境中的需要。</p>
<h3 id="应用环境-4"><a href="#应用环境-4" class="headerlink" title="应用环境"></a>应用环境</h3><p>在复杂网络环境，通过调整OSPF的功能参数来达到灵活组网、优化网络负载分担。</p>
<h3 id="前置任务-5"><a href="#前置任务-5" class="headerlink" title="前置任务"></a>前置任务</h3><p>在调整OSPF的选路之前，需完成以下任务：</p>
<ul>
<li>配置接口的网络层地址，使各相邻节点网络层可达。</li>
<li><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0004">6.8 配置OSPF的基本功能</a>。</li>
</ul>
<h3 id="配置流程-3"><a href="#配置流程-3" class="headerlink" title="配置流程"></a>配置流程</h3><p>以下配置任务（不含检查配置结果），根据应用环境选择其中一项或几项进行配置。</p>
<h3 id="6-13-1-配置OSPF的接口开销"><a href="#6-13-1-配置OSPF的接口开销" class="headerlink" title="6.13.1  配置OSPF的接口开销"></a>6.13.1  配置OSPF的接口开销</h3><h4 id="背景信息-8"><a href="#背景信息-8" class="headerlink" title="背景信息"></a>背景信息</h4><p>OSPF既可以根据接口的带宽自动计算其链路开销值，也可以通过命令配置。</p>
<p>如果没有通过<strong>ospf cost</strong> <em>cost</em>命令配置OSPF接口的开销值，OSPF会根据该接口的带宽自动计算其开销值。计算公式为：接口开销=带宽参考值/接口带宽，取计算结果的整数部分作为接口开销值（当结果小于1时取1）。通过改变带宽参考值可以间接改变接口的开销值。</p>
<h4 id="操作步骤-17"><a href="#操作步骤-17" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li><p>配置OSPF接口的开销值</p>
<ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，进入运行OSPF的接口视图。</p>
</li>
<li><p>（可选）对于以太网接口，执行命令<strong>undo portswitch</strong>，配置接口切换到三层模式。</p>
<p>缺省情况下，以太网接口处于二层模式。</p>
</li>
</ol>
</li>
</ul>
<pre><code>  说明：

 仅S5720HI、S5720EI、S6720EI和S6720S-EI支持二层模式与三层模式切换。</code></pre>
<ol start="4">
<li>执行命令<strong>ospf cost</strong> <em>cost</em>，设置OSPF接口的开销值。</li>
</ol>
<ul>
<li><p>配置带宽参考值</p>
<ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>bandwidth-reference</strong> <em>value</em>，配置带宽参考值。</p>
</li>
</ol>
</li>
</ul>
<pre><code> *value*为计算链路开销时所依据的参考值，单位是Mbit/s。



  说明：

 在配置带宽参考值时请注意，必须保证该进程中所有交换机的带宽参考值一致。</code></pre>
<h3 id="6-13-2-配置等价路由"><a href="#6-13-2-配置等价路由" class="headerlink" title="6.13.2  配置等价路由"></a>6.13.2  配置等价路由</h3><h4 id="背景信息-9"><a href="#背景信息-9" class="headerlink" title="背景信息"></a>背景信息</h4><p>当网络中到达同一目的地存在同一路由协议发现的多条路由，且这几条路由的开销值也相同，那么这些路由就是等价路由，可以实现负载分担。</p>
<p>例如，如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_cfg_ospf_011501">图6-67</a>所示。交换机A和交换机B之间的三条路由都运行OSPF协议，且几条路由的开销值也相同，那么这三条路由就是等价路由，形成了负载分担。</p>
<p><strong>图6-67</strong>  等价路由组网图<br><img src="http://support.huawei.com/enterprise/product/images/8b1576ffe3c94d419fc4efb4900385cb" alt="img" loading="lazy"></p>
<h4 id="操作步骤-18"><a href="#操作步骤-18" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>maximum load-balancing</strong> <em>number</em>，配置最大等价路由数量。</p>
</li>
</ol>
<pre><code>说明：</code></pre>
<p>   缺省情况下，S6720SI、S6720S-SI、S5720S-SI和S5720SI最大等价路由条数为8，S5720EI、S5720HI、S6720S-EI和S6720EI最大等价路由条数为16。</p>
<ol start="4">
<li>（可选）执行命令<strong>nexthop</strong> <em>ip-address</em> <strong>weight</strong> <em>value</em>，配置OSPF的负载分担优先级。</li>
</ol>
<p>   当组网中存在的等价路由数量大于<strong>maximum load-balancing</strong>命令配置的等价路由数量时，会随机选取有效路由进行负载分担。如果需要指定负载分担的有效路由，可以通过<strong>nexthop</strong>命令配置路由的优先级，将需要指定的有效路由的优先级设置为高。</p>
<p>   <strong>weight</strong>值越小，路由优先级越高。<strong>weight</strong>的缺省值是255，表示等价路由间进行负载分担，不区分优先级。</p>
<h3 id="6-13-3-配置路由选择规则"><a href="#6-13-3-配置路由选择规则" class="headerlink" title="6.13.3  配置路由选择规则"></a>6.13.3  配置路由选择规则</h3><h4 id="背景信息-10"><a href="#背景信息-10" class="headerlink" title="背景信息"></a>背景信息</h4><p>由于RFC2328与RFC1583定义的路由选路规则不同，因此使能OSPF后，根据实际设备支持的路由选路的定义情况（支持RFC2328或支持RFC1583）配置OSPF域的路由选路规则。默认支持RFC1583，当设备支持的是RFC2328时，需要将RFC1583配置成RFC2328，使OSPF路由域中的所有设备配置为同一种路由选路规则。</p>
<h4 id="操作步骤-19"><a href="#操作步骤-19" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>undo rfc1583 compatible</strong>，将RFC1583配置成RFC2328，配置OSPF域的路由选路规则。</p>
</li>
</ol>
<p>   缺省情况下，交换机支持RFC1583的选路规则。</p>
<h3 id="6-13-4-检查配置结果"><a href="#6-13-4-检查配置结果" class="headerlink" title="6.13.4  检查配置结果"></a>6.13.4  检查配置结果</h3><h4 id="前提条件-3"><a href="#前提条件-3" class="headerlink" title="前提条件"></a>前提条件</h4><p>已经完成OSPF路由属性的所有配置。</p>
<h4 id="操作步骤-20"><a href="#操作步骤-20" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>interface</strong>命令查看OSPF接口的信息。</li>
<li>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>routing</strong>命令查看OSPF路由表的信息。</li>
</ul>
<h2 id="6-14-控制OSPF的路由信息"><a href="#6-14-控制OSPF的路由信息" class="headerlink" title="6.14  控制OSPF的路由信息"></a>6.14  控制OSPF的路由信息</h2><p>控制OSPF路由信息包括引入外部路由以及对路由、LSA的过滤。</p>
<h3 id="前置任务-6"><a href="#前置任务-6" class="headerlink" title="前置任务"></a>前置任务</h3><p>在控制OSPF的路由信息之前，需完成以下任务：</p>
<ul>
<li>配置接口的网络层地址，使各相邻节点网络层可达。</li>
<li><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0004">6.8 配置OSPF的基本功能</a>。</li>
</ul>
<h3 id="配置流程-4"><a href="#配置流程-4" class="headerlink" title="配置流程"></a>配置流程</h3><p>以下配置任务（不含检查配置结果），根据应用环境选择其中一项或几项进行配置。</p>
<h3 id="6-14-1-配置OSPF引入外部路由"><a href="#6-14-1-配置OSPF引入外部路由" class="headerlink" title="6.14.1  配置OSPF引入外部路由"></a>6.14.1  配置OSPF引入外部路由</h3><h4 id="背景信息-11"><a href="#背景信息-11" class="headerlink" title="背景信息"></a>背景信息</h4><p>当OSPF网络中的设备需要访问运行其他协议的网络中的设备时，需要将其他协议的路由引入到OSPF网络中。</p>
<p>OSPF是一个无环路的动态路由协议，但这是针对域内路由和域间路由而言的，其对引入的外部路由环路没有很好的防范机制，所以在配置OSPF引入外部路由时一定要慎重，防止手工配置引起的环路。</p>
<p>请在运行OSPF协议的自治系统边界交换机ASBR上进行以下配置。</p>
<h4 id="操作步骤-21"><a href="#操作步骤-21" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li><p>配置OSPF引入其它协议的路由</p>
<ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>import-route</strong> { <strong>limit</strong> <em>limit-number</em> | { <strong>bgp</strong> [ <strong>permit-ibgp</strong> ] | <strong>direct</strong> | <strong>unr</strong> | <strong>rip</strong> [ <em>process-id-rip</em> ] | <strong>static</strong> | <strong>isis</strong> [ <em>process-id-isis</em> ] | <strong>ospf</strong> [ <em>process-id-ospf</em> ] } [ <strong>cost</strong> <em>cost</em> | <strong>type</strong> <em>type</em> | <strong>tag</strong> <em>tag</em> | <strong>route-policy</strong> <em>route-policy-name</em> ] * }，引入其它协议的路由信息。</p>
</li>
</ol>
</li>
</ul>
<pre><code>  说明：

 仅S6720EI、S6720S-EI、S5720HI、S5720EI、S6720SI、S6720S-SI、S5720SI和S5720S-SI支持**bgp** [ **permit-ibgp** ]参数和**isis** [ *process-id-isis* ]参数。</code></pre>
<ul>
<li><p>配置OSPF引入路由时的相关参数</p>
<ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>default</strong> { <strong>cost</strong> { <em>cost-value</em> | <strong>inherit-metric</strong> } | <strong>limit</strong> <em>limit</em> | <strong>tag</strong> <em>tag</em> | <strong>type</strong> <em>type</em> } *，配置引入路由时的参数缺省值（路由度量、标记、类型）。</p>
</li>
</ol>
</li>
</ul>
<pre><code> 当OSPF引入外部路由时，可以配置一些额外参数的缺省值，如开销、路由数量、标记和类型。路由标记可以用来标识协议相关的信息，如OSPF接收BGP时用来区分自治系统的编号。

 缺省情况下，OSPF引入外部路由的缺省度量值为1，引入的外部路由类型为Type2，设置缺省标记值为1。



  说明：

 可以通过以下三条命令设置引入路由的开销值，其优先级依次递减：

 - 通过**apply cost**命令设置的路由开销值。
 - 通过**import-route**命令设置的引入路由开销值。
 - 通过**default**命令设置引入路由的缺省开销值。</code></pre>
<h3 id="6-14-2-配置OSPF将缺省路由通告到OSPF路由区域"><a href="#6-14-2-配置OSPF将缺省路由通告到OSPF路由区域" class="headerlink" title="6.14.2  配置OSPF将缺省路由通告到OSPF路由区域"></a>6.14.2  配置OSPF将缺省路由通告到OSPF路由区域</h3><h4 id="背景信息-12"><a href="#背景信息-12" class="headerlink" title="背景信息"></a>背景信息</h4><p>OSPF实际组网应用中，区域边界和自治系统边界通常都是由多个交换机组成的多出口冗余备份或者负载分担。此时，为了减少路由表的容量，可以配置缺省路由，保证网络的高可用性。</p>
<p>OSPF缺省路由通常应用于下面两种情况：</p>
<ol>
<li>由区域边界交换机（ABR）发布Type3 LSA，用来指导区域内路由器进行区域之间报文的转发。</li>
<li>由自治系统边界交换机（ASBR）发布Type5 LSA或Type7 LSA，用来指导OSPF路由域内路由器进行域外报文的转发。</li>
</ol>
<p>当路由器无精确匹配的路由时，就可以通过缺省路由进行报文转发。</p>
<p>Type3 LSA缺省路由的优先级要高于Type5 LSA或Type7 LSA路由。</p>
<p>OSPF缺省路由的发布方式取决于引入缺省路由的区域类型。如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#tab_dc_vrp_cfg_01623101">表6-20</a>所示。</p>
<p><strong>表6-20</strong>  缺省路由发布方式</p>
<table>
<thead>
<tr>
<th>区域类型</th>
<th>产生条件</th>
<th>发布方式</th>
<th>产生LSA的类型</th>
<th>泛洪范围</th>
</tr>
</thead>
<tbody><tr>
<td>普通区域</td>
<td>通过<strong>default-route-advertise</strong>命令配置</td>
<td>ASBR发布</td>
<td>Type5 LSA</td>
<td>普通区域</td>
</tr>
<tr>
<td>STUB区域</td>
<td>自动产生</td>
<td>ABR发布</td>
<td>Type3 LSA</td>
<td>STUB区域</td>
</tr>
<tr>
<td>NSSA区域</td>
<td>通过<strong>nssa</strong> [ <strong>default-route-advertise</strong> ]</td>
<td>ASBR发布</td>
<td>Type7 LSA</td>
<td>NSSA区域</td>
</tr>
<tr>
<td>完全NSSA区域</td>
<td>自动产生</td>
<td>ABR发布</td>
<td>Type3 LSA</td>
<td>NSSA区域</td>
</tr>
</tbody></table>
<p>请在运行OSPF协议的自治系统边界交换机ASBR上进行以下配置。</p>
<h4 id="操作步骤-22"><a href="#操作步骤-22" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li><p>配置OSPF将缺省路由通告到OSPF路由区域</p>
<ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>请根据实际情况选择以下配置。</p>
</li>
</ol>
</li>
</ul>
<pre><code> - 如果要将缺省路由通告到OSPF路由区域，则执行命令**default-route-advertise** [ [ **always** | **permit-calculate-other** ] | **cost** *cost* | **type** *type* | **route-policy** *route-policy-name* [ **match-any** ] ] *。
   - **always**表示无论本机是否存在激活的非本OSPF进程的缺省路由，都会产生并发布一个描述缺省路由的LSA。
   - **permit-calculate-other**表示在发布缺省路由后，仍允许计算其他交换机发布的缺省路由。
   - **route-policy** *route-policy-name*表示路由表中有匹配的非本OSPF进程产生的缺省路由表项时，按路由策略所配置的参数发布缺省路由的匹配规则。



  说明：

 - 本机必须存在激活的非本OSPF进程的缺省路由时才会产生并发布一个缺省路由的ASE LSA。
 - OSPF路由域中在通告缺省路由前，会比较缺省路由的优先级，如果在其中某OSPF交换机上同时配置了静态缺省路由，要使OSPF通告的缺省路由加入到当前的路由表中，则必须保证所配置的静态缺省路由的优先级比OSPF通告的缺省路由的优先级低。</code></pre>
<h3 id="6-14-3-配置OSPF路由聚合"><a href="#6-14-3-配置OSPF路由聚合" class="headerlink" title="6.14.3  配置OSPF路由聚合"></a>6.14.3  配置OSPF路由聚合</h3><h4 id="背景信息-13"><a href="#背景信息-13" class="headerlink" title="背景信息"></a>背景信息</h4><p>当OSPF网络规模较大时，配置路由聚合，可以有效减少路由表中的条目，减小对系统资源的占用，不影响系统的性能。此外，如果被聚合的IP地址范围内的某条链路频繁Up和Down，该变化并不会通告到被聚合的IP地址范围外的设备。因此，可以避免网络中的路由震荡，在一定程度上提高了网络的稳定性。</p>
<p>ABR向其它区域发送路由信息时，以网段为单位生成Type3 LSA。当区域中存在连续的网段（具有相同前缀的路由信息）时，可以通过<strong>abr-summary</strong>命令将这些网段聚合成一个网段，ABR向其他区域只发送一条聚合后的LSA，所有指定的聚合网段范围的LSA将不会再被单独发送。从而减小路由表的规模，提高交换机的性能。</p>
<p>请在运行OSPF协议的交换机上进行以下配置。</p>
<h4 id="操作步骤-23"><a href="#操作步骤-23" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li><p>配置ABR路由聚合</p>
<ol>
<li>执行命令<strong>system-view</strong>，进入系统视图。</li>
<li>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</li>
<li>执行命令<strong>area</strong> <em>area-id</em>，进入OSPF区域视图。</li>
<li>执行命令<strong>abr-summary</strong> <em>ip-address</em> <em>mask</em> [ [ <strong>cost</strong> { <em>cost</em> | <strong>inherit-minimum</strong> } | [ <strong>advertise</strong> [ <strong>generate-null0-route</strong> ] | <strong>not-advertise</strong> | <strong>generate-null0-route</strong> [ <strong>advertise</strong> ] ] ] * ]，配置OSPF的ABR路由聚合。</li>
</ol>
</li>
<li><p>配置ASBR路由聚合</p>
<ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>（可选）执行命令<strong>asbr-summary</strong> <strong>type</strong> <strong>nssa-trans-type-reference</strong> [ <strong>cost</strong> <strong>nssa-trans-cost-reference</strong> ]，配置OSPF设置聚合路由类型（Type）和开销值（Cost）时考虑Type7转换到Type5的LSA。</p>
<p>缺省情况下，OSPF在设置聚合路由类型和开销时不考虑Type7转换到Type5的LSA。</p>
</li>
<li><p>执行命令<strong>asbr-summary</strong> <em>ip-address</em> <em>mask</em> [ <strong>not-advertise</strong> | <strong>tag</strong> <em>tag</em> | <strong>cost</strong> <em>cost</em> | <strong>distribute-delay</strong> <em>interval</em> ] *，配置OSPF的ASBR路由聚合。</p>
</li>
</ol>
</li>
</ul>
<pre><code>  说明：

 在配置路由聚合后，本地OSPF设备的路由表保持不变。但是其他OSPF设备的路由表中将只有一条聚合路由，没有具体路由。直到网络中被聚合的路由都出现故障而消失时，该聚合路由才会消失。</code></pre>
<h3 id="6-14-4-配置OSPF对接收的路由进行过滤"><a href="#6-14-4-配置OSPF对接收的路由进行过滤" class="headerlink" title="6.14.4  配置OSPF对接收的路由进行过滤"></a>6.14.4  配置OSPF对接收的路由进行过滤</h3><h4 id="操作步骤-24"><a href="#操作步骤-24" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>filter-policy</strong> { <em>acl-number</em> | <strong>acl-name</strong> <em>acl-name</em> | <strong>ip-prefix</strong> <em>ip-prefix-name</em> | <strong>route-policy</strong> <em>route-policy-name</em> [ <strong>secondary</strong> ] } <strong>import</strong>，配置对接收的路由进行过滤。</p>
</li>
</ol>
<ul>
<li><em>acl-number</em>为基本访问控制列表号。</li>
<li><strong>acl-name</strong> <em>acl-name</em>为访问控制列表名称。</li>
<li><strong>ip-prefix</strong> <em>ip-prefix-name</em>为地址前缀列表名称。</li>
</ul>
<p>   <strong>filter-policy import</strong>命令是对OSPF计算出来的路由进行过滤，不能对发布和接收的LSA进行过滤，只有通过过滤的路由才被添加到路由表中，没有通过过滤的路由不会被添加进OSPF路由表，但不影响对外发布出去。</p>
<h3 id="6-14-5-配置OSPF对发布的路由进行过滤"><a href="#6-14-5-配置OSPF对发布的路由进行过滤" class="headerlink" title="6.14.5  配置OSPF对发布的路由进行过滤"></a>6.14.5  配置OSPF对发布的路由进行过滤</h3><h4 id="操作步骤-25"><a href="#操作步骤-25" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>filter-policy</strong> { <em>acl-number</em> | <strong>acl-name</strong> <em>acl-name</em> | <strong>ip-prefix</strong> <em>ip-prefix-name</em> | <strong>route-policy</strong> <em>route-policy-name</em> } <strong>export</strong> [ <em>protocol</em> [ <em>process-id</em> ] ]，配置对通过<strong>import-route</strong>命令引入的路由进行过滤，只有通过过滤的路由才能被发布出去。</p>
</li>
</ol>
<ul>
<li><p><em>acl-number</em>为基本访问控制列表号。</p>
</li>
<li><p><strong>acl-name</strong> <em>acl-name</em>为访问控制列表名称。</p>
</li>
<li><p><strong>ip-prefix</strong> <em>ip-prefix-name</em>为地址前缀列表名称。</p>
</li>
<li><p><strong>route-policy</strong> <em>route-policy-name</em>为路由策略名称。</p>
<p>用户可以通过指定<em>protocol</em> [ <em>process-id</em> ]对特定的某一种协议或某一进程的路由信息进行过滤。如果没有指定<em>protocol</em> [ <em>process-id</em> ]，则OSPF将对所有引入的路由信息进行过滤。</p>
</li>
</ul>
<pre><code>说明：</code></pre>
<ul>
<li><strong>import-route</strong>命令不能引入外部路由的缺省路由。</li>
<li>OSPF对引入的路由进行过滤，是指OSPF只将满足条件的外部路由生成的Type5 LSA发布出去。</li>
</ul>
<h3 id="6-14-6-配置对发送的LSA进行过滤"><a href="#6-14-6-配置对发送的LSA进行过滤" class="headerlink" title="6.14.6  配置对发送的LSA进行过滤"></a>6.14.6  配置对发送的LSA进行过滤</h3><h4 id="背景信息-14"><a href="#背景信息-14" class="headerlink" title="背景信息"></a>背景信息</h4><p>当两台交换机之间存在多条链路时，通过对发送的LSA进行过滤可以在某些链路上过滤LSA的传送，减少不必要的重传，节省带宽资源。</p>
<p>请在运行OSPF协议的交换机上进行以下配置。</p>
<h4 id="操作步骤-26"><a href="#操作步骤-26" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，进入接口视图。</p>
</li>
<li><p>（可选）对于以太网接口，执行命令<strong>undo portswitch</strong>，配置接口切换到三层模式。</p>
</li>
</ol>
<p>   缺省情况下，以太网接口处于二层模式。</p>
<pre><code>说明：</code></pre>
<p>   仅S5720HI、S5720EI、S6720EI和S6720S-EI支持二层模式与三层模式切换。</p>
<ol start="4">
<li>执行命令<strong>ospf filter-lsa-out</strong> { <strong>all</strong> | { <strong>summary</strong> [ <strong>acl</strong> { <em>acl-number</em> | <em>acl-name</em> } ] | <strong>ase</strong> [ <strong>acl</strong> { <em>acl-number</em> | <em>acl-name</em> } ] | <strong>nssa</strong> [ <strong>acl</strong> { <em>acl-number</em> | <em>acl-name</em> } ] } * }，配置对出方向的LSA进行过滤。</li>
</ol>
<p>   缺省情况下，不对发送的LSA进行过滤。</p>
<h3 id="6-14-7-配置对ABR-Type3-LSA进行过滤"><a href="#6-14-7-配置对ABR-Type3-LSA进行过滤" class="headerlink" title="6.14.7  配置对ABR Type3 LSA进行过滤"></a>6.14.7  配置对ABR Type3 LSA进行过滤</h3><h4 id="背景信息-15"><a href="#背景信息-15" class="headerlink" title="背景信息"></a>背景信息</h4><p>通过对区域内出、入方向ABR Type3 LSA（Summary LSA）设置过滤条件，只有通过过滤的信息才能被发布、接收。</p>
<p>此功能仅在ABR上配置。</p>
<h4 id="操作步骤-27"><a href="#操作步骤-27" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>area</strong> <em>area-id</em>，进入OSPF区域视图。</p>
</li>
<li><p>请根据需要，配置对ABR Type3 LSA进行过滤。</p>
</li>
</ol>
<ul>
<li>执行命令<strong>filter</strong> { <em>acl-number</em> | <strong>acl-name</strong> <em>acl-name</em> | <strong>ip-prefix</strong> <em>ip-prefix-name</em> | <strong>route-policy</strong> <em>route-policy-name</em> } <strong>export</strong>，配置对本区域出方向的Summary LSA进行过滤。</li>
<li>执行命令<strong>filter</strong> { <em>acl-number</em> | <strong>acl-name</strong> <em>acl-name</em> | <strong>ip-prefix</strong> <em>ip-prefix-name</em> | <strong>route-policy</strong> <em>route-policy-name</em> } <strong>import</strong>，配置对进入本区域的Summary LSA进行过滤。</li>
</ul>
<h3 id="6-14-8-（可选）使能Mesh-Group特性"><a href="#6-14-8-（可选）使能Mesh-Group特性" class="headerlink" title="6.14.8  （可选）使能Mesh-Group特性"></a>6.14.8  （可选）使能Mesh-Group特性</h3><h4 id="背景信息-16"><a href="#背景信息-16" class="headerlink" title="背景信息"></a>背景信息</h4><p>当交换机和邻居存在并行链路时，使能Mesh-Group特性，可以减轻链路的压力。</p>
<p>Mesh-Group时以邻居的Router-id唯一标识一个Group。是几条并行的LSA，合并为一个组，只泛洪一次。只有同时满足以下三个条件的接口才能属于同一个Mesh-Group：</p>
<ul>
<li>属于相同区域和OSPF进程</li>
<li>接口状态大于Exchange</li>
<li>只连着同一个邻居</li>
</ul>
<p>请在运行OSPF协议的交换机上进行以下配置。</p>
<h4 id="操作步骤-28"><a href="#操作步骤-28" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>mesh-group enable</strong>，使能Mesh-Group特性。</p>
</li>
</ol>
<p>   缺省情况下，不使能Mesh-Group特性。</p>
<h3 id="6-14-9-配置LSDB中External-LSA的最大数量"><a href="#6-14-9-配置LSDB中External-LSA的最大数量" class="headerlink" title="6.14.9  配置LSDB中External LSA的最大数量"></a>6.14.9  配置LSDB中External LSA的最大数量</h3><h4 id="操作步骤-29"><a href="#操作步骤-29" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>执行命令<strong>system-view</strong>，进入系统视图。</li>
<li>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</li>
<li>执行命令<strong>lsdb-overflow-limit</strong> <em>number</em>，配置LSDB中External LSA的最大数量。</li>
</ol>
<h3 id="6-14-10-检查配置结果"><a href="#6-14-10-检查配置结果" class="headerlink" title="6.14.10  检查配置结果"></a>6.14.10  检查配置结果</h3><h4 id="前提条件-4"><a href="#前提条件-4" class="headerlink" title="前提条件"></a>前提条件</h4><p>已经完成控制OSPF路由信息的所有配置。</p>
<h4 id="操作步骤-30"><a href="#操作步骤-30" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li>使用以下命令查看OSPF路由表信息：</li>
</ul>
<ul>
<li><strong>display ospf</strong> [ <em>process-id</em> ] <strong>routing</strong> [ <em>ip-address</em> [ <em>mask</em> | <em>mask-length</em> ] ] [ <strong>interface</strong> <em>interface-type</em> <em>interface-number</em> ] [ <strong>nexthop</strong> <em>nexthop-address</em> ]</li>
<li><strong>display ospf</strong> [ <em>process-id</em> ] <strong>routing</strong> <strong>router-id</strong> [ <em>router-id</em> ]</li>
</ul>
<ul>
<li><p>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>interface</strong> [ <strong>all</strong> | <em>interface-type</em> <em>interface-number</em> ] [ <strong>verbose</strong> ]命令查看OSPF的接口信息。</p>
</li>
<li><p>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>asbr-summary</strong> [ <em>ip-address</em> <em>mask</em> ]命令查看OSPF ASBR聚合信息。</p>
</li>
</ul>
<h2 id="6-15-配置OSPF与BFD联动"><a href="#6-15-配置OSPF与BFD联动" class="headerlink" title="6.15  配置OSPF与BFD联动"></a>6.15  配置OSPF与BFD联动</h2><p>如果需要提高链路状态变化时OSPF的收敛速度，可以在运行OSPF的链路上配置BFD特性。当BFD检测到链路故障时，能够将故障通告给路由协议，触发路由协议的快速收敛；当邻居关系为Down时，则动态删除BFD会话。</p>
<h3 id="应用环境-5"><a href="#应用环境-5" class="headerlink" title="应用环境"></a>应用环境</h3><p>OSPF通过周期性的向邻居发送Hello报文来实现邻居检测，检测到故障所需时间比较长，超过1秒钟。随着科技的发展，语音、视频及其它点播业务应用广泛，而这些业务对于丢包和延时非常敏感，当数据达到吉比特速率级时，较长的检测时间会导致大量数据丢失，无法满足电信级网络高可靠性的需求。</p>
<p>为了解决上述问题，配置指定进程或指定接口的BDF for OSPF特性，可以快速检测链路的状态，故障检测时间可以达到毫秒级，提高链路状态变化时OSPF的收敛速度。</p>
<p> 说明：</p>
<p>仅S6720EI、S6720S-EI、S5720HI、S5720EI、S6720SI、S6720S-SI、S5720SI和S5720S-SI支持OSPF与BFD联动。</p>
<h3 id="前置任务-7"><a href="#前置任务-7" class="headerlink" title="前置任务"></a>前置任务</h3><p>在配置OSPF与BFD联动前，需完成以下任务：</p>
<ul>
<li>配置接口的网络层地址，使各相邻节点网络层可达。</li>
<li><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0004">6.8 配置OSPF的基本功能</a>。</li>
</ul>
<h3 id="配置流程-5"><a href="#配置流程-5" class="headerlink" title="配置流程"></a>配置流程</h3><p><strong>图6-68</strong>  OSPF与BFD联动配置流程图<br><img src="http://support.huawei.com/enterprise/product/images/905536776fa642cd98f85bf457c55d31" alt="img" loading="lazy"></p>
<h3 id="6-15-1-配置全局BFD功能"><a href="#6-15-1-配置全局BFD功能" class="headerlink" title="6.15.1  配置全局BFD功能"></a>6.15.1  配置全局BFD功能</h3><h4 id="操作步骤-31"><a href="#操作步骤-31" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>执行命令<strong>system-view</strong>，进入系统视图。</li>
<li>执行命令<strong>bfd</strong>，配置全局BFD功能并进入到全局BFD视图。</li>
</ol>
<h3 id="6-15-2-配置OSPF的BFD特性"><a href="#6-15-2-配置OSPF的BFD特性" class="headerlink" title="6.15.2  配置OSPF的BFD特性"></a>6.15.2  配置OSPF的BFD特性</h3><h4 id="操作步骤-32"><a href="#操作步骤-32" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF视图。</p>
</li>
<li><p>执行命令<strong>bfd all-interfaces enable</strong>，打开OSPF BFD特性的开关，建立BFD会话。</p>
</li>
</ol>
<p>   当配置了全局BFD特性，且邻居状态达到Full时，OSPF为该进程下所有具有邻接关系的邻居建立BFD会话。</p>
<ol start="4">
<li>（可选）如果需要配置BFD参数请执行<strong>bfd all-interfaces</strong> { <strong>min-rx-interval</strong> <em>receive-interval</em> | <strong>min-tx-interval</strong> <em>transmit-interval</em> | <strong>detect-multiplier</strong> <em>multiplier-value</em> } *命令，指定需要建立BFD会话的各个参数值。</li>
</ol>
<ul>
<li><strong>min-rx-interval</strong> <em>receive-interval</em>表示期望从对端接收BFD报文的最小接收间隔。</li>
<li><strong>min-tx-interval</strong> <em>transmit-interval</em>表示向对端发送BFD报文的最小发送间隔。</li>
<li><strong>detect-multiplier</strong> <em>multiplier-value</em>表示本地检测倍数。</li>
</ul>
<pre><code>说明：</code></pre>
<p>   BFD报文实际收发时间间隔和检测倍数一般推荐使用缺省值。</p>
<p>   具体参数如何配置取决于网路状况以及对网络可靠性的要求，对于网络可靠性要求较高链路，可以配置减小BFD报文实际发送时间间隔；对于网络可靠性要求较低的链路，可以配置增大BFD报文实际发送时间间隔。</p>
<pre><code>说明：</code></pre>
<ul>
<li><p>本地BFD报文实际发送时间间隔＝MAX { 本地配置的发送时间间隔<em>transmit-interval</em>，对端配置的接收时间间隔<em>receive-interval</em> }</p>
</li>
<li><p>本地BFD报文实际接收时间间隔＝MAX { 对端配置的发送时间间隔<em>transmit-interval</em>，本地配置的接收时间间隔<em>receive-interval</em> }</p>
</li>
<li><p>本地BFD报文实际检测时间＝本地实际接收时间间隔×对端配置的BFD检测倍数<em>multiplier-value</em></p>
<p>例如，</p>
</li>
<li><p>本地配置的发送时间间隔为200ms，本地配置的接收时间间隔为300ms，本地检测倍数为4。</p>
</li>
<li><p>对端配置的发送时间间隔为100ms，对端配置的接收时间间隔为600ms，对端检测倍数为5。</p>
<p>则：</p>
</li>
<li><p>本地实际的发送时间间隔为MAX { 200ms，600ms }＝600ms，本地实际接收时间间隔为MAX { 100ms，300ms }＝300ms，本地实际检测时间间隔为300ms×5＝1500ms。</p>
</li>
<li><p>对端实际的发送时间间隔为MAX { 100ms，300ms }＝300ms，对端实际接收时间间隔为MAX { 200ms，600ms }＝600ms，对端实际检测时间间隔为600ms×4＝2400ms。</p>
</li>
</ul>
<h3 id="6-15-3-（可选）阻止接口动态创建BFD会话"><a href="#6-15-3-（可选）阻止接口动态创建BFD会话" class="headerlink" title="6.15.3  （可选）阻止接口动态创建BFD会话"></a>6.15.3  （可选）阻止接口动态创建BFD会话</h3><h4 id="背景信息-17"><a href="#背景信息-17" class="headerlink" title="背景信息"></a>背景信息</h4><p>如果在OSPF进程中执行<strong>bfd all-interfaces enable</strong>命令后，该进程下所有使能OSPF且邻居状态为Full的邻居都将创建BFD会话。此时，如果不希望某个接口创建BFD会话可以阻止接口动态创建BFD会话。</p>
<h4 id="操作步骤-33"><a href="#操作步骤-33" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，进入运行OSPF与BFD联动的接口视图。</p>
</li>
<li><p>（可选）对于以太网接口，执行命令<strong>undo portswitch</strong>，配置接口切换到三层模式。</p>
</li>
</ol>
<p>   缺省情况下，以太网接口处于二层模式。</p>
<pre><code>说明：</code></pre>
<p>   仅S5720HI、S5720EI、S6720EI和S6720S-EI支持二层模式与三层模式切换。</p>
<ol start="4">
<li>执行命令<strong>ospf bfd block</strong>，阻止接口动态创建BFD会话。</li>
</ol>
<h3 id="6-15-4-（可选）配置指定接口的BFD特性"><a href="#6-15-4-（可选）配置指定接口的BFD特性" class="headerlink" title="6.15.4  （可选）配置指定接口的BFD特性"></a>6.15.4  （可选）配置指定接口的BFD特性</h3><h4 id="背景信息-18"><a href="#背景信息-18" class="headerlink" title="背景信息"></a>背景信息</h4><p>如果希望单独只对某些指定的接口配置BFD for OSPF特性，当这些接口的链路发生故障时，交换机可以快速的感知，并及时通知OSPF重新计算路由，从而提高OSPF的收敛速度。当邻居关系为Down时，则动态删除BFD会话。</p>
<p>OSPF创建BFD会话需要先使能全局BFD功能。</p>
<p>请在指定接口配置BFD会话的交换机上进行以下配置。</p>
<h4 id="操作步骤-34"><a href="#操作步骤-34" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，进入运行OSPF与BFD联动的接口视图。</p>
</li>
<li><p>（可选）对于以太网接口，执行命令<strong>undo portswitch</strong>，配置接口切换到三层模式。</p>
</li>
</ol>
<p>   缺省情况下，以太网接口处于二层模式。</p>
<pre><code>说明：</code></pre>
<p>   仅S5720HI、S5720EI、S6720EI和S6720S-EI支持二层模式与三层模式切换。</p>
<ol start="4">
<li>执行命令<strong>ospf bfd enable</strong>，打开接口BFD特性的开关，建立BFD会话。</li>
</ol>
<p>   当配置了全局BFD特性，且邻居状态为Full时，OSPF为指定的接口建立了使用缺省参数值的BFD会话。</p>
<pre><code>说明：</code></pre>
<p>   接口上配置BFD for OSPF特性的优先级高于进程中配置BFD for OSPF特性的优先级。</p>
<p>   如果需要单独配置BFD参数请执行命令<strong>ospf bfd</strong> { <strong>min-rx-interval</strong> <em>receive-interval</em> | <strong>min-tx-interval</strong> <em>transmit-</em> <em>interval</em> | <strong>detect-multiplier</strong> <em>multiplier-value</em> } *，指定BFD会话的参数值。</p>
<p>   BFD报文实际收发时间间隔和检测倍数一般推荐使用缺省值，即不执行该命令。</p>
<p>   具体参数如何配置取决于网络状况以及对网络可靠性的要求，对于网络可靠性要求较高链路，可以配置减小BFD报文实际发送时间间隔；对于网络可靠性要求较低的链路，可以配置增大BFD报文实际发送时间间隔。</p>
<pre><code>说明：</code></pre>
<ul>
<li><p>本地BFD报文实际发送时间间隔＝MAX { 本地配置的发送时间间隔<em>transmit-interval</em>，对端配置的接收时间间隔<em>receive-interval</em> }</p>
</li>
<li><p>本地BFD报文实际接收时间间隔＝MAX { 对端配置的发送时间间隔<em>transmit-interval</em>，本地配置的接收时间间隔<em>receive-interval</em> }</p>
</li>
<li><p>本地BFD报文实际检测时间＝本地实际接收时间间隔×对端配置的BFD检测倍数<em>multiplier-value</em></p>
<p>例如，</p>
</li>
<li><p>本地配置的发送时间间隔为200ms，本地配置的接收时间间隔为300ms，本地检测倍数为4。</p>
</li>
<li><p>对端配置的发送时间间隔为100ms，对端配置的接收时间间隔为600ms，对端检测倍数为5。</p>
<p>则：</p>
</li>
<li><p>本地实际的发送时间间隔为MAX { 200ms，600ms }＝600ms，本地实际接收时间间隔为MAX { 100ms，300ms }＝300ms，本地实际检测时间间隔为300ms×5＝1500ms。</p>
</li>
<li><p>对端实际的发送时间间隔为MAX { 100ms，300ms }＝300ms，对端实际接收时间间隔为MAX { 200ms，600ms }＝600ms，对端实际检测时间间隔为600ms×4＝2400ms。</p>
</li>
</ul>
<h3 id="6-15-5-检查配置结果"><a href="#6-15-5-检查配置结果" class="headerlink" title="6.15.5  检查配置结果"></a>6.15.5  检查配置结果</h3><h4 id="前提条件-5"><a href="#前提条件-5" class="headerlink" title="前提条件"></a>前提条件</h4><p>已经完成OSPF与BFD联动的所有配置。</p>
<h4 id="操作步骤-35"><a href="#操作步骤-35" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li>选择如下命令查看OSPF与BFD联动的会话信息。</li>
</ul>
<ul>
<li><strong>display ospf</strong> [<em>process-id</em> ] <strong>bfd</strong> <strong>session</strong> <em>interface-type</em> <em>interface-number</em> [ <em>router-id</em> ]</li>
<li><strong>display ospf</strong> [<em>process-id</em> ] <strong>bfd</strong> <strong>session</strong> { <em>router-id</em> | <strong>all</strong> }</li>
</ul>
<h2 id="6-16-配置OSPF-IP-FRR"><a href="#6-16-配置OSPF-IP-FRR" class="headerlink" title="6.16  配置OSPF IP FRR"></a>6.16  配置OSPF IP FRR</h2><p>配置OSPF IP FRR可以将故障链路的流量快速切换到备份链路上，保证流量不中断，从而达到保护流量的目的，因此极大的提高了OSPF网络的可靠性。</p>
<p> 说明：</p>
<p>仅S5720EI、S5720HI、S6720S-EI和S6720EI支持OSPF IP FRR。</p>
<h3 id="6-16-1-使能OSPF-IP-FRR"><a href="#6-16-1-使能OSPF-IP-FRR" class="headerlink" title="6.16.1  使能OSPF IP FRR"></a>6.16.1  使能OSPF IP FRR</h3><p>使能OSPF IP FRR生成无环的备份链路，出现故障时，OSPF可以快速将流量切换到备份路由上。</p>
<h4 id="操作步骤-36"><a href="#操作步骤-36" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> | <strong>router-id</strong> <em>router-id</em> | <strong>vpn-instance</strong> <em>vpn-instance-name</em> ] *，启动OSPF进程，进入OSPF视图。</p>
</li>
<li><p>执行命令<strong>frr</strong>，进入OSPF IP FRR视图。</p>
</li>
<li><p>执行命令<strong>loop-free-alternate</strong>，使能OSPF IP FRR特性，生成无环的备份链路。</p>
</li>
</ol>
<p>   缺省情况下，不使能OSPF IP FRR功能。需满足OSPF IP FRR流量保护不等式，OSPF才能生成无环的备份链路。</p>
<pre><code>说明：</code></pre>
<p>   下面的描述有如下约定：Distance_opt(X, Y)指节点X到Y之间的最短路径，S是转发流量的源节点，E是发生故障的节点，N是备份链路的节点，D是流量转发的目的节点。</p>
<ul>
<li><p>当需要保护的对象是经过特定链路的流量时，流量保护类型为链路保护。链路开销必须满足不等式Distance_opt(N, D) &lt; Distance_opt(N, S) + Distance_opt(S, D)。</p>
</li>
<li><p>当需要保护的对象是经过特定节点和链路的流量时，流量保护类型为节点链路双保护。</p>
<p>节点链路双保护需同时满足如下两个条件：</p>
<ul>
<li>链路开销必须满足Distance_opt(N, D) &lt; Distance_opt(N, S) + Distance_opt(S, D)。</li>
<li>设备的接口开销必须满足Distance_opt(N, D) &lt; Distance_opt(N, E) + Distance_opt(E, D)。</li>
</ul>
</li>
</ul>
<ol start="5">
<li>（可选）执行命令<strong>frr-priority static low</strong>，设置利用LFA（Loop-Free Alternates）算法计算备份下一跳和备份出接口。</li>
</ol>
<p>   OSPF有两种方式可以获得备份路径：</p>
<ul>
<li><p>静态备份路径：由<strong>ip frr（系统视图）</strong>命令或<strong>ip frr（VPN实例视图）</strong>命令使能IP FRR功能后，指定备份下一跳和备份出接口。</p>
</li>
<li><p>动态备份路径：由<strong>loop-free-alternate</strong>命令使能OSPF IP FRR功能后，利用LFA算法计算备份下一跳和备份出接口。</p>
<p>缺省情况下，静态备份路径的优先级高于动态备份路径的优先级，即静态备份路径会被优选。但是，由于静态备份路径的灵活性较差，当备份路径出现故障时，静态备份路径不会自动更新，而动态备份路径可以自动更新。因此，为了保证备份路径的及时更新，可以配置<strong>frr-priority static low</strong>命令指定利用LFA算法计算备份下一跳和备份出接口，使动态备份路径的优先级高于静态备份路径的优先级。</p>
</li>
</ul>
<ol start="6">
<li>（可选）执行命令<strong>frr-policy route</strong> <strong>route-policy</strong> <em>route-policy-name</em>，配置OSPF IP FRR过滤策略。</li>
</ol>
<p>   配置了OSPF IP FRR过滤策略后，只有满足过滤条件的OSPF路由的备份路由才能下发转发表。如果希望保护经过某条特定OSPF路由的流量时，可以通过设置过滤策略，使该OSPF路由满足过滤条件，则该OSPF路由的备份路由加入转发表中。当这条路由出现故障时，OSPF可以快速将流量切换到备份路由上。</p>
<h3 id="6-16-2-（可选）配置OSPF-IP-FRR与BFD绑定"><a href="#6-16-2-（可选）配置OSPF-IP-FRR与BFD绑定" class="headerlink" title="6.16.2  （可选）配置OSPF IP FRR与BFD绑定"></a>6.16.2  （可选）配置OSPF IP FRR与BFD绑定</h3><p>配置OSPF IP FRR与BFD会话绑定可以达到快速感知故障的目的，确保故障后流量切换的及时性。</p>
<h4 id="背景信息-19"><a href="#背景信息-19" class="headerlink" title="背景信息"></a>背景信息</h4><p>配置OSPF IP FRR特性时，需要底层能够快速响应链路变化，当主链路故障时迅速将流量切换到备份链路。将OSPF IP FRR与BFD会话绑定可以达到快速感知故障的目的，确保故障后流量切换的及时性。</p>
<p>OSPF IP FRR与BFD绑定可以在OSPF指定进程或指定接口上配置。在指定接口配置的BFD特性优先级高于指定进程配置的BFD特性优先级。如果打开了接口的BFD开关，则按照接口上BFD参数建立BFD会话。</p>
<h4 id="操作步骤-37"><a href="#操作步骤-37" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li>在OSPF指定进程上配置OSPF IP FRR与BFD绑定。<ol>
<li>执行命令<strong>system-view</strong>，进入系统视图。</li>
<li>执行命令<strong>bfd</strong>，配置全局BFD功能。</li>
<li>执行命令<strong>quit</strong>，返回系统视图。</li>
<li>执行命令<strong>ospf</strong> [ <em>process-id</em> | <strong>router-id</strong> <em>router-id</em> | <strong>vpn-instance</strong> <em>vpn-instance-name</em> ] *，使能OSPF进程，进入OSPF视图。</li>
<li>执行命令<strong>bfd all-interfaces</strong> <strong>enable</strong>，在OSPF进程下使能BFD特性。</li>
<li>执行命令<strong>bfd all-interfaces</strong> <strong>frr-binding</strong>，配置OSPF进程下的IP FRR和BFD绑定。</li>
</ol>
</li>
<li>在OSPF指定接口上配置OSPF IP FRR与BFD绑定。<ol>
<li>执行命令<strong>system-view</strong>，进入系统视图。</li>
<li>执行命令<strong>bfd</strong>，配置全局BFD功能。</li>
<li>执行命令<strong>quit</strong>，返回系统视图。</li>
<li>执行命令<strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，进入接口视图。</li>
<li>执行命令<strong>ospf bfd</strong> <strong>enable</strong>，在使能OSPF的特定接口下配置BFD特性。</li>
<li>执行命令<strong>ospf bfd</strong> <strong>frr-binding</strong>，配置接口下的IP FRR和BFD绑定。</li>
</ol>
</li>
</ul>
<h3 id="6-16-3-（可选）禁止指定接口的OSPF-IP-FRR能力"><a href="#6-16-3-（可选）禁止指定接口的OSPF-IP-FRR能力" class="headerlink" title="6.16.3  （可选）禁止指定接口的OSPF IP FRR能力"></a>6.16.3  （可选）禁止指定接口的OSPF IP FRR能力</h3><p>对于承载重要业务的节点设备，在指定接口上禁止OSPF IP FRR功能，从而使此接口相连的对端设备不成为备份链路上的节点设备，避免使能OSPF IP FRR功能后对节点设备上运行的重要业务造成影响。</p>
<h4 id="操作步骤-38"><a href="#操作步骤-38" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>执行命令<strong>system-view</strong>，进入系统视图。</li>
<li>执行命令<strong>interface</strong> <em>interface-type interface-number</em>，进入已使能OSPF IP FRR功能的接口视图。</li>
<li>执行命令<strong>ospf frr block</strong>，在指定接口上禁止OSPF IP FRR功能。</li>
</ol>
<h3 id="6-16-4-检查配置结果"><a href="#6-16-4-检查配置结果" class="headerlink" title="6.16.4  检查配置结果"></a>6.16.4  检查配置结果</h3><p>成功配置OSPF IP FRR功能后，您可以查看到OSPF的链路信息。</p>
<h4 id="前提条件-6"><a href="#前提条件-6" class="headerlink" title="前提条件"></a>前提条件</h4><p>已经完成OSPF IP FRR的所有配置。</p>
<h4 id="操作步骤-39"><a href="#操作步骤-39" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li>配置OSPF IP FRR功能后，执行<strong>display ospf</strong> [ <em>process-id</em> ] <strong>routing</strong>命令查看路由的主用链路和备份链路信息。</li>
</ul>
<p>  显示到指定OSPF设备的路由信息。</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HUAWEI&gt; display ospf routing 192.168.4.0</span><br><span class="line"></span><br><span class="line">         OSPF Process 1 with Router ID 192.168.150.11</span><br><span class="line"></span><br><span class="line"> Destination : 192.168.4.0&#x2F;24     </span><br><span class="line"> AdverRouter : 10.4.4.4                 Area      : 0.0.0.0  </span><br><span class="line"> Cost        : 2                        Type      : Transit </span><br><span class="line"> NextHop     : 192.168.2.2              Interface : Vlanif20  </span><br><span class="line"> Priority    : Low                      Age       : 00h00m10s  </span><br><span class="line"> Backup Nexthop : 192.168.1.2           Backup Interface: Vlanif10</span><br><span class="line"> Backup Type : LFA LINK</span><br></pre></td></tr></table></figure>

<p>  从显示信息可以看出，交换机上已经生成了备份的路由。路由信息包含备份下一跳信息：<strong>Backup NextHop</strong>表示备份下一跳地址，<strong>Backup Interface</strong>表示备份下一跳的出接口，<strong>Backup Type</strong>表示备份下一跳类型。</p>
<h2 id="6-17-配置OSPF网络的快速收敛"><a href="#6-17-配置OSPF网络的快速收敛" class="headerlink" title="6.17  配置OSPF网络的快速收敛"></a>6.17  配置OSPF网络的快速收敛</h2><p>通过调整定时器，可以达到网络快速收敛的目的。</p>
<h3 id="前置任务-8"><a href="#前置任务-8" class="headerlink" title="前置任务"></a>前置任务</h3><p>在配置OSPF网络的快速收敛之前，需完成以下任务：</p>
<ul>
<li>配置链路层协议。</li>
<li>配置接口的网络层地址，使各相邻节点网络层可达。</li>
<li><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0004">6.8 配置OSPF的基本功能</a>。</li>
</ul>
<h3 id="配置流程-6"><a href="#配置流程-6" class="headerlink" title="配置流程"></a>配置流程</h3><p>以下配置任务（不含检查配置结果），根据应用环境选择其中一项或几项进行配置。</p>
<h3 id="6-17-1-配置OSPF路由的收敛优先级"><a href="#6-17-1-配置OSPF路由的收敛优先级" class="headerlink" title="6.17.1  配置OSPF路由的收敛优先级"></a>6.17.1  配置OSPF路由的收敛优先级</h3><h4 id="背景信息-20"><a href="#背景信息-20" class="headerlink" title="背景信息"></a>背景信息</h4><p>随着网络业务的融合，数据、语音、视频等不同类型业务会在同样的网络基础设施上进行运行，但是不同业务对网络的要求是不一样的。</p>
<p>通过配置OSPF路由的收敛优先级，允许用户配置特定路由的优先级，使这些路由能够比其他的路由优先收敛。</p>
<h4 id="操作步骤-40"><a href="#操作步骤-40" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>prefix-priority</strong> { <strong>critical</strong> | <strong>high</strong> | <strong>medium</strong> } <strong>ip-prefix</strong> <em>ip-prefix-name</em>，配置OSPF路由的收敛优先级。</p>
</li>
</ol>
<p>   配置OSPF路由的收敛优先级后，OSPF路由可以按照优先级来计算和泛洪LSA、同步LSDB，从而提高路由收敛速度。当一个LSA满足多个策略优先级时，最高优先级生效。OSPF依次按区域内路由、区域间路由、自治系统外部路由顺序进行LSA计算，该命令可以计算OSPF的收敛优先级。收敛优先级的优先级顺序为：critical&gt;high&gt;medium&gt;low。为了加速处理高优先级的LSA，泛洪过程中，需要按照优先级将相应的LSA分别存放在对应的critical、high、medium和low的队列中。</p>
<pre><code>说明：</code></pre>
<p>   该命令仅在公网上配置时有效。</p>
<h3 id="6-17-2-配置接口发送Hello报文的时间间隔"><a href="#6-17-2-配置接口发送Hello报文的时间间隔" class="headerlink" title="6.17.2  配置接口发送Hello报文的时间间隔"></a>6.17.2  配置接口发送Hello报文的时间间隔</h3><h4 id="背景信息-21"><a href="#背景信息-21" class="headerlink" title="背景信息"></a>背景信息</h4><p>Hello报文是最常用的一种报文，其作用为建立和维护邻接关系，周期性的在使能了OSPF的接口上发送。OSPF邻居之间的Hello定时器的时间间隔要保持一致，否则不能协商为邻居。</p>
<h4 id="操作步骤-41"><a href="#操作步骤-41" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，进入运行OSPF协议的接口视图。</p>
</li>
<li><p>（可选）对于以太网接口，执行命令<strong>undo portswitch</strong>，配置接口切换到三层模式。</p>
</li>
</ol>
<p>   缺省情况下，以太网接口处于二层模式。</p>
<pre><code>说明：</code></pre>
<p>   仅S5720HI、S5720EI、S6720EI和S6720S-EI支持二层模式与三层模式切换。</p>
<ol start="4">
<li>执行命令<strong>ospf timer hello</strong> <em>interval</em>，配置接口发送Hello报文的时间间隔。</li>
</ol>
<p>   缺省情况下，P2P、Broadcast类型接口发送Hello报文的时间间隔的值为10秒；P2MP、NBMA类型接口发送Hello报文的时间间隔的值为30秒；且同一接口上邻居失效时间是Hello间隔时间的4倍。</p>
<h3 id="6-17-3-配置相邻邻居失效的时间"><a href="#6-17-3-配置相邻邻居失效的时间" class="headerlink" title="6.17.3  配置相邻邻居失效的时间"></a>6.17.3  配置相邻邻居失效的时间</h3><h4 id="操作步骤-42"><a href="#操作步骤-42" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，进入运行OSPF协议的接口视图。</p>
</li>
<li><p>（可选）对于以太网接口，执行命令<strong>undo portswitch</strong>，配置接口切换到三层模式。</p>
</li>
</ol>
<p>   缺省情况下，以太网接口处于二层模式。</p>
<pre><code>说明：</code></pre>
<p>   仅S5720HI、S5720EI、S6720EI和S6720S-EI支持二层模式与三层模式切换。</p>
<ol start="4">
<li>执行命令<strong>ospf timer dead</strong> <em>interval</em>，设置相邻邻居失效的时间。</li>
</ol>
<p>   缺省情况下，P2P、Broadcast类型接口的OSPF邻居失效时间为40秒，P2MP、NBMA类型接口的OSPF邻居失效时间为120秒；且同一接口上失效时间是Hello间隔时间的4倍。</p>
<pre><code>说明：</code></pre>
<p>   建议配置的失效时间大于20秒。如果失效的时间小于20秒，可能会造成邻居会话的中断。</p>
<p>   修改了网络类型后，Hello与Dead定时器都将恢复缺省值。</p>
<h3 id="6-17-4-配置Smart-discover"><a href="#6-17-4-配置Smart-discover" class="headerlink" title="6.17.4  配置Smart-discover"></a>6.17.4  配置Smart-discover</h3><h4 id="背景信息-22"><a href="#背景信息-22" class="headerlink" title="背景信息"></a>背景信息</h4><p>交换机的邻居状态或者多址网络（广播型或NBMA）上的DR、BDR发生变化时，需要等到Hello定时器到时才会向邻居发送Hello报文，影响了设备间建立邻居的速度。通过配置Smart-discover，网络中邻居状态，或者DR、BDR发生变化时，设备不必等到Hello定时器到就可以立刻主动的向邻居发送Hello报文。从而提高建立邻居的速度，达到网络快速收敛的目的。</p>
<h4 id="操作步骤-43"><a href="#操作步骤-43" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，进入运行OSPF的接口视图。</p>
</li>
<li><p>（可选）对于以太网接口，执行命令<strong>undo portswitch</strong>，配置接口切换到三层模式。</p>
</li>
</ol>
<p>   缺省情况下，以太网接口处于二层模式。</p>
<pre><code>说明：</code></pre>
<p>   仅S5720HI、S5720EI、S6720EI和S6720S-EI支持二层模式与三层模式切换。</p>
<ol start="4">
<li>执行命令<strong>ospf smart-discover</strong>，配置接口的Smart-discover功能。</li>
</ol>
<h3 id="6-17-5-配置更新LSA的时间间隔"><a href="#6-17-5-配置更新LSA的时间间隔" class="headerlink" title="6.17.5  配置更新LSA的时间间隔"></a>6.17.5  配置更新LSA的时间间隔</h3><h4 id="背景信息-23"><a href="#背景信息-23" class="headerlink" title="背景信息"></a>背景信息</h4><p>OSPF协议规定LSA的更新时间间隔5秒，是为了防止网络连接或者路由频繁动荡引起的过多占用网络带宽和设备资源。</p>
<p>在网络相对稳定、对路由收敛时间要求较高的组网环境中，可以指定LSA的更新时间间隔为0来取消LSA的更新时间间隔，使得拓扑或者路由的变化可以立即通过LSA发布到网络中，从而加快网络中路由的收敛速度。</p>
<h4 id="操作步骤-44"><a href="#操作步骤-44" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>lsa-originate-interval</strong> { <strong>0</strong> | { <strong>intelligent-timer</strong> <em>max-interval</em> <em>start-interval</em> <em>hold-interval</em> | <strong>other-type</strong> <em>interval</em> } * }，配置LSA的更新时间间隔。</p>
</li>
</ol>
<ul>
<li><p><strong>intelligent-timer</strong>表示通过智能定时器设置OSPF Router LSA和Network LSA的更新间隔时间。</p>
</li>
<li><p><em>max-interval</em>为更新OSPF LSA的最长间隔时间，单位是毫秒。</p>
</li>
<li><p><em>start-interval</em>为更新OSPF LSA的初始间隔时间，单位是毫秒。</p>
</li>
<li><p><em>hold-interval</em>为更新OSPF LSA的基数间隔时间，单位是毫秒。</p>
</li>
<li><p><strong>other-type</strong> <em>interval</em>表示设置除OSPF Router LSA和Network LSA外LSA的更新间隔时间。</p>
<p>缺省情况下，使能智能定时器intelligent-timer。使能智能定时器后，更新LSA的最长间隔时间的缺省值为5000毫秒、初始间隔时间的缺省值为500毫秒、基数间隔时间的缺省值为1000毫秒（以毫秒为单位的时间间隔），更新LSA的时间间隔方式如下：</p>
</li>
</ul>
<ol>
<li>初次更新LSA的间隔时间由<em>start-interval</em>参数指定。</li>
<li>第n（n≥2）次更新LSA的间隔时间为<em>hold-interval</em>×2(n-2)。</li>
<li>当<em>hold-interval</em>×2(n-2)达到指定的最长间隔时间<em>max-interval</em>时，OSPF连续三次更新LSA的时间间隔都是最长间隔时间，之后，再次返回步骤<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_vrp_ospf_cfg_005801">3.a</a>，按照初始间隔时间<em>start-interval</em>更新LSA。</li>
</ol>
<h3 id="6-17-6-配置接收LSA的时间间隔"><a href="#6-17-6-配置接收LSA的时间间隔" class="headerlink" title="6.17.6  配置接收LSA的时间间隔"></a>6.17.6  配置接收LSA的时间间隔</h3><h4 id="背景信息-24"><a href="#背景信息-24" class="headerlink" title="背景信息"></a>背景信息</h4><p>OSPF协议规定LSA的接收时间间隔1秒，是为了防止网络连接或者路由频繁动荡引起的过多占用网络带宽和设备资源。</p>
<p>在网络相对稳定、对路由收敛时间要求较高的组网环境中，可以指定LSA的接收时间间隔为0来取消LSA的接收时间间隔，使得拓扑或者路由的变化可以立即通过LSA发布到网络中，从而加快网络中路由的收敛速度。</p>
<h4 id="操作步骤-45"><a href="#操作步骤-45" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>lsa-arrival-interval</strong> { <em>interval</em> | <strong>intelligent-timer</strong> <em>max-interval</em> <em>start-interval</em> <em>hold-interval</em> }，配置LSA接收的时间间隔。</p>
</li>
</ol>
<ul>
<li><p><em>interval</em>为LSA被接收的时间间隔，单位是毫秒。</p>
</li>
<li><p><strong>intelligent-timer</strong>表示通过智能定时器设置OSPF Router LSA和Network LSA的接收间隔时间。</p>
</li>
<li><p><em>max-interval</em>为接收OSPF LSA的最长间隔时间，单位是毫秒。</p>
</li>
<li><p><em>start-interval</em>为接收OSPF LSA的初始间隔时间，单位是毫秒。</p>
</li>
<li><p><em>hold-interval</em>为接收OSPF LSA的基数间隔时间，单位是毫秒。</p>
<p>在网络相对稳定、对路由收敛时间要求较高的组网环境中，可以指定LSA被接收的时间间隔为0，使得拓扑或者路由的变化能够立即被感知到。</p>
<p>缺省情况下，使能智能定时器intelligent-timer。使能智能定时器后，接收LSA的最长间隔时间的缺省值为1000毫秒、初始间隔时间的缺省值为500毫秒、基数间隔时间的缺省值为500毫秒（以毫秒为单位的时间间隔）。接收LSA的最长间隔时间方式如下：</p>
</li>
</ul>
<ol>
<li>初次接收LSA的间隔时间由<em>start-interval</em>参数指定。</li>
<li>第n（n≥2）次接收LSA的间隔时间为<em>hold-interval</em>×2(n-2)。</li>
<li>当<em>hold-interval</em>×2(n-2)达到指定的最长间隔时间<em>max-interval</em>时，OSPF连续三次接收LSA的时间间隔都是最长间隔时间，之后，再次返回步骤<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_vrp_ospf_cfg_005901">3.a</a>，按照初始间隔时间<em>start-interval</em>接收LSA。</li>
</ol>
<h3 id="6-17-7-配置SPF计算的时间间隔"><a href="#6-17-7-配置SPF计算的时间间隔" class="headerlink" title="6.17.7  配置SPF计算的时间间隔"></a>6.17.7  配置SPF计算的时间间隔</h3><h4 id="背景信息-25"><a href="#背景信息-25" class="headerlink" title="背景信息"></a>背景信息</h4><p>当OSPF的链路状态数据库（LSDB）发生改变时，需要重新计算最短路径。如果网络频繁变化，由于不断的计算最短路径，会占用大量系统资源，影响设备的效率。通过配置智能定时器intelligent-timer，设置合理的SPF计算的间隔时间，可以避免占用过多的交换机内存和带宽资源。</p>
<h4 id="操作步骤-46"><a href="#操作步骤-46" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>spf-schedule-interval</strong> { <em>interval1</em> | <strong>intelligent-timer</strong> <em>max-interval</em> <em>start-interval</em> <em>hold-interval</em> | <strong>millisecond</strong> <em>interval2</em> }，设置SPF计算间隔。</p>
</li>
</ol>
<ul>
<li><p><em>interval1</em>为OSPF的SPF计算间隔时间，单位是秒。</p>
</li>
<li><p><strong>intelligent-timer</strong>表示通过智能定时器设置OSPF SPF计算的间隔时间。</p>
</li>
<li><p><em>max-interval</em>为OSPF SPF计算的最长间隔时间，单位是毫秒。</p>
</li>
<li><p><em>start-interval</em>为OSPF SPF计算的初始间隔时间，单位是毫秒。</p>
</li>
<li><p><em>hold-interval</em>为OSPF SPF计算的基数间隔时间，单位是毫秒。</p>
</li>
<li><p><strong>millisecond</strong> <em>interval2</em>表示OSPF的SPF计算间隔时间，单位是毫秒。</p>
<p>缺省情况下，使能智能定时器intelligent-timer，SPF计算的最长间隔时间为10000毫秒、初始间隔时间为500毫秒、基数间隔时间为1000毫秒（以毫秒为单位的时间间隔）。</p>
<p>使能智能定时器后：</p>
</li>
</ul>
<ol>
<li></li>
</ol>
<pre><code>  初次计算SPF的间隔时间由*start-interval*参数指定。</code></pre>
<ol start="2">
<li><p>第n（n≥2）次计算SPF的间隔时间为<em>hold-interval</em>×2(n-2)。</p>
</li>
<li><p>当<em>hold-interval</em>×2(n-2)达到指定的最长间隔时间<em>max-interval</em>时，OSPF连续三次计算SPF的时间间隔都是最长间隔时间，之后，再次返回步骤<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_vrp_ospf_cfg_006001">3.a</a>，按照初始间隔时间<em>start-interval</em>计算SPF。</p>
</li>
</ol>
<h3 id="6-17-8-检查配置结果"><a href="#6-17-8-检查配置结果" class="headerlink" title="6.17.8  检查配置结果"></a>6.17.8  检查配置结果</h3><h4 id="前提条件-7"><a href="#前提条件-7" class="headerlink" title="前提条件"></a>前提条件</h4><p>已经完成调整优化OSPF网络的所有配置。</p>
<h4 id="操作步骤-47"><a href="#操作步骤-47" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>brief</strong>命令查看OSPF的概要信息。</li>
</ul>
<h2 id="6-18-配置OSPF-GR"><a href="#6-18-配置OSPF-GR" class="headerlink" title="6.18  配置OSPF GR"></a>6.18  配置OSPF GR</h2><p>配置OSPF GR可以避免流量中断和主备板切换带来的路由震荡。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>对于OSPF协议，为了避免流量中断和主备板切换带来的路由震荡，可以使能OSPF协议的GR特性。</p>
<p>OSPF通过GR重启后，Restarter交换机和Helper交换机之间重新建立邻居关系，交换路由信息并同步数据库，更新路由表和转发表，从而实现OSPF快速收敛，保持网络拓扑稳定。</p>
<p> 说明：</p>
<p>在实际应用中，为了实现业务转发不受主板故障的影响，通常在双主板的硬件环境下配置OSPF GR才有意义。</p>
<h3 id="前置任务-9"><a href="#前置任务-9" class="headerlink" title="前置任务"></a>前置任务</h3><p>在配置OSPF GR特性之前，需完成以下任务：</p>
<ul>
<li>配置接口的网络层地址，使相邻节点之间网络层可达。</li>
<li><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0004">配置OSPF的基本功能</a>。</li>
</ul>
<h3 id="6-18-1-使能OSPF的opauqe-LSA特性"><a href="#6-18-1-使能OSPF的opauqe-LSA特性" class="headerlink" title="6.18.1  使能OSPF的opauqe-LSA特性"></a>6.18.1  使能OSPF的opauqe-LSA特性</h3><h4 id="操作步骤-48"><a href="#操作步骤-48" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF视图。</p>
</li>
<li><p>执行命令<strong>opaque-capability enable</strong>，使能opaque-LSA特性。</p>
</li>
</ol>
<p>   因为OSPF中通过Type-9类LSA对OSPF GR支持，所以需要首先使能OSPF的opauqe-LSA特性。</p>
<ol start="4">
<li>执行命令<strong>graceful-restart</strong>，使能OSPF GR特性。</li>
</ol>
<h3 id="6-18-2-（可选）配置Restarter端GR的会话参数"><a href="#6-18-2-（可选）配置Restarter端GR的会话参数" class="headerlink" title="6.18.2  （可选）配置Restarter端GR的会话参数"></a>6.18.2  （可选）配置Restarter端GR的会话参数</h3><h4 id="操作步骤-49"><a href="#操作步骤-49" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF视图。</p>
</li>
<li><p>执行命令<strong>graceful-restart</strong> [ <strong>period</strong> <em>period</em> | <strong>planned-only</strong> | <strong>partial</strong> ] *，配置Restarter端GR的会话参数。</p>
</li>
</ol>
<ul>
<li><strong>period</strong>用来配置Restarter端GR的周期。缺省情况下，重启的时间为120秒。</li>
<li><strong>planned-only</strong>用来配置Restarter只支持Planned GR。缺省情况下，Restarter支持Planned GR和Unplanned GR。</li>
<li><strong>partial</strong>用来配置Restarter支持Partial GR。缺省情况下，Restarter支持Totally GR。</li>
</ul>
<h3 id="6-18-3-（可选）配置Helper端GR的会话参数"><a href="#6-18-3-（可选）配置Helper端GR的会话参数" class="headerlink" title="6.18.3  （可选）配置Helper端GR的会话参数"></a>6.18.3  （可选）配置Helper端GR的会话参数</h3><h4 id="操作步骤-50"><a href="#操作步骤-50" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [<em>process-id</em> ]，进入OSPF视图。</p>
</li>
<li><p>执行命令<strong>graceful-restart helper-role</strong> { [ { <strong>ip-prefix</strong> <em>ip-prefix-name</em> | <strong>acl-number</strong> <em>acl-number</em> | <strong>acl-name</strong> <em>acl-name</em> } | <strong>ignore-external-lsa</strong> | <strong>planned-only</strong> ] * | <strong>never</strong> }，配置Helper端GR的会话参数。</p>
</li>
</ol>
<ul>
<li>acl和ip-prefix参数用来配置过滤策略，只有通过过滤器策略后才能进入Helper模式。</li>
<li><strong>ignore-external-lsa</strong>用来配置Helper不对自治系统外部的LSA（AS-external LSA）进行检查。缺省情况下，执行外部LSA检查。</li>
<li><strong>planned-only</strong>用来配置Helper只支持Planned GR。缺省情况下，Helper支持Planned GR和Unplanned GR。</li>
<li><strong>never</strong>用来配置交换机不支持Helper模式。</li>
</ul>
<h3 id="6-18-4-检查配置结果"><a href="#6-18-4-检查配置结果" class="headerlink" title="6.18.4  检查配置结果"></a>6.18.4  检查配置结果</h3><h4 id="前提条件-8"><a href="#前提条件-8" class="headerlink" title="前提条件"></a>前提条件</h4><p>已经完成OSPF GR的所有配置。</p>
<h4 id="操作步骤-51"><a href="#操作步骤-51" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>graceful-restart</strong> [ <strong>verbose</strong> ]命令查看OSPF GR信息。</li>
</ul>
<h2 id="6-19-提高OSPF网络的稳定性"><a href="#6-19-提高OSPF网络的稳定性" class="headerlink" title="6.19  提高OSPF网络的稳定性"></a>6.19  提高OSPF网络的稳定性</h2><p>稳定的OSPF网络意味路由振荡较少、设备性能正常，表现出的网络性能较好。</p>
<h3 id="应用环境-6"><a href="#应用环境-6" class="headerlink" title="应用环境"></a>应用环境</h3><p>通过设置时间间隔参数，可以减少网络中不必要的报文数量，降低设备负荷，从而提升网络性能。</p>
<h3 id="前置任务-10"><a href="#前置任务-10" class="headerlink" title="前置任务"></a>前置任务</h3><p>在提高OSPF网络的稳定性之前，需完成以下任务：</p>
<p><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0004">6.8 配置OSPF的基本功能</a>。</p>
<h3 id="配置流程-7"><a href="#配置流程-7" class="headerlink" title="配置流程"></a>配置流程</h3><p>以下配置任务（不含检查配置结果），根据应用环境选择其中一项或几项进行配置。</p>
<h3 id="6-19-1-配置OSPF的协议优先级"><a href="#6-19-1-配置OSPF的协议优先级" class="headerlink" title="6.19.1  配置OSPF的协议优先级"></a>6.19.1  配置OSPF的协议优先级</h3><h4 id="背景信息-26"><a href="#背景信息-26" class="headerlink" title="背景信息"></a>背景信息</h4><p>由于交换机上可能同时运行多个动态路由协议，就存在各个路由协议之间路由信息共享和选择的问题。系统为每一种路由协议设置一个优先级。在不同协议发现同一条路由时，优先级高的路由将被优选。</p>
<h4 id="操作步骤-52"><a href="#操作步骤-52" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>preference</strong> [ <strong>ase</strong> ] { <em>preference</em> | <strong>route-policy</strong> <em>route-policy-name</em> } *，配置OSPF协议的优先级。</p>
</li>
</ol>
<ul>
<li><p><strong>ase</strong>表示设置AS-External路由的优先级。</p>
</li>
<li><p><em>preference</em>表示OSPF协议路由的优先级。优先级的值越小，其实际的优先程度越高。</p>
</li>
<li><p><strong>route-policy</strong> <em>route-policy-name</em>表示对特定的路由通过路由策略设置优先级。</p>
<p>缺省情况下，OSPF路由的优先级为10。当指定ASE时，缺省优先级为150。</p>
</li>
</ul>
<h3 id="6-19-2-配置接口传送LSA的延迟时间"><a href="#6-19-2-配置接口传送LSA的延迟时间" class="headerlink" title="6.19.2  配置接口传送LSA的延迟时间"></a>6.19.2  配置接口传送LSA的延迟时间</h3><h4 id="操作步骤-53"><a href="#操作步骤-53" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，进入运行OSPF的接口视图。</p>
</li>
<li><p>（可选）对于以太网接口，执行命令<strong>undo portswitch</strong>，配置接口切换到三层模式。</p>
</li>
</ol>
<p>   缺省情况下，以太网接口处于二层模式。</p>
<pre><code>说明：</code></pre>
<p>   仅S5720HI、S5720EI、S6720EI和S6720S-EI支持二层模式与三层模式切换。</p>
<ol start="4">
<li>执行命令<strong>ospf trans-delay</strong> <em>interval</em>，配置接口传送LSA的延迟时间。</li>
</ol>
<p>   缺省情况下，传输延迟时间为1秒。</p>
<h3 id="6-19-3-配置邻接交换机重传LSA的间隔"><a href="#6-19-3-配置邻接交换机重传LSA的间隔" class="headerlink" title="6.19.3  配置邻接交换机重传LSA的间隔"></a>6.19.3  配置邻接交换机重传LSA的间隔</h3><h4 id="背景信息-27"><a href="#背景信息-27" class="headerlink" title="背景信息"></a>背景信息</h4><p>当一台交换机向它的邻居发送一条LSA后，需要等到对方的确认报文。若在重传间隔时间内没有收到对方的确认报文，就会向邻居重传这条LSA。</p>
<h4 id="操作步骤-54"><a href="#操作步骤-54" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，进入运行OSPF的接口视图。</p>
</li>
<li><p>（可选）对于以太网接口，执行命令<strong>undo portswitch</strong>，配置接口切换到三层模式。</p>
</li>
</ol>
<p>   缺省情况下，以太网接口处于二层模式。</p>
<pre><code>说明：</code></pre>
<p>   仅S5720HI、S5720EI、S6720EI和S6720S-EI支持二层模式与三层模式切换。</p>
<ol start="4">
<li>执行命令<strong>ospf timer retransmit</strong> <em>interval</em>，设置邻接交换机重传LSA的间隔。</li>
</ol>
<p>   缺省情况下，重传间隔时间为5秒。</p>
<pre><code>说明：</code></pre>
<p>   相邻交换机重传LSA时间间隔的值不要设置得太小，否则将会引起不必要的重传。通常应该大于一个报文在两台交换机之间传送一个来回的时间。</p>
<h3 id="6-19-4-配置Stub路由器"><a href="#6-19-4-配置Stub路由器" class="headerlink" title="6.19.4  配置Stub路由器"></a>6.19.4  配置Stub路由器</h3><h4 id="背景信息-28"><a href="#背景信息-28" class="headerlink" title="背景信息"></a>背景信息</h4><p>配置Stub路由器是一种特殊的路由选路，配置了stub router的路径不被优选。实现方法是将度量值设为最大（65535），尽量避免数据从此交换机转发。用于保护此交换机链路，通常使用在升级等维护操作的场景。</p>
<h4 id="操作步骤-55"><a href="#操作步骤-55" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>stub-router</strong> [ <strong>on-startup</strong> [ <em>interval</em> ] ]，配置Stub交换机。</p>
</li>
</ol>
<p>   缺省情况下，没有交换机为Stub路由器。</p>
<p>   如果配置了Stub路由器，缺省情况下，交换机保持为Stub路由器的时间间隔是500秒。</p>
<pre><code>说明：</code></pre>
<p>   通过此命令配置的Stub路由器与Stub区域里的交换机没有必然联系。</p>
<h3 id="6-19-5-禁止OSPF接口发送和接收协议报文"><a href="#6-19-5-禁止OSPF接口发送和接收协议报文" class="headerlink" title="6.19.5  禁止OSPF接口发送和接收协议报文"></a>6.19.5  禁止OSPF接口发送和接收协议报文</h3><h4 id="背景信息-29"><a href="#背景信息-29" class="headerlink" title="背景信息"></a>背景信息</h4><p>当用户希望本地OSPF路由信息不被其他网络中的设备获得，并且本地设备不接收网络中其他设备发布的路由更新信息的时候，可以通过配置禁止OSPF接口发送和接收协议报文来实现。</p>
<p>禁止OSPF接口发送和接收协议报文后，该接口的直连路由仍可以发布出去，但接口的Hello报文将被阻塞，无法通过此接口与相邻设备建立邻居关系。这样可以增强OSPF的组网适应能力，减少系统资源的消耗。</p>
<h4 id="操作步骤-56"><a href="#操作步骤-56" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>silent-interface</strong> { <strong>all</strong> | <em>interface-type</em> <em>interface-number</em> }，禁止OSPF接口发送和接收协议报文。</p>
</li>
</ol>
<p>   缺省情况下，允许OSPF接口发送和接收协议报文。</p>
<p>   可以在不同的OSPF进程中，禁止同一个接口发送和接收OSPF报文，但<strong>silent-interface</strong>命令只对本进程已经使能的OSPF接口起作用，对其它进程的接口不起作用。</p>
<h3 id="6-19-6-关闭OSPF异常老化触发的主备倒换功能"><a href="#6-19-6-关闭OSPF异常老化触发的主备倒换功能" class="headerlink" title="6.19.6  关闭OSPF异常老化触发的主备倒换功能"></a>6.19.6  关闭OSPF异常老化触发的主备倒换功能</h3><p>OSPF异常老化触发的主备倒换功能默认使能，如果需要关闭此功能，请配置此任务。</p>
<h4 id="背景信息-30"><a href="#背景信息-30" class="headerlink" title="背景信息"></a>背景信息</h4><p>如果设备时钟加快，老化计时器异常超时，将会导致本端设备触发异常清除对端设备的所有Router LSA，造成大规模路由震荡和业务中断。为了避免此类情况发生，设备自动使能OSPF异常老化触发的主备倒换功能，当满足以下公式时，触发主备倒换来恢复网络连通和业务流量。</p>
<p>计算公式为：(异常清除的Router LSA的数量 / Router LSA总数) * 100% ≥ 80%（这里的Router LSA指的是对端设备发到本端设备的Router LSA）。</p>
<p>如果需要关闭此功能，请执行命令<strong>ospf maxage-lsa auto-protect disable</strong>。</p>
<h4 id="操作步骤-57"><a href="#操作步骤-57" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf maxage-lsa auto-protect disable</strong>，关闭OSPF异常老化触发的主备倒换功能。</p>
</li>
</ol>
<p>   缺省情况下，OSPF异常老化触发的主备倒换功能处于使能状态。</p>
<h3 id="6-19-7-检查配置结果"><a href="#6-19-7-检查配置结果" class="headerlink" title="6.19.7  检查配置结果"></a>6.19.7  检查配置结果</h3><h4 id="前提条件-9"><a href="#前提条件-9" class="headerlink" title="前提条件"></a>前提条件</h4><p>已经完成提高OSPF网络的稳定性的所有配置。</p>
<h4 id="操作步骤-58"><a href="#操作步骤-58" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>brief</strong>命令查看OSPF的概要信息。</li>
<li>使用<strong>display ip routing-table</strong>命令查看IP路由表信息。</li>
</ul>
<h2 id="6-20-提高OSPF网络的安全性"><a href="#6-20-提高OSPF网络的安全性" class="headerlink" title="6.20  提高OSPF网络的安全性"></a>6.20  提高OSPF网络的安全性</h2><h3 id="应用环境-7"><a href="#应用环境-7" class="headerlink" title="应用环境"></a>应用环境</h3><p>在安全性较高的网络中，可以通过配置OSPF验证特性和GTSM机制来提高OSPF网络的安全性。</p>
<p> 说明：</p>
<p>GTSM只支持单播地址，因此在OSPF中GTSM的作用范围主要是虚连接和伪连接。</p>
<h3 id="前置任务-11"><a href="#前置任务-11" class="headerlink" title="前置任务"></a>前置任务</h3><p>在提高OSPF网络的安全性之前，需完成以下任务：</p>
<ul>
<li>配置接口的网络层地址，使各相邻节点网络层可达。</li>
<li><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0004">6.8 配置OSPF的基本功能</a>。</li>
</ul>
<h3 id="配置流程-8"><a href="#配置流程-8" class="headerlink" title="配置流程"></a>配置流程</h3><p>以下配置任务（不含检查配置结果），根据应用环境选择其中一项或几项进行配置。</p>
<h3 id="6-20-1-配置OSPF-GTSM功能"><a href="#6-20-1-配置OSPF-GTSM功能" class="headerlink" title="6.20.1  配置OSPF GTSM功能"></a>6.20.1  配置OSPF GTSM功能</h3><h4 id="背景信息-31"><a href="#背景信息-31" class="headerlink" title="背景信息"></a>背景信息</h4><p>配置GTSM功能，通过检测IP报文头中的TTL值是否在一个预先定义好的特定范围内来对交换机进行保护，增强系统的安全性。</p>
<p>应用GTSM功能，需要在OSPF连接的两端都使能GTSM。</p>
<p>被检测的报文的TTL值有效范围为 [ 255–<em>hops</em>+1, 255 ]。</p>
<p>GTSM只会对匹配GTSM策略的报文进行TTL检查。对于未匹配策略的报文，可以设置为通过或丢弃。如果配置GTSM缺省报文动作为丢弃，就需要在GTSM中配置所有可能的交换机连接情况，没有配置的交换机发送的报文将被丢弃，无法建立连接。因此，在保证安全性的同时会损失一些易用性。</p>
<p>对于丢弃的报文，可以通过LOG信息开关，控制是否对报文被丢弃的情况记录日志，以方便故障的定位。</p>
<h4 id="操作步骤-59"><a href="#操作步骤-59" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf valid-ttl-hops</strong> <em>hops</em> [ <strong>nonstandard-multicast</strong> ] [ <strong>vpn-instance</strong> <em>vpn-instance-name</em> ]，配置OSPF GTSM功能。</p>
</li>
</ol>
<pre><code>说明：</code></pre>
<p>   <strong>ospf valid-ttl-hops</strong>命令有两个功能，一是使能OSPF GTSM特性，二是配置需要检测的TTL值。<strong>vpn-instance</strong>参数只对后一个功能有效。因此，如果仅配置私网策略或仅配置公网策略，建议将未匹配GTSM策略的报文的缺省动作设置为<strong>pass</strong>，以免其他实例的OSPF报文被错误地丢弃。</p>
<ol start="3">
<li>（可选）执行命令<strong>gtsm default-action</strong> { <strong>drop</strong> | <strong>pass</strong> }，设置未匹配GTSM策略的报文的缺省动作。</li>
</ol>
<p>   缺省情况下，未匹配GTSM策略的报文可以通过过滤。</p>
<pre><code>说明：</code></pre>
<p>   如果仅仅配置了缺省动作，但没有配置GTSM策略时，GTSM不起作用。</p>
<ol start="4">
<li>（可选）执行命令<strong>gtsm log drop-packet</strong> <strong>all</strong>，打开设备的LOG信息的开关，在设备GTSM丢弃报文时记录LOG信息。</li>
</ol>
<h3 id="6-20-2-区域验证方式"><a href="#6-20-2-区域验证方式" class="headerlink" title="6.20.2  区域验证方式"></a>6.20.2  区域验证方式</h3><h4 id="背景信息-32"><a href="#背景信息-32" class="headerlink" title="背景信息"></a>背景信息</h4><p>使用区域验证时，一个区域中所有的交换机在该区域下的验证模式和口令必须一致。例如，在Area0内所有交换机上配置验证模式为简单验证，口令为abc。</p>
<p><img src="http://support.huawei.com/enterprise/product/images/5bf7fc7c2b06498782a61a01fdd10e10" alt="img" loading="lazy"> 注意：</p>
<p>在配置区域认证模式时，如果使用<strong>plain</strong>选项，密码将以明文形式保存在配置文件中，存在安全隐患。建议使用<strong>cipher</strong>选项，将密码加密保存。</p>
<p>Simple、MD5和HMAC-MD5密文验证模式存在安全风险，推荐使用HMAC-SHA256密文验证模式。</p>
<h4 id="操作步骤-60"><a href="#操作步骤-60" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</p>
</li>
<li><p>执行命令<strong>area</strong> <em>area-id</em>，进入OSPF区域视图。</p>
</li>
<li><p>请根据需求，配置OSPF区域的验证模式。</p>
</li>
</ol>
<ul>
<li><p>执行命令<strong>authentication-mode simple</strong> [ <strong>plain</strong> <em>plain-text</em> | [ <strong>cipher</strong> ] <em>cipher-text</em> ]，配置OSPF区域的验证模式（简单验证）。</p>
<ul>
<li><strong>plain</strong>表示明文类型的认证密码。</li>
<li><strong>cipher</strong>表示密文类型的认证密码。对于MD5/HMAC-MD5验证模式，当此参数缺省时，默认为<strong>cipher</strong>类型。</li>
</ul>
</li>
<li><p>执行命令<strong>authentication-mode</strong> { <strong>md5</strong> | <strong>hmac-md5</strong> | <strong>hmac-sha256</strong> } [ <em>key-id</em> { <strong>plain</strong> <em>plain-text</em> | [ <strong>cipher</strong> ] <em>cipher-text</em> } ]，配置OSPF区域的验证模式。</p>
<ul>
<li><strong>md5</strong>表示使用MD5密文验证模式。</li>
<li><strong>hmac-md5</strong>表示使用hmac-md5密文验证模式。</li>
<li><strong>hmac-sha256</strong>表示使用hmac-sha256密文验证模式</li>
<li><em>key-id</em>表示密文验证的验证字标识符。</li>
</ul>
</li>
<li><p>执行命令<strong>authentication-mode</strong> <strong>keychain</strong> <em>keychain-name</em>，配置OSPF区域的Keychain验证模式。</p>
</li>
</ul>
<pre><code>  说明：

 使用Keychain验证模式，需要在系统视图下配置Keychain信息。必须保证本端ActiveSendKey和对端ActiveRecvKey的**key-id**、**algorithm**、**key-string**相同，才能建立OSPF邻居。

 仅S5720EI、S5720HI、S6720S-EI和S6720EI支持**keychain** *keychain-name*参数。</code></pre>
<h3 id="6-20-3-接口验证方式"><a href="#6-20-3-接口验证方式" class="headerlink" title="6.20.3  接口验证方式"></a>6.20.3  接口验证方式</h3><h4 id="背景信息-33"><a href="#背景信息-33" class="headerlink" title="背景信息"></a>背景信息</h4><p>接口验证方式用于在相邻的交换机之间设置验证模式和口令，优先级高于区域验证方式。</p>
<p><img src="http://support.huawei.com/enterprise/product/images/5bf7fc7c2b06498782a61a01fdd10e10" alt="img" loading="lazy"> 注意：</p>
<p>在配置接口认证模式时，如果使用<strong>plain</strong>选项，密码将以明文形式保存在配置文件中，存在安全隐患。建议使用<strong>cipher</strong>选项，将密码加密保存。</p>
<p>Simple、MD5和HMAC-MD5验证模式存在安全风险，推荐使用HMAC-SHA256验证模式。</p>
<h4 id="操作步骤-61"><a href="#操作步骤-61" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，进入运行OSPF的接口视图。</p>
</li>
<li><p>（可选）对于以太网接口，执行命令<strong>undo portswitch</strong>，配置接口切换到三层模式。</p>
</li>
</ol>
<p>   缺省情况下，以太网接口处于二层模式。</p>
<pre><code>说明：</code></pre>
<p>   仅S5720HI、S5720EI、S6720EI和S6720S-EI支持二层模式与三层模式切换。</p>
<ol start="4">
<li>请根据需求，配置接口验证方式。</li>
</ol>
<ul>
<li><p>执行命令<strong>ospf authentication-mode simple</strong> [ <strong>plain</strong> <em>plain-text</em> | [ <strong>cipher</strong> ] <em>cipher-text</em> ]，配置OSPF接口的验证模式（简单验证）。</p>
<ul>
<li><strong>simple</strong>表示使用简单验证模式。</li>
<li><strong>plain</strong>表示明文类型的认证密码。</li>
<li><strong>cipher</strong>表示密文类型的认证密码。对于MD5或者HMAC-MD5验证模式，当此参数缺省时，默认为<strong>cipher</strong>类型。</li>
</ul>
</li>
<li><p>执行命令<strong>ospf authentication-mode</strong> { <strong>md5</strong> | <strong>hmac-md5</strong> | <strong>hmac-sha256</strong> } [ <em>key-id</em> { <strong>plain</strong> <em>plain-text</em> | [ <strong>cipher</strong> ] <em>cipher-text</em> } ]，配置OSPF接口的验证模式。</p>
<ul>
<li><strong>md5</strong>表示使用MD5密文验证模式。</li>
<li><strong>hmac-md5</strong>表示使用hmac-md5密文验证模式。</li>
<li><strong>hmac-sha256</strong>表示使用hmac-sha256密文验证模式</li>
</ul>
</li>
<li><p>执行命令<strong>ospf authentication-mode null</strong>，不对OSPF接口进行验证。</p>
</li>
<li><p>执行命令<strong>ospf authentication-mode</strong> <strong>keychain</strong> <em>keychain-name</em>，配置OSPF区域的Keychain验证模式。</p>
</li>
</ul>
<pre><code>  说明：

 使用Keychain验证模式，需要在系统视图下配置Keychain信息。必须保证本端ActiveSendKey和对端ActiveRecvKey的**key-id**、**algorithm**、**key-string**相同，才能建立OSPF邻居。

 仅S5720EI、S5720HI、S6720S-EI和S6720EI支持**keychain** *keychain-name*参数。</code></pre>
<h3 id="6-20-4-检查配置结果"><a href="#6-20-4-检查配置结果" class="headerlink" title="6.20.4  检查配置结果"></a>6.20.4  检查配置结果</h3><h4 id="前提条件-10"><a href="#前提条件-10" class="headerlink" title="前提条件"></a>前提条件</h4><p>已经完成提高OSPF网络的安全性的所有配置。</p>
<h4 id="操作步骤-62"><a href="#操作步骤-62" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li>使用<strong>display gtsm statistics</strong> { <em>slot-id</em> | <strong>all</strong> }命令查看GTSM的统计信息。</li>
<li>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>request-queue</strong> [ <em>interface-type</em> <em>interface-number</em> ] [ <em>neighbor-id</em> ]命令查看OSPF请求列表。</li>
<li>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>retrans-queue</strong> [ <em>interface-type</em> <em>interface-number</em> ] [ <em>neighbor-id</em> ]命令查看OSPF重传列表。</li>
<li>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>error</strong> [ <strong>lsa</strong> ]命令查看OSPF的错误信息</li>
</ul>
<h2 id="6-21-配置OSPF邻居震荡抑制"><a href="#6-21-配置OSPF邻居震荡抑制" class="headerlink" title="6.21  配置OSPF邻居震荡抑制"></a>6.21  配置OSPF邻居震荡抑制</h2><p>配置OSPF邻居震荡抑制功能，通过延迟邻居建立或调整链路开销为最大值的方法达到抑制震荡的目的。</p>
<h3 id="应用环境-8"><a href="#应用环境-8" class="headerlink" title="应用环境"></a>应用环境</h3><p>如果承载OSPF业务的接口状态在Up和Down之间切换，就会引起邻居状态的频繁震荡。此时，OSPF会快速发送Hello报文重新建立邻居，同步数据库LSDB，触发路由计算，会造成大量报文交互，影响现有邻居的稳定性，对OSPF业务造成较大影响，同时也会影响依赖OSPF的其他业务（如：LDP、BGP）的正常运行。为了解决这个问题，OSPF实现了邻居震荡抑制功能，即在邻居频繁震荡时，启动震荡抑制，实现邻居延迟建立，或实现业务流量延迟经过频繁震荡的链路，达到抑制震荡的目的。</p>
<p> 说明：</p>
<p>以下步骤均为可选步骤，请根据实际情况选择配置。</p>
<h3 id="前置任务-12"><a href="#前置任务-12" class="headerlink" title="前置任务"></a>前置任务</h3><p>在配置OSPF邻居震荡抑制之前，需完成以下任务：</p>
<ul>
<li>配置接口的网络层地址，使相邻节点之间网络层可达。</li>
<li><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0004">6.8 配置OSPF的基本功能</a>。</li>
</ul>
<h4 id="操作步骤-63"><a href="#操作步骤-63" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>执行命令<strong>system-view</strong>，进入系统视图。</li>
</ol>
<p>   缺省情况下，OSPF邻居震荡抑制功能处于全局使能状态，执行<strong>suppress-flapping peer disable</strong>命令可以去使能此功能。</p>
<ol start="2">
<li>执行命令<strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，进入接口视图。</li>
</ol>
<p>   缺省情况下，OSPF邻居震荡抑制功能处于全局使能状态，即进程中所有接口的OSPF邻居震荡抑制功能处于使能状态，如果需要在某一指定接口去使能OSPF邻居震荡抑制功能，执行<strong>ospf suppress-flapping peer disable</strong>命令可以在指定接口去使能OSPF邻居震荡抑制功能。</p>
<ol start="3">
<li>执行命令<strong>ospf suppress-flapping peer hold-down</strong> <em>interval</em>，配置震荡抑制模式为Hold-down模式，并设置抑制持续时间。</li>
</ol>
<p>   OSPF邻居震荡抑制分为Hold-down和Hold-max-cost两种模式：</p>
<ul>
<li><p>Hold-down模式：针对邻居建立过程中的频繁泛洪和拓扑变化的问题，在一段时间内禁止该邻居重新建立，避免频繁的数据库同步和大量的报文交互。</p>
</li>
<li><p>Hold-max-cost模式：针对用户业务流量频繁切换的问题，在一段时间内将链路开销值设置为最大值Max-cost（65535），避免用户的业务流量经过频繁震荡的链路。</p>
<p>Hold-down模式和Hold-max-cost模式可以叠加使用，同时生效时，先进入Hold-down模式，待Hold-down模式退出后，再进入Hold-max-cost模式。</p>
<p>缺省情况下，Hold-down模式处于去使能状态，Hold-max-cost模式处于使能状态。</p>
<p>执行<strong>ospf suppress-flapping peer hold-max-cost disable</strong>命令可以取消Hold-max-cost邻居震荡抑制模式。</p>
</li>
</ul>
<ol start="4">
<li>执行命令<strong>ospf suppress-flapping peer</strong> { <strong>detecting-interval</strong> <em>detecting-interval</em> | <strong>threshold</strong> <em>threshold</em> | <strong>resume-interval</strong> <em>resume-interval</em> } *，配置OSPF邻居震荡抑制的检测参数。</li>
</ol>
<p>   OSPF接口启动一个flapping-count计数器，相邻两次邻居状态由Full切换为非Full的时间间隔小于<em>detecting-interval</em>时，设备识别为一次有效震荡事件，flapping-count计数加1。flapping-count（有效震荡事件次数）大于等于<em>threshold</em>时，进入震荡抑制阶段。相邻两次邻居状态由Full切换为非Full的时间间隔大于<em>resume-interval</em>，flapping-count清0。</p>
<pre><code>说明：</code></pre>
<p>   <em>resume-interval</em>必须大于<em>detecting-interval</em>。</p>
<p>   根据网络的实际情况，可以在指定接口设置OSPF邻居震荡抑制的检测参数。推荐使用缺省值，缺省情况下，指定接口的OSPF邻居震荡抑制的震荡检测门限为60秒，震荡抑制门限为10，震荡检测恢复门限为120秒。</p>
<ol start="5">
<li><p>执行命令<strong>quit</strong>，返回系统视图。</p>
</li>
<li><p>执行命令<strong>quit</strong>，返回用户视图。</p>
</li>
<li><p>执行命令<strong>reset ospf</strong> <em>process-id</em> <strong>suppress-flapping</strong> <strong>peer</strong> [ <em>interface-type</em> <em>interface-number</em> ] [ <strong>notify-peer</strong> ]，强制OSPF接口退出邻居震荡抑制阶段。</p>
</li>
</ol>
<pre><code>说明：</code></pre>
<p>   退出邻居震荡抑制阶段有以下几种方式：</p>
<ul>
<li>抑制定时器超时。</li>
<li>复位OSPF进程。</li>
<li>执行<strong>suppress-flapping peer disable（OSPF）</strong>命令全局去使能OSPF邻居震荡抑制功能。</li>
<li>执行<strong>reset ospf suppress-flapping peer</strong>命令强制退出震荡抑制阶段。</li>
</ul>
<h3 id="检查配置结果-1"><a href="#检查配置结果-1" class="headerlink" title="检查配置结果"></a>检查配置结果</h3><p>执行命令<strong>display ospf</strong> [ <em>process-id</em> ] <strong>interface</strong> <em>interface-type</em> <em>interface-number</em> <strong>verbose</strong>，可以查看OSPF邻居震荡抑制的状态。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HUAWEI&gt; display ospf interface vlanif 100 verbose</span><br><span class="line">           OSPF Process 1 with Router ID 10.1.1.2</span><br><span class="line">                  Interfaces</span><br><span class="line">                  </span><br><span class="line"> Interface: 10.0.0.2 (VLANIF100)</span><br><span class="line"> Cost: 1       State: DR        Type: Broadcast    MTU: 1500</span><br><span class="line"> Priority: 1</span><br><span class="line"> Designated Router: 10.0.0.2</span><br><span class="line"> Backup Designated Router: 10.0.0.1</span><br><span class="line"> Timers: Hello 10 , Dead 40 , Poll  120 , Retransmit 5 , Transmit Delay 1</span><br><span class="line">  IO Statistics</span><br><span class="line">             Type        Input     Output</span><br><span class="line">            Hello       161367      10436</span><br><span class="line"> DB Description             18         18</span><br><span class="line"> Link-State Req              5          6</span><br><span class="line"> Link-State Update       203780       210</span><br><span class="line"> Link-State Ack          90411        276</span><br><span class="line"> ALLSPF GROUP</span><br><span class="line"> ALLDR GROUP</span><br><span class="line"> OpaqueId: 1   PrevState: BDR</span><br><span class="line"> Effective cost: 1, enabled by OSPF Protocol.</span><br><span class="line"> Suppress flapping peer: enable(flapping-count: 0, threshold: 20)</span><br></pre></td></tr></table></figure>

<p>通过显示信息中<strong>Suppress flapping peer</strong>字段，可以看出OSPF邻居震荡抑制处于enable模式，以及震荡抑制的开始时间和震荡抑制退出的倒计时时间。</p>
<h2 id="6-22-配置OSPF网管功能"><a href="#6-22-配置OSPF网管功能" class="headerlink" title="6.22  配置OSPF网管功能"></a>6.22  配置OSPF网管功能</h2><p>OSPF同时支持网管功能，可以配置OSPF MIB与某一进程绑定，以及发送Trap消息和日志功能。</p>
<h3 id="前置任务-13"><a href="#前置任务-13" class="headerlink" title="前置任务"></a>前置任务</h3><p>在配置OSPF的网管功能之前，需要完成以下任务：</p>
<ul>
<li>配置接口的网络层地址，使相邻节点网络层可达。</li>
<li><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#dc_cfg_ospf_0004">配置OSPF的基本功能</a>。</li>
</ul>
<h3 id="配置流程-9"><a href="#配置流程-9" class="headerlink" title="配置流程"></a>配置流程</h3><p>以下配置任务（不含检查配置结果），根据应用环境选择其中一项或几项进行配置。</p>
<h3 id="6-22-1-配置OSPF-MIB绑定"><a href="#6-22-1-配置OSPF-MIB绑定" class="headerlink" title="6.22.1  配置OSPF MIB绑定"></a>6.22.1  配置OSPF MIB绑定</h3><h4 id="背景信息-34"><a href="#背景信息-34" class="headerlink" title="背景信息"></a>背景信息</h4><p>当启动了多个OSPF进程时，可以配置OSPF MIB对哪个进程进行处理，即绑定在哪个进程。</p>
<p>请在运行OSPF协议的交换机上进行以下配置。</p>
<h4 id="操作步骤-64"><a href="#操作步骤-64" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>执行命令<strong>system-view</strong>，进入系统视图。</li>
<li>执行命令<strong>ospf mib-binding</strong> <em>process-id</em>，配置OSPF MIB绑定。</li>
</ol>
<h3 id="6-22-2-配置OSPF-TRAP功能"><a href="#6-22-2-配置OSPF-TRAP功能" class="headerlink" title="6.22.2  配置OSPF TRAP功能"></a>6.22.2  配置OSPF TRAP功能</h3><h4 id="操作步骤-65"><a href="#操作步骤-65" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>执行命令<strong>system-view</strong>，进入系统视图。</p>
</li>
<li><p>执行命令<strong>snmp-agent trap enable feature-name ospf</strong> [ <strong>trap-name</strong> { <strong>ospfifauthfailure</strong> | <strong>ospfifconfigerror</strong> | <strong>ospfifrxbadpacket</strong> | <strong>ospfifstatechange</strong> | <strong>ospflsdbapproachingoverflow</strong> | <strong>ospflsdboverflow</strong> | <strong>ospfmaxagelsa</strong> | <strong>ospfnbrrestarthelperstatuschange</strong> | <strong>ospfnbrstatechange</strong> | <strong>ospfnssatranslatorstatuschange</strong> | <strong>ospforiginatelsa</strong> | <strong>ospfrestartstatuschange</strong> | <strong>ospftxretransmit</strong> | <strong>ospfvirtifauthfailure</strong> | <strong>ospfvirtifconfigerror</strong> | <strong>ospfvirtifrxbadpacket</strong> | <strong>ospfvirtifstatechange</strong> | <strong>ospfvirtiftxretransmit</strong> | <strong>ospfvirtnbrrestarthelperstatuschange</strong> | <strong>ospfvirtnbrstatechange</strong> } ]，打开OSPF模块的告警开关。</p>
</li>
</ol>
<p>   如果只打开某个或几个事件的告警开关时，请选择<strong>trap-name</strong>。</p>
<h3 id="6-22-3-配置OSPF日志信息功能"><a href="#6-22-3-配置OSPF日志信息功能" class="headerlink" title="6.22.3  配置OSPF日志信息功能"></a>6.22.3  配置OSPF日志信息功能</h3><h4 id="操作步骤-66"><a href="#操作步骤-66" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>执行命令<strong>system-view</strong>，进入系统视图。</li>
<li>执行命令<strong>ospf</strong> [ <em>process-id</em> ]，进入OSPF进程视图。</li>
<li>执行命令<strong>enable log</strong> [ <strong>config</strong> | <strong>error</strong> | <strong>state</strong> | <strong>snmp-trap</strong> ]，使能日志信息。</li>
</ol>
<h3 id="6-22-4-检查配置结果"><a href="#6-22-4-检查配置结果" class="headerlink" title="6.22.4  检查配置结果"></a>6.22.4  检查配置结果</h3><h4 id="前提条件-11"><a href="#前提条件-11" class="headerlink" title="前提条件"></a>前提条件</h4><p>已经完成OSPF网管功能的所有配置。</p>
<h4 id="操作步骤-67"><a href="#操作步骤-67" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li>使用<strong>display ospf</strong> [ <em>process-id</em> ] <strong>brief</strong>命令查看OSPF MIB绑定信息。</li>
<li>使用<strong>display snmp-agent trap feature-name ospf all</strong>命令查看OSPF模块的所有告警信息。</li>
</ul>
<h2 id="6-23-维护OSPF"><a href="#6-23-维护OSPF" class="headerlink" title="6.23  维护OSPF"></a>6.23  维护OSPF</h2><p>维护OSPF，包括清除和复位OSPF。</p>
<h3 id="6-23-1-清除OSPF"><a href="#6-23-1-清除OSPF" class="headerlink" title="6.23.1  清除OSPF"></a>6.23.1  清除OSPF</h3><h4 id="背景信息-35"><a href="#背景信息-35" class="headerlink" title="背景信息"></a>背景信息</h4><p><img src="http://support.huawei.com/enterprise/product/images/5bf7fc7c2b06498782a61a01fdd10e10" alt="img" loading="lazy"> 注意：</p>
<p>清除OSPF的信息后，以前的信息将无法恢复，务必仔细确认。</p>
<p>在确认需要清除OSPF的运行信息后，请在用户视图下执行以下命令。</p>
<h4 id="操作步骤-68"><a href="#操作步骤-68" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li>执行<strong>reset ospf</strong> [ <em>process-id</em> ] <strong>counters</strong> [ <strong>neighbor</strong> [ <em>interface-type</em> <em>interface-number</em> ] [ <em>router-id</em> ] ]命令清除OSPF计数器。</li>
</ul>
<ul>
<li><strong>counters</strong>表示用来将OSPF计数器清零。</li>
<li><strong>neighbor</strong>表示指定接口上邻居的信息。</li>
</ul>
<ul>
<li><p>执行<strong>reset ospf</strong> [ <em>process-id</em> ] <strong>redistribution</strong>命令重新引入路由。</p>
</li>
<li><p>执行<strong>reset gtsm statistics</strong> <strong>all</strong>命令清除设备上的GTSM统计信息。</p>
</li>
</ul>
<h3 id="6-23-2-复位OSPF"><a href="#6-23-2-复位OSPF" class="headerlink" title="6.23.2  复位OSPF"></a>6.23.2  复位OSPF</h3><h4 id="背景信息-36"><a href="#背景信息-36" class="headerlink" title="背景信息"></a>背景信息</h4><p><img src="http://support.huawei.com/enterprise/product/images/5bf7fc7c2b06498782a61a01fdd10e10" alt="img" loading="lazy"> 注意：</p>
<p>复位OSPF连接（执行<strong>reset ospf</strong>命令）会导致交换机之间的OSPF邻接关系中断。务必仔细确认是否必须执行复位OSPF连接的操作。</p>
<p>如果需要复位OSPF连接，可在用户视图下选择执行以下命令。</p>
<h4 id="操作步骤-69"><a href="#操作步骤-69" class="headerlink" title="操作步骤"></a>操作步骤</h4><ul>
<li>在用户视图下执行<strong>reset ospf</strong> [ <em>process-id</em> ] <strong>process</strong> [ <strong>flush-waiting-timer</strong> <em>time</em> | <strong>graceful-restart</strong> ]命令重启OSPF进程。</li>
</ul>
<h2 id="6-24-配置举例"><a href="#6-24-配置举例" class="headerlink" title="6.24  配置举例"></a>6.24  配置举例</h2><p>介绍OSPF配置举例。请结合配置流程图了解配置过程。配置示例中包括组网需求、配置思路等。</p>
<h3 id="6-24-1-配置OSPF基本功能示例"><a href="#6-24-1-配置OSPF基本功能示例" class="headerlink" title="6.24.1  配置OSPF基本功能示例"></a>6.24.1  配置OSPF基本功能示例</h3><h4 id="组网需求"><a href="#组网需求" class="headerlink" title="组网需求"></a>组网需求</h4><p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_cfg_ospf_105901">图6-69</a>所示，网络中有三台交换机。现在需要实现三台交换机之间能够互通，且以后能依据SwitchA和SwitchB为主要的业务设备来继续扩展整个网络。</p>
<p><strong>图6-69</strong>  配置OSPF基本功能组网图<br><img src="http://support.huawei.com/enterprise/product/images/4d913fc7efbe48c0a33c55ea292d0624" alt="img" loading="lazy"></p>
<h4 id="配置思路"><a href="#配置思路" class="headerlink" title="配置思路"></a>配置思路</h4><p>采用如下的思路配置OSPF基本功能：</p>
<ol>
<li>在各交换机的VLANIF接口上配置IP地址并配置各接口所属VLAN，实现网段内的互通。</li>
<li>在各交换机上配置OSPF基本功能，并且以SwitchA为ABR将OSPF网络划分为Area0和Area1两个区域，实现后续以SwitchA和SwitchB所在区域为骨干区域来扩展整个OSPF网络。</li>
</ol>
<h4 id="操作步骤-70"><a href="#操作步骤-70" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>配置各接口所属的VLAN</li>
</ol>
<p>   # 配置SwitchA。SwitchB和SwitchC的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HUAWEI&gt; system-view</span><br><span class="line">[HUAWEI] sysname SwitchA</span><br><span class="line">[SwitchA] vlan batch 10 20</span><br><span class="line">[SwitchA] interface gigabitethernet 0&#x2F;0&#x2F;1</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] port link-type trunk</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] port trunk allow-pass vlan 10</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] quit</span><br><span class="line">[SwitchA] interface gigabitethernet 0&#x2F;0&#x2F;2</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] port link-type trunk</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] port trunk allow-pass vlan 20</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] quit</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>配置各VLANIF接口的IP地址</li>
</ol>
<p>   # 配置SwitchA。SwitchB和SwitchC的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] interface vlanif 10</span><br><span class="line">[SwitchA-Vlanif10] ip address 192.168.0.1 24</span><br><span class="line">[SwitchA-Vlanif10] quit</span><br><span class="line">[SwitchA] interface vlanif 20</span><br><span class="line">[SwitchA-Vlanif20] ip address 192.168.1.1 24</span><br><span class="line">[SwitchA-Vlanif20] quit</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>配置OSPF基本功能</li>
</ol>
<p>   # 配置SwitchA。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] ospf 1 router-id 10.1.1.1</span><br><span class="line">[SwitchA-ospf-1] area 0</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] network 192.168.0.0 0.0.0.255</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchA-ospf-1] area 1</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.1] network 192.168.1.0 0.0.0.255</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.1] return</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchB。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchB] ospf 1 router-id 10.2.2.2</span><br><span class="line">[SwitchB-ospf-1] area 0</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] network 192.168.0.0 0.0.0.255</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] return</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchC。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] ospf 1 router-id 10.3.3.3</span><br><span class="line">[SwitchC-ospf-1] area 1</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.1] network 192.168.1.0 0.0.0.255</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.1] return</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>验证配置结果</li>
</ol>
<p>   # 查看SwitchA的OSPF邻居。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchA&gt; display ospf peer</span><br><span class="line"></span><br><span class="line">          OSPF Process 1 with Router ID 10.1.1.1</span><br><span class="line">                  Neighbors</span><br><span class="line"></span><br><span class="line"> Area 0.0.0.0 interface 192.168.0.1(Vlanif10)&#39;s neighbors</span><br><span class="line">Router ID: 10.2.2.2      Address: 192.168.0.2</span><br><span class="line">   State: Full  Mode:Nbr is  Master  Priority: 1</span><br><span class="line">   DR: 192.168.0.2  BDR: 192.168.0.1   MTU: 0</span><br><span class="line">   Dead timer due in 36  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:15:04</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br><span class="line"></span><br><span class="line">                  Neighbors</span><br><span class="line"></span><br><span class="line"> Area 0.0.0.1 interface 192.168.1.1(Vlanif20)&#39;s neighbors</span><br><span class="line">Router ID: 10.3.3.3       Address: 192.168.1.2</span><br><span class="line">   State: Full  Mode:Nbr is  Master  Priority: 1</span><br><span class="line">   DR: 192.168.1.2  BDR: 192.168.1.1   MTU: 0</span><br><span class="line">   Dead timer due in 39  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:07:32</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br></pre></td></tr></table></figure>

<p>   # 查看SwitchC的OSPF路由信息。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchC&gt; display ospf routing</span><br><span class="line"></span><br><span class="line">          OSPF Process 1 with Router ID 10.3.3.3</span><br><span class="line">                   Routing Tables</span><br><span class="line"></span><br><span class="line"> Routing for Network</span><br><span class="line"> Destination      Cost  Type         NextHop         AdvRouter       Area</span><br><span class="line"> 192.168.1.0&#x2F;24    1    Transit      192.168.1.2     10.3.3.3        0.0.0.1</span><br><span class="line"> 192.168.0.0&#x2F;24    2    Inter-area   192.168.1.1     10.1.1.1        0.0.0.1</span><br><span class="line"></span><br><span class="line"> Total Nets: 2</span><br><span class="line"> Intra Area: 1  Inter Area: 1  ASE: 0  NSSA: 0</span><br></pre></td></tr></table></figure>

<p>   由以上回显可以看出，SwitchC有到192.168.0.0/24网段的路由，且此路由被标识为区域间路由。</p>
<p>   # 查看SwitchB的路由表，并使用Ping测试SwitchB和SwitchC的连通性。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchB&gt; display ospf routing</span><br><span class="line"></span><br><span class="line">          OSPF Process 1 with Router ID 10.2.2.2</span><br><span class="line">                   Routing Tables</span><br><span class="line"></span><br><span class="line"> Routing for Network</span><br><span class="line"> Destination        Cost  Type       NextHop      AdvRouter       Area</span><br><span class="line"> 192.168.0.0&#x2F;24     1     Transit    192.168.0.2  10.2.2.2        0.0.0.0</span><br><span class="line"> 192.168.1.0&#x2F;24     2     Inter-area 192.168.0.1  10.1.1.1        0.0.0.0</span><br><span class="line"></span><br><span class="line"> Total Nets: 2</span><br><span class="line"> Intra Area: 1  Inter Area: 1  ASE: 0  NSSA: 0</span><br></pre></td></tr></table></figure>

<p>   由以上回显可以看出，SwitchB有到192.168.1.0/24网段的路由，且此路由被标识为区域间路由。</p>
<p>   # 在SwitchB上使用Ping测试SwitchB和SwitchC之间的连通性。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchB&gt; ping 192.168.1.2</span><br><span class="line">  PING 192.168.1.2: 56  data bytes, press CTRL_C to break</span><br><span class="line">    Reply from 192.168.1.2: bytes&#x3D;56 Sequence&#x3D;1 ttl&#x3D;253 time&#x3D;62 ms</span><br><span class="line">    Reply from 192.168.1.2: bytes&#x3D;56 Sequence&#x3D;2 ttl&#x3D;253 time&#x3D;16 ms</span><br><span class="line">    Reply from 192.168.1.2: bytes&#x3D;56 Sequence&#x3D;3 ttl&#x3D;253 time&#x3D;62 ms</span><br><span class="line">    Reply from 192.168.1.2: bytes&#x3D;56 Sequence&#x3D;4 ttl&#x3D;253 time&#x3D;94 ms</span><br><span class="line">    Reply from 192.168.1.2: bytes&#x3D;56 Sequence&#x3D;5 ttl&#x3D;253 time&#x3D;63 ms</span><br><span class="line"></span><br><span class="line">  --- 192.168.1.2 ping statistics ---</span><br><span class="line">    5 packet(s) transmitted</span><br><span class="line">    5 packet(s) received</span><br><span class="line">    0.00% packet loss</span><br><span class="line">    round-trip min&#x2F;avg&#x2F;max &#x3D; 16&#x2F;59&#x2F;94 ms</span><br></pre></td></tr></table></figure>







<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><ul>
<li><p>SwitchA的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchA</span><br><span class="line">#</span><br><span class="line">vlan batch 10 20</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 192.168.0.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif20</span><br><span class="line"> ip address 192.168.1.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 20</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.1.1.1</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.0.0 0.0.0.255</span><br><span class="line"> area 0.0.0.1</span><br><span class="line">  network 192.168.1.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchB的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchB</span><br><span class="line">#</span><br><span class="line">vlan batch 10</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 192.168.0.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.2.2.2</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.0.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchC的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchC</span><br><span class="line">#</span><br><span class="line">vlan batch 20</span><br><span class="line">#</span><br><span class="line">interface Vlanif20</span><br><span class="line"> ip address 192.168.1.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 20</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.3.3.3</span><br><span class="line"> area 0.0.0.1</span><br><span class="line">  network 192.168.1.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h3 id="6-24-2-配置OSPF的DR选择示例"><a href="#6-24-2-配置OSPF的DR选择示例" class="headerlink" title="6.24.2  配置OSPF的DR选择示例"></a>6.24.2  配置OSPF的DR选择示例</h3><h4 id="组网需求-1"><a href="#组网需求-1" class="headerlink" title="组网需求"></a>组网需求</h4><p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_cfg_ospf_106601">图6-70</a>所示，部署OSPF协议的网络中有五台交换机，其中Switch作为二层交换机连接其他运行OSPF协议的四台交换机。由于之前四台设备之间缺省选举的DR不符合网络需求，现在需要让SwitchA被选举为DR来和OSPF网络其他设备交互LSA信息，而SwitchC则作为SwitchA的备份。而SwitchB由于其他业务需要，只能让它通过DR来与OSPF网络其他设备交互LSA信息。</p>
<p><strong>图6-70</strong>  配置OSPF的DR选择组网图<br><img src="http://support.huawei.com/enterprise/product/images/eab0e78c08eb4ed89b94426591d2773a" alt="img" loading="lazy"></p>
<h4 id="配置思路-1"><a href="#配置思路-1" class="headerlink" title="配置思路"></a>配置思路</h4><p>采用如下的思路配置OSPF的DR选择：</p>
<ol>
<li>在各交换机上配置OSPF的基本功能，查看四台交换机之间缺省的DR的选举情况。</li>
<li>配置SwitchA对应接口的DR优先级为100，SwitchB对应接口的DR优先级为0，SwitchC对应接口的DR优先级为2，使得SwitchA被选举为DR，SwitchC被选举为BDR，SwitchB永远无法成为DR或BDR，而SwitchD采用缺省DR优先级，维持原状不变。</li>
</ol>
<h4 id="操作步骤-71"><a href="#操作步骤-71" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>配置各接口所属的VLAN</li>
</ol>
<p>   # 配置SwitchA。Switch、SwitchB、SwitchC和SwitchD的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HUAWEI&gt; system-view</span><br><span class="line">[HUAWEI] sysname SwitchA</span><br><span class="line">[SwitchA] vlan batch 10</span><br><span class="line">[SwitchA] interface gigabitethernet 0&#x2F;0&#x2F;1</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] port link-type trunk</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] port trunk allow-pass vlan 10</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] quit</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>配置各VLANIF接口的IP地址</li>
</ol>
<p>   # 配置SwitchA。SwitchB、SwitchC和SwitchD的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] interface vlanif 10</span><br><span class="line">[SwitchA-Vlanif10] ip address 192.168.1.1 24</span><br><span class="line">[SwitchA-Vlanif10] quit</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>配置OSPF基本功能</li>
</ol>
<p>   # 配置SwitchA。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] ospf 1 router-id 10.1.1.1</span><br><span class="line">[SwitchA-ospf-1] area 0</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] network 192.168.1.0 0.0.0.255</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchA-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchB。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchB] ospf 1 router-id 10.2.2.2</span><br><span class="line">[SwitchB-ospf-1] area 0</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] network 192.168.1.0 0.0.0.255 </span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchB-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchC。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] ospf 1 router-id 10.3.3.3</span><br><span class="line">[SwitchC-ospf-1] area 0</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.0] network 192.168.1.0 0.0.0.255 </span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchC-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchD。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchD] ospf 1 router-id 10.4.4.4</span><br><span class="line">[SwitchD-ospf-1] area 0</span><br><span class="line">[SwitchD-ospf-1-area-0.0.0.0] network 192.168.1.0 0.0.0.255 </span><br><span class="line">[SwitchD-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchD-ospf-1] quit</span><br><span class="line">[SwitchD] quit</span><br></pre></td></tr></table></figure>

<p>   # SwitchA上查看OSPF邻居的信息。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] display ospf peer</span><br><span class="line"></span><br><span class="line">          OSPF Process 1 with Router ID 10.1.1.1</span><br><span class="line">                  Neighbors</span><br><span class="line"></span><br><span class="line"> Area 0.0.0.0 interface 192.168.1.1(Vlanif10)&#39;s neighbors</span><br><span class="line"> Router ID: 10.2.2.2      Address: 192.168.1.2</span><br><span class="line">State: 2-Way  Mode:Nbr is  Master  Priority: 1</span><br><span class="line">DR: 192.168.1.4  BDR: 192.168.1.3  MTU: 0</span><br><span class="line">   Dead timer due in 32  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:04:21</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br><span class="line"></span><br><span class="line"> Router ID: 10.3.3.3      Address: 192.168.1.3</span><br><span class="line">State: Full  Mode:Nbr is  Master  Priority: 1</span><br><span class="line">DR: 192.168.1.4  BDR: 192.168.1.3  MTU: 0</span><br><span class="line">   Dead timer due in 37  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:04:06</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br><span class="line"></span><br><span class="line"> Router ID: 10.4.4.4      Address: 192.168.1.4</span><br><span class="line">State: Full  Mode:Nbr is  Master  Priority: 1</span><br><span class="line">DR: 192.168.1.4  BDR: 192.168.1.3  MTU: 0</span><br><span class="line">   Dead timer due in 37  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:03:53</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br></pre></td></tr></table></figure>

<p>   从以上回显中可以看到在缺省情况下SwitchD为DR，SwitchC为BDR。这是因为当DR优先级相同时，Router-ID高的被选举为DR。</p>
<ol start="4">
<li>配置交换机接口上的DR优先级</li>
</ol>
<p>   # 配置SwitchA。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] interface vlanif 10</span><br><span class="line">[SwitchA-Vlanif10] ospf dr-priority 100</span><br><span class="line">[SwitchA-Vlanif10] quit</span><br><span class="line">[SwitchA] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchB。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchB] interface vlanif 10</span><br><span class="line">[SwitchB-Vlanif10] ospf dr-priority 0</span><br><span class="line">[SwitchB-Vlanif10] quit</span><br><span class="line">[SwitchB] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchC。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] interface vlanif 10</span><br><span class="line">[SwitchC-Vlanif10] ospf dr-priority 2</span><br><span class="line">[SwitchC-Vlanif10] quit</span><br><span class="line">[SwitchC] quit</span><br></pre></td></tr></table></figure>

<p>   # 在SwitchD上查看OSPF邻居的信息。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchD&gt; display ospf peer</span><br><span class="line"></span><br><span class="line">          OSPF Process 1 with Router ID 10.4.4.4</span><br><span class="line">                  Neighbors</span><br><span class="line"></span><br><span class="line"> Area 0.0.0.0 interface 192.168.1.4(Vlanif10)&#39;s neighbors</span><br><span class="line"> Router ID: 10.1.1.1      Address: 192.168.1.1</span><br><span class="line">   State: Full  Mode:Nbr is  Slave  Priority: 100</span><br><span class="line">DR: 192.168.1.4  BDR: 192.168.1.3  MTU: 0</span><br><span class="line">   Dead timer due in 31  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:11:17</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br><span class="line"></span><br><span class="line"> Router ID: 10.2.2.2      Address: 192.168.1.2</span><br><span class="line">   State: Full  Mode:Nbr is  Slave  Priority: 0</span><br><span class="line">DR: 192.168.1.4  BDR: 192.168.1.3  MTU: 0</span><br><span class="line">   Dead timer due in 35  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:11:19</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br><span class="line"></span><br><span class="line"> Router ID: 10.3.3.3      Address: 192.168.1.3</span><br><span class="line">   State: Full  Mode:Nbr is  Slave  Priority: 2</span><br><span class="line">DR: 192.168.1.4  BDR: 192.168.1.3  MTU: 0</span><br><span class="line">   Dead timer due in 33  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:11:15</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br></pre></td></tr></table></figure>

<p>   通过以上回显信息发现四台交换机之间DR的选举情况并没有改变。这是因为如果DR、BDR已经选择完毕，当一台新设备加入后，即使它的DR优先级值最大，也不会立即成为该网段中的DR，只有重启OSPF进程之后才会重新选举DR和BDR。</p>
<ol start="5">
<li>重启OSPF进程</li>
</ol>
<p>   # 在各交换机的用户视图下，同时执行命令<strong>reset ospf 1 process</strong>，以重启OSPF进程。同时重启OSPF进程是为了让四台交换机都参与DR和BDR的选举过程。</p>
<p>   # 重启SwitchA</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchA&gt; reset ospf 1 process</span><br></pre></td></tr></table></figure>

<p>   # 重启SwitchB</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchB&gt; reset ospf 1 process</span><br></pre></td></tr></table></figure>

<p>   # 重启SwitchC</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchC&gt; reset ospf 1 process</span><br></pre></td></tr></table></figure>

<p>   # 重启SwitchD</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchD&gt; reset ospf 1 process</span><br></pre></td></tr></table></figure>



<ol start="6">
<li>验证配置结果</li>
</ol>
<p>   # 在SwitchD上查看OSPF邻居信息。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchD&gt; display ospf peer</span><br><span class="line"></span><br><span class="line">          OSPF Process 1 with Router ID 10.4.4.4</span><br><span class="line">                  Neighbors</span><br><span class="line"></span><br><span class="line"> Area 0.0.0.0 interface 192.168.1.4(Vlanif10)&#39;s neighbors</span><br><span class="line"> Router ID: 10.1.1.1      Address: 192.168.1.1</span><br><span class="line">State: Full  Mode:Nbr is  Slave  Priority: 100</span><br><span class="line">DR: 192.168.1.1  BDR: 192.168.1.3  MTU: 0</span><br><span class="line">   Dead timer due in 35  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:07:19</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br><span class="line"></span><br><span class="line"> Router ID: 10.2.2.2      Address: 192.168.1.2</span><br><span class="line">State: 2-Way  Mode:Nbr is  Master  Priority: 0</span><br><span class="line">DR: 192.168.1.1  BDR: 192.168.1.3  MTU: 0</span><br><span class="line">   Dead timer due in 35  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:07:19</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br><span class="line"></span><br><span class="line"> Router ID: 10.3.3.3      Address: 192.168.1.3</span><br><span class="line">State: Full  Mode:Nbr is  Slave  Priority: 2</span><br><span class="line">DR: 192.168.1.1  BDR: 192.168.1.3  MTU: 0</span><br><span class="line">   Dead timer due in 37  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:07:17</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br></pre></td></tr></table></figure>

   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure>

<p>   从以上回显中可以看到SwitchA被选举为DR，SwitchC为BDR。而SwitchD与SwitchB之间的邻居状态为<strong>2-Way</strong>，这说明两者既不是DR，也不是BDR，即它们之间不需要交换LSA信息。</p>
<h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><ul>
<li><p>Switch的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname Switch</span><br><span class="line">#</span><br><span class="line">vlan batch 10</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;3</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;4</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchA的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchA</span><br><span class="line">#</span><br><span class="line">vlan batch 10</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 192.168.1.1 255.255.255.0</span><br><span class="line"> ospf dr-priority 100</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.1.1.1</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.1.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchB的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchB</span><br><span class="line">#</span><br><span class="line">vlan batch 10</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 192.168.1.2 255.255.255.0</span><br><span class="line"> ospf dr-priority 0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.2.2.2</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.1.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchC的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchC</span><br><span class="line">#</span><br><span class="line">vlan batch 10</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 192.168.1.3 255.255.255.0</span><br><span class="line"> ospf dr-priority 2</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.3.3.3</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.1.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchD的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchD</span><br><span class="line">#</span><br><span class="line">vlan batch 10</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 192.168.1.4 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.4.4.4</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.1.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h3 id="6-24-3-配置OSPF的Stub区域示例"><a href="#6-24-3-配置OSPF的Stub区域示例" class="headerlink" title="6.24.3  配置OSPF的Stub区域示例"></a>6.24.3  配置OSPF的Stub区域示例</h3><h4 id="组网需求-2"><a href="#组网需求-2" class="headerlink" title="组网需求"></a>组网需求</h4><p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_cfg_ospf_107001">图6-71</a>所示，三台交换机之间运行OSPF协议，整个OSPF网络被划分为Area0和Area1两个区域，其中SwitchB作为ASBR与OSPF外部网络实现互通。现要求在不影响通信的情况下减少SwitchC上OSPF路由表的规模。</p>
<p><strong>图6-71</strong>  配置OSPF Stub区域组网图<br><img src="http://support.huawei.com/enterprise/product/images/0c89df9499ee4183ac48875c3fc52780" alt="img" loading="lazy"></p>
<h4 id="配置思路-2"><a href="#配置思路-2" class="headerlink" title="配置思路"></a>配置思路</h4><p>采用如下的思路配置OSPF Stub区域：</p>
<ol>
<li>在各交换机上配置OSPF基本功能，实现OSPF网络的基本互通。</li>
<li>在SwitchB上配置静态路由，并引入到OSPF路由表中，实现OSPF网络到外部网络路由可达。</li>
<li>配置Area1为Stub区域，初步减少SwitchC上OSPF路由表的规模。</li>
<li>在Area1的ABR（SwitchA）上配置禁止向Stub区域通告Type3 LSA，即将Area1配置为Totally Stub区域，达到最大限度减少SwitchC上OSPF路由表规模的目的。</li>
</ol>
<h4 id="操作步骤-72"><a href="#操作步骤-72" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>配置各接口所属的VLAN</li>
</ol>
<p>   # 配置SwitchA。SwitchB和SwitchC的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HUAWEI&gt; system-view</span><br><span class="line">[HUAWEI] sysname SwitchA</span><br><span class="line">[SwitchA] vlan batch 10 20</span><br><span class="line">[SwitchA] interface gigabitethernet 0&#x2F;0&#x2F;1</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] port link-type trunk</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] port trunk allow-pass vlan 10</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] quit</span><br><span class="line">[SwitchA] interface gigabitethernet 0&#x2F;0&#x2F;2</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] port link-type trunk</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] port trunk allow-pass vlan 20</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] quit</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>配置各VLANIF接口的IP地址</li>
</ol>
<p>   # 配置SwitchA。SwitchB和SwitchC的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] interface vlanif 10</span><br><span class="line">[SwitchA-Vlanif10] ip address 192.168.0.1 24</span><br><span class="line">[SwitchA-Vlanif10] quit</span><br><span class="line">[SwitchA] interface vlanif 20</span><br><span class="line">[SwitchA-Vlanif20] ip address 192.168.1.1 24</span><br><span class="line">[SwitchA-Vlanif20] quit</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>配置OSPF基本功能</li>
</ol>
<p>   # 配置SwitchA。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] ospf 1 router-id 10.1.1.1</span><br><span class="line">[SwitchA-ospf-1] area 0</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] network 192.168.0.0 0.0.0.255</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchA-ospf-1] area 1</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.1] network 192.168.1.0 0.0.0.255</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.1] quit</span><br><span class="line">[SwitchA-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchB。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchB] ospf 1 router-id 10.2.2.2</span><br><span class="line">[SwitchB-ospf-1] area 0</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] network 192.168.0.0 0.0.0.255</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchB-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchC。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] ospf 1 router-id 10.3.3.3</span><br><span class="line">[SwitchC-ospf-1] area 1</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.1] network 192.168.1.0 0.0.0.255</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.1] quit</span><br><span class="line">[SwitchC-ospf-1] quit</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>配置SwitchB引入静态路由</li>
</ol>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchB] ip route-static 10.0.0.0 8 null 0</span><br><span class="line">[SwitchB] ospf 1</span><br><span class="line">[SwitchB-ospf-1] import-route static type 1</span><br><span class="line">[SwitchB-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 查看SwitchC的OSPF路由表信息，可以看到OSPF路由表中存在AS外部的路由。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] display ospf routing</span><br><span class="line"></span><br><span class="line">     OSPF Process 1 with Router ID 10.3.3.3</span><br><span class="line">                   Routing Tables</span><br><span class="line"></span><br><span class="line"> Routing for Network</span><br><span class="line"> Destination        Cost  Type         NextHop         AdvRouter       Area</span><br><span class="line"> 192.168.1.0&#x2F;24     1     Transit      192.168.1.2     10.3.3.3        0.0.0.1</span><br><span class="line"> 192.168.0.0&#x2F;24     2     Inter-area   192.168.1.1     10.1.1.1        0.0.0.1</span><br><span class="line"></span><br><span class="line"> Routing for ASEs</span><br><span class="line"> Destination    Cost      Type       Tag         NextHop         AdvRouter</span><br><span class="line"> 10.0.0.0&#x2F;8    3         Type1      1           192.168.1.1     10.2.2.2</span><br><span class="line"></span><br><span class="line"> Total Nets: 3</span><br><span class="line"> Intra Area: 1  Inter Area: 1  ASE: 1  NSSA: 0</span><br></pre></td></tr></table></figure>



<ol start="5">
<li>配置Area1为Stub区域</li>
</ol>
<p>   # 配置SwitchA。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] ospf 1</span><br><span class="line">[SwitchA-ospf-1] area 1</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.1] stub</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.1] quit</span><br><span class="line">[SwitchA-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchC。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] ospf 1</span><br><span class="line">[SwitchC-ospf-1] area 1</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.1] stub</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.1] quit</span><br><span class="line">[SwitchC-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 查看SwitchC的OSPF路由表信息，发现此时AS外部的路由已经消失，但是多了一条通往区域外部的缺省路由。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] display ospf routing</span><br><span class="line"></span><br><span class="line">          OSPF Process 1 with Router ID 10.3.3.3</span><br><span class="line">                   Routing Tables</span><br><span class="line"></span><br><span class="line"> Routing for Network</span><br><span class="line"> Destination        Cost  Type       NextHop         AdvRouter       Area</span><br><span class="line"> 192.168.1.0&#x2F;24     1     Transit    192.168.1.2     10.3.3.3         0.0.0.1</span><br><span class="line"> 0.0.0.0&#x2F;0          2     Inter-area 192.168.1.1     10.1.1.1         0.0.0.1</span><br><span class="line"> 192.168.0.0&#x2F;24     2     Inter-area 192.168.1.1     10.1.1.1         0.0.0.1</span><br><span class="line"></span><br><span class="line"> Total Nets: 3</span><br><span class="line"> Intra Area: 1  Inter Area: 2  ASE: 0  NSSA: 0</span><br></pre></td></tr></table></figure>



<ol start="6">
<li>配置Area1为Totally Stub区域</li>
</ol>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] ospf 1</span><br><span class="line">[SwitchA-ospf-1] area 1</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.1] stub no-summary</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.1] quit</span><br><span class="line">[SwitchA-ospf-1] quit</span><br></pre></td></tr></table></figure>



<ol start="7">
<li>验证配置结果</li>
</ol>
<p>   # 查看SwitchC的OSPF路由表，发现目的地址为192.168.0.0/24的路由也消失了，仅保留了区域内的OSPF路由以及一条通往区域外部缺省路由。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] display ospf routing</span><br><span class="line"></span><br><span class="line">          OSPF Process 1 with Router ID 10.3.3.3</span><br><span class="line">                   Routing Tables</span><br><span class="line"></span><br><span class="line"> Routing for Network</span><br><span class="line"> Destination        Cost  Type       NextHop         AdvRouter       Area</span><br><span class="line"> 192.168.1.0&#x2F;24     1     Transit    192.168.1.2     10.3.3.3         0.0.0.1</span><br><span class="line"> 0.0.0.0&#x2F;0          2     Inter-area 192.168.1.1     10.1.1.1         0.0.0.1</span><br><span class="line"></span><br><span class="line"> Total Nets: 2</span><br><span class="line"> Intra Area: 1  Inter Area: 1  ASE: 0  NSSA: 0</span><br></pre></td></tr></table></figure>







<h4 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h4><ul>
<li><p>SwitchA的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchA</span><br><span class="line">#</span><br><span class="line">vlan batch 10 20</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 192.168.0.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif20</span><br><span class="line"> ip address 192.168.1.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 20</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.1.1.1</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.0.0 0.0.0.255</span><br><span class="line"> area 0.0.0.1</span><br><span class="line">  network 192.168.1.0 0.0.0.255</span><br><span class="line">  stub no-summary</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchB的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchB</span><br><span class="line">#</span><br><span class="line">vlan batch 10</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 192.168.0.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.2.2.2</span><br><span class="line"> import-route static type 1</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.0.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">ip route-static 10.0.0.0 255.0.0.0 NULL0</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchC的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchC</span><br><span class="line">#</span><br><span class="line">vlan batch 20</span><br><span class="line">#</span><br><span class="line">interface Vlanif20</span><br><span class="line"> ip address 192.168.1.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 20</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.3.3.3</span><br><span class="line"> area 0.0.0.1</span><br><span class="line">  network 192.168.1.0 0.0.0.255</span><br><span class="line">  stub</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h3 id="6-24-4-配置OSPF的NSSA区域示例"><a href="#6-24-4-配置OSPF的NSSA区域示例" class="headerlink" title="6.24.4  配置OSPF的NSSA区域示例"></a>6.24.4  配置OSPF的NSSA区域示例</h3><h4 id="组网需求-3"><a href="#组网需求-3" class="headerlink" title="组网需求"></a>组网需求</h4><p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_cfg_ospf_107401">图6-72</a>所示，四台交换机都运行OSPF，且整个OSPF网络被划分为Area0和Area1两个区域。现要求Area1内的设备不接收其他OSPF区域引入的外部路由信息，而Area1内的交换机则通过区域内的设备引入外部路由来与外部网络进行通信。同时，由于SwitchB承载的业务较多，所以需要指定SwitchA作为转换路由器将Type7 LSA转换为Type5 LSA发送到其他OSPF区域。</p>
<p> 说明：</p>
<p>请确保该场景下互联接口的STP处于未使能状态。因为在使能STP的环形网络中，如果用交换机的VLANIF接口构建三层网络，会导致某个端口被阻塞，从而导致三层业务不能正常运行。</p>
<p><strong>图6-72</strong>  配置OSPF NSSA区域组网图<br><img src="http://support.huawei.com/enterprise/product/images/384fb40cc92046608ad92fe15f6d7b03" alt="img" loading="lazy"></p>
<h4 id="配置思路-3"><a href="#配置思路-3" class="headerlink" title="配置思路"></a>配置思路</h4><p>采用如下的思路配置OSPF的NSSA区域：</p>
<ol>
<li>在各交换机上配置OSPF基本功能，实现OSPF网络的基本互通。</li>
<li>配置Area1为NSSA区域，并在SwitchD上配置静态路由，并引入到OSPF路由表中，实现Area1内的交换机仅能通过SwitchD来与外部网络进行通信。</li>
<li>配置SwitchA为转换路由器，实现指定SwitchA将Type7 LSA转换为Type5 LSA发送到其他OSPF区域。</li>
</ol>
<h4 id="操作步骤-73"><a href="#操作步骤-73" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>配置各接口所属的VLAN</li>
</ol>
<p>   # 配置SwitchA。SwitchB、SwitchC和SwitchD的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HUAWEI&gt; system-view</span><br><span class="line">[HUAWEI] sysname SwitchA</span><br><span class="line">[SwitchA] vlan batch 10 30</span><br><span class="line">[SwitchA] interface gigabitethernet 0&#x2F;0&#x2F;1</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] port link-type trunk</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] port trunk allow-pass vlan 30</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] quit</span><br><span class="line">[SwitchA] interface gigabitethernet 0&#x2F;0&#x2F;2</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] port link-type trunk</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] port trunk allow-pass vlan 10</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] quit</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>配置各VLANIF接口的IP地址</li>
</ol>
<p>   # 配置SwitchA。SwitchB、SwitchC和SwitchD的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] interface vlanif 10</span><br><span class="line">[SwitchA-Vlanif10] ip address 192.168.1.1 24</span><br><span class="line">[SwitchA-Vlanif10] quit</span><br><span class="line">[SwitchA] interface vlanif 30</span><br><span class="line">[SwitchA-Vlanif30] ip address 192.168.3.1 24</span><br><span class="line">[SwitchA-Vlanif30] quit</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>配置OSPF基本功能</li>
</ol>
<p>   # 配置SwitchA。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] ospf 1 router-id 10.1.1.1</span><br><span class="line">[SwitchA-ospf-1] area 0</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] network 192.168.1.0 0.0.0.255</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchA-ospf-1] area 1</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.1] network 192.168.3.0 0.0.0.255</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.1] quit</span><br><span class="line">[SwitchA-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchB。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchB] ospf 1 router-id 10.2.2.2</span><br><span class="line">[SwitchB-ospf-1] area 0</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] network 192.168.2.0 0.0.0.255</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchB-ospf-1] area 1</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.1] network 192.168.4.0 0.0.0.255</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.1] quit</span><br><span class="line">[SwitchB-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchC。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] ospf 1 router-id 10.3.3.3</span><br><span class="line">[SwitchC-ospf-1] area 0</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.0] network 192.168.1.0 0.0.0.255</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.0] network 192.168.2.0 0.0.0.255</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchC-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchD。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchD] ospf 1 router-id 10.4.4.4</span><br><span class="line">[SwitchD-ospf-1] area 1</span><br><span class="line">[SwitchD-ospf-1-area-0.0.0.1] network 192.168.3.0 0.0.0.255</span><br><span class="line">[SwitchD-ospf-1-area-0.0.0.1] network 192.168.4.0 0.0.0.255</span><br><span class="line">[SwitchD-ospf-1-area-0.0.0.1] quit</span><br><span class="line">[SwitchD-ospf-1] quit</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>配置Area1区域为NSSA区域</li>
</ol>
<p>   # 配置SwitchA。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] ospf 1</span><br><span class="line">[SwitchA-ospf-1] area 1</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.1] nssa</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.1] quit</span><br><span class="line">[SwitchA-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchB。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchB] ospf 1</span><br><span class="line">[SwitchB-ospf-1] area 1</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.1] nssa</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.1] quit</span><br><span class="line">[SwitchB-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchD。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchD] ospf 1</span><br><span class="line">[SwitchD-ospf-1] area 1</span><br><span class="line">[SwitchD-ospf-1-area-0.0.0.1] nssa</span><br><span class="line">[SwitchD-ospf-1-area-0.0.0.1] quit</span><br><span class="line">[SwitchD-ospf-1] quit</span><br></pre></td></tr></table></figure>



<ol start="5">
<li>配置SwitchD引入静态路由</li>
</ol>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchD] ip route-static 172.16.0.0 16 null 0</span><br><span class="line">[SwitchD] ospf 1</span><br><span class="line">[SwitchD-ospf-1] import-route static</span><br><span class="line">[SwitchD-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 查看SwitchC的OSPF路由表。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] display ospf routing</span><br><span class="line"></span><br><span class="line">          OSPF Process 1 with Router ID 10.3.3.3</span><br><span class="line">                   Routing Tables</span><br><span class="line"></span><br><span class="line"> Routing for Network</span><br><span class="line"> Destination        Cost  Type       NextHop         AdvRouter       Area</span><br><span class="line"> 192.168.1.0&#x2F;24     1     Transit    192.168.1.2     10.3.3.3       0.0.0.0</span><br><span class="line"> 192.168.2.0&#x2F;24     1     Transit    192.168.2.2     10.3.3.3       0.0.0.0</span><br><span class="line"> 192.168.3.0&#x2F;24     2     Inter-area 192.168.1.1     10.1.1.1       0.0.0.0</span><br><span class="line"> 192.168.4.0&#x2F;24     2     Inter-area 192.168.2.1     10.2.2.2       0.0.0.0</span><br><span class="line"></span><br><span class="line"> Routing for ASEs</span><br><span class="line"> Destination        Cost      Type       Tag    NextHop         AdvRouter</span><br><span class="line"> 172.16.0.0&#x2F;16       1         Type2       1     192.168.1.1     10.2.2.2</span><br><span class="line"></span><br><span class="line"> Total Nets: 5</span><br><span class="line"> Intra Area: 2  Inter Area: 2  ASE: 1  NSSA: 0</span><br></pre></td></tr></table></figure>

<p>   从以上回显信息可以看出NSSA区域引入的AS外部路由是通过SwitchB向其他区域发布的，即SwitchB将Type7 LSA转换成了Type5 LSA。这是因为OSPF会选举Router ID较大的ABR作为转换路由器。</p>
<ol start="6">
<li>配置SwitchA为转换路由器</li>
</ol>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] ospf 1</span><br><span class="line">[SwitchA-ospf-1] area 1</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.1] nssa translator-always</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.1] quit</span><br><span class="line">[SwitchA-ospf-1] quit</span><br></pre></td></tr></table></figure>



<ol start="7">
<li>验证配置结果</li>
</ol>
<p>   # 等待40秒后，查看SwitchC的OSPF路由表。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] display ospf routing</span><br><span class="line"></span><br><span class="line">          OSPF Process 1 with Router ID 10.3.3.3</span><br><span class="line">                   Routing Tables</span><br><span class="line"></span><br><span class="line"> Routing for Network</span><br><span class="line"> Destination        Cost  Type       NextHop         AdvRouter       Area</span><br><span class="line"> 192.168.1.0&#x2F;24     1     Transit    192.168.1.2     10.3.3.3       0.0.0.0</span><br><span class="line"> 192.168.2.0&#x2F;24     1     Transit    192.168.2.2     10.3.3.3       0.0.0.0</span><br><span class="line"> 192.168.3.0&#x2F;24     2     Inter-area 192.168.1.1     10.1.1.1       0.0.0.0</span><br><span class="line"> 192.168.4.0&#x2F;24     2     Inter-area 192.168.2.1     10.2.2.2       0.0.0.0</span><br><span class="line"></span><br><span class="line"> Routing for ASEs</span><br><span class="line"> Destination        Cost      Type       Tag    NextHop         AdvRouter</span><br><span class="line"> 172.16.0.0&#x2F;16       1         Type2       1     192.168.1.1     10.1.1.1</span><br><span class="line"></span><br><span class="line"> Total Nets: 5</span><br><span class="line"> Intra Area: 2  Inter Area: 2  ASE: 1  NSSA: 0</span><br></pre></td></tr></table></figure>

<p>   从以上回显信息可以看出NSSA区域引入的AS外部路由是通过SwitchA向其他区域发布的，即SwitchA成了转换路由器。</p>
<pre><code>说明：</code></pre>
<p>   缺省情况下，新指定的转换路由器会和以前的转换路由器共同承担40s转换路由器的角色，过了40s后，只有新指定的转换路由器会继续完成转换路由器的工作。</p>
<h4 id="配置文件-3"><a href="#配置文件-3" class="headerlink" title="配置文件"></a>配置文件</h4><ul>
<li><p>SwitchA的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchA</span><br><span class="line">#</span><br><span class="line">vlan batch 10 30</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 192.168.1.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif30</span><br><span class="line"> ip address 192.168.3.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 30</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.1.1.1</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.1.0 0.0.0.255</span><br><span class="line"> area 0.0.0.1</span><br><span class="line">  network 192.168.3.0 0.0.0.255</span><br><span class="line">  nssa translator-always</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchB的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchB</span><br><span class="line">#</span><br><span class="line">vlan batch 20 40</span><br><span class="line">#</span><br><span class="line">interface Vlanif20</span><br><span class="line"> ip address 192.168.2.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif40</span><br><span class="line"> ip address 192.168.4.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 40</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 20</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.2.2.2</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.2.0 0.0.0.255</span><br><span class="line"> area 0.0.0.1</span><br><span class="line">  network 192.168.4.0 0.0.0.255</span><br><span class="line">  nssa</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchC的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchC</span><br><span class="line">#</span><br><span class="line">vlan batch 10 20</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 192.168.1.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif20</span><br><span class="line"> ip address 192.168.2.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 20</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.3.3.3</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.1.0 0.0.0.255</span><br><span class="line">  network 192.168.2.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchD的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchD</span><br><span class="line">#</span><br><span class="line">vlan batch 30 40</span><br><span class="line">#</span><br><span class="line">interface Vlanif30</span><br><span class="line"> ip address 192.168.3.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif40</span><br><span class="line"> ip address 192.168.4.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 30</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 40</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.4.4.4</span><br><span class="line"> import-route static</span><br><span class="line"> area 0.0.0.1</span><br><span class="line">  network 192.168.3.0 0.0.0.255</span><br><span class="line">  network 192.168.4.0 0.0.0.255</span><br><span class="line">  nssa</span><br><span class="line">#</span><br><span class="line">ip route-static 172.16.0.0 255.255.0.0 NULL0</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h3 id="6-24-5-配置OSPF负载分担示例"><a href="#6-24-5-配置OSPF负载分担示例" class="headerlink" title="6.24.5  配置OSPF负载分担示例"></a>6.24.5  配置OSPF负载分担示例</h3><h4 id="组网需求-4"><a href="#组网需求-4" class="headerlink" title="组网需求"></a>组网需求</h4><p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_cfg_ospf_108101">图6-73</a>所示，OSPF网络中有四台交换机，同属于区域0。要求配置负载分担，使得SwitchA流量，可以分别通过SwitchB和SwitchC送到SwitchD。</p>
<p> 说明：</p>
<p>请确保该场景下互联接口的STP处于未使能状态。因为在使能STP的环形网络中，如果用交换机的VLANIF接口构建三层网络，会导致某个端口被阻塞，从而导致三层业务不能正常运行。</p>
<p><strong>图6-73</strong>  配置OSPF负载分担组网图<br><img src="http://support.huawei.com/enterprise/product/images/92162df4db1843f7831569f36e16d00b" alt="img" loading="lazy"></p>
<h4 id="配置思路-4"><a href="#配置思路-4" class="headerlink" title="配置思路"></a>配置思路</h4><p>采用如下的思路配置OSPF的负载分担：</p>
<ol>
<li>在各交换机上配置OSPF基本功能，实现OSPF网络的基本互通。</li>
<li>在SwitchA配置负载分担，实现负载均衡的目的。</li>
</ol>
<h4 id="操作步骤-74"><a href="#操作步骤-74" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>配置各接口所属VLAN</li>
</ol>
<p>   # 配置SwitchA。SwitchB、SwitchC和SwitchD的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HUAWEI&gt; system-view</span><br><span class="line">[HUAWEI] sysname SwitchA</span><br><span class="line">[SwitchA] vlan batch 10 20 50</span><br><span class="line">[SwitchA] interface gigabitethernet 0&#x2F;0&#x2F;1</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] port link-type trunk</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] port trunk allow-pass vlan 10</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] quit</span><br><span class="line">[SwitchA] interface gigabitethernet 0&#x2F;0&#x2F;2</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] port link-type trunk</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] port trunk allow-pass vlan 20</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] quit</span><br><span class="line">[SwitchA] interface gigabitethernet 0&#x2F;0&#x2F;3</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;3] port link-type trunk</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;3] port trunk allow-pass vlan 50</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;3] quit</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>配置各VLANIF接口的IP地址</li>
</ol>
<p>   # 配置SwitchA。SwitchB、SwitchC和SwitchD的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] interface vlanif 10</span><br><span class="line">[SwitchA-Vlanif10] ip address 10.1.1.1 24</span><br><span class="line">[SwitchA-Vlanif10] quit</span><br><span class="line">[SwitchA] interface vlanif 20</span><br><span class="line">[SwitchA-Vlanif20] ip address 10.1.2.1 24</span><br><span class="line">[SwitchA-Vlanif20] quit</span><br><span class="line">[SwitchA] interface vlanif 50</span><br><span class="line">[SwitchA-Vlanif50] ip address 172.16.1.1 24</span><br><span class="line">[SwitchA-Vlanif50] quit</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>配置OSPF基本功能</li>
</ol>
<p>   # 配置SwitchA。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] ospf 1 router-id 10.10.10.1</span><br><span class="line">[SwitchA-ospf-1] area 0</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] network 172.16.1.0 0.0.0.255</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] network 10.1.1.0 0.0.0.255</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] network 10.1.2.0 0.0.0.255</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchA-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchB。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchB] ospf 1 router-id 10.10.10.2</span><br><span class="line">[SwitchB-ospf-1] area 0</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] network 10.1.1.0 0.0.0.255</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] network 192.168.0.0 0.0.0.255</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchB-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchC。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] ospf 1 router-id 10.10.10.3</span><br><span class="line">[SwitchC-ospf-1] area 0</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.0] network 10.1.2.0 0.0.0.255</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.0] network 192.168.1.0 0.0.0.255</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchC-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchD。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchD] ospf 1 router-id 10.10.10.4</span><br><span class="line">[SwitchD-ospf-1] area 0</span><br><span class="line">[SwitchD-ospf-1-area-0.0.0.0] network 192.168.0.0 0.0.0.255</span><br><span class="line">[SwitchD-ospf-1-area-0.0.0.0] network 192.168.1.0 0.0.0.255</span><br><span class="line">[SwitchD-ospf-1-area-0.0.0.0] network 172.17.1.0 0.0.0.255</span><br><span class="line">[SwitchD-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchD-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 查看SwitchA的路由表。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] display ip routing-table</span><br><span class="line">Route Flags: R - relay, D - download to fib</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">Routing Tables: Public</span><br><span class="line">         Destinations : 11       Routes : 12</span><br><span class="line"> </span><br><span class="line">Destination&#x2F;Mask    Proto   Pre  Cost      Flags NextHop         Interface </span><br><span class="line"> </span><br><span class="line">       10.1.1.0&#x2F;24  Direct  0    0           D   10.1.1.1        Vlanif10</span><br><span class="line">       10.1.1.1&#x2F;32  Direct  0    0           D   127.0.0.1       Vlanif10</span><br><span class="line">       10.1.2.0&#x2F;24  Direct  0    0           D   10.1.2.1        Vlanif20</span><br><span class="line">       10.1.2.1&#x2F;32  Direct  0    0           D   127.0.0.1       Vlanif20</span><br><span class="line">      127.0.0.0&#x2F;8   Direct  0    0           D   127.0.0.1       InLoopBack0</span><br><span class="line">      127.0.0.1&#x2F;32  Direct  0    0           D   127.0.0.1       InLoopBack0</span><br><span class="line">     172.16.1.0&#x2F;24  Direct  0    0           D   172.16.1.1      Vlanif50</span><br><span class="line">     172.16.1.1&#x2F;32  Direct  0    0           D   127.0.0.1       Vlanif50</span><br><span class="line">     172.17.1.0&#x2F;24  OSPF    10   3           D   10.1.1.2        Vlanif10</span><br><span class="line">                    OSPF    10   3           D   10.1.2.2        Vlanif20</span><br><span class="line">    192.168.0.0&#x2F;24  OSPF    10   2           D   10.1.1.2        Vlanif10</span><br><span class="line">    192.168.1.0&#x2F;24  OSPF    10   2           D   10.1.2.2        Vlanif20</span><br></pre></td></tr></table></figure>

<p>   从路由表可以看出，由于最大等价路由条数的缺省值为8，因此SwitchA的两个下一跳10.1.1.2（SwitchB）和10.1.2.2（SwitchC）均成为有效路由。</p>
<ol start="4">
<li>在SwitchA上配置等价路由优先级</li>
</ol>
<p>   如果不希望SwitchB和SwitchC形成负载分担，可以配置等价路由优先级，指定下一跳。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] ospf 1</span><br><span class="line">[SwitchA-ospf-1] nexthop 10.1.2.2 weight 1</span><br><span class="line">[SwitchA-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 查看SwitchA的路由表</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] display ip routing-table</span><br><span class="line">Route Flags: R - relay, D - download to fib</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">Routing Tables: Public</span><br><span class="line">         Destinations : 11       Routes : 11</span><br><span class="line"> </span><br><span class="line">Destination&#x2F;Mask    Proto   Pre  Cost      Flags NextHop         Interface </span><br><span class="line"></span><br><span class="line">       10.1.1.0&#x2F;24  Direct  0    0           D   10.1.1.1        Vlanif10</span><br><span class="line">       10.1.1.1&#x2F;32  Direct  0    0           D   127.0.0.1       Vlanif10</span><br><span class="line">       10.1.2.0&#x2F;24  Direct  0    0           D   10.1.2.1        Vlanif20</span><br><span class="line">       10.1.2.1&#x2F;32  Direct  0    0           D   127.0.0.1       Vlanif20</span><br><span class="line">      127.0.0.0&#x2F;8   Direct  0    0           D   127.0.0.1       InLoopBack0</span><br><span class="line">      127.0.0.1&#x2F;32  Direct  0    0           D   127.0.0.1       InLoopBack0</span><br><span class="line">     172.16.1.0&#x2F;24  Direct  0    0           D   172.16.1.1      Vlanif50</span><br><span class="line">     172.16.1.1&#x2F;32  Direct  0    0           D   127.0.0.1       Vlanif50</span><br><span class="line">     172.17.1.0&#x2F;24  OSPF    10   3           D   10.1.2.2        Vlanif20</span><br><span class="line">    192.168.0.0&#x2F;24  OSPF    10   2           D   10.1.1.2        Vlanif10</span><br><span class="line">    192.168.1.0&#x2F;24  OSPF    10   2           D   10.1.2.2        Vlanif20</span><br></pre></td></tr></table></figure>

<p>   从路由表中可以看出，当配置等价路由的优先级后，由于下一跳为10.1.2.2（SwitchC）的优先级（权值为1）高于下一跳为10.1.1.2（SwitchB）的优先级，所以OSPF优先选择下一跳为10.1.2.2为唯一最优路由。</p>
<h4 id="配置文件-4"><a href="#配置文件-4" class="headerlink" title="配置文件"></a>配置文件</h4><ul>
<li><p>SwitchA的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchA</span><br><span class="line">#</span><br><span class="line">vlan batch 10 20 50</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 10.1.1.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif20</span><br><span class="line"> ip address 10.1.2.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif50</span><br><span class="line"> ip address 172.16.1.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 20</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;3</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 50</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.10.10.1</span><br><span class="line"> nexthop 10.1.2.2 weight 1</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 10.1.1.0 0.0.0.255</span><br><span class="line">  network 10.1.2.0 0.0.0.255</span><br><span class="line">  network 172.16.1.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchB的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchB</span><br><span class="line">#</span><br><span class="line">vlan batch 10 30</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 10.1.1.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif30</span><br><span class="line"> ip address 192.168.0.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 30</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.10.10.2</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 10.1.1.0 0.0.0.255</span><br><span class="line">  network 192.168.0.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchC的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchC</span><br><span class="line">#</span><br><span class="line">vlan batch 20 40</span><br><span class="line">#</span><br><span class="line">interface Vlanif20</span><br><span class="line"> ip address 10.1.2.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif40</span><br><span class="line"> ip address 192.168.1.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 20</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 40</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.10.10.3</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 10.1.2.0 0.0.0.255</span><br><span class="line">  network 192.168.1.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return </span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchD的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchD</span><br><span class="line">#</span><br><span class="line">vlan batch 30 40 60</span><br><span class="line">#</span><br><span class="line">interface Vlanif30</span><br><span class="line"> ip address 192.168.0.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif40</span><br><span class="line"> ip address 192.168.1.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif60</span><br><span class="line"> ip address 172.17.1.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 30</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 40</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;3</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 60</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.10.10.4</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 172.17.1.0 0.0.0.255</span><br><span class="line">  network 192.168.0.0 0.0.0.255</span><br><span class="line">  network 192.168.1.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h3 id="6-24-6-配置OSPF-BGP联动特性示例"><a href="#6-24-6-配置OSPF-BGP联动特性示例" class="headerlink" title="6.24.6  配置OSPF-BGP联动特性示例"></a>6.24.6  配置OSPF-BGP联动特性示例</h3><h4 id="组网需求-5"><a href="#组网需求-5" class="headerlink" title="组网需求"></a>组网需求</h4><p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_cfg_ospf_108301">图6-74</a>所示，SwitchD和SwitchE之间建立EBGP连接。在AS10内的交换机之间建立IBGP连接，并且使用OSPF作为IGP协议。要求在SwitchB上使能OSPF-BGP联动功能，使得当SwitchB重启后，从SwitchA到AS20的流量不发生中断。</p>
<p> 说明：</p>
<p>请确保该场景下互联接口的STP处于未使能状态。因为在使能STP的环形网络中，如果用交换机的VLANIF接口构建三层网络，会导致某个端口被阻塞，从而导致三层业务不能正常运行。</p>
<p><strong>图6-74</strong>  配置OSPF-BGP联动组网图<br><img src="http://support.huawei.com/enterprise/product/images/94d35e91310e44d5af19e6d0ccad3845" alt="img" loading="lazy"></p>
<h4 id="配置思路-5"><a href="#配置思路-5" class="headerlink" title="配置思路"></a>配置思路</h4><p>采用如下的思路配置OSPF-BGP联动功能。</p>
<ol>
<li>在各交换机的VLANIF接口上配置IP地址并配置各接口所属VLAN，实现网段内的互通。</li>
<li>在SwitchA、SwitchB、SwitchC和SwitchD（除去10.2.1.1/30）上配置OSPF基本功能和IBGP连接，实现AS10内设备互通。</li>
<li>在SwitchD和SwitchE之间配置EBGP连接并引入直连路由和OSPF路由，实现AS10与AS20之间互通。</li>
<li>在SwitchC上配置OSPF协议的开销值为2，实现SwitchA只选择SwitchB作为到10.2.1.0网段的中间路由器，SwitchC成为SwitchB的备份路由器。</li>
<li>在SwitchB上配置OSPF-BGP联动功能，实现BGP当SwitchB重启后，从SwitchA到AS20的流量不发生中断。</li>
</ol>
<h4 id="操作步骤-75"><a href="#操作步骤-75" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>配置各接口所属VLAN</li>
</ol>
<p>   # 配置SwitchA。SwitchB、SwitchC、SwitchD和SwitchE的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HUAWEI&gt; system-view</span><br><span class="line">[HUAWEI] sysname SwitchA</span><br><span class="line">[SwitchA] vlan batch 10 20</span><br><span class="line">[SwitchA] interface gigabitethernet 0&#x2F;0&#x2F;1</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] port link-type trunk</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] port trunk allow-pass vlan 10</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] quit</span><br><span class="line">[SwitchA] interface gigabitethernet 0&#x2F;0&#x2F;2</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] port link-type trunk</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] port trunk allow-pass vlan 20</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] quit</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>配置各VLANIF接口和LoopBack接口的IP地址</li>
</ol>
<p>   # 配置SwitchA。SwitchB、SwitchC、SwitchD和SwitchE的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] interface vlanif 10</span><br><span class="line">[SwitchA-Vlanif10] ip address 10.1.1.1 30</span><br><span class="line">[SwitchA-Vlanif10] quit</span><br><span class="line">[SwitchA] interface vlanif 20</span><br><span class="line">[SwitchA-Vlanif20] ip address 10.1.2.1 30</span><br><span class="line">[SwitchA-Vlanif20] quit</span><br><span class="line">[SwitchA] interface loopback 0</span><br><span class="line">[SwitchA-LoopBack0] ip address 10.10.10.1 32</span><br><span class="line">[SwitchA-LoopBack0] quit</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>配置OSPF的基本功能</li>
</ol>
<p>   # 配置SwitchA。SwitchB、SwitchC和SwitchD的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] router id 10.10.10.1</span><br><span class="line">[SwitchA] ospf 1</span><br><span class="line">[SwitchA-ospf-1] area 0</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] network 10.10.10.1 0.0.0.0</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] network 10.1.1.0 0.0.0.3</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] network 10.1.2.0 0.0.0.3</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchA-ospf-1] quit</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>配置IBGP全连接</li>
</ol>
<p>   # 配置SwitchA。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] bgp 10</span><br><span class="line">[SwitchA-bgp] peer 10.10.10.2 as-number 10</span><br><span class="line">[SwitchA-bgp] peer 10.10.10.2 connect-interface LoopBack 0</span><br><span class="line">[SwitchA-bgp] peer 10.10.10.3 as-number 10</span><br><span class="line">[SwitchA-bgp] peer 10.10.10.3 connect-interface LoopBack 0</span><br><span class="line">[SwitchA-bgp] peer 10.10.10.4 as-number 10</span><br><span class="line">[SwitchA-bgp] peer 10.10.10.4 connect-interface LoopBack 0</span><br><span class="line">[SwitchA-bgp] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchB。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchB] bgp 10</span><br><span class="line">[SwitchB-bgp] peer 10.10.10.1 as-number 10</span><br><span class="line">[SwitchB-bgp] peer 10.10.10.1 connect-interface LoopBack 0</span><br><span class="line">[SwitchB-bgp] peer 10.10.10.3 as-number 10</span><br><span class="line">[SwitchB-bgp] peer 10.10.10.3 connect-interface LoopBack 0</span><br><span class="line">[SwitchB-bgp] peer 10.10.10.4 as-number 10</span><br><span class="line">[SwitchB-bgp] peer 10.10.10.4 connect-interface LoopBack 0</span><br><span class="line">[SwitchB-bgp] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchC。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] bgp 10</span><br><span class="line">[SwitchC-bgp] peer 10.10.10.1 as-number 10</span><br><span class="line">[SwitchC-bgp] peer 10.10.10.1 connect-interface LoopBack 0</span><br><span class="line">[SwitchC-bgp] peer 10.10.10.2 as-number 10</span><br><span class="line">[SwitchC-bgp] peer 10.10.10.2 connect-interface LoopBack 0</span><br><span class="line">[SwitchC-bgp] peer 10.10.10.4 as-number 10</span><br><span class="line">[SwitchC-bgp] peer 10.10.10.4 connect-interface LoopBack 0</span><br><span class="line">[SwitchC-bgp] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchD。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchD] bgp 10</span><br><span class="line">[SwitchD-bgp] peer 10.10.10.1 as-number 10</span><br><span class="line">[SwitchD-bgp] peer 10.10.10.1 connect-interface LoopBack 0</span><br><span class="line">[SwitchD-bgp] peer 10.10.10.2 as-number 10</span><br><span class="line">[SwitchD-bgp] peer 10.10.10.2 connect-interface LoopBack 0</span><br><span class="line">[SwitchD-bgp] peer 10.10.10.3 as-number 10</span><br><span class="line">[SwitchD-bgp] peer 10.10.10.3 connect-interface LoopBack 0</span><br><span class="line">[SwitchD-bgp] quit</span><br></pre></td></tr></table></figure>



<ol start="5">
<li>配置EBGP连接</li>
</ol>
<p>   # 配置SwitchD。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchD] bgp 10</span><br><span class="line">[SwitchD-bgp] peer 10.2.1.2 as-number 20</span><br><span class="line">[SwitchD-bgp] import-route direct</span><br><span class="line">[SwitchD-bgp] import-route ospf 1</span><br><span class="line">[SwitchD-bgp] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchE。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchE] bgp 20</span><br><span class="line">[SwitchE-bgp] router-id 10.10.10.5</span><br><span class="line">[SwitchE-bgp] peer 10.2.1.1 as-number 10</span><br><span class="line">[SwitchE-bgp] ipv4-family unicast</span><br><span class="line">[SwitchE-bgp-af-ipv4] network 10.3.1.0 30</span><br><span class="line">[SwitchE-bgp-af-ipv4] quit</span><br><span class="line">[SwitchE-bgp] quit</span><br></pre></td></tr></table></figure>



<ol start="6">
<li>配置SwitchC上OSPF协议的开销值</li>
</ol>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] interface vlanif 20</span><br><span class="line">[SwitchC-Vlanif20] ospf cost 2</span><br><span class="line">[SwitchC-Vlanif20] quit</span><br><span class="line">[SwitchC] interface vlanif 30</span><br><span class="line">[SwitchC-Vlanif30] ospf cost 2</span><br><span class="line">[SwitchC-Vlanif30] quit</span><br></pre></td></tr></table></figure>

<p>   # 查看SwitchA的路由表。从路由表中可以看出，通过BGP协议可以学习到目标网段10.3.1.0的路由，出接口是Vlanif10。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] display ip routing-table</span><br><span class="line">Route Flags: R - relay, D - download to fib </span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">Routing Tables: Public </span><br><span class="line">         Destinations : 14       Routes : 15 </span><br><span class="line"></span><br><span class="line">Destination&#x2F;Mask    Proto   Pre  Cost      Flags NextHop         Interface </span><br><span class="line"></span><br><span class="line">       10.1.1.0&#x2F;30  Direct  0    0           D   10.1.1.1        Vlanif10      </span><br><span class="line">       10.1.1.1&#x2F;32  Direct  0    0           D   127.0.0.1       Vlanif10      </span><br><span class="line">       10.1.2.0&#x2F;30  Direct  0    0           D   10.1.2.1        Vlanif20      </span><br><span class="line">       10.1.2.1&#x2F;32  Direct  0    0           D   127.0.0.1       Vlanif20      </span><br><span class="line">       10.1.3.0&#x2F;30  OSPF    10   2           D   10.1.1.2        Vlanif10      </span><br><span class="line">       10.1.4.0&#x2F;30  OSPF    10   3           D   10.1.2.2        Vlanif20      </span><br><span class="line">                    OSPF    10   3           D   10.1.1.2        Vlanif10      </span><br><span class="line">       10.2.1.0&#x2F;30  IBGP    255  0          RD   10.10.10.4      Vlanif10      </span><br><span class="line">       10.3.1.0&#x2F;30  IBGP    255  0          RD   10.2.1.2        Vlanif10      </span><br><span class="line">     10.10.10.1&#x2F;32  Direct  0    0           D   127.0.0.1       LoopBack0     </span><br><span class="line">     10.10.10.2&#x2F;32  OSPF    10   1           D   10.1.1.2        Vlanif10      </span><br><span class="line">     10.10.10.3&#x2F;32  OSPF    10   1           D   10.1.2.2        Vlanif20      </span><br><span class="line">     10.10.10.4&#x2F;32  OSPF    10   2           D   10.1.1.2        Vlanif10      </span><br><span class="line">      127.0.0.0&#x2F;8   Direct  0    0           D   127.0.0.1       InLoopBack0   </span><br><span class="line">      127.0.0.1&#x2F;32  Direct  0    0           D   127.0.0.1       InLoopBack0   </span><br></pre></td></tr></table></figure>

<p>   # 查看SwitchB的路由表。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchB] display ip routing-table</span><br><span class="line">Route Flags: R - relay, D - download to fib </span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">Routing Tables: Public </span><br><span class="line">         Destinations : 14       Routes : 15 </span><br><span class="line"></span><br><span class="line">Destination&#x2F;Mask    Proto   Pre  Cost      Flags NextHop         Interface </span><br><span class="line"></span><br><span class="line">       10.1.1.0&#x2F;30  Direct  0    0           D   10.1.1.2        Vlanif10      </span><br><span class="line">       10.1.1.2&#x2F;32  Direct  0    0           D   127.0.0.1       Vlanif10      </span><br><span class="line">       10.1.2.0&#x2F;30  OSPF    10   2           D   10.1.1.1        Vlanif10      </span><br><span class="line">       10.1.3.0&#x2F;30  Direct  0    0           D   10.1.3.1        Vlanif40      </span><br><span class="line">       10.1.3.1&#x2F;32  Direct  0    0           D   127.0.0.1       Vlanif40      </span><br><span class="line">       10.1.4.0&#x2F;30  OSPF    10   2           D   10.1.3.2        Vlanif40      </span><br><span class="line">       10.2.1.0&#x2F;30  IBGP    255  0          RD   10.10.10.4      Vlanif40      </span><br><span class="line">       10.3.1.0&#x2F;30  IBGP    255  0          RD   10.2.1.2        Vlanif40      </span><br><span class="line">     10.10.10.1&#x2F;32  OSPF    10   1           D   10.1.1.1        Vlanif10      </span><br><span class="line">     10.10.10.2&#x2F;32  Direct  0    0           D   127.0.0.1       LoopBack0     </span><br><span class="line">     10.10.10.3&#x2F;32  OSPF    10   2           D   10.1.1.1        Vlanif10      </span><br><span class="line">                    OSPF    10   2           D   10.1.3.2        Vlanif40      </span><br><span class="line">     10.10.10.4&#x2F;32  OSPF    10   1           D   10.1.3.2        Vlanif40      </span><br><span class="line">      127.0.0.0&#x2F;8   Direct  0    0           D   127.0.0.1       InLoopBack0   </span><br><span class="line">      127.0.0.1&#x2F;32  Direct  0    0           D   127.0.0.1       InLoopBack0   </span><br></pre></td></tr></table></figure>

<p>   从路由表中可以看出，SwitchB通过BGP协议可以学习到目标网段10.3.1.0的路由，出接口是Vlanif40。通过OSPF协议可以学习到目标网段10.1.2.0和10.1.4.0的路由，路由开销都是2。</p>
<ol start="7">
<li>在SwitchB上配置OSPF-BGP联动功能</li>
</ol>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchB] ospf</span><br><span class="line">[SwitchB-ospf-1] stub-router on-startup</span><br><span class="line">[SwitchB-ospf-1] return</span><br></pre></td></tr></table></figure>



<ol start="8">
<li>查看配置结果</li>
</ol>
<p>   # 保存配置。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchB&gt; save</span><br></pre></td></tr></table></figure>

<p>   系统会提示将当前配置保存至设备，是否继续，输入<strong>y</strong>即可。</p>
<p>   # 重启SwitchB</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchB&gt; reboot</span><br></pre></td></tr></table></figure>

<p>   系统会提示即将重新启动，是否继续，输入<strong>y</strong>即可。</p>
<p>   # 查看SwitchA的路由表。从路由表中可以看出，通过BGP协议可以学习到目标网段10.3.1.0的路由，出接口变为Vlanif20。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] display ip routing-table</span><br><span class="line">Route Flags: R - relay, D - download to fib </span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">Routing Tables: Public </span><br><span class="line">         Destinations : 10       Routes : 10 </span><br><span class="line"></span><br><span class="line">Destination&#x2F;Mask    Proto   Pre  Cost      Flags NextHop         Interface </span><br><span class="line"></span><br><span class="line">       10.1.2.0&#x2F;30  Direct  0    0           D   10.1.2.1        Vlanif20      </span><br><span class="line">       10.1.2.1&#x2F;32  Direct  0    0           D   127.0.0.1       Vlanif20      </span><br><span class="line">       10.1.4.0&#x2F;30  OSPF    10   3           D   10.1.2.2        Vlanif20      </span><br><span class="line">       10.2.1.0&#x2F;30  IBGP    255  0          RD   10.10.10.4      Vlanif20      </span><br><span class="line">       10.3.1.0&#x2F;30  IBGP    255  0          RD   10.2.1.2        Vlanif20      </span><br><span class="line">     10.10.10.1&#x2F;32  Direct  0    0           D   127.0.0.1       LoopBack0     </span><br><span class="line">     10.10.10.3&#x2F;32  OSPF    10   1           D   10.1.2.2        Vlanif20      </span><br><span class="line">     10.10.10.4&#x2F;32  OSPF    10   3           D   10.1.2.2        Vlanif20      </span><br><span class="line">      127.0.0.0&#x2F;8   Direct  0    0           D   127.0.0.1       InLoopBack0   </span><br><span class="line">      127.0.0.1&#x2F;32  Direct  0    0           D   127.0.0.1       InLoopBack0   </span><br></pre></td></tr></table></figure>

<p>   # 查看SwitchB的路由表。从路由表中可以看出，由于IGP收敛速度比BGP快，所以路由表中暂时只有OSPF路由，并且开销值都已变为较大的数（≥65535）。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchB&gt; display ip routing-table</span><br><span class="line">Route Flags: R - relay, D - download to fib </span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">Routing Tables: Public </span><br><span class="line">         Destinations : 12       Routes : 13 </span><br><span class="line"></span><br><span class="line">Destination&#x2F;Mask    Proto   Pre  Cost      Flags NextHop         Interface        </span><br><span class="line"></span><br><span class="line">       10.1.1.0&#x2F;30  Direct  0    0           D   10.1.1.2        Vlanif10      </span><br><span class="line">       10.1.1.2&#x2F;32  Direct  0    0           D   127.0.0.1       Vlanif10      </span><br><span class="line">       10.1.2.0&#x2F;30  OSPF    10   65536       D   10.1.1.1        Vlanif10      </span><br><span class="line">       10.1.3.0&#x2F;30  Direct  0    0           D   10.1.3.1        Vlanif40      </span><br><span class="line">       10.1.3.1&#x2F;32  Direct  0    0           D   127.0.0.1       Vlanif40      </span><br><span class="line">       10.1.4.0&#x2F;30  OSPF    10   65536       D   10.1.3.2        Vlanif40      </span><br><span class="line">     10.10.10.1&#x2F;32  OSPF    10   65535       D   10.1.1.1        Vlanif10      </span><br><span class="line">     10.10.10.2&#x2F;32  Direct  0    0           D   127.0.0.1       LoopBack0     </span><br><span class="line">     10.10.10.3&#x2F;32  OSPF    10   65536       D   10.1.1.1        Vlanif10      </span><br><span class="line">                    OSPF    10   65536       D   10.1.3.2        Vlanif40      </span><br><span class="line">     10.10.10.4&#x2F;32  OSPF    10   65535       D   10.1.3.2        Vlanif40      </span><br><span class="line">      127.0.0.0&#x2F;8   Direct  0    0           D   127.0.0.1       InLoopBack0   </span><br><span class="line">      127.0.0.1&#x2F;32  Direct  0    0           D   127.0.0.1       InLoopBack0   </span><br></pre></td></tr></table></figure>

<p>   # 在网络稳定后，再次查看SwitchB的路由表。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchB&gt; display ip routing-table</span><br><span class="line">Route Flags: R - relay, D - download to fib</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">Routing Tables: Public </span><br><span class="line">         Destinations : 14       Routes : 15 </span><br><span class="line"></span><br><span class="line">Destination&#x2F;Mask    Proto   Pre  Cost      Flags NextHop         Interface        </span><br><span class="line"></span><br><span class="line">       10.1.1.0&#x2F;30  Direct  0    0           D   10.1.1.2        Vlanif10      </span><br><span class="line">       10.1.1.2&#x2F;32  Direct  0    0           D   127.0.0.1       Vlanif10      </span><br><span class="line">       10.1.2.0&#x2F;30  OSPF    10   2           D   10.1.1.1        Vlanif10      </span><br><span class="line">       10.1.3.0&#x2F;30  Direct  0    0           D   10.1.3.1        Vlanif40      </span><br><span class="line">       10.1.3.1&#x2F;32  Direct  0    0           D   127.0.0.1       Vlanif40      </span><br><span class="line">       10.1.4.0&#x2F;30  OSPF    10   2           D   10.1.3.2        Vlanif40      </span><br><span class="line">       10.2.1.0&#x2F;30  IBGP    255  0          RD   10.10.10.4      Vlanif40      </span><br><span class="line">       10.3.1.0&#x2F;30  IBGP    255  0          RD   10.2.1.2        Vlanif40      </span><br><span class="line">     10.10.10.1&#x2F;32  OSPF    10   1           D   10.1.1.1        Vlanif10      </span><br><span class="line">     10.10.10.2&#x2F;32  Direct  0    0           D   127.0.0.1       LoopBack0     </span><br><span class="line">     10.10.10.3&#x2F;32  OSPF    10   2           D   10.1.1.1        Vlanif10      </span><br><span class="line">                    OSPF    10   2           D   10.1.3.2        Vlanif40      </span><br><span class="line">     10.10.10.4&#x2F;32  OSPF    10   1           D   10.1.3.2        Vlanif40      </span><br><span class="line">      127.0.0.0&#x2F;8   Direct  0    0           D   127.0.0.1       InLoopBack0   </span><br><span class="line">      127.0.0.1&#x2F;32  Direct  0    0           D   127.0.0.1       InLoopBack0   </span><br></pre></td></tr></table></figure>

<p>   从路由表中可以看出，当SwitchB上的BGP完全收敛后，路由信息又恢复到重启前的内容。</p>
<h4 id="配置文件-5"><a href="#配置文件-5" class="headerlink" title="配置文件"></a>配置文件</h4><ul>
<li><p>SwitchA的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchA</span><br><span class="line">#</span><br><span class="line">router id 10.10.10.1</span><br><span class="line">#</span><br><span class="line">vlan batch 10 20</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 10.1.1.1 255.255.255.252</span><br><span class="line">#</span><br><span class="line">interface Vlanif20</span><br><span class="line"> ip address 10.1.2.1 255.255.255.252</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 20</span><br><span class="line">#</span><br><span class="line">interface LoopBack0</span><br><span class="line"> ip address 10.10.10.1 255.255.255.255</span><br><span class="line">#</span><br><span class="line">bgp 10</span><br><span class="line"> peer 10.10.10.2 as-number 10</span><br><span class="line"> peer 10.10.10.2 connect-interface LoopBack0</span><br><span class="line"> peer 10.10.10.3 as-number 10</span><br><span class="line"> peer 10.10.10.3 connect-interface LoopBack0</span><br><span class="line"> peer 10.10.10.4 as-number 10</span><br><span class="line"> peer 10.10.10.4 connect-interface LoopBack0</span><br><span class="line"> #</span><br><span class="line"> ipv4-family unicast</span><br><span class="line">  undo synchronization</span><br><span class="line">  peer 10.10.10.2 enable</span><br><span class="line">  peer 10.10.10.3 enable</span><br><span class="line">  peer 10.10.10.4 enable</span><br><span class="line">#</span><br><span class="line">ospf 1</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 10.1.1.0 0.0.0.3</span><br><span class="line">  network 10.1.2.0 0.0.0.3</span><br><span class="line">  network 10.10.10.1 0.0.0.0</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchB的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchB</span><br><span class="line">#</span><br><span class="line">router id 10.10.10.2</span><br><span class="line">#</span><br><span class="line">vlan batch 10 40</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 10.1.1.2 255.255.255.252</span><br><span class="line">#</span><br><span class="line">interface Vlanif40</span><br><span class="line"> ip address 10.1.3.1 255.255.255.252</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 40</span><br><span class="line">#</span><br><span class="line">interface LoopBack0</span><br><span class="line"> ip address 10.10.10.2 255.255.255.255</span><br><span class="line">#</span><br><span class="line">bgp 10</span><br><span class="line"> peer 10.10.10.1 as-number 10</span><br><span class="line"> peer 10.10.10.1 connect-interface LoopBack0</span><br><span class="line"> peer 10.10.10.3 as-number 10</span><br><span class="line"> peer 10.10.10.3 connect-interface LoopBack0</span><br><span class="line"> peer 10.10.10.4 as-number 10</span><br><span class="line"> peer 10.10.10.4 connect-interface LoopBack0</span><br><span class="line"> #</span><br><span class="line"> ipv4-family unicast</span><br><span class="line">  undo synchronization</span><br><span class="line">  peer 10.10.10.1 enable</span><br><span class="line">  peer 10.10.10.3 enable</span><br><span class="line">  peer 10.10.10.4 enable</span><br><span class="line">#</span><br><span class="line">ospf 1</span><br><span class="line"> stub-router on-startup</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 10.1.1.0 0.0.0.3</span><br><span class="line">  network 10.1.3.0 0.0.0.3</span><br><span class="line">  network 10.10.10.2 0.0.0.0</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchC的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchC</span><br><span class="line">#</span><br><span class="line">router id 10.10.10.3</span><br><span class="line">#</span><br><span class="line">vlan batch 20 30</span><br><span class="line">#</span><br><span class="line">interface Vlanif20</span><br><span class="line"> ip address 10.1.2.2 255.255.255.252</span><br><span class="line"> ospf cost 2</span><br><span class="line">#</span><br><span class="line">interface Vlanif30</span><br><span class="line"> ip address 10.1.4.1 255.255.255.252</span><br><span class="line"> ospf cost 2</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 30</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 20</span><br><span class="line">#</span><br><span class="line">interface LoopBack0</span><br><span class="line"> ip address 10.10.10.3 255.255.255.255</span><br><span class="line">#</span><br><span class="line">bgp 10</span><br><span class="line"> peer 10.10.10.1 as-number 10</span><br><span class="line"> peer 10.10.10.1 connect-interface LoopBack0</span><br><span class="line"> peer 10.10.10.2 as-number 10</span><br><span class="line"> peer 10.10.10.2 connect-interface LoopBack0</span><br><span class="line"> peer 10.10.10.4 as-number 10</span><br><span class="line"> peer 10.10.10.4 connect-interface LoopBack0</span><br><span class="line"> #</span><br><span class="line"> ipv4-family unicast</span><br><span class="line">  undo synchronization</span><br><span class="line">  peer 10.10.10.1 enable</span><br><span class="line">  peer 10.10.10.2 enable</span><br><span class="line">  peer 10.10.10.4 enable</span><br><span class="line">#</span><br><span class="line">ospf 1</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 10.1.2.0 0.0.0.3</span><br><span class="line">  network 10.1.4.0 0.0.0.3</span><br><span class="line">  network 10.10.10.3 0.0.0.0</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchD的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchD</span><br><span class="line">#</span><br><span class="line">router id 10.10.10.4</span><br><span class="line">#</span><br><span class="line">vlan batch 30 40 50</span><br><span class="line">#</span><br><span class="line">interface Vlanif30</span><br><span class="line"> ip address 10.1.4.2 255.255.255.252</span><br><span class="line">#</span><br><span class="line">interface Vlanif40</span><br><span class="line"> ip address 10.1.3.2 255.255.255.252</span><br><span class="line">#</span><br><span class="line">interface Vlanif50</span><br><span class="line"> ip address 10.2.1.1 255.255.255.252</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 30</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 40</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;3</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 50</span><br><span class="line">#</span><br><span class="line">interface LoopBack0</span><br><span class="line"> ip address 10.10.10.4 255.255.255.255</span><br><span class="line">#</span><br><span class="line">bgp 10</span><br><span class="line"> peer 10.10.10.1 as-number 10</span><br><span class="line"> peer 10.10.10.1 connect-interface LoopBack0</span><br><span class="line"> peer 10.10.10.2 as-number 10</span><br><span class="line"> peer 10.10.10.2 connect-interface LoopBack0</span><br><span class="line"> peer 10.10.10.3 as-number 10</span><br><span class="line"> peer 10.10.10.3 connect-interface LoopBack0</span><br><span class="line"> peer 10.2.1.2 as-number 20</span><br><span class="line"> #</span><br><span class="line"> ipv4-family unicast</span><br><span class="line">  undo synchronization</span><br><span class="line">  import-route direct</span><br><span class="line">  import-route ospf 1</span><br><span class="line">  peer 10.10.10.1 enable</span><br><span class="line">  peer 10.10.10.2 enable</span><br><span class="line">  peer 10.10.10.3 enable</span><br><span class="line">  peer 10.2.1.2 enable</span><br><span class="line">#</span><br><span class="line">ospf 1</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 10.1.3.0 0.0.0.3</span><br><span class="line">  network 10.1.4.0 0.0.0.3</span><br><span class="line">  network 10.10.10.4 0.0.0.0</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchE的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchE</span><br><span class="line">#</span><br><span class="line">vlan batch 50 60</span><br><span class="line">#</span><br><span class="line">interface Vlanif50</span><br><span class="line"> ip address 10.2.1.2 255.255.255.252</span><br><span class="line">#</span><br><span class="line">interface Vlanif60</span><br><span class="line"> ip address 10.3.1.1 255.255.255.252</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 50</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 60</span><br><span class="line">#</span><br><span class="line">interface LoopBack0</span><br><span class="line"> ip address 10.10.10.5 255.255.255.255</span><br><span class="line">#</span><br><span class="line">bgp 20</span><br><span class="line"> router-id 10.10.10.5</span><br><span class="line"> peer 10.2.1.1 as-number 10</span><br><span class="line"> #</span><br><span class="line"> ipv4-family unicast</span><br><span class="line">  undo synchronization</span><br><span class="line">  network 10.3.1.0 255.255.255.252</span><br><span class="line">  peer 10.2.1.1 enable</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h3 id="6-24-7-配置OSPF-GR特性示例"><a href="#6-24-7-配置OSPF-GR特性示例" class="headerlink" title="6.24.7  配置OSPF GR特性示例"></a>6.24.7  配置OSPF GR特性示例</h3><h4 id="组网需求-6"><a href="#组网需求-6" class="headerlink" title="组网需求"></a>组网需求</h4><p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_cfg_ospf_108401">图6-75</a>所示，三台设备之间运行OSPF协议，整个OSPF网络被划分为Area0和Area1两个区域。现要求在SwitchC上运行的OSPF协议重启过程中不影响数据的正常转发。</p>
<p><strong>图6-75</strong>  OSPF GR的配置举例<br><img src="http://support.huawei.com/enterprise/product/images/b6708e9072ab4319ac3ad1663d47682f" alt="img" loading="lazy"></p>
<h4 id="配置思路-6"><a href="#配置思路-6" class="headerlink" title="配置思路"></a>配置思路</h4><p>采用如下的思路配置OSPF GR：</p>
<ol>
<li>在各交换机上配置OSPF基本功能，实现OSPF网络的基本互通。</li>
<li>在SwitchA和SwitchC上使能Opaque LSA功能，实现OSPF通过Type9 LSA支持OSPF GR。</li>
<li>在SwitchA和SwitchC上配置GR功能，实现当OSPF协议重启时保证数据正常转发。</li>
</ol>
<h4 id="操作步骤-76"><a href="#操作步骤-76" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>配置各接口所属的VLAN</li>
</ol>
<p>   # 配置SwitchA。SwitchB和SwitchC的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HUAWEI&gt; system-view</span><br><span class="line">[HUAWEI] sysname SwitchA</span><br><span class="line">[SwitchA] vlan batch 10 20</span><br><span class="line">[SwitchA] interface gigabitethernet 0&#x2F;0&#x2F;1</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] port link-type trunk</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] port trunk allow-pass vlan 10</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] quit</span><br><span class="line">[SwitchA] interface gigabitethernet 0&#x2F;0&#x2F;2</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] port link-type trunk</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] port trunk allow-pass vlan 20</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] quit</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>配置各VLANIF接口的IP地址</li>
</ol>
<p>   # 配置SwitchA。SwitchB和SwitchC的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] interface vlanif 10</span><br><span class="line">[SwitchA-Vlanif10] ip address 192.168.0.1 24</span><br><span class="line">[SwitchA-Vlanif10] quit</span><br><span class="line">[SwitchA] interface vlanif 20</span><br><span class="line">[SwitchA-Vlanif20] ip address 192.168.1.1 24</span><br><span class="line">[SwitchA-Vlanif20] quit</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>配置OSPF基本功能</li>
</ol>
<p>   # 配置SwitchA。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] ospf 1 router-id 10.1.1.1</span><br><span class="line">[SwitchA-ospf-1] area 0</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] network 192.168.0.0 0.0.0.255</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchA-ospf-1] area 1</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.1] network 192.168.1.0 0.0.0.255</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.1] quit</span><br><span class="line">[SwitchA-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchB。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchB] ospf 1 router-id 10.2.2.2</span><br><span class="line">[SwitchB-ospf-1] area 0</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] network 192.168.0.0 0.0.0.255</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchB-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchC。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] ospf 1 router-id 10.3.3.3</span><br><span class="line">[SwitchC-ospf-1] area 1</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.1] network 192.168.1.0 0.0.0.255</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.1] quit</span><br><span class="line">[SwitchC-ospf-1] quit</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>使能Opaque-LSA功能</li>
</ol>
<p>   # 配置SwitchA。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] ospf 1</span><br><span class="line">[SwitchA-ospf-1] opaque-capability enable</span><br><span class="line">[SwitchA-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchC。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] ospf 1</span><br><span class="line">[SwitchC-ospf-1] opaque-capability enable</span><br><span class="line">[SwitchC-ospf-1] quit</span><br></pre></td></tr></table></figure>



<ol start="5">
<li>配置OSPF GR特性</li>
</ol>
<p>   # 配置SwitchA。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] ospf 1</span><br><span class="line">[SwitchA-ospf-1] graceful-restart</span><br><span class="line">[SwitchA-ospf-1] return</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchC。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] ospf 1</span><br><span class="line">[SwitchC-ospf-1] graceful-restart</span><br><span class="line">[SwitchC-ospf-1] return</span><br></pre></td></tr></table></figure>



<ol start="6">
<li>验证配置结果</li>
</ol>
<p>   # 查看SwitchC的GR状态。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchC&gt; display ospf graceful-restart</span><br><span class="line"> </span><br><span class="line">          OSPF Process 1 with Router ID 10.3.3.3</span><br><span class="line"> Graceful-restart capability     : enabled</span><br><span class="line"> Graceful-restart support        : planned and un-planned, totally</span><br><span class="line"> Helper-policy support           : planned and un-planned, strict lsa check</span><br><span class="line"> Current GR state                : normal</span><br><span class="line"> Graceful-restart period         : 120 seconds</span><br><span class="line"> </span><br><span class="line"> Number of neighbors under helper:</span><br><span class="line">  Normal neighbors    : 0</span><br><span class="line">  Virtual neighbors   : 0</span><br><span class="line">  Sham-link neighbors : 0</span><br><span class="line">  Total neighbors     : 0</span><br><span class="line"> </span><br><span class="line"> Number of restarting neighbors : 0</span><br><span class="line"> </span><br><span class="line"> Last exit reason:</span><br><span class="line">  On graceful restart : none</span><br><span class="line">  On Helper           : none</span><br></pre></td></tr></table></figure>

<p>   # 在SwitchA查看邻居状态。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchA&gt; display ospf peer</span><br><span class="line"></span><br><span class="line">     OSPF Process 1 with Router ID 10.1.1.1</span><br><span class="line">         Neighbors </span><br><span class="line"></span><br><span class="line"> Area 0.0.0.0 interface 192.168.0.1(Vlanif10)&#39;s neighbors</span><br><span class="line"> Router ID: 10.2.2.2          Address: 192.168.0.2      GR State: Normal     </span><br><span class="line">   State: Full  Mode:Nbr is  Master  Priority: 1</span><br><span class="line">   DR: 192.168.0.2  BDR: 192.168.0.1  MTU: 0    </span><br><span class="line">   Dead timer due in 40  sec </span><br><span class="line">   Retrans timer interval: 5 </span><br><span class="line">   Neighbor is up for 00:04:28     </span><br><span class="line">   Authentication Sequence: [ 0 ] </span><br><span class="line"></span><br><span class="line">         Neighbors </span><br><span class="line"></span><br><span class="line"> Area 0.0.0.1 interface 192.168.1.1(Vlanif20)&#39;s neighbors</span><br><span class="line"> Router ID: 10.3.3.3          Address: 192.168.1.2      GR State: Normal   </span><br><span class="line">   State: Full  Mode:Nbr is  Master  Priority: 1</span><br><span class="line">   DR: 192.168.1.1  BDR: 192.168.1.2  MTU: 0    </span><br><span class="line">   Dead timer due in 36  sec </span><br><span class="line">   Retrans timer interval: 5 </span><br><span class="line">   Neighbor is up for 00:00:00     </span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br></pre></td></tr></table></figure>

<p>   可以看到，SwitchA的OSPF邻居处于<strong>Full</strong>状态，GR的状态是<strong>Normal</strong>。</p>
<p>   # 平滑重启SwitchC的OSPF进程。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchC&gt; reset ospf process graceful-restart</span><br></pre></td></tr></table></figure>

<p>   # 在SwitchA查看邻居状态。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchA&gt; display ospf peer</span><br><span class="line"></span><br><span class="line">     OSPF Process 1 with Router ID 10.1.1.1</span><br><span class="line">         Neighbors </span><br><span class="line"></span><br><span class="line"> Area 0.0.0.0 interface 192.168.0.1(Vlanif10)&#39;s neighbors</span><br><span class="line"> Router ID: 10.2.2.2          Address: 192.168.0.2      GR State: Normal     </span><br><span class="line">   State: Full  Mode:Nbr is  Master  Priority: 1</span><br><span class="line">   DR: 192.168.0.2  BDR: 192.168.0.1  MTU: 0    </span><br><span class="line">   Dead timer due in 40  sec </span><br><span class="line">   Retrans timer interval: 5 </span><br><span class="line">   Neighbor is up for 00:04:28     </span><br><span class="line">   Authentication Sequence: [ 0 ] </span><br><span class="line"></span><br><span class="line">         Neighbors </span><br><span class="line"></span><br><span class="line"> Area 0.0.0.1 interface 192.168.1.1(Vlanif20)&#39;s neighbors</span><br><span class="line"> Router ID: 10.3.3.3          Address: 192.168.1.2      GR State: Normal   </span><br><span class="line">   State: Full  Mode:Nbr is  Slave  Priority: 1</span><br><span class="line">   DR: 192.168.1.1  BDR: 192.168.1.2  MTU: 0    </span><br><span class="line">   Dead timer due in 36  sec </span><br><span class="line">   Retrans timer interval: 5 </span><br><span class="line">   Neighbor is up for 00:00:00     </span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br></pre></td></tr></table></figure>

<p>   可以看到，SwitchA与SwitchC邻居关系继续保持为<strong>Full</strong>状态，不受SwitchC的OSPF进程平滑重启的影响。</p>
<h4 id="配置文件-6"><a href="#配置文件-6" class="headerlink" title="配置文件"></a>配置文件</h4><ul>
<li><p>SwitchA的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchA</span><br><span class="line">#</span><br><span class="line">vlan batch 10 20</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 192.168.0.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif20</span><br><span class="line"> ip address 192.168.1.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 20</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.1.1.1</span><br><span class="line"> opaque-capability enable</span><br><span class="line"> graceful-restart</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.0.0 0.0.0.255</span><br><span class="line"> area 0.0.0.1</span><br><span class="line">  network 192.168.1.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchB的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchB</span><br><span class="line">#</span><br><span class="line">vlan batch 10</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 192.168.0.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.2.2.2</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.0.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchC的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchC</span><br><span class="line">#</span><br><span class="line">vlan batch 20</span><br><span class="line">#</span><br><span class="line">interface Vlanif20</span><br><span class="line"> ip address 192.168.1.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 20</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.3.3.3</span><br><span class="line"> opaque-capability enable</span><br><span class="line"> graceful-restart</span><br><span class="line"> area 0.0.0.1</span><br><span class="line">  network 192.168.1.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h3 id="6-24-8-配置OSPF与BFD联动示例"><a href="#6-24-8-配置OSPF与BFD联动示例" class="headerlink" title="6.24.8  配置OSPF与BFD联动示例"></a>6.24.8  配置OSPF与BFD联动示例</h3><h4 id="组网需求-7"><a href="#组网需求-7" class="headerlink" title="组网需求"></a>组网需求</h4><p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_cfg_ospf_108701">图6-76</a>所示，SwitchA、SwitchB和SwitchC之间运行OSPF，SwitchA和SwitchB之间的交换机仅作透传功能。现在需要SwitchA和SwitchB能快速感应它们之间的链路状态，当链路SwitchA-SwitchB发生故障时，业务能快速切换到备份链路SwitchA-SwitchC-SwitchB上。</p>
<p> 说明：</p>
<p>请确保该场景下互联接口的STP处于未使能状态。因为在使能STP的环形网络中，如果用交换机的VLANIF接口构建三层网络，会导致某个端口被阻塞，从而导致三层业务不能正常运行。</p>
<p><strong>图6-76</strong>  配置OSPF与BFD联动组网图<br><img src="http://support.huawei.com/enterprise/product/images/266dca518f594cb6a368cbc16c8a385b" alt="img" loading="lazy"></p>
<h4 id="配置思路-7"><a href="#配置思路-7" class="headerlink" title="配置思路"></a>配置思路</h4><p>采用如下思路配置OSPF与BFD联动：</p>
<ol>
<li>在各交换机上配置OSPF基本功能，实现整个OSPF网络的互通。</li>
<li>在各交换机上配置OSPF与BFD联动功能，实现当SwitchA和SwitchB之间的链路出现故障时快速的切换到备份链路。</li>
</ol>
<h4 id="操作步骤-77"><a href="#操作步骤-77" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>配置各接口所属的VLAN</li>
</ol>
<p>   # 配置SwitchA。SwitchB和SwitchC的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HUAWEI&gt; system-view</span><br><span class="line">[HUAWEI] sysname SwitchA</span><br><span class="line">[SwitchA] vlan batch 10 30</span><br><span class="line">[SwitchA] interface gigabitethernet 0&#x2F;0&#x2F;1</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] port link-type trunk</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] port trunk allow-pass vlan 10</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] quit</span><br><span class="line">[SwitchA] interface gigabitethernet 0&#x2F;0&#x2F;2</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] port link-type trunk</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] port trunk allow-pass vlan 30</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] quit</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>配置各VLANIF接口的IP地址</li>
</ol>
<p>   # 配置SwitchA。SwitchB和SwitchC的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] interface vlanif 10</span><br><span class="line">[SwitchA-Vlanif10] ip address 10.1.1.1 24</span><br><span class="line">[SwitchA-Vlanif10] quit</span><br><span class="line">[SwitchA] interface vlanif 30</span><br><span class="line">[SwitchA-Vlanif30] ip address 10.3.3.1 24</span><br><span class="line">[SwitchA-Vlanif30] quit</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>配置OSPF基本功能</li>
</ol>
<p>   # 配置SwitchA。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] ospf 1 router-id 10.10.10.1</span><br><span class="line">[SwitchA-ospf-1] area 0</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] network 10.1.1.0 0.0.0.255</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] network 10.3.3.0 0.0.0.255</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchA-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchB。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchB] ospf 1 router-id 10.10.10.2</span><br><span class="line">[SwitchB-ospf-1] area 0</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] network 10.2.2.0 0.0.0.255</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] network 10.3.3.0 0.0.0.255</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] network 172.16.1.0 0.0.0.255</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchB-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchC。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] ospf 1 router-id 10.10.10.3</span><br><span class="line">[SwitchC-ospf-1] area 0</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.0] network 10.1.1.0 0.0.0.255</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.0] network 10.2.2.0 0.0.0.255</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchC-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置完成后，执行命令<strong>display ospf peer</strong>，可以看到SwitchA，SwitchB和SwitchC之间互相建立了邻接关系。以SwitchA的显示结果为例。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] display ospf peer</span><br><span class="line"></span><br><span class="line">          OSPF Process 1 with Router ID 10.10.10.1</span><br><span class="line">                  Neighbors</span><br><span class="line"></span><br><span class="line"> Area 0.0.0.0 interface 10.1.1.1(Vlanif10)&#39;s neighbors</span><br><span class="line"> Router ID: 10.10.10.3       Address: 10.1.1.2          </span><br><span class="line">   State: Full  Mode:Nbr is  Master  Priority: 1</span><br><span class="line">   DR: 10.1.1.2  BDR: 10.1.1.1  MTU: 0</span><br><span class="line">   Dead timer due in 38  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:00:15</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br><span class="line"></span><br><span class="line">                  Neighbors</span><br><span class="line"></span><br><span class="line"> Area 0.0.0.0 interface 10.3.3.1(Vlanif30)&#39;s neighbors</span><br><span class="line"> Router ID: 10.10.10.2       Address: 10.3.3.2</span><br><span class="line">   State: Full  Mode:Nbr is   Master  Priority: 1</span><br><span class="line">   DR: 10.3.3.2  BDR: 10.3.3.1  MTU: 0</span><br><span class="line">   Dead timer due in 25  sec</span><br><span class="line">   Retrans timer interval: 5</span><br><span class="line">   Neighbor is up for 00:00:59</span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br></pre></td></tr></table></figure>

<p>   # 查看SwitchA的OSPF路由表的信息，可以看到去往SwitchB和SwitchC的路由表项。而去往目的网段172.16.1.0/24的路由下一跳地址为10.3.3.2，说明流量在链路SwitchA→SwitchB上传输。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] display ospf routing</span><br><span class="line"></span><br><span class="line">          OSPF Process 1 with Router ID 10.10.10.1</span><br><span class="line">                   Routing Tables</span><br><span class="line"></span><br><span class="line"> Routing for Network</span><br><span class="line"> Destination        Cost  Type       NextHop         AdvRouter       Area</span><br><span class="line"> 10.1.1.0&#x2F;24        1     Transit    10.1.1.1        10.10.10.1      0.0.0.0</span><br><span class="line"> 10.2.2.0&#x2F;24        2     Transit    10.1.1.2        10.10.10.3      0.0.0.0</span><br><span class="line"> 10.2.2.0&#x2F;24        2     Transit    10.3.3.2        10.10.10.3      0.0.0.0</span><br><span class="line"> 10.3.3.0&#x2F;24        1     Transit    10.3.3.1        10.10.10.1      0.0.0.0</span><br><span class="line"> 172.16.1.0&#x2F;24      2     Stub       10.3.3.2        10.10.10.2      0.0.0.0</span><br><span class="line"></span><br><span class="line"> Total Nets: 5</span><br><span class="line"> Intra Area: 5  Inter Area: 0  ASE: 0  NSSA: 0</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>配置OSPF与BFD联动</li>
</ol>
<p>   # 在SwitchA上配置OSPF与BFD联动功能。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] bfd</span><br><span class="line">[SwitchA-bfd] quit</span><br><span class="line">[SwitchA] ospf 1</span><br><span class="line">[SwitchA-ospf-1] bfd all-interfaces enable</span><br><span class="line">[SwitchA-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 在SwitchB上配置OSPF与BFD联动功能。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchB] bfd</span><br><span class="line">[SwitchB-bfd] quit</span><br><span class="line">[SwitchB] ospf 1</span><br><span class="line">[SwitchB-ospf-1] bfd all-interfaces enable</span><br><span class="line">[SwitchB-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 在SwitchC上配置OSPF与BFD联动功能。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] bfd</span><br><span class="line">[SwitchC-bfd] quit</span><br><span class="line">[SwitchC] ospf 1</span><br><span class="line">[SwitchC-ospf-1] bfd all-interfaces enable</span><br><span class="line">[SwitchC-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置完成后，在SwitchA或SwitchB、SwitchC上执行<strong>display ospf bfd session all</strong>命令，可以看到BFD会话的状态为<strong>Up</strong>。以SwitchA的显示为例。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] display ospf bfd session all</span><br><span class="line"></span><br><span class="line">          OSPF Process 1 with Router ID 10.10.10.1</span><br><span class="line">  Area 0.0.0.0 interface 10.1.1.1(Vlanif10)&#39;s BFD Sessions</span><br><span class="line"></span><br><span class="line"> NeighborId:10.10.10.3       AreaId:0.0.0.0          Interface:Vlanif10</span><br><span class="line"> BFDState:up                 rx    :1000             tx       :1000</span><br><span class="line"> Multiplier:3                BFD Local Dis:8195      LocalIpAdd:10.1.1.1</span><br><span class="line"> RemoteIpAdd:10.1.1.2        Diagnostic Info:No diagnostic information</span><br><span class="line"></span><br><span class="line">  Area 0.0.0.0 interface 10.3.3.1(Vlanif30)&#39;s BFD Sessions</span><br><span class="line"></span><br><span class="line"> NeighborId:10.10.10.2       AreaId:0.0.0.0          Interface:Vlanif30</span><br><span class="line"> BFDState:up                 rx    :1000             tx       :1000</span><br><span class="line"> Multiplier:3                BFD Local Dis:8194      LocalIpAdd:10.3.3.1</span><br><span class="line"> RemoteIpAdd:10.3.3.2         Diagnostic Info:No diagnostic information</span><br></pre></td></tr></table></figure>



<ol start="5">
<li>检查配置结果</li>
</ol>
<p>   # 对SwitchB的GE0/0/1接口执行<strong>shutdown</strong>命令，模拟链路故障。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchB] interface gigabitethernet 0&#x2F;0&#x2F;1</span><br><span class="line">[SwitchB-GigabitEthernet0&#x2F;0&#x2F;1] shutdown</span><br></pre></td></tr></table></figure>

<p>   # 在SwitchA上查看OSPF路由表。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] display ospf routing</span><br><span class="line"></span><br><span class="line">          OSPF Process 1 with Router ID 10.10.10.1</span><br><span class="line">                   Routing Tables</span><br><span class="line"></span><br><span class="line"> Routing for Network</span><br><span class="line"> Destination        Cost  Type       NextHop         AdvRouter       Area</span><br><span class="line"> 10.1.1.0&#x2F;24        1     Transit    10.1.1.1        10.10.10.1      0.0.0.0</span><br><span class="line"> 10.2.2.0&#x2F;24        2     Transit    10.1.1.2        10.10.10.3      0.0.0.0</span><br><span class="line"> 10.3.3.0&#x2F;24        1     Stub       10.3.3.1        10.10.10.1      0.0.0.0</span><br><span class="line"> 172.16.1.0&#x2F;24      3     Stub       10.1.1.2        10.10.10.2      0.0.0.0</span><br><span class="line"></span><br><span class="line"> Total Nets: 4</span><br><span class="line"> Intra Area: 4  Inter Area: 0  ASE: 0  NSSA: 0</span><br></pre></td></tr></table></figure>

<p>   可以看出在链路SwitchA-SwitchB出现故障后，备份链路SwitchA-SwitchC-SwitchB开始生效，即去往目的网段172.16.1.0/24的路由下一跳地址变成了10.1.1.2。</p>
<h4 id="配置文件-7"><a href="#配置文件-7" class="headerlink" title="配置文件"></a>配置文件</h4><ul>
<li><p>SwitchA的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchA</span><br><span class="line">#</span><br><span class="line">vlan batch 10 30</span><br><span class="line">#</span><br><span class="line">bfd</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 10.1.1.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif30</span><br><span class="line"> ip address 10.3.3.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 30</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.10.10.1</span><br><span class="line"> bfd all-interfaces enable</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 10.1.1.0 0.0.0.255</span><br><span class="line">  network 10.3.3.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchB的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchB</span><br><span class="line">#</span><br><span class="line">vlan batch 20 30 40</span><br><span class="line">#</span><br><span class="line">bfd</span><br><span class="line">#</span><br><span class="line">interface Vlanif20</span><br><span class="line"> ip address 10.2.2.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif30</span><br><span class="line"> ip address 10.3.3.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif40</span><br><span class="line"> ip address 172.16.1.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 30</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 20</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;3</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 40</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.10.10.2</span><br><span class="line"> bfd all-interfaces enable</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 10.2.2.0 0.0.0.255</span><br><span class="line">  network 10.3.3.0 0.0.0.255</span><br><span class="line">  network 172.16.1.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchC的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchC</span><br><span class="line">#</span><br><span class="line">vlan batch 10 20</span><br><span class="line">#</span><br><span class="line">bfd</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 10.1.1.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif20</span><br><span class="line"> ip address 10.2.2.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 20</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.10.10.3</span><br><span class="line"> bfd all-interfaces enable</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 10.1.1.0 0.0.0.255</span><br><span class="line">  network 10.2.2.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h3 id="6-24-9-配置OSPF-IP-FRR示例"><a href="#6-24-9-配置OSPF-IP-FRR示例" class="headerlink" title="6.24.9  配置OSPF IP FRR示例"></a>6.24.9  配置OSPF IP FRR示例</h3><h4 id="组网需求-8"><a href="#组网需求-8" class="headerlink" title="组网需求"></a>组网需求</h4><p>如<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&partNo=10092#fig_dc_cfg_ospf_109901">图6-77</a>所示，四台交换机属于同一个OSPF区域，用户希望对SwitchA转发的流量进行可靠性保护，具体需求如下：</p>
<ul>
<li>正常情况下，SwitchA的流量通过主用链路SwitchA-SwitchC转发。</li>
<li>当主用链路SwitchA-SwitchC发生故障的时候，流量快速切换至备用链路SwitchA-SwitchB，而不用等待路由收敛，从而达到流量不中断的目的。</li>
</ul>
<p> 说明：</p>
<p>请确保该场景下互联接口的STP处于未使能状态。因为在使能STP的环形网络中，如果用交换机的VLANIF接口构建三层网络，会导致某个端口被阻塞，从而导致三层业务不能正常运行。</p>
<p><strong>图6-77</strong>  配置OSPF IP FRR组网图<br><img src="http://support.huawei.com/enterprise/product/images/547bad259f194675918a5fb8fe5b24a0" alt="img" loading="lazy"></p>
<h4 id="配置思路-8"><a href="#配置思路-8" class="headerlink" title="配置思路"></a>配置思路</h4><p>采用如下思路配置OSPF IP FRR：</p>
<ol>
<li>在各交换机上配置OSPF基本功能。</li>
<li>在SwitchA上配置OSPF IP FRR功能，实现对SwitchA转发的流量进行可靠性保护的目的。</li>
</ol>
<h4 id="操作步骤-78"><a href="#操作步骤-78" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>配置各接口所属的VLAN</li>
</ol>
<p>   # 配置SwitchA。SwitchB、SwitchC和SwitchD的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HUAWEI&gt; system-view</span><br><span class="line">[HUAWEI] sysname SwitchA</span><br><span class="line">[SwitchA] vlan batch 10 20</span><br><span class="line">[SwitchA] interface GigabitEthernet 0&#x2F;0&#x2F;1</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] port link-type trunk</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] port trunk allow-pass vlan 10</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;1] quit</span><br><span class="line">[SwitchA] interface GigabitEthernet 0&#x2F;0&#x2F;2</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] port link-type trunk</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] port trunk allow-pass vlan 20</span><br><span class="line">[SwitchA-GigabitEthernet0&#x2F;0&#x2F;2] quit</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>配置各VLANIF接口的IP地址</li>
</ol>
<p>   # 配置SwitchA。SwitchB、SwitchC和SwitchD的配置与SwitchA类似。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] interface vlanif 10</span><br><span class="line">[SwitchA-Vlanif10] ip address 192.168.1.1 24</span><br><span class="line">[SwitchA-Vlanif10] quit</span><br><span class="line">[SwitchA] interface vlanif 20</span><br><span class="line">[SwitchA-Vlanif20] ip address 192.168.2.1 24</span><br><span class="line">[SwitchA-Vlanif20] quit</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>配置OSPF基本功能</li>
</ol>
<p>   # 配置SwitchA。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] ospf 1 router-id 10.1.1.1</span><br><span class="line">[SwitchA-ospf-1] area 0</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] network 192.168.1.0 0.0.0.255</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] network 192.168.2.0 0.0.0.255</span><br><span class="line">[SwitchA-ospf-1-area-0.0.0.0] quit</span><br><span class="line">[SwitchA-ospf-1] quit</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchB。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchB] ospf 1 router-id 10.2.2.2</span><br><span class="line">[SwitchB-ospf-1] area 0</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] network 192.168.1.0 0.0.0.255</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] network 192.168.3.0 0.0.0.255</span><br><span class="line">[SwitchB-ospf-1-area-0.0.0.0] return</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchC。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchC] ospf 1 router-id 10.3.3.3</span><br><span class="line">[SwitchC-ospf-1] area 0</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.0] network 192.168.2.0 0.0.0.255</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.0] network 192.168.3.0 0.0.0.255</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.0] network 192.168.4.0 0.0.0.255</span><br><span class="line">[SwitchC-ospf-1-area-0.0.0.0] return</span><br></pre></td></tr></table></figure>

<p>   # 配置SwitchD。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchD] ospf 1 router-id 10.4.4.4</span><br><span class="line">[SwitchD-ospf-1] area 0</span><br><span class="line">[SwitchD-ospf-1-area-0.0.0.0] network 192.168.4.0 0.0.0.255</span><br><span class="line">[SwitchD-ospf-1-area-0.0.0.0] return</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>在SwitchA上使能OSPF IP FRR。</li>
</ol>
<p>   # 在SwitchA上使能OSPF IP FRR。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[SwitchA] ospf</span><br><span class="line">[SwitchA-ospf-1] frr</span><br><span class="line">[SwitchA-ospf-1-frr] loop-free-alternate</span><br><span class="line">[SwitchA-ospf-1-frr] return</span><br></pre></td></tr></table></figure>



<ol start="5">
<li>检查配置结果</li>
</ol>
<p>   # 查看SwitchA到SwitchD的路由信息。由于使能了OSPF IP FRR，OSPF生成了一条备份路由。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;SwitchA&gt; display ospf routing 192.168.4.0</span><br><span class="line"></span><br><span class="line">         OSPF Process 1 with Router ID 10.1.1.1</span><br><span class="line"></span><br><span class="line"> Destination : 192.168.4.0&#x2F;24     </span><br><span class="line"> AdverRouter : 10.4.4.4                 Area      : 0.0.0.0  </span><br><span class="line"> Cost        : 2                        Type      : Transit </span><br><span class="line"> NextHop     : 192.168.2.2              Interface : Vlanif20  </span><br><span class="line"> Priority    : Low                      Age       : 00h00m10s  </span><br><span class="line"> Backup Nexthop : 192.168.1.2           Backup Interface: Vlanif10</span><br><span class="line"> Backup Type : LFA LINK</span><br></pre></td></tr></table></figure>

<p>   从显示信息可以看出，SwitchA上已经生成了备份的路由。</p>
<h4 id="配置文件-8"><a href="#配置文件-8" class="headerlink" title="配置文件"></a>配置文件</h4><ul>
<li><p>SwitchA的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchA</span><br><span class="line">#</span><br><span class="line">vlan batch 10 20</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 192.168.1.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif20</span><br><span class="line"> ip address 192.168.2.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 20</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.1.1.1</span><br><span class="line"> frr</span><br><span class="line">  loop-free-alternate</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.1.0 0.0.0.255</span><br><span class="line">  network 192.168.2.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchB的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchB</span><br><span class="line">#</span><br><span class="line">vlan batch 10 30</span><br><span class="line">#</span><br><span class="line">interface Vlanif10</span><br><span class="line"> ip address 192.168.1.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif30</span><br><span class="line"> ip address 192.168.3.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 10</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 30</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.2.2.2</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.1.0 0.0.0.255</span><br><span class="line">  network 192.168.3.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchC的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchC</span><br><span class="line">#</span><br><span class="line">vlan batch 20 30 40</span><br><span class="line">#</span><br><span class="line">interface Vlanif20</span><br><span class="line"> ip address 192.168.2.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif30</span><br><span class="line"> ip address 192.168.3.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface Vlanif40</span><br><span class="line"> ip address 192.168.4.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 20</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 40</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;3</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 30</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.3.3.3</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.2.0 0.0.0.255</span><br><span class="line">  network 192.168.3.0 0.0.0.255</span><br><span class="line">  network 192.168.4.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>
</li>
<li><p>SwitchD的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">sysname SwitchD</span><br><span class="line">#</span><br><span class="line">vlan batch 40</span><br><span class="line">#</span><br><span class="line">interface Vlanif40</span><br><span class="line"> ip address 192.168.4.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 40</span><br><span class="line">#</span><br><span class="line">ospf 1 router-id 10.4.4.4</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.4.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h2 id="6-25-常见配置错误"><a href="#6-25-常见配置错误" class="headerlink" title="6.25  常见配置错误"></a>6.25  常见配置错误</h2><p>介绍常见配置错误的案例，避免在配置阶段引入故障。</p>
<h3 id="6-25-1-OSPF邻居建立不成功"><a href="#6-25-1-OSPF邻居建立不成功" class="headerlink" title="6.25.1  OSPF邻居建立不成功"></a>6.25.1  OSPF邻居建立不成功</h3><h4 id="故障现象"><a href="#故障现象" class="headerlink" title="故障现象"></a>故障现象</h4><p>OSPF邻居建立不成功。</p>
<h4 id="操作步骤-79"><a href="#操作步骤-79" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>检查邻居两端的接口物理和协议状态是否UP，状态是否稳定，接口是否有丢包，两边互ping大包是否能通。</li>
</ol>
<p>   若物理接口不Up或是不稳定（有振荡现象），请排查物理链路和链路层协议，确保物理和协议状态都是Up，并且接口无错误计数。</p>
<p>   可以通过ping测试，长ping测试是否存在丢包现象，ping大包（1500字节以上）测试是否存在大包不通的现象。若存在，请检查数据包传送路径上各设备接口的MTU值设置是否合理。</p>
<ol start="2">
<li>检查链路两端OSPF进程的Router ID是否一致。</li>
</ol>
<p>   分别在链路两端的设备上执行命令<strong>display ospf</strong> [ <em>process-id</em> ] <strong>brief</strong>，查看OSPF进程的Router ID。</p>
<p>   Router ID要保证全网唯一，否则会导致邻居不能正常建立、路由信息不正确的问题。建议在设备上单独为每个OSPF进程配置全网唯一的Router ID。</p>
<p>   如果链路两端OSPF进程的Router ID一致，请在系统视图下执行命令<strong>ospf</strong> [ <em>process-id</em> ] <strong>router-id</strong> <em>router-id</em>，修改OSPF进程的Router ID以保证不冲突。</p>
<p>   修改OSPF进程的Router ID之后，必须在用户视图下执行命令<strong>reset ospf</strong> [ <em>process-id</em> ] <strong>process</strong>后，新配置的Router ID才会生效。</p>
<ol start="3">
<li>检查链路两端OSPF区域ID是否一致。</li>
</ol>
<p>   分别在链路两端的设备上执行命令<strong>display ospf</strong> [ <em>process-id</em> ] <strong>brief</strong>，查看OSPF的区域ID。</p>
<p>   如果链路两端的OSPF区域ID不一致，请在OSPF视图下执行命令<strong>area</strong> <em>area-id</em>，修改OSPF区域ID以保证一致。</p>
<ol start="4">
<li>检查链接两端OSPF接口的网络类型是否一致。</li>
</ol>
<p>   分别在链路两端的设备上执行命令<strong>display ospf</strong> [ <em>process-id</em> ] <strong>interface</strong>，查看OSPF接口的接口类型。</p>
<p>   一般情况下，链路两端的OSPF接口的网络类型必须一致，否则双方不能正常建立起OSPF邻居关系。</p>
<p>   如果OSPF接口的网络类型不一致，请在运行OSPF协议的接口视图下执行命令<strong>ospf network-type</strong> { <strong>broadcast</strong> | <strong>nbma</strong> | <strong>p2mp</strong> | <strong>p2p</strong> }，修改OSPF接口的网络类型以保证一致。</p>
<pre><code>说明：</code></pre>
<p>   如果链路两端OSPF接口的网络类型都是NBMA，则必须在OSPF视图下执行命令<strong>peer</strong> <em>ip-address</em> [ <strong>dr-priority</strong> <em>priority</em> ]，配置NBMA网络的OSPF邻居。</p>
<ol start="5">
<li>检查链路两端OSPF接口的IP地址的掩码是否一致。</li>
</ol>
<p>   分别在链路两端的设备上执行命令<strong>display current-configuration</strong> <strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，查看OSPF接口的IP地址。</p>
<p>   一般情况下，链路两端的OSPF接口的IP地址的掩码必须一致，否则双方不能正常建立OSPF邻居关系。但在P2MP网络中，可以通过在运行OSPF协议的接口视图下配置命令<strong>ospf p2mp-mask-ignore</strong>来使设备忽略对网络掩码的检查，从而正常建立OSPF邻居关系。</p>
<p>   如果OSPF接口的IP地址的掩码不一致，请在运行OSPF协议的接口视图下执行命令<strong>ip address</strong> <em>ip-address</em> { <em>mask</em> | <em>mask-length</em> }，修改OSPF接口的IP地址以保证掩码一致。</p>
<ol start="6">
<li>检查链路两端OSPF接口的IP地址所在网段是否包含在区域内配置的<strong>network</strong>内。</li>
</ol>
<p>   分别在链路两端的设备上执行命令<strong>display current-configuration</strong> <strong>interface</strong> <em>interface-type</em> <em>interface-number</em>，查看OSPF接口的IP地址；执行命令<strong>display current-configuration</strong> <strong>configuration</strong> <strong>ospf</strong>，查看OSPF进程的配置。</p>
<p>   满足下面两个条件，OSPF协议才能在接口上运行：</p>
<ul>
<li><p>接口的IP地址掩码长度≥<strong>network</strong>命令中的掩码长度。OSPF使用反掩码，例如0.0.0.255表示掩码长度24位。</p>
</li>
<li><p>接口的主IP地址必须在<strong>network</strong>命令指定的网段范围之内。</p>
<p>如果检查发现接口IP地址与配置的<strong>network</strong>不满足上述条件，请在运行OSPF协议的接口视图下执行命令<strong>ip address</strong> <em>ip-address</em> { <em>mask</em> | <em>mask-length</em> }，修改接口的IP地址；或者在OSPF进程对应的区域视图下执行命令<strong>network</strong>，修改配置的网段，保证满足上述条件。</p>
</li>
</ul>
<ol start="7">
<li>检查链路两端OSPF接口的DR优先级是否非零。</li>
</ol>
<p>   分别在链路两端的设备上执行命令<strong>display ospf</strong> [ <em>process-id</em> ] <strong>interface</strong>，查看OSPF接口的DR优先级。</p>
<p>   对于广播和NBMA类型网络，链路中至少要有一个OSPF接口的DR优先级不为0，这样才能正常选举出DR。否则两边的邻居状态只能达到<strong>2-Way</strong>。</p>
<p>   如果链路两端OSPF接口的DR优先级都为0，请在运行OSPF协议的接口视图下执行命令<strong>ospf dr-priority</strong> <em>priority</em>，修改OSPF接口的DR优先级以保证至少有一个接口的DR优先级不为0。</p>
<h3 id="6-25-2-OSPF不能发现其他区域的路由"><a href="#6-25-2-OSPF不能发现其他区域的路由" class="headerlink" title="6.25.2  OSPF不能发现其他区域的路由"></a>6.25.2  OSPF不能发现其他区域的路由</h3><h4 id="故障现象-1"><a href="#故障现象-1" class="headerlink" title="故障现象"></a>故障现象</h4><p>在链路正常的情况下，OSPF不能发现其他区域的路由。</p>
<h4 id="操作步骤-80"><a href="#操作步骤-80" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>检查设备所在区域是否与骨干区域相连。</li>
</ol>
<p>   在设备所在区域的ABR上执行命令<strong>display ospf</strong> [ <em>process-id</em> ] <strong>brief</strong>，查看ABR的区域配置信息。</p>
<p>   OSPF规定所有非骨干区域必须与骨干区域保持连通。</p>
<p>   如果ABR上没有配置骨干区域的信息，请在OSPF视图下执行命令<strong>area</strong> <em>area-id</em>，修改OSPF区域信息以保证ABR上至少有一个接口运行在骨干区域。</p>
<pre><code>说明：</code></pre>
<p>   如果因实际组网限制，无法满足所有非骨干区域与骨干区域保持连通的要求，可以通过配置虚连接来满足需求。</p>
<ol start="2">
<li>检查设备所在区域是否为Totally Stub区域。</li>
</ol>
<p>   在设备上执行命令<strong>display current-configuration</strong> <strong>configuration</strong> <strong>ospf</strong> [ <em>process-id</em> ]，查看OSPF进程的配置信息。</p>
<p>   配置非骨干区域为Stub区域时，如果在ABR上配置时加上了参数<strong>no-summary</strong> （即OSPF区域视图下执行<strong>stub</strong> <strong>no-summary</strong>命令），则将该区域配置成了Totally Stub区域。</p>
<p>   Totally Stub区域，不允许发布自治系统外部路由和区域间的路由，只允许发布区域内路由。</p>
<p>   如果设备所在区域被配置为Totally Stub区域，请在确认需要修改的情况下，根据需求选择如下配置：</p>
<ul>
<li>如果要将该Totally Stub区域恢复为普通区域，则需要在该区域的所有设备的OSPF区域视图下执行命令<strong>undo stub</strong>。</li>
<li>如果仅仅是需要将Totally Stub区域改成Stub区域，则需要在该区域的ABR的OSPF区域视图下先执行命令<strong>undo stub</strong>，然后再执行命令<strong>stub</strong>。</li>
</ul>
<ol start="3">
<li>检查设备所在区域是否为Totally NSSA区域。</li>
</ol>
<p>   在设备上执行命令<strong>display current-configuration</strong> <strong>configuration</strong> <strong>ospf</strong> [ <em>process-id</em> ]，查看OSPF进程的配置信息。</p>
<p>   配置非骨干区域为NSSA区域时，如果在ABR上配置时加上了参数<strong>no-summary</strong> （即在OSPF区域视图下执行<strong>nssa</strong> <strong>no-summary</strong>命令），则将该区域配置成了Totally NSSA区域。</p>
<p>   Totally NSSA区域不允许发布自治系统外部路由和区域间的路由，只允许发布区域内路由。</p>
<p>   如果设备所在区域被配置为Totally NSSA区域，请在确认需要修改的情况下，根据需求选择如下配置：</p>
<ul>
<li>如果要将该Totally NSSA区域恢复为普通区域，则需要在该区域的所有设备的OSPF区域视图下执行命令<strong>undo nssa</strong>。</li>
<li>如果仅仅是需要将Totally NSSA区域改成NSSA区域，则需要在该区域的ABR的OSPF区域视图下先执行命令<strong>undo nssa</strong>，然后再执行命令<strong>nssa</strong>。</li>
</ul>
<h2 id="6-26-参考信息"><a href="#6-26-参考信息" class="headerlink" title="6.26  参考信息"></a>6.26  参考信息</h2><p>介绍OSPF的参考标准和协议。</p>
<p>本特性的参考资料清单如下：</p>
<table>
<thead>
<tr>
<th>文档</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>RFC1587</td>
<td>This document describes a new optional type of OSPF area, somewhat humorously referred to as a “not-so-stubby” area (or NSSA). NSSAs are similar to the existing OSPF stub area configuration option but have the additional capability of importing AS external routes in a limited fashion.</td>
<td>-</td>
</tr>
<tr>
<td>RFC1765</td>
<td>Proper operation of the OSPF protocol requires that all OSPF routers maintain an identical copy of the OSPF link-state database. However, when the size of the link-state database becomes very large, some routers may be unable to keep the entire database due to resource shortages; we term this “database overflow”.</td>
<td>该RFC为Experimental，非Standard。</td>
</tr>
<tr>
<td>RFC2328</td>
<td>This memo documents version 2 of the OSPF protocol. OSPF is a link-state routing protocol.</td>
<td>-</td>
</tr>
<tr>
<td>RFC2370</td>
<td>This memo defines enhancements to the OSPF protocol to support a new class of link-state advertisements (LSA) called Opaque LSAs. Opaque LSAs provide a generalized mechanism to allow for the future extensibility of OSPF.</td>
<td>-</td>
</tr>
<tr>
<td>RFC3137</td>
<td>This memo describes a backward-compatible technique that may be used by OSPF (Open Shortest Path First) implementations to advertise unavailability to forward transit traffic or to lower the preference level for the paths through such a router.</td>
<td>该RFC为Informational，非Standard。</td>
</tr>
<tr>
<td>RFC3623</td>
<td>This memo documents an enhancement to the OSPF routing protocol, whereby an OSPF router can stay on the forwarding path even as its OSPF software is restarted.</td>
<td>-</td>
</tr>
<tr>
<td>RFC3630</td>
<td>This document describes extensions to the OSPF protocol version 2 to support intra-area Traffic Engineering (TE), using Opaque Link State Advertisements.</td>
<td>-</td>
</tr>
<tr>
<td>RFC3682</td>
<td>The use of a packet’s Time to Live (TTL) (IPv4) or Hop Limit (IPv6) to protect a protocol stack from CPU-utilization based attacks has been proposed in many settings.</td>
<td>该RFC为Experimental，非Standard。</td>
</tr>
<tr>
<td>RFC3906</td>
<td>This document describes how conventional hop-by-hop link-state routing protocols interact with new Traffic Engineering capabilities to create Interior Gateway Protocol (IGP) shortcuts.</td>
<td>-</td>
</tr>
<tr>
<td>RFC4576</td>
<td>This document specifies the necessary procedure, using one of the options bits in the LSA (Link State Advertisements) to indicate that an LSA has already been forwarded by a PE and should be ignored by any other PEs that see it.</td>
<td>-</td>
</tr>
<tr>
<td>RFC4577</td>
<td>This document extends that specification by allowing the routing protocol on the PE/CE interface to be the Open Shortest Path First (OSPF) protocol.</td>
<td>-</td>
</tr>
<tr>
<td>RFC4750</td>
<td>This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in TCP/IP-based internets. In particular, it defines objects for managing version 2 of the Open Shortest Path First Routing Protocol. Version 2 of the OSPF protocol is specific to the IPv4 address family.</td>
<td>-</td>
</tr>
</tbody></table>
<p>原文链接：<a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&amp;partNo=10092#fig_dc_feature_ospf_111501">http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC1000162056&amp;partNo=10092#fig_dc_feature_ospf_111501</a> </p>
]]></content>
      <categories>
        <category>OSPF</category>
      </categories>
      <tags>
        <tag>OSPF</tag>
      </tags>
  </entry>
</search>
